var searchIndex = {};
searchIndex["tray_rust"] = {"doc":"# tray\\_rust - A Toy Ray Tracer in Rust","items":[[0,"linalg","tray_rust","The linalg module provides some basic linear algebra functionality for\ntransforming 3D geometry",null,null],[4,"Axis","tray_rust::linalg","Enum representing on of the 3 spatial axes",null,null],[13,"X","","",0,null],[13,"Y","","",0,null],[13,"Z","","",0,null],[5,"to_radians","","Convert value in degrees to radians\nTODO: See where `f32::to_radians` ends up, if it gets stabilized into Rust switch back to it",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"cross","","Compute the cross product of two vectors",null,{"inputs":[{"name":"a"},{"name":"b"}],"output":{"name":"vector"}}],[5,"dot","","Compute the dot product of two vectors",null,{"inputs":[{"name":"a"},{"name":"b"}],"output":{"name":"f32"}}],[5,"lerp","","Lerp between `a` and `b` at some distance `t` where t is in [0, 1]\nand t = 0 returns `a` and t = 1 returns `b`",null,{"inputs":[{"name":"f32"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"clamp","","Clamp `x` to be between `min` and `max`",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"spherical_dir","","Compute the direction specified by `theta` and `phi` in the spherical coordinate system",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"vector"}}],[5,"spherical_dir_coords","","Compute the direction specified by `theta` and `phi` in the coordinate system\nformed by `x`, `y` and `z`",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"vector"},{"name":"vector"},{"name":"vector"}],"output":{"name":"vector"}}],[5,"spherical_theta","","Compute the value of theta for the vector in the spherical coordinate system",null,{"inputs":[{"name":"vector"}],"output":{"name":"f32"}}],[5,"spherical_phi","","Compute the value of phi for the vector in the spherical coordinate system",null,{"inputs":[{"name":"vector"}],"output":{"name":"f32"}}],[5,"solve_quadratic","","Try to solve the quadratic equation `a*t^2 + b*t + c = 0` and return the two\nreal roots if a solution exists",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"option"}}],[5,"coordinate_system","","Compute a local ortho-normal coordinate system from a single vector.",null,null],[5,"reflect","","Compute the reflection of `w` about `v`, both vectors should be normalized",null,{"inputs":[{"name":"vector"},{"name":"vector"}],"output":{"name":"vector"}}],[5,"refract","","Compute the refraction of `w` entering surface with normal `n` where\nthe refractive index in the incident material is `eta_1` and the refractive\nindex of the entered material is `eta_2`. In the case of total internal\nrefraction this will return None.",null,{"inputs":[{"name":"vector"},{"name":"vector"},{"name":"f32"},{"name":"f32"}],"output":{"name":"option"}}],[0,"vector","","",null,null],[3,"Vector","tray_rust::linalg::vector","Vector is a standard 3 component vector",null,null],[12,"x","","",1,null],[12,"y","","",1,null],[12,"z","","",1,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"gt","","",1,null],[11,"ge","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"new","","Initialize the vector and set values for x, y, z",1,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"vector"}}],[11,"broadcast","","Initialize the vector with the same value of x, y, z",1,{"inputs":[{"name":"f32"}],"output":{"name":"vector"}}],[11,"length_sqr","","Compute the squared length of the vector",1,null],[11,"length","","Compute the length of the vector",1,null],[11,"normalized","","Get a normalized copy of this vector",1,null],[11,"add","","Add two vectors together",1,null],[11,"sub","","Subtract two vectors",1,null],[11,"mul","","Multiply two vectors",1,null],[11,"mul","","Scale the vector by some value",1,null],[11,"mul","","Scale the vector by some value",1,null],[11,"div","","Divide the vectors components by the right hand side&#39;s components",1,null],[11,"div","","Divide the vectors components by a scalar",1,null],[11,"neg","","Negate the vector",1,null],[11,"index","","Access the vector by index",1,null],[11,"index_mut","","Access the vector by index",1,null],[0,"normal","tray_rust::linalg","",null,null],[3,"Normal","tray_rust::linalg::normal","Normal is a standard 3 component normal but transforms as a normal\nnormal when transformations are applied",null,null],[12,"x","","",2,null],[12,"y","","",2,null],[12,"z","","",2,null],[11,"partial_cmp","","",2,null],[11,"lt","","",2,null],[11,"le","","",2,null],[11,"gt","","",2,null],[11,"ge","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"new","","Initialize the normal and set values for x, y, z",2,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"normal"}}],[11,"broadcast","","Initialize the normal with the same value of x, y, z",2,{"inputs":[{"name":"f32"}],"output":{"name":"normal"}}],[11,"length_sqr","","Compute the squared length of the normal",2,null],[11,"length","","Compute the length of the normal",2,null],[11,"normalized","","Get a normalized copy of this normal",2,null],[11,"face_forward","","Return a normal facing along the same direction as v",2,null],[11,"add","","Add two normals together",2,null],[11,"sub","","Subtract two normals",2,null],[11,"mul","","Multiply two normals",2,null],[11,"mul","","Scale the normal by some value",2,null],[11,"div","","Divide the normals components by the right hand side&#39;s components",2,null],[11,"div","","Divide the normals components by scalar",2,null],[11,"neg","","Negate the normal",2,null],[11,"index","","Access the normal by index",2,null],[11,"index_mut","","Access the normal by index",2,null],[0,"point","tray_rust::linalg","",null,null],[3,"Point","tray_rust::linalg::point","Point is a standard 3 component point but transforms as a point\npoint when transformations are applied",null,null],[12,"x","","",3,null],[12,"y","","",3,null],[12,"z","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"new","","Initialize the point and set values for x, y, z",3,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"point"}}],[11,"broadcast","","Initialize the point with the same value of x, y, z",3,{"inputs":[{"name":"f32"}],"output":{"name":"point"}}],[11,"origin","","Initialize a point to be all 0 values",3,{"inputs":[],"output":{"name":"point"}}],[11,"distance_sqr","","Compute the squared distance between this point and another",3,null],[11,"distance","","Compute the distance between this point and another",3,null],[11,"add","","Add two points together",3,null],[11,"add","","Add two points together",3,null],[11,"sub","","Subtract two points to get the vector between them",3,null],[11,"sub","","Subtract a vector from a point, translating the point by -vector",3,null],[11,"mul","","Scale the point by some value",3,null],[11,"mul","","Scale the vector by some value",3,null],[11,"div","","Divide the points components by the right hand side&#39;s components",3,null],[11,"div","","Divide the points components by scalar",3,null],[11,"neg","","Negate the point",3,null],[11,"index","","Access the point by index",3,null],[11,"index","","Access the point by index",3,null],[11,"index_mut","","Access the point by index",3,null],[0,"ray","tray_rust::linalg","",null,null],[3,"Ray","tray_rust::linalg::ray","Ray is a standard 3D ray, starting at origin `o` and heading in direction `d`\nThe min and max points along the ray can be specified with `min_t` and `max_t`\n`depth` is the recursion depth of the ray",null,null],[12,"o","","Origin of the ray",4,null],[12,"d","","Direction the ray is heading",4,null],[12,"min_t","","Point along the ray that the actual ray starts at, `p = o + min_t * d`",4,null],[12,"max_t","","Point along the ray at which it stops, will be inf if the ray is infinite",4,null],[12,"depth","","Recursion depth of the ray",4,null],[12,"time","","Time point sampled by this ray",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"new","","Create a new ray from `o` heading in `d` with infinite length",4,{"inputs":[{"name":"point"},{"name":"vector"},{"name":"f32"}],"output":{"name":"ray"}}],[11,"segment","","Create a new segment ray from `o + min_t * d` to `o + max_t * d`",4,{"inputs":[{"name":"point"},{"name":"vector"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"ray"}}],[11,"child","","Create a child ray from the parent starting at `o` and heading in `d`",4,null],[11,"child_segment","","Create a child ray segment from `o + min_t * d` to `o + max_t * d`",4,null],[11,"at","","Evaulate the ray equation at some t value and return the point\nreturns result of `self.o + t * self.d`",4,null],[0,"matrix4","tray_rust::linalg","",null,null],[3,"Matrix4","tray_rust::linalg::matrix4","Matrix4 is a 4x4 matrix stored in row-major format",null,null],[11,"clone","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"fmt","","",5,null],[11,"zero","","Return the zero matrix",5,{"inputs":[],"output":{"name":"matrix4"}}],[11,"identity","","Return the identity matrix",5,{"inputs":[],"output":{"name":"matrix4"}}],[11,"new","","Create the matrix using the values passed",5,null],[11,"at","","Access the element at row `i` column `j`",5,null],[11,"at_mut","","Mutably access the element at row `i` column `j`",5,null],[11,"transpose","","Compute and return the transpose of this matrix",5,null],[11,"inverse","","Compute and return the inverse of this matrix",5,null],[11,"iter","","Return an iterator over the matrix&#39;s elements. The iterator goes\nrow by row through the matrix.",5,null],[11,"has_nans","","",5,null],[11,"from_iter","","Create the matrix using the values from the iterator. The iterator should return\nthe rows of the matrix one after another. The first 16 values returned will\nbe used to set the matrix elements. If fewer than 16 values are returned the\nremaining entries will be 0",5,{"inputs":[{"name":"t"}],"output":{"name":"matrix4"}}],[11,"from_iter","","Create the matrix using the values from the iterator. The iterator should return\nthe rows of the matrix one after another. The first 16 values returned will\nbe used to set the matrix elements. If fewer than 16 values are returned the\nremaining entries will be 0",5,{"inputs":[{"name":"t"}],"output":{"name":"matrix4"}}],[11,"add","","Add two matrices together",5,null],[11,"sub","","Subtract two matrices",5,null],[11,"mul","","Multiply two matrices",5,null],[11,"mul","","Multiply the matrix by a scalar",5,null],[0,"transform","tray_rust::linalg","",null,null],[3,"Transform","tray_rust::linalg::transform","Transform describes an affine transformation in 3D space\nand stores both the transformation and its inverse",null,null],[12,"mat","","",6,null],[12,"inv","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"clone","","",6,null],[11,"fmt","","",6,null],[11,"identity","","Construct the identity transformation",6,{"inputs":[],"output":{"name":"transform"}}],[11,"from_mat","","Construct a transform from an existing matrix",6,{"inputs":[{"name":"matrix4"}],"output":{"name":"transform"}}],[11,"from_pair","","Construct a transform from an existing matrix/inverse pair",6,{"inputs":[{"name":"matrix4"},{"name":"matrix4"}],"output":{"name":"transform"}}],[11,"translate","","Construct a transformation matrix to translate by the vector",6,{"inputs":[{"name":"vector"}],"output":{"name":"transform"}}],[11,"scale","","Construct a transform to scale x, y and z by the values in the vector",6,{"inputs":[{"name":"vector"}],"output":{"name":"transform"}}],[11,"rotate_x","","Construct a transform to rotate `deg` degrees about the x axis",6,{"inputs":[{"name":"f32"}],"output":{"name":"transform"}}],[11,"rotate_y","","Construct a transform to rotate `deg` degrees about the y axis",6,{"inputs":[{"name":"f32"}],"output":{"name":"transform"}}],[11,"rotate_z","","Construct a transform to rotate `deg` degrees about the z axis",6,{"inputs":[{"name":"f32"}],"output":{"name":"transform"}}],[11,"rotate","","Construct a transform to rotate about `axis` by `deg` degrees",6,{"inputs":[{"name":"vector"},{"name":"f32"}],"output":{"name":"transform"}}],[11,"look_at","","Construct the look at transform for a camera at `pos` looking at\nthe point `center` oriented with up vector `up`",6,{"inputs":[{"name":"point"},{"name":"point"},{"name":"vector"}],"output":{"name":"transform"}}],[11,"perspective","","Construct a perspective transformation",6,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"transform"}}],[11,"inverse","","Return the inverse of the transformation",6,null],[11,"has_scale","","Returns true if the transform has applies a scaling",6,null],[11,"inv_mul_point","","Multiply the point by the inverse transformation\nTODO: These inverse mults are a bit hacky since Rust doesn&#39;t currently\nhave function overloading, clean up when it&#39;s added",6,null],[11,"inv_mul_vector","","Multiply the vector with the inverse transformation",6,null],[11,"inv_mul_normal","","Multiply the normal with the inverse transformation",6,null],[11,"inv_mul_ray","","Multiply the ray with the inverse transformation",6,null],[11,"mul","","Compose two transformations",6,null],[11,"mul","","Multiply the point by the transform to apply the transformation",6,null],[11,"mul","","Multiply the vector by the transform to apply the transformation",6,null],[11,"mul","","Multiply the normal by the transform to apply the transformation",6,null],[11,"mul","","Multiply the ray by the transform to apply the transformation",6,null],[11,"mul","","Apply the transformation to the AABB. This is an implementation of\nArvo (1990) AABB transformation",6,null],[0,"quaternion","tray_rust::linalg","Provides a Quaternion type for properly interpolating rotations",null,null],[3,"Quaternion","tray_rust::linalg::quaternion","Quaternions describe a rotation in 3d space but can be\nproperly interpolated unlike rotation matrices. The quaternion\nalso provides methods to compute the corresponding rotation\ntransform so that it can be composed with scaling and translation",null,null],[12,"v","","",7,null],[12,"w","","",7,null],[5,"dot","","Compute the dot product of the two quaternions",null,{"inputs":[{"name":"quaternion"},{"name":"quaternion"}],"output":{"name":"f32"}}],[5,"slerp","","Use spherical linear interpolation to interpolate between the two quaternions",null,{"inputs":[{"name":"f32"},{"name":"quaternion"},{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"clone","","",7,null],[11,"fmt","","",7,null],[11,"identity","","Construct an identity quaternion",7,{"inputs":[],"output":{"name":"quaternion"}}],[11,"from_matrix","","Construct a quaternion from the rotation matrix\nBased on Shoemake 1991",7,{"inputs":[{"name":"matrix4"}],"output":{"name":"quaternion"}}],[11,"from_transform","","Construct the quaternion from the transform",7,{"inputs":[{"name":"transform"}],"output":{"name":"quaternion"}}],[11,"to_matrix","","Get the rotation transform described by this quaternion",7,null],[11,"to_transform","","Get the rotation transform described by this quaternion",7,null],[11,"normalized","","Get the normalized quaternion for this rotation",7,null],[11,"add","","Add two quaternions",7,null],[11,"sub","","Subtract two quaternions",7,null],[11,"mul","","Multiply the quaternion by a scalar",7,null],[11,"div","","Divide the quaternion by a scalar",7,null],[11,"neg","","Negate the quaternion",7,null],[0,"keyframe","tray_rust::linalg","Provides a keyframe transformation which is a transform associated\nwith a specific point in time",null,null],[3,"Keyframe","tray_rust::linalg::keyframe","A transformation associated with a specific point in time. Note\nthat this transform is now more implicit since they keyframe&#39;s times\nare stored as knots in the b-spline animation path",null,null],[12,"translation","","",8,null],[12,"rotation","","",8,null],[12,"scaling","","",8,null],[11,"clone","","",8,null],[11,"fmt","","",8,null],[11,"new","","Construct a new keyframe transformation, The transform will\nbe stored in a decomposed form, M = TRS.",8,{"inputs":[{"name":"transform"}],"output":{"name":"keyframe"}}],[11,"from_parts","","Construct the keyframe from the decomposed transformation",8,{"inputs":[{"name":"vector"},{"name":"quaternion"},{"name":"vector"}],"output":{"name":"keyframe"}}],[11,"transform","","Return the transformation stored for this keyframe",8,null],[11,"interpolate","","",8,null],[0,"animated_transform","tray_rust::linalg","Provides an animated transformation that moves an object between a\nset of specified keyframes.",null,null],[3,"AnimatedTransform","tray_rust::linalg::animated_transform","An animated transform that blends between the keyframes in its transformation\nlist over time.",null,null],[11,"fmt","","",9,null],[11,"clone","","",9,null],[11,"with_keyframes","","Create an animated transformation blending between the passed keyframes",9,{"inputs":[{"name":"vec"},{"name":"vec"},{"name":"usize"}],"output":{"name":"animatedtransform"}}],[11,"unanimated","","",9,{"inputs":[{"name":"transform"}],"output":{"name":"animatedtransform"}}],[11,"transform","","Compute the transformation matrix for the animation at some time point using B-Spline\ninterpolation.",9,null],[11,"animation_bounds","","Compute the bounds of the box moving through the animation sequence by sampling time",9,null],[11,"is_animated","","Check if the transform is actually animated",9,null],[11,"mul","","Compose the animated transformations",9,null],[11,"fmt","tray_rust::linalg","",0,null],[11,"clone","","",0,null],[0,"film","tray_rust","The film module provides color types and a render target that the image\nis written too.",null,null],[3,"FrameInfo","tray_rust::film","Struct to store various parameters for the frame timing",null,null],[12,"frames","","Total number of frames for the scene",10,null],[12,"time","","Total time for all the entire scene (ie. for all frames)",10,null],[12,"start","","Frame number to start rendering at",10,null],[12,"end","","Frame number to stop rendering at",10,null],[0,"color","","Defines types for operating with floating point and 8 bit RGB colors",null,null],[3,"Colorf","tray_rust::film::color","Colorf is a floating point RGBA color type\n`a` is typically used to store the weight of a color eg. in the\nrender target for multisampling we need to track the weight to\nnormalize in the end and is always initialized to 0",null,null],[12,"r","","",11,null],[12,"g","","",11,null],[12,"b","","",11,null],[12,"a","","",11,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"clone","","",11,null],[11,"fmt","","",11,null],[11,"new","","Create an RGB color",11,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"colorf"}}],[11,"broadcast","","Create an RGB color using the same value for all channels",11,{"inputs":[{"name":"f32"}],"output":{"name":"colorf"}}],[11,"black","","Create a black color",11,{"inputs":[],"output":{"name":"colorf"}}],[11,"clamp","","Clamp the color values between [0, 1]",11,null],[11,"luminance","","Compute the luminance of the color",11,null],[11,"is_black","","Check if the color is black",11,null],[11,"has_nans","","Check if any of the color channels are NaN",11,null],[11,"has_infs","","Check if any of the color channels are infinite",11,null],[11,"to_srgb","","Convert the linear RGB color to sRGB",11,null],[11,"exp","","Return the color with values { e^r, e^g, e^b }",11,null],[11,"add","","Add two colors together",11,null],[11,"sub","","Subtract the two colors",11,null],[11,"mul","","Multiply the two colors",11,null],[11,"mul","","Scale the color by the float",11,null],[11,"div","","Divide the channels of one color by another",11,null],[11,"div","","Divide the channels of the color by the float",11,null],[11,"neg","","Negate the color channels",11,null],[11,"index","","Access the channels by index",11,null],[11,"index_mut","","Access the channels by index",11,null],[0,"render_target","tray_rust::film","Defines the render target for tray, where our image will be written too\nduring rendering",null,null],[3,"ImageSample","tray_rust::film::render_target","A struct containing results of an image sample where a ray was fired through\ncontinuous pixel coordinates [x, y] and color `color` was computed",null,null],[12,"x","","",12,null],[12,"y","","",12,null],[12,"color","","",12,null],[3,"RenderTarget","","RenderTarget is a RGBF render target to write our image too while rendering",null,null],[11,"new","","",12,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"colorf"}],"output":{"name":"imagesample"}}],[11,"new","","Create a render target with `width * height` pixels",13,null],[11,"write","","Write all the image samples to the render target",13,null],[11,"clear","","Clear the render target to black",13,null],[11,"dimensions","","Get the dimensions of the render target",13,null],[11,"get_render","","Convert the floating point color buffer to 24bpp sRGB for output to an image",13,null],[11,"get_rendered_blocks","","Get the blocks that have had pixels written too them. Returns the size of each block,\na list of block positions in pixels and then pixels for the blocks (in a single f32 vec).\nThe block&#39;s pixels are stored in the same order their position appears in the block\npositions vec and contain `dim.0 * dim.1 * 4` f32&#39;s per block.",13,null],[11,"get_renderf32","","Get the raw floating point framebuffer",13,null],[0,"camera","tray_rust::film","Provides a camera based on a single transformation that positions\nit in the scene",null,null],[3,"Camera","tray_rust::film::camera","Our camera for the ray tracer, has a transformation to position it in world space",null,null],[12,"active_at","","The frame this camera becomes active on",14,null],[11,"fmt","","",14,null],[11,"clone","","",14,null],[11,"new","","Create the camera with some orientation in the world specified by `cam_world`\nand a perspective projection with `fov`. The render target dimensions `dims`\nare needed to construct the raster -&gt; camera transform\n`animation` is used to move the camera ote that this is specified in camera space\nwhere the camera is at the origin looking down the -z axis",14,null],[11,"animated_fov","","Create a camera with some orientation in the world specified by `cam_world`\nand an animated perspective projection with `fov`. The render target dimensions `dims`\nare needed to construct the raster -&gt; camera transform\n`animation` is used to move the camera ote that this is specified in camera space\nwhere the camera is at the origin looking down the -z axis",14,null],[11,"update_frame","","Update the camera&#39;s shutter open/close time for this new frame",14,null],[11,"shutter_time","","Get the time that the shutter opens and closes at",14,null],[11,"generate_ray","","Generate a ray from the camera through the pixel `px`",14,null],[0,"filter","tray_rust::film","The filter module provides reconstruction filters to be used\nwhen writing samples to the render target. The filter width and\nheight refer to how many pixels the filter covers, where a single\npixel is 0.5x0.5",null,null],[0,"gaussian","tray_rust::film::filter","Provides a Gaussian reconstruction filter.",null,null],[3,"Gaussian","tray_rust::film::filter::gaussian","A Gaussian reconstruction filter.\nRecommended parameters to try: w = 2.0, h = 2.0, alpha = 2.0",null,null],[11,"fmt","","",15,null],[11,"clone","","",15,null],[11,"new","","",15,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"gaussian"}}],[11,"weight","","",15,null],[11,"width","","",15,null],[11,"inv_width","","",15,null],[11,"height","","",15,null],[11,"inv_height","","",15,null],[0,"mitchell_netravali","tray_rust::film::filter","Provides an implementation of the Mitchell-Netravali reconstruction filter.\nSee [Reconstruction Filters in Computer Graphics](http://www.cs.utexas.edu/~fussell/courses/cs384g-fall2013/lectures/mitchell/Mitchell.pdf).",null,null],[3,"MitchellNetravali","tray_rust::film::filter::mitchell_netravali","A Mitchell-Netravali reconstruction filter.\nRecommended parameters to try: w = 2.0, h = 2.0, b = 1.0 / 3.0, c = 1.0 / 3.0",null,null],[11,"fmt","","",16,null],[11,"clone","","",16,null],[11,"new","","",16,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"mitchellnetravali"}}],[11,"weight","","",16,null],[11,"width","","",16,null],[11,"inv_width","","",16,null],[11,"height","","",16,null],[11,"inv_height","","",16,null],[8,"Filter","tray_rust::film::filter","Trait implemented by all reconstructon filters. Provides methods for getting\nthe width/height and computing the weight at some point relative to the filter\ncenter.",null,null],[10,"weight","","Compute the weight of this filter at some point (x, y) relative\nto the center of the filter",17,null],[10,"width","","Return the width of the filter",17,null],[10,"inv_width","","Return the inverse width of the filter",17,null],[10,"height","","Return the height of the filter",17,null],[10,"inv_height","","Return the inverse height of the filter",17,null],[0,"animated_color","tray_rust::film","Provides an animated color value, so you can have colors change over time",null,null],[3,"ColorKeyframe","tray_rust::film::animated_color","ColorKeyframe is a color associated with a specific time",null,null],[12,"color","","",18,null],[12,"time","","",18,null],[3,"AnimatedColor","","AnimatedColor is a list of colors associated with time points in the scene\nthat will compute the color at the desired time by blending the two nearest ones",null,null],[11,"clone","","",18,null],[11,"fmt","","",18,null],[11,"new","","",18,{"inputs":[{"name":"colorf"},{"name":"f32"}],"output":{"name":"colorkeyframe"}}],[11,"cmp","","",18,null],[11,"partial_cmp","","",18,null],[11,"eq","","",18,null],[11,"clone","","",19,null],[11,"fmt","","",19,null],[11,"with_keyframes","","Create an animated transform that will blend between the passed keyframes",19,{"inputs":[{"name":"vec"}],"output":{"name":"animatedcolor"}}],[11,"color","","Compute the color at the desired time",19,null],[0,"image","tray_rust::film","Provides a simple RGBA_F32 image, used by the distributed master to store results\nfrom the worker processes",null,null],[3,"Image","tray_rust::film::image","",null,null],[11,"fmt","","",20,null],[11,"new","","",20,null],[11,"add_pixels","","Add the floating point RGBAf32 pixels to the image. It is assumed that `pixels` contains\na `dim.0` by `dim.1` pixel image.",20,null],[11,"add_blocks","","Add the blocks of RGBAf32 pixels to the image. It&#39;s assumed that the block information\npassed is equivalent to that returned by RenderTarget::get_blocks. `block_size` specifies\nthe size of the blocks being passed, `blocks` contains the start points of each block and\n`pixels` contains `block_size.0 * block_size.1 * 4` floats for each block.",20,null],[11,"get_srgb8","","Convert the Image to sRGB8 format and return it",20,null],[11,"dimensions","","",20,null],[11,"clone","tray_rust::film","",10,null],[11,"fmt","","",10,null],[11,"new","","",10,{"inputs":[{"name":"usize"},{"name":"f32"},{"name":"usize"},{"name":"usize"}],"output":{"name":"frameinfo"}}],[0,"geometry","tray_rust","The geometry module defines the Geometry trait implemented by\nthe various geometry in the ray tracer and provides some standard\ngeometry for rendering",null,null],[0,"differential_geometry","tray_rust::geometry","Defines the DifferentialGeometry type which is used to pass information\nabout the hit piece of geometry back from the intersection to the shading",null,null],[3,"DifferentialGeometry","tray_rust::geometry::differential_geometry","Stores information about a hit piece of geometry of some object in the scene",null,null],[12,"p","","The hit point",21,null],[12,"n","","The shading normal",21,null],[12,"ng","","The geometry normal",21,null],[12,"dp_du","","Derivative of the point with respect to the u parameterization coord of the surface",21,null],[12,"dp_dv","","Derivative of the point with respect to the v parameterization coord of the surface",21,null],[12,"geom","","The geometry that was hit",21,null],[11,"clone","","",21,null],[11,"new","","Setup the differential geometry. Note that the normal will be computed\nusing cross(dp_du, dp_dv)",21,{"inputs":[{"name":"point"},{"name":"normal"},{"name":"vector"},{"name":"vector"},{"name":"geometry"}],"output":{"name":"differentialgeometry"}}],[11,"with_normal","","Setup the differential geometry using the normal passed for the surface normal",21,{"inputs":[{"name":"point"},{"name":"normal"},{"name":"vector"},{"name":"vector"},{"name":"geometry"}],"output":{"name":"differentialgeometry"}}],[0,"intersection","tray_rust::geometry","Defines the Intersection type which stores information about\na full intersection, eg. hit info about the geometry and instance\nthat was intersected",null,null],[3,"Intersection","tray_rust::geometry::intersection","Stores information about an intersection that occured with some instance\nof geometry in the scene",null,null],[12,"dg","","The differential geometry holding information about the piece of geometry\nthat was hit",22,null],[12,"instance","","The instance of geometry that was hit",22,null],[12,"material","","The material of the instance that was hit",22,null],[11,"clone","","",22,null],[11,"new","","Construct the Intersection from a potential hit stored in a\nOption&lt;DifferentialGeometry&gt;. Returns None if `dg` is None\nor if the instance member of `dg` is None",22,{"inputs":[{"name":"differentialgeometry"},{"name":"instance"},{"name":"material"}],"output":{"name":"intersection"}}],[0,"instance","tray_rust::geometry","Defines an instance of some piece of geometry in the scene, instances\ncan re-use loaded geometry but apply different transformations and materials\nto them",null,null],[4,"Instance","tray_rust::geometry::instance","Defines an instance of some geometry with its own transform and material",null,null],[13,"Emitter","","",23,null],[13,"Receiver","","",23,null],[11,"receiver","","Create an instance of the geometry in the scene that will only receive light.",23,{"inputs":[{"name":"arc"},{"name":"arc"},{"name":"animatedtransform"},{"name":"string"}],"output":{"name":"instance"}}],[11,"area_light","","Create an instance of the geometry in the scene that will emit and receive light",23,{"inputs":[{"name":"arc"},{"name":"arc"},{"name":"animatedcolor"},{"name":"animatedtransform"},{"name":"string"}],"output":{"name":"instance"}}],[11,"point_light","","Create a point light at the origin that is transformed by `transform` to its location\nin the world",23,{"inputs":[{"name":"animatedtransform"},{"name":"animatedcolor"},{"name":"string"}],"output":{"name":"instance"}}],[11,"intersect","","Test the ray for intersection against this insance of geometry.\nreturns Some(Intersection) if an intersection was found and None if not.\nIf an intersection is found `ray.max_t` will be set accordingly",23,null],[11,"tag","","Get the tag for this instance",23,null],[11,"get_transform","","Get the transform for this instance",23,null],[11,"set_transform","","Set the transform for this instance",23,null],[11,"bounds","","",23,null],[0,"sphere","tray_rust::geometry","Defines a Sphere at the origin which implements the Geometry, Boundable and Sampleable traits",null,null],[3,"Sphere","tray_rust::geometry::sphere","A sphere with user-specified radius located at the origin.",null,null],[11,"clone","","",24,null],[11,"new","","Create a sphere with the desired radius",24,{"inputs":[{"name":"f32"}],"output":{"name":"sphere"}}],[11,"intersect","","",24,null],[11,"bounds","","",24,null],[11,"sample_uniform","","",24,null],[11,"sample","","Sample the object using the probability density of the solid angle\nfrom `p` to the sampled point on the surface.\nReturns the sampled point and the surface normal at that point",24,null],[11,"surface_area","","Compute the sphere&#39;s surface area",24,null],[11,"pdf","","Compute the PDF that the ray from `p` with direction `w_i` intersects\nthe shape",24,null],[0,"disk","tray_rust::geometry","Defines a Disk type which implements the Geometry, Boundable and Sampleable traits\nA disk with some inner and outer radius allowing it to\nhave a hole in the middle. The disk is oriented with the center\nat the origin and the normal pointing along +Z.",null,null],[3,"Disk","tray_rust::geometry::disk","A disk with some inner and outer radius allowing it to\nhave a hole in the middle. The disk is oriented with the center\nat the origin and the normal pointing along +Z.",null,null],[11,"clone","","",25,null],[11,"new","","Create a new disk with some inner and outer radius",25,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"disk"}}],[11,"intersect","","",25,null],[11,"bounds","","",25,null],[11,"sample_uniform","","",25,null],[11,"sample","","",25,null],[11,"surface_area","","",25,null],[11,"pdf","","",25,null],[0,"rectangle","tray_rust::geometry","Defines a rectangle centered at the origin, specified by its horizontal\nand vertical lengths",null,null],[3,"Rectangle","tray_rust::geometry::rectangle","A rectangle centered at the origin spanning [-width / 2, -height / 2]\nto [width / 2, height / 2] with a normal along [0, 0, 1]",null,null],[11,"clone","","",26,null],[11,"new","","Create a new rectangle with the desired width and height",26,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"rectangle"}}],[11,"intersect","","",26,null],[11,"bounds","","",26,null],[11,"sample_uniform","","Uniform sampling for a rect is simple: just scale the two samples into the\nrectangle&#39;s space and return them as the x,y coordinates of the point chosen",26,null],[11,"sample","","",26,null],[11,"surface_area","","Compute the sphere&#39;s surface area",26,null],[11,"pdf","","Compute the PDF that the ray from `p` with direction `w_i` intersects\nthe shape. This is the same as disk for computing PDF, we just use the\nrectangle&#39;s surface area instead",26,null],[0,"bbox","tray_rust::geometry","Provide an Axis-Aligned Bounding Box type, BBox, with an optimized intersection test\ntargeted for usage in a BVH\nTODO: Should I also implement the Geometry trait?",null,null],[3,"BBox","tray_rust::geometry::bbox","A box between the min and max points",null,null],[12,"min","","",27,null],[12,"max","","",27,null],[11,"fmt","","",27,null],[11,"clone","","",27,null],[11,"new","","Create a new degenerate box",27,{"inputs":[],"output":{"name":"bbox"}}],[11,"singular","","Create a new box containing only the point passed",27,{"inputs":[{"name":"point"}],"output":{"name":"bbox"}}],[11,"span","","Create a new box spanning [min, max]",27,{"inputs":[{"name":"point"},{"name":"point"}],"output":{"name":"bbox"}}],[11,"box_union","","Get a box representing the union of this box with the one passed",27,null],[11,"point_union","","Get a box that contains the passed point, by expanding this box to reach the point",27,null],[11,"max_extent","","Compute the axis along which the box is longest",27,null],[11,"lerp","","Compute the point in the box at some t value along each axis",27,null],[11,"offset","","Find the position of the point relative to the box, with `min` being the origin",27,null],[11,"surface_area","","Compute the surface area of the box",27,null],[11,"fast_intersect","","Optimized ray-box intersection test, for use in the BVH traversal where we have\npre-computed the ray&#39;s inverse direction and which directions are negative, indicated\nby a 1 for negative and 0 for non-negative\nReturns true if the box was hit",27,null],[11,"index","","Access the BBox&#39;s min/max points by index",27,null],[11,"index_mut","","Access the BBox&#39;s min/max points by index",27,null],[0,"bvh","tray_rust::geometry","Provides a simple SAH split based BVH2 that stores types implementing the Boundable trait",null,null],[3,"BVH","tray_rust::geometry::bvh","A standard BVH2 that stores objects that can report their bounds in some space\nvia the `Boundable` trait. The BVH is constructed using a SAH partitioning scheme",null,null],[11,"unanimated","","Create a new non-animated BVH holding the geometry",28,{"inputs":[{"name":"usize"},{"name":"vec"}],"output":{"name":"bvh"}}],[11,"new","","Create a new BVH using a SAH construction algorithm which holds the scene\ngeometry for some time period.",28,{"inputs":[{"name":"usize"},{"name":"vec"},{"name":"f32"},{"name":"f32"}],"output":{"name":"bvh"}}],[11,"rebuild","","Re-build the BVH for the time range passed",28,null],[11,"intersect","","Traverse the BVH and call the function passed on the objects in the leaf nodes\nof the BVH, returning the value returned by the function after traversal completes",28,null],[11,"iter","","",28,null],[11,"bounds","","",28,null],[0,"mesh","tray_rust::geometry","Defines a triangle mesh geometry. Intersection tests are accelerated internally\nby storing the triangles of the mesh in a BVH",null,null],[3,"Mesh","tray_rust::geometry::mesh","A mesh composed of triangles, specified by directly passing the position,\nnormal and index buffers for the triangles making up the mesh",null,null],[3,"Triangle","","A triangle in some mesh. Just stores a reference to the mesh\nand the indices of each vertex",null,null],[11,"new","","Create a new Mesh from the triangles described in the buffers passed\nThis data could come from an OBJ file via [tobj](https://github.com/Twinklebear/tobj)\nfor example.",29,{"inputs":[{"name":"arc"},{"name":"arc"},{"name":"arc"},{"name":"vec"}],"output":{"name":"mesh"}}],[11,"load_obj","","Load all the meshes defined in an OBJ file and return them in a hashmap that maps the\nmodel&#39;s name in the file to its loaded mesh\nTODO: Currently materials are ignored",29,{"inputs":[{"name":"path"}],"output":{"name":"hashmap"}}],[11,"intersect","","",29,null],[11,"bounds","","",29,null],[11,"new","","Create a new triangle representing a triangle within the mesh passed",30,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"arc"},{"name":"arc"},{"name":"arc"}],"output":{"name":"triangle"}}],[11,"intersect","","",30,null],[11,"bounds","","",30,null],[0,"receiver","tray_rust::geometry","A receiver is an instance of geometry that does not emit any light",null,null],[3,"Receiver","tray_rust::geometry::receiver","An instance of geometry in the scene that only receives light",null,null],[12,"material","","The material being used by this instance.",31,null],[12,"tag","","Tag to identify the instance",31,null],[11,"new","","Create a new instance of some geometry in the scene",31,{"inputs":[{"name":"arc"},{"name":"arc"},{"name":"animatedtransform"},{"name":"string"}],"output":{"name":"receiver"}}],[11,"intersect","","Test the ray for intersection against this insance of geometry.\nreturns Some(Intersection) if an intersection was found and None if not.\nIf an intersection is found `ray.max_t` will be set accordingly",31,null],[11,"get_transform","","Get the transform to place the receiver into world space",31,null],[11,"set_transform","","Set the transform to place the receiver into world space",31,null],[11,"bounds","","",31,null],[0,"emitter","tray_rust::geometry","An emitter is an instance of geometry that both receives and emits light",null,null],[3,"Emitter","tray_rust::geometry::emitter","An instance of geometry in the scene that receives and emits light.",null,null],[12,"emission","","The light intensity emitted",32,null],[12,"tag","","Tag to identify the instance",32,null],[11,"area","","Create a new area light using the geometry passed to emit light\nTODO: We need sample methods for geometry to do this\nWe also need MIS in the path tracer&#39;s direct light sampling so we get\ngood quality",32,{"inputs":[{"name":"arc"},{"name":"arc"},{"name":"animatedcolor"},{"name":"animatedtransform"},{"name":"string"}],"output":{"name":"emitter"}}],[11,"point","","Create a point light at the origin that is transformed by `transform` to its location\nin the world",32,{"inputs":[{"name":"animatedtransform"},{"name":"animatedcolor"},{"name":"string"}],"output":{"name":"emitter"}}],[11,"intersect","","Test the ray for intersection against this insance of geometry.\nreturns Some(Intersection) if an intersection was found and None if not.\nIf an intersection is found `ray.max_t` will be set accordingly",32,null],[11,"radiance","","Return the radiance emitted by the light in the direction `w`\nfrom point `p` on the light&#39;s surface with normal `n`",32,null],[11,"get_transform","","Get the transform to place the emitter into world space",32,null],[11,"set_transform","","Set the transform to place the emitter into world space",32,null],[11,"bounds","","",32,null],[11,"sample_incident","","",32,null],[11,"delta_light","","",32,null],[11,"pdf","","",32,null],[8,"Geometry","tray_rust::geometry","Trait implemented by geometric primitives",null,null],[10,"intersect","","Test a ray for intersection with the geometry.\nThe ray should have been previously transformed into the geometry&#39;s\nobject space otherwise the test will be incorrect.\nReturns the differential geometry containing the hit information if the\nray hit the object and set&#39;s the ray&#39;s `max_t` member accordingly",33,null],[8,"Boundable","","Trait implemented by scene objects that can report an AABB describing their bounds",null,null],[10,"bounds","","Get an AABB reporting the object&#39;s bounds over the time period\nThe default implementation assumes the object isn&#39;t animated and\nsimply returns its bounds. This is kind of a hack to use\nthe BVH for animated geomtry (instances) and non-animated geometry (triangles).",34,null],[8,"Sampleable","","Trait implemented by geometry that can sample a point on its surface",null,null],[10,"sample_uniform","","Uniformly sample a position and normal on the surface using the samples passed",35,null],[10,"sample","","Sample the object using the probability density of the solid angle\nfrom `p` to the sampled point on the surface.\nReturns the sampled point and the surface normal at that point",35,null],[10,"surface_area","","Return the surface area of the shape",35,null],[10,"pdf","","Compute the PDF that the ray from `p` with direction `w_i` intersects\nthe shape",35,null],[8,"BoundableGeom","","",null,null],[8,"SampleableGeom","","",null,null],[0,"sampler","tray_rust","Provides the Sampler trait which is implemented by the various samplers\nto provide stratified, low-discrepancy, adaptive sampling methods and so\non through a simple trait interface",null,null],[3,"Sample","tray_rust::sampler","Provides a simple way to pass around a 3 component sample consisting of one 2D and\none 1D sample",null,null],[12,"two_d","","The 2D sample",36,null],[12,"one_d","","The 1D sample",36,null],[3,"Region","","Defines a region of the image being sampled in pixel coordinates",null,null],[12,"current","","Current coordinates of the pixel to sample (x, y)",37,null],[12,"start","","Coordinates of the start of region being sampled (x, y)",37,null],[12,"end","","Coordinates of the end of the region being sampled (x, y)",37,null],[12,"dim","","Dimensions of the region being sampled",37,null],[0,"morton","","",null,null],[5,"part1_by1","tray_rust::sampler::morton","Provides utilities for 2D Morton code generation using Fabian Giesen&#39;s Morton\ncode decoding functions, see [his post on Morton codes](https://fgiesen.wordpress.com/2009/12/13/decoding-morton-codes/)\nInsert a 0 bit between each of the low 16 bits of x",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"morton2","","Compute the Morton code for the `(x, y)` position",null,null],[0,"uniform","tray_rust::sampler","Provides the simplest and worst sampling method, the Uniform sampler takes\na single sample at the center of each pixel in its region",null,null],[3,"Uniform","tray_rust::sampler::uniform","Uniform sampler that takes one sample per pixel at the center of each pixel",null,null],[11,"new","","Create a uniform sampler to sample the image in `dim.0 * dim.1` sized blocks",38,null],[11,"get_samples","","",38,null],[11,"get_samples_2d","","",38,null],[11,"get_samples_1d","","",38,null],[11,"max_spp","","",38,null],[11,"has_samples","","",38,null],[11,"dimensions","","",38,null],[11,"select_block","","",38,null],[11,"get_region","","",38,null],[0,"ld","tray_rust::sampler","Provides a high quality sampling scheme based on (0, 2)-sequences\nSee sec. 7.4.3 of Physically Based Rendering",null,null],[3,"LowDiscrepancy","tray_rust::sampler::ld","Low discrepancy sampler that makes use of the (0, 2) sequence to generate\nwell distributed samples",null,null],[5,"sample_2d","","Generate a 2D pattern of low discrepancy samples to fill the slice\nsample values will be normalized between [0, 1]",null,null],[5,"sample_1d","","Generate a 1D pattern of low discrepancy samples to fill the slice\nsample values will be normalized between [0, 1]",null,null],[5,"sample_02","","Generate a sample from a scrambled (0, 2) sequence",null,null],[5,"van_der_corput","","Generate a scrambled Van der Corput sequence value\nas described by Kollig &amp; Keller (2002) and in PBR\nmethod is specialized for base 2",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"f32"}}],[5,"sobol","","Generate a scrambled Sobol&#39; sequence value\nas described by Kollig &amp; Keller (2002) and in PBR\nmethod is specialized for base 2",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"f32"}}],[11,"new","","Create a low discrepancy sampler to sample the image in `dim.0 * dim.1` sized blocks",39,null],[11,"get_samples","","",39,null],[11,"get_samples_2d","","",39,null],[11,"get_samples_1d","","",39,null],[11,"max_spp","","",39,null],[11,"has_samples","","",39,null],[11,"dimensions","","",39,null],[11,"select_block","","",39,null],[11,"get_region","","",39,null],[0,"adaptive","tray_rust::sampler","Provides an adaptive sampler which will start sampling at\none rate and then take more samples if it determines more\nare necessary for the pixel. The samples generated are the\nsame as those from the Low Discrepancy sampler but the\nnumber of samples taken per pixel will vary.",null,null],[3,"Adaptive","tray_rust::sampler::adaptive","Adaptive sampler that makes use of the (0, 2) sequence to generate\nwell distributed samples and takes `min_spp` to `max_spp` samples per pixel",null,null],[11,"new","","Create a low discrepancy sampler to sample the image in `dim.0 * dim.1` sized blocks",40,null],[11,"get_samples","","",40,null],[11,"get_samples_2d","","",40,null],[11,"get_samples_1d","","",40,null],[11,"max_spp","","",40,null],[11,"has_samples","","",40,null],[11,"dimensions","","",40,null],[11,"select_block","","",40,null],[11,"get_region","","",40,null],[11,"report_results","","",40,null],[0,"block_queue","tray_rust::sampler","Provides a queue of block indices that the sampler positions can be initialized\nfrom for the worker threads. The queue itself is not changed after creation\nwe simply work through it with an atomic counter to track the index of the next\nblock to work on",null,null],[3,"BlockQueue","tray_rust::sampler::block_queue","The queue of blocks to be worked on shared immutably between worker threads.",null,null],[3,"BlockQueueIterator","","Iterator to work through the queue safely",null,null],[11,"new","","Create a block queue for the image with dimensions `img`.\nPanics if the image is not evenly broken into blocks of dimension `dim`",41,null],[11,"block_dim","","Get the dimensions of an individual block in the queue",41,null],[11,"iter","","Get an iterator to work through the queue",41,null],[11,"len","","Get the length of the queue",41,null],[11,"is_empty","","Check if the queue is empty",41,null],[11,"next","","",42,null],[8,"Sampler","tray_rust::sampler","Provides the interface for all samplers to implement. Defines functions for\ngetting samples from the sampler and checking the sampler has finished sampling\nthe region",null,null],[10,"get_samples","","Fill the vector with 2D pixel coordinate samples for a single pixel\nin the region being sampled. If the sampler doesn&#39;t have any more samples\nfor the region the vector will be empty\nSamplers that use randomness to compute samples will use the thread rng",43,null],[10,"get_samples_2d","","Fill the slice with 2D samples from the sampler",43,null],[10,"get_samples_1d","","Fill the slice with 1D samples from the sampler",43,null],[10,"max_spp","","Get the max number of samples this sampler will take per pixel",43,null],[10,"has_samples","","Check if the sampler has more samples for the region being sampled",43,null],[10,"dimensions","","Get the dimensions of the region being sampled in pixels",43,null],[10,"select_block","","Move to a new block of the image to sample with this sampler by specifying\nthe starting `(x, y)` block index for the new block. The block starting\nposition will be calculated as `dimensions * start`",43,null],[10,"get_region","","Get the region being samples",43,null],[11,"report_results","","Let the sampler inspect the results of sampling the pixel so it can\ndetermine if more samples should be taken. Returns true if these samples\nare ok to use, false if more need to be taken. The default implementation\njust returns true.",43,null],[11,"fmt","","",36,null],[11,"new","","Create a new sample taking the 2D sample values from the slice",36,null],[11,"fmt","","",37,null],[11,"clone","","",37,null],[11,"new","","Create a new region starting at `start` with dimension `dim`",37,null],[11,"select_region","","Select a new region starting at region indices `start` with the same dimensions\neg. with blocks of width 8 the 2nd region along x is at 16 so to get\nthis block you&#39;d set start.0 = 2",37,null],[0,"integrator","tray_rust","The integrator module defines the Integrator trait implemented by\nthe various surface integrators used to render the scene with different\nintegration methods, eg. path tracing, photon mapping etc.",null,null],[0,"whitted","tray_rust::integrator","Defines the Whitted integrator which implements Whitted recursive ray tracing\nSee [Whitted, An improved illumination model for shaded display](http://dl.acm.org/citation.cfm?id=358882)",null,null],[3,"Whitted","tray_rust::integrator::whitted","The Whitted integrator implementing the Whitted recursive ray tracing algorithm",null,null],[11,"fmt","","",44,null],[11,"clone","","",44,null],[11,"new","","Create a new Whitted integrator with the desired maximum recursion depth for rays",44,{"inputs":[{"name":"u32"}],"output":{"name":"whitted"}}],[11,"illumination","","",44,null],[0,"path","tray_rust::integrator","Defines the Path integrator which implements path tracing with\nexplicit light sampling",null,null],[3,"Path","tray_rust::integrator::path","The path integrator implementing Path tracing with explicit light sampling",null,null],[11,"fmt","","",45,null],[11,"clone","","",45,null],[11,"new","","Create a new path integrator with the min and max length desired for paths",45,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"path"}}],[11,"illumination","","",45,null],[0,"normals_debug","tray_rust::integrator","Defines the NormalsDebug integrator which renders out the object&#39;s normals",null,null],[3,"NormalsDebug","tray_rust::integrator::normals_debug","The NormalsDebug integrator implementing the NormalsDebug recursive ray tracing algorithm",null,null],[11,"fmt","","",46,null],[11,"clone","","",46,null],[11,"illumination","","",46,null],[8,"Integrator","tray_rust::integrator","Trait implemented by the various integration methods that can be used to render\nthe scene. For scene usage information see whitted and path to get information\non how to specify them.",null,null],[10,"illumination","","Compute the illumination at the intersection in the scene",47,null],[11,"specular_reflection","","Compute the color of specularly reflecting light off the intersection",47,null],[11,"specular_transmission","","Compute the color of specularly transmitted light through the intersection",47,null],[11,"sample_one_light","","Uniformly sample the contribution of a randomly chosen light in the scene\nto the illumination of this BSDF at the point",47,null],[11,"estimate_direct","","Estimate the direct light contribution to the surface being shaded by the light\nusing multiple importance sampling",47,null],[0,"scene","tray_rust","Defines the scene struct which contains the various objects defining the scene.\nThis includes the geometry, instances of the geometry, the camera and so on.",null,null],[3,"Scene","tray_rust::scene","The scene containing the objects and camera configuration we&#39;d like to render,\nshared immutably among the ray tracing threads",null,null],[12,"cameras","","",48,null],[12,"bvh","","",48,null],[12,"integrator","","",48,null],[11,"load_file","","",48,null],[11,"intersect","","Test the ray for intersections against the objects in the scene.\nReturns Some(Intersection) if an intersection was found and None if not.",48,null],[11,"update_frame","","Advance the time the scene is currently displaying to the time range passed",48,null],[11,"active_camera","","Get the active camera for the current frame",48,null],[0,"bxdf","tray_rust","Defines the BxDF interface implemented by BRDF/BTDFs to describe\nmaterial properties. Also provides the BSDF type which composes\nvarious BRDF/BTDFs to describe materials",null,null],[4,"BxDFType","tray_rust::bxdf","Various types of BxDFs that can be selected to specify which\ntypes of surface functions should be evaluated",null,null],[13,"Reflection","","",49,null],[13,"Transmission","","",49,null],[13,"Diffuse","","",49,null],[13,"Glossy","","",49,null],[13,"Specular","","",49,null],[5,"cos_theta","","Compute the value of cosine theta for a vector in shading space",null,{"inputs":[{"name":"vector"}],"output":{"name":"f32"}}],[5,"sin_theta_sqr","","Compute the value of (sine theta)^2  for a vector in shading space",null,{"inputs":[{"name":"vector"}],"output":{"name":"f32"}}],[5,"sin_theta","","Compute the value of sine theta for a vector in shading space",null,{"inputs":[{"name":"vector"}],"output":{"name":"f32"}}],[5,"tan_theta","","Compute the value of tan theta for a vector in shading space",null,{"inputs":[{"name":"vector"}],"output":{"name":"f32"}}],[5,"arctan_theta","","Compute the value of arctan theta for a vector in shading space",null,{"inputs":[{"name":"vector"}],"output":{"name":"f32"}}],[5,"cos_phi","","Compute the value of cosine phi for a vector in shading space",null,{"inputs":[{"name":"vector"}],"output":{"name":"f32"}}],[5,"sin_phi","","Compute the value of sine phi for a vector in shading space",null,{"inputs":[{"name":"vector"}],"output":{"name":"f32"}}],[5,"same_hemisphere","","Check if two vectors are in the same hemisphere in shading space",null,{"inputs":[{"name":"vector"},{"name":"vector"}],"output":{"name":"bool"}}],[0,"bsdf","","Defines the BSDF which acts as a container for composing the various BRDFs\nand BTDFs that describe the surface&#39;s properties",null,null],[3,"BSDF","tray_rust::bxdf::bsdf","The BSDF contains the various BRDFs and BTDFs that describe the surface&#39;s properties\nat some point. It also transforms incident and outgoing light directions into\nshading space to make the BxDFs easier to implement.\nTODO: We really need the memory pool. Each time we get the bsdf from a\nmaterial we need to allocate a decent amount of stuff since they each need\ntheir own tangent, bitangent and differential geometry reference.",null,null],[12,"p","","The hit point",50,null],[12,"n","","Shading normal, may be perturbed by bump mapping",50,null],[12,"ng","","The actual geometry normal",50,null],[12,"tan","","Tangent vector for the surface",50,null],[12,"bitan","","Bitangent vector for the surface",50,null],[12,"eta","","Refractive index of the geometry",50,null],[11,"new","","Create a new BSDF using the BxDFs passed to shade the differential geometry with\nrefractive index `eta`",50,null],[11,"num_bxdfs","","Return the total number of BxDFs",50,null],[11,"num_matching","","Return the number of BxDFs matching the flags",50,null],[11,"to_shading","","Transform the vector from world space to shading space",50,null],[11,"from_shading","","Transform the vectro from shading space to world space",50,null],[11,"eval","","Evaluate the BSDF for the outgoing and incident light directions\n`w_o` and `w_i` in world space, sampling the desired subset of BxDFs\nselected by the flags passed. `wo_world` and `wi_world` should point from\nthe hit point in the outgoing and incident light directions respectively.",50,null],[11,"sample","","Sample a component of the BSDF to get an incident light direction for light\nleaving the surface along `w_o`.\n`samples` are the 3 random values to use when sampling a component of the BSDF\nand a the chosen BSDF\nReturns the color, direction, pdf and the type of BxDF that was sampled.",50,null],[11,"pdf","","Compute the pdf for sampling the pair of incident and outgoing light directions for\nthe BxDFs matching the flags set",50,null],[0,"lambertian","tray_rust::bxdf","Defines a Lambertion BRDF that describes perfectly diffuse surfaces.\nSee [Lambertian reflectance](https://en.wikipedia.org/wiki/Lambertian_reflectance)",null,null],[3,"Lambertian","tray_rust::bxdf::lambertian","Lambertian BRDF that implements the Lambertian reflectance model",null,null],[11,"fmt","","",51,null],[11,"clone","","",51,null],[11,"new","","Create a new Lambertian BRDF with the desired reflective color property",51,{"inputs":[{"name":"colorf"}],"output":{"name":"lambertian"}}],[11,"bxdf_type","","",51,null],[11,"eval","","",51,null],[0,"oren_nayar","tray_rust::bxdf","Defines an Oren-Nayar BRDF that describes diffuse reflection from rough surfaces\nSee [Oren-Nayar reflectance model](https://en.wikipedia.org/wiki/Oren%E2%80%93Nayar_reflectance_model)",null,null],[3,"OrenNayar","tray_rust::bxdf::oren_nayar","Oren-Nayar BRDF that implements the Oren-Nayar reflectance model",null,null],[11,"fmt","","",52,null],[11,"clone","","",52,null],[11,"new","","Create a new Oren-Nayar BRDF with the desired color and roughness\n`roughness` should be the variance of the Gaussian describing the\nmicrofacet distribution",52,{"inputs":[{"name":"colorf"},{"name":"f32"}],"output":{"name":"orennayar"}}],[11,"bxdf_type","","",52,null],[11,"eval","","",52,null],[0,"fresnel","tray_rust::bxdf","Provides the Fresnel term trait and implementations for conductors and dielectric materials",null,null],[3,"Dielectric","tray_rust::bxdf::fresnel","Computes the Fresnel term for dielectric materials",null,null],[12,"eta_i","","Refractive index of the material the light is coming from",53,null],[12,"eta_t","","Refractive index of the material the light is hitting/entering",53,null],[3,"Conductor","","Computes the Fresnel term for conductive materials",null,null],[12,"eta","","Refractive index of the material being hit",54,null],[12,"k","","Absorption coefficient of the material being hit",54,null],[8,"Fresnel","","The Fresnel trait implemented by the various Fresnel term components",null,null],[10,"fresnel","","Compute the fresnel term for light incident to the object at angle `cos_i`",55,null],[11,"fmt","","",53,null],[11,"clone","","",53,null],[11,"new","","Create a new Dielectric Fresnel term for the boundary between two objects.\n`eta_i`: refractive index of the material the light is coming from.\n`eta_t`: refractive index of the material the light is entering.",53,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"dielectric"}}],[11,"fresnel","","",53,null],[11,"fmt","","",54,null],[11,"clone","","",54,null],[11,"new","","Create a new Conductor Fresnel term for the object.\n`eta`: refractive index of the material.\n`k`: absorption coefficient of the material.",54,{"inputs":[{"name":"colorf"},{"name":"colorf"}],"output":{"name":"conductor"}}],[11,"fresnel","","",54,null],[0,"specular_reflection","tray_rust::bxdf","Defines a BRDF that describes specular reflection",null,null],[3,"SpecularReflection","tray_rust::bxdf::specular_reflection","Specular reflection BRDF that implements a specularly reflective material model",null,null],[11,"new","","Create a specularly reflective BRDF with the reflective color and Fresnel term",56,{"inputs":[{"name":"colorf"},{"name":"box"}],"output":{"name":"specularreflection"}}],[11,"bxdf_type","","",56,null],[11,"eval","","We&#39;ll never exactly hit the specular reflection direction with some pair\nso this just returns black. Use `sample` instead",56,null],[11,"sample","","Sampling the specular BRDF just returns the specular reflection direction\nfor the light leaving along `w_o`",56,null],[0,"specular_transmission","tray_rust::bxdf","Defines a BTDF that describes specular transmission",null,null],[3,"SpecularTransmission","tray_rust::bxdf::specular_transmission","Specular transmission BTDF that implements a specularly transmissive material model",null,null],[11,"fmt","","",57,null],[11,"clone","","",57,null],[11,"new","","Create a specularly transmissive BTDF with the color and Fresnel term",57,{"inputs":[{"name":"colorf"},{"name":"dielectric"}],"output":{"name":"speculartransmission"}}],[11,"bxdf_type","","",57,null],[11,"eval","","We&#39;ll never exactly hit the specular transmission direction with some pair\nso this just returns black. Use `sample` instead",57,null],[11,"sample","","Sampling the specular BTDF just returns the specular transmission direction\nfor the light leaving along `w_o`",57,null],[0,"merl","tray_rust::bxdf","The MERL BRDF represents the surface&#39;s properties through data loaded from a\n[MERL BRDF Database file](http://www.merl.com/brdf/). The BRDF itself just stores\nthe data loaded from the BRDF file while actual loading is done by the MERL material\nwhen it&#39;s created.",null,null],[3,"Merl","tray_rust::bxdf::merl","BRDF that uses measured data to model the surface reflectance properties.\nThe measured data is from &quot;A Data-Driven Reflectance Model&quot;,\nby Wojciech Matusik, Hanspeter Pfister, Matt Brand and Leonard McMillan,\nin ACM Transactions on Graphics 22, 3(2003), 759-769",null,null],[11,"fmt","","",58,null],[11,"clone","","",58,null],[11,"new","","Create a MERL BRDF to use data loaded from a MERL BRDF data file",58,{"inputs":[{"name":"vec"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"merl"}}],[11,"bxdf_type","","",58,null],[11,"eval","","",58,null],[0,"microfacet","tray_rust::bxdf","Module providing various microfacet distribution functions and trait that&#39;s\nimplemented by all provided distributions",null,null],[0,"beckmann","tray_rust::bxdf::microfacet","This module provides a Beckmann microfacet distribution with a\nSmith shadowing-masking term",null,null],[3,"Beckmann","tray_rust::bxdf::microfacet::beckmann","Beckmann microfacet distribution with Smith shadowing-masking. This is the\nmicrofacet model described by [Walter et al.](https://www.cs.cornell.edu/~srm/publications/EGSR07-btdf.pdf)",null,null],[11,"new","","Create a new Beckmann distribution with the desired width",59,{"inputs":[{"name":"f32"}],"output":{"name":"beckmann"}}],[11,"normal_distribution","","",59,null],[11,"sample","","",59,null],[11,"pdf","","",59,null],[11,"shadowing_masking","","",59,null],[11,"monodir_shadowing","","Monodirectional shadowing function from Walter et al., we use the Smith\nshadowing-masking which uses the reciprocity of this function.\n`w` is the incident/outgoing light direction and `w_h` is the microfacet normal",59,null],[0,"ggx","tray_rust::bxdf::microfacet","This module provides a GGX microfacet distribution with a\nSmith shadowing-masking term. The GGX microfacet distribution\nis also sometimes referred to as Trowbridge-Reitz.",null,null],[3,"GGX","tray_rust::bxdf::microfacet::ggx","GGX microfacet distribution with Smith shadowing-masking. This is the\nmicrofacet model described by [Walter et al.](https://www.cs.cornell.edu/~srm/publications/EGSR07-btdf.pdf)",null,null],[11,"new","","Create a new GGX distribution with the desired width",60,{"inputs":[{"name":"f32"}],"output":{"name":"ggx"}}],[11,"normal_distribution","","",60,null],[11,"sample","","",60,null],[11,"pdf","","",60,null],[11,"shadowing_masking","","",60,null],[11,"monodir_shadowing","","Monodirectional shadowing function from Walter et al., we use the Smith\nshadowing-masking which uses the reciprocity of this function.\n`w` is the incident/outgoing light direction and `w_h` is the microfacet normal",60,null],[8,"MicrofacetDistribution","tray_rust::bxdf::microfacet","Trait implemented by all microfacet distributions",null,null],[10,"normal_distribution","","Compute the probability that microfacets are\noriented with normal `w_h` in this distribution",61,null],[10,"sample","","Sample the distribution for some outgoing light direction `w_o`.\nreturns the sampled microfacet normal",61,null],[10,"pdf","","Compute the probability of sampling a certain microfacet normal\nfrom the distribution, `w_h`",61,null],[10,"shadowing_masking","","Compute the shadowing masking function for the incident and outgoing\ndirections `w_i` and `w_o` for microfacets with normal `w_h`.\nReturns what fraction of the microfacets with the normal are visible\nin both directions.",61,null],[10,"monodir_shadowing","","Return the monodirectional shadowing function, G_1\n`v` is the reflected/incident direction, `w_h` is the microfacet normal",61,null],[0,"torrance_sparrow","tray_rust::bxdf","This module provides the Torrance Sparrow microfacet BRDF, see\n[Walter et al. 07](https://www.cs.cornell.edu/~srm/publications/EGSR07-btdf.pdf)\nfor details.",null,null],[3,"TorranceSparrow","tray_rust::bxdf::torrance_sparrow","Struct providing the Torrance Sparrow BRDF, implemented as described in\n[Walter et al. 07](https://www.cs.cornell.edu/~srm/publications/EGSR07-btdf.pdf)",null,null],[11,"new","","Create a new Torrance Sparrow microfacet BRDF",62,{"inputs":[{"name":"colorf"},{"name":"box"},{"name":"box"}],"output":{"name":"torrancesparrow"}}],[11,"bxdf_type","","",62,null],[11,"eval","","",62,null],[11,"sample","","",62,null],[11,"pdf","","",62,null],[0,"microfacet_transmission","tray_rust::bxdf","This module provides a microfacet model for transmission (a BTDF), see\n[Walter et al. 07](https://www.cs.cornell.edu/~srm/publications/EGSR07-btdf.pdf)\nfor details.",null,null],[3,"MicrofacetTransmission","tray_rust::bxdf::microfacet_transmission","Struct providing the microfacet BTDF, implemented as described in\n[Walter et al. 07](https://www.cs.cornell.edu/~srm/publications/EGSR07-btdf.pdf)",null,null],[11,"new","","Create a new transmissive microfacet BRDF",63,{"inputs":[{"name":"colorf"},{"name":"dielectric"},{"name":"box"}],"output":{"name":"microfacettransmission"}}],[11,"bxdf_type","","",63,null],[11,"eval","","",63,null],[11,"sample","","",63,null],[11,"pdf","","",63,null],[8,"BxDF","tray_rust::bxdf","Trait implemented by BRDF/BTDFs in tray_rust. Provides methods for\nevaluating and sampling the function",null,null],[10,"bxdf_type","","Get the type of this BxDF",64,null],[10,"eval","","Evaluate the BxDF for the pair of incident and outgoing light directions,\n`w_i` and `w_o`.",64,null],[11,"sample","","Sample an incident light direction for an outgoing light direction `w_o`.\n`samples` will be used to randomly sample a direction for the outgoing light\nReturns the color of the material for the pair of directions, the incident\nlight direction and pdf",64,null],[11,"matches","","Check if this BxDF matches the type flags passed",64,null],[11,"pdf","","Compute the pdf of sampling the pair of directions passed for this BxDF",64,null],[11,"fmt","","",49,null],[11,"clone","","",49,null],[11,"all_types","","Get an EnumSet containing all flags for the different types of\nBxDFs: Diffuse, Glossy, Specular",49,{"inputs":[],"output":{"name":"enumset"}}],[11,"all_brdf","","Get an EnumSet containing all flags for reflective BxDFs (eg. BRDFs)",49,{"inputs":[],"output":{"name":"enumset"}}],[11,"all_btdf","","Get an EnumSet containing all flags for transmissive BxDFs (eg. BTDFs)",49,{"inputs":[],"output":{"name":"enumset"}}],[11,"all","","Get an EnumSet containing all flags for all BxDFs. This would be all\ntypes of BRDFs and BTDFs",49,{"inputs":[],"output":{"name":"enumset"}}],[11,"specular","","Get an EnumSet containing flags for all types of specular BxDFs",49,{"inputs":[],"output":{"name":"enumset"}}],[11,"non_specular","","Get an EnumSet containing flags for all non-specular BxDFs",49,{"inputs":[],"output":{"name":"enumset"}}],[11,"to_u32","","",49,null],[11,"from_u32","","",49,{"inputs":[{"name":"u32"}],"output":{"name":"bxdftype"}}],[0,"material","tray_rust","Defines the trait implemented by all materials and exports various\nsupported material types. Materials are used to define how BxDFs are\ncomposed to create the desired appearance",null,null],[0,"matte","tray_rust::material","Defines a matte material used to describe diffuse materials",null,null],[3,"Matte","tray_rust::material::matte","The Matte material describes diffuse materials with either a Lambertian or\nOren-Nayar BRDF. The Lambertian BRDF is used for materials with no roughness\nwhile Oren-Nayar is used for those with some roughness.\nTODO: Currently we create the BSDF when creating the material but later we&#39;d\nlike to change material properties over the surface and should use a memory pool",null,null],[11,"new","","Create a new Matte material with the desired diffuse color and roughness",65,{"inputs":[{"name":"colorf"},{"name":"f32"}],"output":{"name":"matte"}}],[11,"bsdf","","",65,null],[0,"specular_metal","tray_rust::material","Defines a specular metal material",null,null],[3,"SpecularMetal","tray_rust::material::specular_metal","The Specular Metal material describes specularly reflective metals using their\nrefractive index and absorption coefficient",null,null],[11,"new","","Create a new specular metal with the desired metal properties.\n`eta`: refractive index of the metal\n`k`: absorption coefficient of the metal",66,{"inputs":[{"name":"colorf"},{"name":"colorf"}],"output":{"name":"specularmetal"}}],[11,"bsdf","","",66,null],[0,"glass","tray_rust::material","Defines a specular glass material",null,null],[3,"Glass","tray_rust::material::glass","The Glass material describes specularly transmissive and reflective glass material",null,null],[11,"new","","Create the glass material with the desired color and index of refraction\n`reflect`: color of reflected light\n`transmit`: color of transmitted light\n`eta`: refractive index of the material",67,{"inputs":[{"name":"colorf"},{"name":"colorf"},{"name":"f32"}],"output":{"name":"glass"}}],[11,"bsdf","","",67,null],[0,"merl","tray_rust::material","The MERL Material represents the surface&#39;s properties through data loaded from a\n[MERL BRDF Database file](http://www.merl.com/brdf/). The material loads and parses\nthe data then hands it off to its BRDF which will be used to actually compute the\nsurface properties",null,null],[3,"Merl","tray_rust::material::merl","Material that uses measured data to model the surface reflectance properties.\nThe measured data is from &quot;A Data-Driven Reflectance Model&quot;,\nby Wojciech Matusik, Hanspeter Pfister, Matt Brand and Leonard McMillan,\nin ACM Transactions on Graphics 22, 3(2003), 759-769",null,null],[11,"load_file","","Create a new MERL BRDF by loading the refletance data from a MERL BRDF\ndatabase file",68,{"inputs":[{"name":"path"}],"output":{"name":"merl"}}],[11,"bsdf","","",68,null],[0,"plastic","tray_rust::material","A material that models plastic of varying roughness using\nthe Torrance Sparrow BRDF and a Blinn microfacet distribution\nTODO: Add Ashikman-Shirley (spelling?) anisotropic microfacet model",null,null],[3,"Plastic","tray_rust::material::plastic","The Plastic material describes plastic materials of varying roughness",null,null],[11,"new","","Create a new plastic material specifying the diffuse and glossy colors\nalong with the roughness of the surface",69,{"inputs":[{"name":"colorf"},{"name":"colorf"},{"name":"f32"}],"output":{"name":"plastic"}}],[11,"bsdf","","",69,null],[0,"metal","tray_rust::material","Provides a material for modelling metal surfaces of varying roughness\nusing the Torrance Sparrow BRDF and a Blinn microfacet distribution\nTODO: Add Ashikman-Shirley (spelling?) anisotropic microfacet model",null,null],[3,"Metal","tray_rust::material::metal","The Metal material describes metals of varying roughness",null,null],[11,"new","","Create a new metal material specifying the reflectance properties of the metal",70,{"inputs":[{"name":"colorf"},{"name":"colorf"},{"name":"f32"}],"output":{"name":"metal"}}],[11,"bsdf","","",70,null],[0,"rough_glass","tray_rust::material","Defines a rough glass material",null,null],[3,"RoughGlass","tray_rust::material::rough_glass","The `RoughGlass` material describes specularly transmissive and reflective glass material",null,null],[11,"new","","Create the `RoughGlass` material with the desired color and index of refraction\n`reflect`: color of reflected light\n`transmit`: color of transmitted light\n`eta`: refractive index of the material\n`roughness`: roughness of the material",71,{"inputs":[{"name":"colorf"},{"name":"colorf"},{"name":"f32"},{"name":"f32"}],"output":{"name":"roughglass"}}],[11,"bsdf","","",71,null],[8,"Material","tray_rust::material","Trait implemented by materials. Provides method to get the BSDF describing\nthe material properties at the intersection",null,null],[10,"bsdf","","Get the BSDF for the material which defines its properties at the\nhit point. TODO: When we implement a memory pool we need to pass it\nhere, currently the BxDFs and BSDF are allocated once at surface\ncreation instead of as needed based on material properties.",72,null],[0,"light","tray_rust","Defines the light interface implemented by all lights in tray_rust and\nthe OcclusionTester which provides a convenient interface for doing\nshadow tests for lights",null,null],[3,"OcclusionTester","tray_rust::light","The OcclusionTester provides a simple interface for setting up and executing\nocclusion queries in the scene",null,null],[12,"ray","","The ray (or ray segment) that the occlusion test is performed on",73,null],[8,"Light","","Trait implemented by all lights in tray_rust. Provides methods for sampling\nthe light and in the future ones for checking if it&#39;s a delta light, computing\nits power and so on.",null,null],[10,"sample_incident","","Sample the illumination from the light arriving at the point `p`\nReturns the color, incident light direction, pdf and occlusion tester object\n`samples` will be used to randomly sample the light.",74,null],[10,"delta_light","","Determine if the light is described by a delta distribution",74,null],[10,"pdf","","Compute the PDF for sampling the point with incident direction `w_i`",74,null],[11,"fmt","","",73,null],[11,"clone","","",73,null],[11,"test_points","","Create an occlusion tester to perform the test between two points",73,{"inputs":[{"name":"point"},{"name":"point"},{"name":"f32"}],"output":{"name":"occlusiontester"}}],[11,"test_ray","","Create an occlusion tester to perform the test along the ray starting at `p`\nand in direction `d`",73,{"inputs":[{"name":"point"},{"name":"vector"},{"name":"f32"}],"output":{"name":"occlusiontester"}}],[11,"occluded","","Perform the occlusion test in the scene",73,null],[0,"mc","tray_rust","Defines various Monte Carlo sampling functions for sampling\npoints/directions on objects and computing the corresponding pdfs",null,null],[5,"cos_sample_hemisphere","tray_rust::mc","Sample a hemisphere using a cosine distribution to produce cosine weighted samples\n`samples` should be two random samples in range [0, 1)\ndirections returned will be in the hemisphere around (0, 0, 1)",null,null],[5,"cos_hemisphere_pdf","","Compute the PDF of the cosine weighted hemisphere sampling",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"concentric_sample_disk","","Compute concentric sample positions on a unit disk mapping input from range [0, 1)\nto sample positions on a disk\n`samples` should be two random samples in range [0, 1)\nSee: [Shirley and Chiu, A Low Distortion Map Between Disk and Square](https://mediatech.aalto.fi/~jaakko/T111-5310/K2013/JGT-97.pdf)",null,null],[5,"power_heuristic","","Power heuristic for multiple importance sampling for two functions being sampled, f &amp; g\nwhere beta is hard-coded to be two following PBR &amp; Veach\n- `n_f`, `n_g` number of samples taken of each\n- `pdf_f`, `pdf_g` pdf of each function",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"uniform_cone_pdf","","Return the PDF for uniformly sampling a cone with some max solid angle",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"uniform_sample_cone","","Uniformly sample a direction in a cone with max angle `cos_theta_max` where\nthe cone lies along the z-axis",null,null],[5,"uniform_sample_cone_frame","","Uniformly sample a direction in a cone with max angle `cos_theta_max` where\nthe cone looks down the w_z vector provided, with w_x, w_y forming the rest\nof the coordinate frame for the cone",null,null],[5,"uniform_sample_sphere","","Uniformly sample a direction on the unit sphere about the origin",null,null],[0,"partition","tray_rust","Provides a general partitioning function that implements C++&#39;s\n[std::partition](http://en.cppreference.com/w/cpp/algorithm/partition)",null,null],[5,"partition","tray_rust::partition","Re-orders elements in the range yielded by `it` based on `pred`. All elements\nthat the predicate returns true for will be placed before all elements\nthat the predicate returned false for. Also returns the index of the\nfirst element in the false group",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"usize"}}],[0,"exec","tray_rust","The exec module provides an abstraction of the execution backends\nused to actually render the image",null,null],[3,"Config","tray_rust::exec","Config passed to set up the execution environment with information\non what it should be rendering and where to put the results",null,null],[12,"out_path","","",75,null],[12,"scene_file","","",75,null],[12,"num_threads","","",75,null],[12,"spp","","",75,null],[12,"frame_info","","",75,null],[12,"current_frame","","",75,null],[12,"select_blocks","","Which blocks the executor should render, stored\nas (start, count) of the block indices",75,null],[0,"multithreaded","","The multithreaded module provides a multithreaded execution for rendering\nthe image.",null,null],[3,"MultiThreaded","tray_rust::exec::multithreaded","The MultiThreaded execution uses a configurable number of threads in\na threadpool to render each frame",null,null],[11,"new","","Create a new multithreaded renderer which will use `num_threads` to render the image",76,{"inputs":[{"name":"u32"}],"output":{"name":"multithreaded"}}],[11,"render","","",76,null],[0,"distrib","tray_rust::exec","The distrib module provides methods for executing the rendering in a\ndistributed environment across multiple machines. The worker module provides\nthe Worker which does the actual job of rendering a subregion of the image.\nThe master module provides the Master which instructs the Workers what to render\nand collects their results to save out the final image.",null,null],[0,"worker","tray_rust::exec::distrib","The worker module provides the Worker struct which receives instructions from\nthe master, renders and reports back its results",null,null],[3,"Worker","tray_rust::exec::distrib::worker","A worker process for distributed rendering. Accepts instructions from\nthe master process telling it what to render, after each frame is finished\nresults are sent back to the master and the next frame is started. Once all\nframes are finished the worker exits",null,null],[12,"render_target","","Render target the worker will write the current frame too",77,null],[12,"scene","","",77,null],[12,"config","","",77,null],[7,"PORT","","Port that the workers listen for the master on",null,null],[11,"listen_for_master","","Listen on the worker `PORT` for the master to contact us\nand send us instructions about the scene we should render and\nwhat parts of it we&#39;ve been assigned",77,{"inputs":[{"name":"u32"}],"output":{"name":"worker"}}],[11,"send_results","","Send our blocks back to the master",77,null],[0,"master","tray_rust::exec::distrib","The master module provides the Master struct which instructs Workers which\nportions of the image they should render and collects their results to combine\ninto the final image.",null,null],[3,"Master","tray_rust::exec::distrib::master","The Master organizes the set of Worker processes and instructions them what parts\nof the scene to render. As workers report results the master collects them and\nsaves out the PNG once all workers have reported the frame.",null,null],[11,"start_workers","","Create a new master that will contact the worker nodes passed and\nsend instructions on what parts of the scene to start rendering",78,null],[11,"ready","","",78,null],[8,"Exec","tray_rust::exec","Trait implemented by different execution environments that provides\na method to call and render the scene, given the rendering arguments",null,null],[10,"render","","Render the scene using this rendering backend, will render out\nall frames of the image and save them out as instructed by\nthe command line arguments\nTODO: In order to have a cleaner seperation we should pass more parameters\nto render. E.g. the scene. Or maybe a callback to a function that gets the\nframe&#39;s render target and can save it out?",79,null],[11,"clone","","",75,null],[11,"fmt","","",75,null],[11,"new","","",75,null]],"paths":[[4,"Axis"],[3,"Vector"],[3,"Normal"],[3,"Point"],[3,"Ray"],[3,"Matrix4"],[3,"Transform"],[3,"Quaternion"],[3,"Keyframe"],[3,"AnimatedTransform"],[3,"FrameInfo"],[3,"Colorf"],[3,"ImageSample"],[3,"RenderTarget"],[3,"Camera"],[3,"Gaussian"],[3,"MitchellNetravali"],[8,"Filter"],[3,"ColorKeyframe"],[3,"AnimatedColor"],[3,"Image"],[3,"DifferentialGeometry"],[3,"Intersection"],[4,"Instance"],[3,"Sphere"],[3,"Disk"],[3,"Rectangle"],[3,"BBox"],[3,"BVH"],[3,"Mesh"],[3,"Triangle"],[3,"Receiver"],[3,"Emitter"],[8,"Geometry"],[8,"Boundable"],[8,"Sampleable"],[3,"Sample"],[3,"Region"],[3,"Uniform"],[3,"LowDiscrepancy"],[3,"Adaptive"],[3,"BlockQueue"],[3,"BlockQueueIterator"],[8,"Sampler"],[3,"Whitted"],[3,"Path"],[3,"NormalsDebug"],[8,"Integrator"],[3,"Scene"],[4,"BxDFType"],[3,"BSDF"],[3,"Lambertian"],[3,"OrenNayar"],[3,"Dielectric"],[3,"Conductor"],[8,"Fresnel"],[3,"SpecularReflection"],[3,"SpecularTransmission"],[3,"Merl"],[3,"Beckmann"],[3,"GGX"],[8,"MicrofacetDistribution"],[3,"TorranceSparrow"],[3,"MicrofacetTransmission"],[8,"BxDF"],[3,"Matte"],[3,"SpecularMetal"],[3,"Glass"],[3,"Merl"],[3,"Plastic"],[3,"Metal"],[3,"RoughGlass"],[8,"Material"],[3,"OcclusionTester"],[8,"Light"],[3,"Config"],[3,"MultiThreaded"],[3,"Worker"],[3,"Master"],[8,"Exec"]]};
searchIndex["image"] = {"doc":"This crate provides native rust implementations of\nimage encoders and decoders and basic image manipulation\nfunctions.","items":[[3,"Luma","image","Grayscale colors",null,null],[12,"data","","",0,null],[3,"LumaA","","Grayscale colors + alpha channel",null,null],[12,"data","","",1,null],[3,"Rgb","","RGB colors",null,null],[12,"data","","",2,null],[3,"Rgba","","RGB colors + alpha channel",null,null],[12,"data","","",3,null],[3,"SubImage","","A View into another image",null,null],[3,"Pixels","","Immutable pixel iterator",null,null],[3,"MutPixels","","Mutable pixel iterator",null,null],[3,"ImageBuffer","","Generic image buffer",null,null],[3,"Frame","","A single animation frame",null,null],[3,"Frames","","Holds the frames of the animated image",null,null],[4,"ColorType","","An enumeration over supported color types and their bit depths",null,null],[13,"Gray","","Pixel is grayscale",4,null],[13,"RGB","","Pixel contains R, G and B channels",4,null],[13,"Palette","","Pixel is an index into a color palette",4,null],[13,"GrayA","","Pixel is grayscale with an alpha channel",4,null],[13,"RGBA","","Pixel is RGB with an alpha channel",4,null],[4,"ImageError","","An enumeration of Image errors",null,null],[13,"FormatError","","The Image is not formatted properly",5,null],[13,"DimensionError","","The Image&#39;s dimensions are either too small or too large",5,null],[13,"UnsupportedError","","The Decoder does not support this image format",5,null],[13,"UnsupportedColor","","The Decoder does not support this color type",5,null],[13,"NotEnoughData","","Not enough data was provided to the Decoder\nto decode the image",5,null],[13,"IoError","","An I/O Error occurred while decoding the image",5,null],[13,"ImageEnd","","The end of the image has been reached",5,null],[4,"FilterType","","Available Sampling Filters",null,null],[13,"Nearest","","Nearest Neighbor",6,null],[13,"Triangle","","Linear Filter",6,null],[13,"CatmullRom","","Cubic Filter",6,null],[13,"Gaussian","","Gaussian Filter",6,null],[13,"Lanczos3","","Lanczos with window 3",6,null],[4,"ImageFormat","","An enumeration of supported image formats.\nNot all formats support both encoding and decoding.",null,null],[13,"PNG","","An Image in PNG Format",7,null],[13,"JPEG","","An Image in JPEG Format",7,null],[13,"GIF","","An Image in GIF Format",7,null],[13,"WEBP","","An Image in WEBP Format",7,null],[13,"PPM","","An Image in PPM Format",7,null],[13,"TIFF","","An Image in TIFF Format",7,null],[13,"TGA","","An Image in TGA Format",7,null],[13,"BMP","","An Image in BMP Format",7,null],[13,"ICO","","An Image in ICO Format",7,null],[4,"DynamicImage","","A Dynamic Image",null,null],[13,"ImageLuma8","","Each pixel in this image is 8-bit Luma",8,null],[13,"ImageLumaA8","","Each pixel in this image is 8-bit Luma with alpha",8,null],[13,"ImageRgb8","","Each pixel in this image is 8-bit Rgb",8,null],[13,"ImageRgba8","","Each pixel in this image is 8-bit Rgb with alpha",8,null],[5,"open","","Open the image located at the path specified.\nThe image&#39;s format is determined from the path&#39;s file extension.",null,{"inputs":[{"name":"p"}],"output":{"name":"imageresult"}}],[5,"load","","Create a new image from a Reader",null,{"inputs":[{"name":"r"},{"name":"imageformat"}],"output":{"name":"imageresult"}}],[5,"load_from_memory","","Create a new image from a byte slice",null,null],[5,"load_from_memory_with_format","","Create a new image from a byte slice",null,null],[5,"save_buffer","","Saves the supplied buffer to a file at the path specified.",null,null],[0,"math","","Mathematical helper functions and types.",null,null],[0,"utils","image::math","Shared mathematical utility functions.",null,null],[5,"clamp","image::math::utils","Cut value to be inside given range",null,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"n"}}],[0,"nq","image::math","NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994.\nSee &quot;Kohonen neural networks for optimal colour quantization&quot;\nin &quot;Network: Computation in Neural Systems&quot; Vol. 5 (1994) pp 351-367.\nfor a discussion of the algorithm.\nSee also  http://www.acm.org/~dekker/NEUQUANT.HTML",null,null],[3,"NeuQuant","image::math::nq","Neural network color quantizer",null,null],[11,"new","","Creates a new neuronal network and trains it with the supplied data",9,null],[11,"init","","Initializes the neuronal network and trains it with the supplied data",9,null],[11,"map_pixel","","Maps the pixel in-place to the best-matching color in the color map",9,null],[11,"index_of","","Finds the best-matching index in the color map for `pixel`",9,null],[0,"imageops","image","Image Processing Functions",null,null],[4,"FilterType","image::imageops","Available Sampling Filters",null,null],[13,"Nearest","","Nearest Neighbor",6,null],[13,"Triangle","","Linear Filter",6,null],[13,"CatmullRom","","Cubic Filter",6,null],[13,"Gaussian","","Gaussian Filter",6,null],[13,"Lanczos3","","Lanczos with window 3",6,null],[5,"rotate90","","Rotate an image 90 degrees clockwise.",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"rotate180","","Rotate an image 180 degrees clockwise.",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"rotate270","","Rotate an image 270 degrees clockwise.",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"flip_horizontal","","Flip an image horizontally",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"flip_vertical","","Flip an image vertically",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"filter3x3","","Perform a 3x3 box filter on the supplied image.\n```kernel``` is an array of the filter weights of length 9.",null,null],[5,"resize","","Resize the supplied image to the specified dimensions.\n```nwidth``` and ```nheight``` are the new dimensions.\n```filter``` is the sampling filter to use.",null,{"inputs":[{"name":"i"},{"name":"u32"},{"name":"u32"},{"name":"filtertype"}],"output":{"name":"imagebuffer"}}],[5,"blur","","Performs a Gaussian blur on the supplied image.\n```sigma``` is a measure of how much to blur by.",null,{"inputs":[{"name":"i"},{"name":"f32"}],"output":{"name":"imagebuffer"}}],[5,"unsharpen","","Performs an unsharpen mask on the supplied image.\n```sigma``` is the amount to blur the image by.\n```threshold``` is the threshold for the difference between",null,{"inputs":[{"name":"i"},{"name":"f32"},{"name":"i32"}],"output":{"name":"imagebuffer"}}],[5,"crop","","Return a mutable view into an image",null,{"inputs":[{"name":"i"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"subimage"}}],[5,"overlay","","Overlay an image at a given coordinate (x, y)",null,{"inputs":[{"name":"i"},{"name":"i"},{"name":"u32"},{"name":"u32"}],"output":null}],[5,"replace","","Replace the contents of an image at a given coordinate (x, y)",null,{"inputs":[{"name":"i"},{"name":"i"},{"name":"u32"},{"name":"u32"}],"output":null}],[0,"colorops","","Public only because of Rust bug:\nhttps://github.com/rust-lang/rust/issues/18241\nFunctions for altering and converting the color of pixelbufs",null,null],[3,"BiLevel","image::imageops::colorops","A bi-level color map",null,null],[5,"grayscale","","Convert the supplied image to grayscale",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"invert","","Invert each pixel within the supplied image.\nThis function operates in place.",null,{"inputs":[{"name":"i"}],"output":null}],[5,"contrast","","Adjust the contrast of the supplied image.\n```contrast``` is the amount to adjust the contrast by.\nNegative values decrease the contrast and positive values increase the contrast.",null,{"inputs":[{"name":"i"},{"name":"f32"}],"output":{"name":"imagebuffer"}}],[5,"brighten","","Brighten the supplied image.\n```value``` is the amount to brighten each pixel by.\nNegative values decrease the brightness and positive values increase it.",null,{"inputs":[{"name":"i"},{"name":"i32"}],"output":{"name":"imagebuffer"}}],[5,"dither","","Reduces the colors of the image using the supplied `color_map` while applying\nFloyd-Steinberg dithering to improve the visual conception",null,{"inputs":[{"name":"imagebuffer"},{"name":"map"}],"output":null}],[5,"index_colors","","Reduces the colors using the supplied `color_map` and returns an image of the indices",null,{"inputs":[{"name":"imagebuffer"},{"name":"map"}],"output":{"name":"imagebuffer"}}],[8,"ColorMap","","A color map",null,null],[16,"Color","","The color type on which the map operates on",10,null],[10,"index_of","","Returns the index of the closed match of `color`\nin the color map.",10,null],[10,"map_color","","Maps `color` to the closest color in the color map.",10,null],[11,"clone","","",11,null],[11,"index_of","","",11,null],[11,"map_color","","",11,null],[11,"index_of","image::math::nq","",9,null],[11,"map_color","","",9,null],[11,"clone","image","",6,null],[0,"webp","","Decoding of Webp Images",null,null],[3,"WebpDecoder","image::webp","A Representation of a Webp Image format decoder.",null,null],[11,"new","","Create a new WebpDecoder from the Reader ```r```.\nThis function takes ownership of the Reader.",12,{"inputs":[{"name":"r"}],"output":{"name":"webpdecoder"}}],[11,"dimensions","","",12,null],[11,"colortype","","",12,null],[11,"row_len","","",12,null],[11,"read_scanline","","",12,null],[11,"read_image","","",12,null],[0,"vp8","","An implementation of the VP8 Video Codec",null,null],[3,"Frame","image::webp::vp8","A Representation of the last decoded video frame",null,null],[12,"width","","The width of the luma plane",13,null],[12,"height","","The height of the luma plane",13,null],[12,"ybuf","","The luma plane of the frame",13,null],[12,"keyframe","","Indicates whether this frame is a keyframe",13,null],[12,"for_display","","Indicates whether this frame is intended for display",13,null],[12,"pixel_type","","The pixel type of the frame as defined by Section 9.2\nof the VP8 Specification",13,null],[3,"VP8Decoder","","VP8 Decoder",null,null],[11,"clone","","",13,null],[11,"fmt","","",13,null],[11,"default","","",13,{"inputs":[],"output":{"name":"frame"}}],[11,"new","","Create a new decoder.\nThe reader must present a raw vp8 bitstream to the decoder",14,{"inputs":[{"name":"r"}],"output":{"name":"vp8decoder"}}],[11,"decode_frame","","Decodes the current frame and returns a reference to it",14,null],[0,"ppm","image","Encoding of portable pixmap Images",null,null],[3,"PPMEncoder","image::ppm","A representation of a PPM encoder.",null,null],[11,"new","","Create a new PPMEncoder from the Writer ```w```.\nThis function takes ownership of the Writer.",15,{"inputs":[{"name":"w"}],"output":{"name":"ppmencoder"}}],[11,"encode","","Encode the buffer ```im``` as a PPM image.\n```width``` and ```height``` are the dimensions of the buffer.\n```color``` is the buffers ColorType.",15,null],[0,"png","image","Decoding and Encoding of PNG Images",null,null],[3,"PNGDecoder","image::png","PNG decoder",null,null],[3,"PNGEncoder","","PNG encoder",null,null],[11,"new","","Creates a new decoder that decodes from the stream ```r```",16,{"inputs":[{"name":"r"}],"output":{"name":"pngdecoder"}}],[11,"dimensions","","",16,null],[11,"colortype","","",16,null],[11,"row_len","","",16,null],[11,"read_scanline","","",16,null],[11,"read_image","","",16,null],[11,"new","","Create a new encoder that writes its output to ```w```",17,{"inputs":[{"name":"w"}],"output":{"name":"pngencoder"}}],[11,"encode","","Encodes the image ```image```\nthat has dimensions ```width``` and ```height```\nand ```ColorType``` ```c```",17,null],[11,"from","image","",4,null],[11,"from","","",5,{"inputs":[{"name":"decodingerror"}],"output":{"name":"imageerror"}}],[0,"ico","","Decoding and Encoding of ICO files",null,null],[3,"ICODecoder","image::ico","An ico decoder",null,null],[3,"ICOEncoder","","ICO encoder",null,null],[11,"new","","Create a new decoder that decodes from the stream ```r```",18,{"inputs":[{"name":"r"}],"output":{"name":"imageresult"}}],[11,"dimensions","","",18,null],[11,"colortype","","",18,null],[11,"row_len","","",18,null],[11,"read_scanline","","",18,null],[11,"read_image","","",18,null],[11,"new","","Create a new encoder that writes its output to ```w```.",19,{"inputs":[{"name":"w"}],"output":{"name":"icoencoder"}}],[11,"encode","","Encodes the image ```image``` that has dimensions ```width``` and\n```height``` and ```ColorType``` ```c```.  The dimensions of the image\nmust be between 1 and 256 (inclusive) or an error will be returned.",19,null],[0,"jpeg","image","Decoding and Encoding of JPEG Images",null,null],[3,"JPEGDecoder","image::jpeg","JPEG decoder",null,null],[3,"JPEGEncoder","","The representation of a JPEG encoder",null,null],[11,"new","","Create a new encoder that writes its output to ```w```",20,{"inputs":[{"name":"w"}],"output":{"name":"jpegencoder"}}],[11,"encode","","Encodes the image ```image```\nthat has dimensions ```width``` and ```height```\nand ```ColorType``` ```c```",20,null],[11,"new","","Create a new decoder that decodes from the stream ```r```",21,{"inputs":[{"name":"r"}],"output":{"name":"jpegdecoder"}}],[11,"dimensions","","",21,null],[11,"colortype","","",21,null],[11,"row_len","","",21,null],[11,"read_scanline","","",21,null],[11,"read_image","","",21,null],[11,"from","image","",4,{"inputs":[{"name":"pixelformat"}],"output":{"name":"colortype"}}],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"imageerror"}}],[0,"gif","","Decoding of GIF Images",null,null],[11,"from_rgba","gif::common","Creates a frame from pixels in RGBA format.",22,null],[11,"from_rgb","","Creates a frame from pixels in RGB format.",22,null],[11,"clone","","",23,null],[11,"fmt","","",23,null],[11,"from_u8","","Converts `u8` to `Option&lt;Self&gt;`",23,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"clone","","",24,null],[11,"fmt","","",24,null],[11,"from_u8","","Converts `u8` to `Option&lt;Self&gt;`",24,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"clone","","",25,null],[11,"fmt","","",25,null],[11,"from_u8","","Converts `u8` to `Option&lt;Self&gt;`",25,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"clone","","",22,null],[11,"fmt","","",22,null],[11,"default","","",22,{"inputs":[],"output":{"name":"frame"}}],[11,"fmt","gif::reader::decoder","",26,null],[11,"from","","",26,{"inputs":[{"name":"error"}],"output":{"name":"decodingerror"}}],[11,"fmt","","",27,null],[11,"eq","","",27,null],[11,"set_param","","",27,null],[11,"fmt","","",28,null],[11,"fmt","","",29,null],[11,"new","","Creates a new streaming decoder",29,{"inputs":[],"output":{"name":"streamingdecoder"}}],[11,"update","","Updates the internal state of the decoder.",29,null],[11,"last_ext","","Returns the data of the last extension that has been decoded.",29,null],[11,"current_frame_mut","","Current frame info as a mutable ref.",29,null],[11,"current_frame","","Current frame info as a ref.",29,null],[11,"width","","Width of the image",29,null],[11,"height","","Height of the image",29,null],[11,"fmt","gif::reader","",30,null],[11,"eq","","",30,null],[11,"set_param","","",30,null],[11,"fmt","","",31,null],[11,"set_param","","",31,null],[11,"new","","Creates a new decoder builder",32,{"inputs":[{"name":"r"}],"output":{"name":"decoder"}}],[11,"read_info","","Reads the logical screen descriptor including the global color palette",32,null],[11,"next_frame_info","","Returns the next frame info",33,null],[11,"read_next_frame","","Reads the next frame from the image.",33,null],[11,"read_into_buffer","","Reads the data of the current frame into a pre-allocated buffer.",33,null],[11,"fill_buffer","","Reads data of the current frame into a pre-allocated buffer until the buffer has been\nfilled completely.",33,null],[11,"buffer_size","","Output buffer size",33,null],[11,"line_length","","Line length of the current frame",33,null],[11,"palette","","Returns the color palette relevant for the current (next) frame",33,null],[11,"global_palette","","The global color palette",33,null],[11,"width","","Width of the image",33,null],[11,"height","","Height of the image",33,null],[11,"bg_color","","Index of the background color in the global palette",33,null],[11,"set_param","gif::encoder","",34,null],[11,"new_control_ext","","Constructor for control extension data.",35,{"inputs":[{"name":"u16"},{"name":"disposalmethod"},{"name":"bool"},{"name":"option"}],"output":{"name":"extensiondata"}}],[11,"new","","Creates a new encoder.",36,null],[11,"write_global_palette","","Writes the global color palette.",36,null],[11,"write_frame","","Writes a frame to the image.",36,null],[11,"write_extension","","Writes an extension to the image.",36,null],[11,"write_raw_extension","","Writes a raw extension to the image.",36,null],[11,"drop","","",36,null],[3,"Frame","image::gif","A GIF frame",null,null],[12,"delay","","Frame delay in units of 10 ms.",22,null],[12,"dispose","","Disposal method.",22,null],[12,"transparent","","Transparent index (if available).",22,null],[12,"needs_user_input","","True if the frame needs user input do be displayed.",22,null],[12,"top","","Offset from the top border of the canvas.",22,null],[12,"left","","Offset from the left border of the canvas.",22,null],[12,"width","","Width of the frame.",22,null],[12,"height","","Height of the frame.",22,null],[12,"interlaced","","True if the image is interlaced.",22,null],[12,"palette","","Frame local color palette if available.",22,null],[12,"buffer","","Buffer containing the image data.\nOnly indices unless configured differently.",22,null],[3,"Decoder","","GIF decoder",null,null],[3,"Encoder","","GIF encoder.",null,null],[11,"new","","Creates a new decoder that decodes the input steam ```r```",37,{"inputs":[{"name":"r"}],"output":{"name":"decoder"}}],[11,"dimensions","","",37,null],[11,"colortype","","",37,null],[11,"row_len","","",37,null],[11,"read_scanline","","",37,null],[11,"read_image","","",37,null],[11,"new","","Creates a new GIF encoder.",38,{"inputs":[{"name":"w"}],"output":{"name":"encoder"}}],[11,"encode","","Encodes a frame.",38,null],[11,"from","image","",5,{"inputs":[{"name":"decodingerror"}],"output":{"name":"imageerror"}}],[0,"tiff","","Decoding and Encoding of TIFF Images",null,null],[3,"TIFFDecoder","image::tiff","The representation of a TIFF decoder",null,null],[11,"fmt","","",39,null],[11,"new","","Create a new decoder that decodes from the stream ```r```",39,{"inputs":[{"name":"r"}],"output":{"name":"imageresult"}}],[11,"init","","Initializes the decoder.",39,null],[11,"next_image","","Reads in the next image.\nIf there is no further image in the TIFF file a format error is return.\nTo determine whether there are more images call `TIFFDecoder::more_images` instead.",39,null],[11,"more_images","","Returns `true` if there is at least one more image available.",39,null],[11,"byte_order","","Returns the byte_order",39,null],[11,"read_short","","Reads a TIFF short value",39,null],[11,"read_long","","Reads a TIFF long value",39,null],[11,"read_offset","","Reads a TIFF IFA offset/value field",39,null],[11,"goto_offset","","Moves the cursor to the specified offset",39,null],[11,"dimensions","","",39,null],[11,"colortype","","",39,null],[11,"row_len","","",39,null],[11,"read_scanline","","",39,null],[11,"read_image","","",39,null],[0,"tga","image","Decoding of TGA Images",null,null],[3,"TGADecoder","image::tga","The representation of a TGA decoder",null,null],[11,"new","","Create a new decoder that decodes from the stream `r`",40,{"inputs":[{"name":"r"}],"output":{"name":"tgadecoder"}}],[11,"dimensions","","",40,null],[11,"colortype","","",40,null],[11,"row_len","","",40,null],[11,"read_scanline","","",40,null],[11,"read_image","","",40,null],[0,"bmp","image","Decoding of BMP Images",null,null],[3,"BMPDecoder","image::bmp","A bmp decoder",null,null],[11,"new","","Create a new decoder that decodes from the stream ```r```",41,{"inputs":[{"name":"r"}],"output":{"name":"bmpdecoder"}}],[11,"dimensions","","",41,null],[11,"colortype","","",41,null],[11,"row_len","","",41,null],[11,"read_scanline","","",41,null],[11,"read_image","","",41,null],[11,"fmt","image","",5,null],[11,"fmt","","",5,null],[11,"description","","",5,null],[11,"cause","","",5,null],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"imageerror"}}],[11,"fmt","","",7,null],[11,"eq","","",7,null],[11,"clone","","",7,null],[11,"next","","",42,null],[11,"next","","",43,null],[11,"new","","Construct a new subimage",44,{"inputs":[{"name":"i"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"subimage"}}],[11,"inner_mut","","Returns a mutable reference to the wrapped image.",44,null],[11,"change_bounds","","Change the coordinates of this subimage.",44,null],[11,"to_image","","Convert this subimage to an ImageBuffer",44,null],[11,"dimensions","","",44,null],[11,"bounds","","",44,null],[11,"get_pixel","","",44,null],[11,"put_pixel","","",44,null],[11,"blend_pixel","","DEPRECATED: This method will be removed. Blend the pixel directly instead.",44,null],[11,"get_pixel_mut","","",44,null],[11,"clone","","",8,null],[11,"new_luma8","","Creates a dynamic image backed by a buffer of grey pixels.",8,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"new_luma_a8","","Creates a dynamic image backed by a buffer of grey\npixels with transparency.",8,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"new_rgb8","","Creates a dynamic image backed by a buffer of RGB pixels.",8,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"new_rgba8","","Creates a dynamic image backed by a buffer of RGBA pixels.",8,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"to_rgb","","Returns a copy of this image as an RGB image.",8,null],[11,"to_rgba","","Returns a copy of this image as an RGBA image.",8,null],[11,"to_luma","","Returns a copy of this image as a Luma image.",8,null],[11,"to_luma_alpha","","Returns a copy of this image as a LumaA image.",8,null],[11,"crop","","Return a cut out of this image delimited by the bounding rectangle.",8,null],[11,"as_rgb8","","Return a reference to an 8bit RGB image",8,null],[11,"as_mut_rgb8","","Return a mutable reference to an 8bit RGB image",8,null],[11,"as_rgba8","","Return a reference to an 8bit RGBA image",8,null],[11,"as_mut_rgba8","","Return a mutable reference to an 8bit RGBA image",8,null],[11,"as_luma8","","Return a reference to an 8bit Grayscale image",8,null],[11,"as_mut_luma8","","Return a mutable reference to an 8bit Grayscale image",8,null],[11,"as_luma_alpha8","","Return a reference to an 8bit Grayscale image with an alpha channel",8,null],[11,"as_mut_luma_alpha8","","Return a mutable reference to an 8bit Grayscale image with an alpha channel",8,null],[11,"raw_pixels","","Return this image&#39;s pixels as a byte vector.",8,null],[11,"color","","Return this image&#39;s color type.",8,null],[11,"grayscale","","Return a grayscale version of this image.",8,null],[11,"invert","","Invert the colors of this image.\nThis method operates inplace.",8,null],[11,"resize","","Resize this image using the specified filter algorithm.\nReturns a new image. The image&#39;s aspect ratio is preserved.\n```nwidth``` and ```nheight``` are the new image&#39;s dimensions",8,null],[11,"resize_exact","","Resize this image using the specified filter algorithm.\nReturns a new image. Does not preserve aspect ratio.\n```nwidth``` and ```nheight``` are the new image&#39;s dimensions",8,null],[11,"blur","","Performs a Gaussian blur on this image.\n```sigma``` is a measure of how much to blur by.",8,null],[11,"unsharpen","","Performs an unsharpen mask on this image.\n```sigma``` is the amount to blur the image by.\n```threshold``` is a control of how much to sharpen.",8,null],[11,"filter3x3","","Filters this image with the specified 3x3 kernel.",8,null],[11,"adjust_contrast","","Adjust the contrast of this image.\n```contrast``` is the amount to adjust the contrast by.\nNegative values decrease the contrast and positive values increase the contrast.",8,null],[11,"brighten","","Brighten the pixels of this image.\n```value``` is the amount to brighten each pixel by.\nNegative values decrease the brightness and positive values increase it.",8,null],[11,"flipv","","Flip this image vertically",8,null],[11,"fliph","","Flip this image horizontally",8,null],[11,"rotate90","","Rotate this image 90 degrees clockwise.",8,null],[11,"rotate180","","Rotate this image 180 degrees clockwise.",8,null],[11,"rotate270","","Rotate this image 270 degrees clockwise.",8,null],[11,"save","","Encode this image and write it to ```w```",8,null],[11,"dimensions","","",8,null],[11,"bounds","","",8,null],[11,"get_pixel","","",8,null],[11,"put_pixel","","",8,null],[11,"blend_pixel","","DEPRECATED: Use iterator `pixels_mut` to blend the pixels directly.",8,null],[11,"get_pixel_mut","","DEPRECATED: Do not use is function: It is unimplemented!",8,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"hash","","",2,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"channel_count","","",2,{"inputs":[],"output":{"name":"u8"}}],[11,"color_model","","",2,{"inputs":[],"output":{"name":"str"}}],[11,"color_type","","",2,{"inputs":[],"output":{"name":"colortype"}}],[11,"channels","","",2,null],[11,"channels_mut","","",2,null],[11,"channels4","","",2,null],[11,"from_channels","","",2,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"rgb"}}],[11,"from_slice","","",2,null],[11,"from_slice_mut","","",2,null],[11,"to_rgb","","",2,null],[11,"to_rgba","","",2,null],[11,"to_luma","","",2,null],[11,"to_luma_alpha","","",2,null],[11,"map","","",2,null],[11,"apply","","",2,null],[11,"map_with_alpha","","",2,null],[11,"apply_with_alpha","","",2,null],[11,"map2","","",2,null],[11,"apply2","","",2,null],[11,"invert","","",2,null],[11,"blend","","",2,null],[11,"index","","",2,null],[11,"index_mut","","",2,null],[11,"hash","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"channel_count","","",0,{"inputs":[],"output":{"name":"u8"}}],[11,"color_model","","",0,{"inputs":[],"output":{"name":"str"}}],[11,"color_type","","",0,{"inputs":[],"output":{"name":"colortype"}}],[11,"channels","","",0,null],[11,"channels_mut","","",0,null],[11,"channels4","","",0,null],[11,"from_channels","","",0,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"luma"}}],[11,"from_slice","","",0,null],[11,"from_slice_mut","","",0,null],[11,"to_rgb","","",0,null],[11,"to_rgba","","",0,null],[11,"to_luma","","",0,null],[11,"to_luma_alpha","","",0,null],[11,"map","","",0,null],[11,"apply","","",0,null],[11,"map_with_alpha","","",0,null],[11,"apply_with_alpha","","",0,null],[11,"map2","","",0,null],[11,"apply2","","",0,null],[11,"invert","","",0,null],[11,"blend","","",0,null],[11,"index","","",0,null],[11,"index_mut","","",0,null],[11,"hash","","",3,null],[11,"fmt","","",3,null],[11,"clone","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"channel_count","","",3,{"inputs":[],"output":{"name":"u8"}}],[11,"color_model","","",3,{"inputs":[],"output":{"name":"str"}}],[11,"color_type","","",3,{"inputs":[],"output":{"name":"colortype"}}],[11,"channels","","",3,null],[11,"channels_mut","","",3,null],[11,"channels4","","",3,null],[11,"from_channels","","",3,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"rgba"}}],[11,"from_slice","","",3,null],[11,"from_slice_mut","","",3,null],[11,"to_rgb","","",3,null],[11,"to_rgba","","",3,null],[11,"to_luma","","",3,null],[11,"to_luma_alpha","","",3,null],[11,"map","","",3,null],[11,"apply","","",3,null],[11,"map_with_alpha","","",3,null],[11,"apply_with_alpha","","",3,null],[11,"map2","","",3,null],[11,"apply2","","",3,null],[11,"invert","","",3,null],[11,"blend","","",3,null],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"hash","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"channel_count","","",1,{"inputs":[],"output":{"name":"u8"}}],[11,"color_model","","",1,{"inputs":[],"output":{"name":"str"}}],[11,"color_type","","",1,{"inputs":[],"output":{"name":"colortype"}}],[11,"channels","","",1,null],[11,"channels_mut","","",1,null],[11,"channels4","","",1,null],[11,"from_channels","","",1,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"lumaa"}}],[11,"from_slice","","",1,null],[11,"from_slice_mut","","",1,null],[11,"to_rgb","","",1,null],[11,"to_rgba","","",1,null],[11,"to_luma","","",1,null],[11,"to_luma_alpha","","",1,null],[11,"map","","",1,null],[11,"apply","","",1,null],[11,"map_with_alpha","","",1,null],[11,"apply_with_alpha","","",1,null],[11,"map2","","",1,null],[11,"apply2","","",1,null],[11,"invert","","",1,null],[11,"blend","","",1,null],[11,"index","","",1,null],[11,"index_mut","","",1,null],[11,"from_raw","","Contructs a buffer from a generic container\n(for example a `Vec` or a slice)",45,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"container"}],"output":{"name":"option"}}],[11,"into_raw","","Returns the underlying raw buffer",45,null],[11,"dimensions","","The width and height of this image.",45,null],[11,"width","","The width of this image.",45,null],[11,"height","","The height of this image.",45,null],[11,"pixels","","Returns an iterator over the pixels of this image.",45,null],[11,"enumerate_pixels","","Enumerates over the pixels of the image.\nThe iterator yields the coordinates of each pixel\nalong with a reference to them.",45,null],[11,"get_pixel","","Gets a reference to the pixel at location `(x, y)`",45,null],[11,"pixels_mut","","Returns an iterator over the mutable pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with a mutable reference to them.",45,null],[11,"enumerate_pixels_mut","","Enumerates over the pixels of the image.",45,null],[11,"get_pixel_mut","","Gets a reference to the mutable pixel at location `(x, y)`",45,null],[11,"put_pixel","","Puts a pixel at location `(x, y)`",45,null],[11,"save","","Saves the buffer to a file at the path specified.",45,null],[11,"deref","","",45,null],[11,"deref_mut","","",45,null],[11,"index","","",45,null],[11,"index_mut","","",45,null],[11,"clone","","",45,null],[11,"dimensions","","",45,null],[11,"bounds","","",45,null],[11,"get_pixel","","",45,null],[11,"get_pixel_mut","","",45,null],[11,"unsafe_get_pixel","","Returns the pixel located at (x, y), ignoring bounds checking.",45,null],[11,"put_pixel","","",45,null],[11,"unsafe_put_pixel","","Puts a pixel at location (x, y), ignoring bounds checking.",45,null],[11,"blend_pixel","","Put a pixel at location (x, y), taking into account alpha channels",45,null],[11,"new","","Creates a new image buffer based on a `Vec&lt;P::Subpixel&gt;`.",45,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"imagebuffer"}}],[11,"from_pixel","","Constructs a new ImageBuffer by copying a pixel",45,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":{"name":"imagebuffer"}}],[11,"from_fn","","Constructs a new ImageBuffer by repeated application of the supplied function.\nThe arguments to the function are the pixel&#39;s x and y coordinates.",45,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"f"}],"output":{"name":"imagebuffer"}}],[11,"from_vec","","Creates an image buffer out of an existing buffer.\nReturns None if the buffer is not big enough.",45,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"vec"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the image buffer and returns the underlying data\nas an owned buffer",45,null],[11,"convert","","",45,null],[11,"new","","Contructs a new frame iterator",46,{"inputs":[{"name":"vec"}],"output":{"name":"frames"}}],[11,"clone","","",47,null],[11,"new","","Contructs a new frame",47,{"inputs":[{"name":"rgbaimage"}],"output":{"name":"frame"}}],[11,"from_parts","","Contructs a new frame",47,{"inputs":[{"name":"rgbaimage"},{"name":"u32"},{"name":"u32"},{"name":"ratio"}],"output":{"name":"frame"}}],[11,"delay","","Delay of this frame",47,null],[11,"buffer","","Returns the image buffer",47,null],[11,"into_buffer","","Returns the image buffer",47,null],[11,"left","","Returns the x offset",47,null],[11,"top","","Returns the y offset",47,null],[11,"next","","",46,null],[6,"ImageResult","","Result of an image decoding/encoding process",null,null],[6,"RgbImage","","Sendable Rgb image buffer",null,null],[6,"RgbaImage","","Sendable Rgb + alpha channel image buffer",null,null],[6,"GrayImage","","Sendable grayscale image buffer",null,null],[6,"GrayAlphaImage","","Sendable grayscale + alpha channel image buffer",null,null],[8,"ImageDecoder","","The trait that all decoders implement",null,null],[10,"dimensions","","Returns a tuple containing the width and height of the image",48,null],[10,"colortype","","Returns the color type of the image e.g. RGB(8) (8bit RGB)",48,null],[10,"row_len","","Returns the length in bytes of one decoded row of the image",48,null],[10,"read_scanline","","Reads one row from the image into ```buf``` and returns the row index",48,null],[10,"read_image","","Decodes the entire image and return it as a Vector",48,null],[11,"is_animated","","Returns true if the image is animated",48,null],[11,"into_frames","","Returns the frames of the image",48,null],[11,"load_rect","","Decodes a specific region of the image, represented by the rectangle\nstarting from ```x``` and ```y``` and having ```length``` and ```width```",48,null],[8,"GenericImage","","A trait for manipulating images.",null,null],[16,"Pixel","","The type of pixel.",49,null],[10,"dimensions","","The width and height of this image.",49,null],[11,"width","","The width of this image.",49,null],[11,"height","","The height of this image.",49,null],[10,"bounds","","The bounding rectangle of this image.",49,null],[11,"in_bounds","","Returns true if this x, y coordinate is contained inside the image.",49,null],[10,"get_pixel","","Returns the pixel located at (x, y)",49,null],[10,"get_pixel_mut","","Puts a pixel at location (x, y)",49,null],[11,"unsafe_get_pixel","","Returns the pixel located at (x, y)",49,null],[10,"put_pixel","","Put a pixel at location (x, y)",49,null],[11,"unsafe_put_pixel","","Puts a pixel at location (x, y)",49,null],[10,"blend_pixel","","Put a pixel at location (x, y), taking into account alpha channels",49,null],[11,"pixels","","Returns an Iterator over the pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with their value",49,null],[11,"pixels_mut","","Returns an Iterator over mutable pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with a mutable reference to them.",49,null],[11,"copy_from","","Copies all of the pixels from another image into this image.",49,null],[11,"sub_image","","Returns a subimage that is a view into this image.",49,null],[8,"Pixel","","A generalized pixel.",null,null],[16,"Subpixel","","The underlying subpixel type.",50,null],[10,"channel_count","","Returns the number of channels of this pixel type.",50,{"inputs":[],"output":{"name":"u8"}}],[10,"channels","","Returns the components as a slice.",50,null],[10,"channels_mut","","Returns the components as a mutable slice",50,null],[10,"color_model","","Returns a string that can help to interprete the meaning each channel\nSee [gimp babl](http://gegl.org/babl/).",50,{"inputs":[],"output":{"name":"str"}}],[10,"color_type","","Returns the ColorType for this pixel format",50,{"inputs":[],"output":{"name":"colortype"}}],[10,"channels4","","Returns the channels of this pixel as a 4 tuple. If the pixel\nhas less than 4 channels the remainder is filled with the maximum value",50,null],[10,"from_channels","","Construct a pixel from the 4 channels a, b, c and d.\nIf the pixel does not contain 4 channels the extra are ignored.",50,{"inputs":[{"name":"subpixel"},{"name":"subpixel"},{"name":"subpixel"},{"name":"subpixel"}],"output":{"name":"self"}}],[10,"from_slice","","Returns a view into a slice.",50,null],[10,"from_slice_mut","","Returns mutable view into a mutable slice.",50,null],[10,"to_rgb","","Convert this pixel to RGB",50,null],[10,"to_rgba","","Convert this pixel to RGB with an alpha channel",50,null],[10,"to_luma","","Convert this pixel to luma",50,null],[10,"to_luma_alpha","","Convert this pixel to luma with an alpha channel",50,null],[10,"map","","Apply the function ```f``` to each channel of this pixel.",50,null],[10,"apply","","Apply the function ```f``` to each channel of this pixel.",50,null],[10,"map_with_alpha","","Apply the function ```f``` to each channel except the alpha channel.\nApply the function ```g``` to the alpha channel.",50,null],[10,"apply_with_alpha","","Apply the function ```f``` to each channel except the alpha channel.\nApply the function ```g``` to the alpha channel. Works in-place.",50,null],[10,"map2","","Apply the function ```f``` to each channel of this pixel and\n```other``` pairwise.",50,null],[10,"apply2","","Apply the function ```f``` to each channel of this pixel and\n```other``` pairwise. Works in-place.",50,null],[10,"invert","","Invert this pixel",50,null],[10,"blend","","Blend the color of a given pixel into ourself, taking into account alpha channels",50,null],[8,"ConvertBuffer","","Provides color conversions for whole image buffers.",null,null],[10,"convert","","Converts `self` to a buffer of type T",51,null],[8,"Primitive","","Primitive trait from old stdlib",null,null],[11,"is_animated","","Returns true if the image is animated",48,null],[11,"into_frames","","Returns the frames of the image",48,null],[11,"load_rect","","Decodes a specific region of the image, represented by the rectangle\nstarting from ```x``` and ```y``` and having ```length``` and ```width```",48,null],[11,"width","","The width of this image.",49,null],[11,"height","","The height of this image.",49,null],[11,"in_bounds","","Returns true if this x, y coordinate is contained inside the image.",49,null],[11,"unsafe_get_pixel","","Returns the pixel located at (x, y)",49,null],[11,"unsafe_put_pixel","","Puts a pixel at location (x, y)",49,null],[11,"pixels","","Returns an Iterator over the pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with their value",49,null],[11,"pixels_mut","","Returns an Iterator over mutable pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with a mutable reference to them.",49,null],[11,"copy_from","","Copies all of the pixels from another image into this image.",49,null],[11,"sub_image","","Returns a subimage that is a view into this image.",49,null],[11,"expand_palette","","Expands a color palette by re-using the existing buffer.\nAssumes 8 bit per pixel. Uses an optionally transparent index to\nadjust it&#39;s alpha value accordingly.",52,null]],"paths":[[3,"Luma"],[3,"LumaA"],[3,"Rgb"],[3,"Rgba"],[4,"ColorType"],[4,"ImageError"],[4,"FilterType"],[4,"ImageFormat"],[4,"DynamicImage"],[3,"NeuQuant"],[8,"ColorMap"],[3,"BiLevel"],[3,"WebpDecoder"],[3,"Frame"],[3,"VP8Decoder"],[3,"PPMEncoder"],[3,"PNGDecoder"],[3,"PNGEncoder"],[3,"ICODecoder"],[3,"ICOEncoder"],[3,"JPEGEncoder"],[3,"JPEGDecoder"],[3,"Frame"],[4,"DisposalMethod"],[4,"Block"],[4,"Extension"],[4,"DecodingError"],[4,"Extensions"],[4,"Decoded"],[3,"StreamingDecoder"],[4,"ColorOutput"],[3,"MemoryLimit"],[3,"Decoder"],[3,"Reader"],[4,"Repeat"],[4,"ExtensionData"],[3,"Encoder"],[3,"Decoder"],[3,"Encoder"],[3,"TIFFDecoder"],[3,"TGADecoder"],[3,"BMPDecoder"],[3,"Pixels"],[3,"MutPixels"],[3,"SubImage"],[3,"ImageBuffer"],[3,"Frames"],[3,"Frame"],[8,"ImageDecoder"],[8,"GenericImage"],[8,"Pixel"],[8,"ConvertBuffer"],[6,"GrayImage"]]};
searchIndex["la"] = {"doc":"","items":[[3,"CholeskyDecomposition","la","Cholesky Decomposition (for a real valued matrix).",null,null],[3,"EigenDecomposition","","Eigenvalues and eigenvectors of a real matrix.",null,null],[3,"LUDecomposition","","LU Decomposition.",null,null],[3,"QRDecomposition","","QR Decomposition.",null,null],[3,"SVD","","Singular Value Decomposition.",null,null],[3,"Matrix","","",null,null],[0,"macros","","",null,null],[11,"get_mut_data","","",0,null],[11,"get_mref","","",0,null],[11,"mmap","","",0,null],[11,"mneg","","",0,null],[11,"mscale","","",0,null],[11,"madd","","",0,null],[11,"msub","","",0,null],[11,"melem_mul","","",0,null],[11,"melem_div","","",0,null],[11,"mmul","","",0,null],[11,"set","","",0,null],[11,"mt","","",0,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"new","","",0,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"vec"}],"output":{"name":"matrix"}}],[11,"dirty","","",0,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"matrix"}}],[11,"vector","","",0,{"inputs":[{"name":"vec"}],"output":{"name":"matrix"}}],[11,"row_vector","","",0,{"inputs":[{"name":"vec"}],"output":{"name":"matrix"}}],[11,"rows","","",0,null],[11,"cols","","",0,null],[11,"get_data","","",0,null],[11,"get_ref","","",0,null],[11,"map","","",0,null],[11,"reduce","","",0,null],[11,"is_square","","",0,null],[11,"is_not_square","","",0,null],[11,"id","","",0,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"matrix"}}],[11,"zero","","",0,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"matrix"}}],[11,"diag","","",0,{"inputs":[{"name":"vec"}],"output":{"name":"matrix"}}],[11,"block_diag","","",0,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"vec"}],"output":{"name":"matrix"}}],[11,"zero_vector","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"matrix"}}],[11,"one_vector","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"matrix"}}],[11,"scale","","",0,null],[11,"elem_mul","","",0,null],[11,"elem_div","","",0,null],[11,"dot","","",0,null],[11,"get","","",0,null],[11,"cr","","",0,null],[11,"cb","","",0,null],[11,"t","","",0,null],[11,"minor","","",0,null],[11,"sub_matrix","","",0,null],[11,"get_columns","","",0,null],[11,"get_rows","","",0,null],[11,"permute","","",0,null],[11,"permute_rows","","",0,null],[11,"permute_columns","","",0,null],[11,"filter_rows","","",0,null],[11,"filter_columns","","",0,null],[11,"select_rows","","",0,null],[11,"select_columns","","",0,null],[11,"print","","",0,null],[11,"fmt","","",0,null],[11,"random","","",0,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"matrix"}}],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add","","",0,null],[11,"sub","","",0,null],[11,"sub","","",0,null],[11,"mul","","",0,null],[11,"mul","","",0,null],[11,"index","","",0,null],[11,"bitor","","",0,null],[11,"trace","","",0,null],[11,"det","","",0,null],[11,"solve","","",0,null],[11,"inverse","","",0,null],[11,"is_singular","","",0,null],[11,"is_non_singular","","",0,null],[11,"pinverse","","",0,null],[11,"vector_euclidean_norm","","",0,null],[11,"length","","",0,null],[11,"vector_1_norm","","",0,null],[11,"vector_2_norm","","",0,null],[11,"vector_p_norm","","",0,null],[11,"frobenius_norm","","",0,null],[11,"vector_inf_norm","","",0,null],[11,"is_symmetric","","",0,null],[11,"is_non_symmetric","","",0,null],[11,"approx_eq","","",0,null],[0,"util","","",null,null],[5,"read_csv","la::util","",null,{"inputs":[{"name":"str"},{"name":"fn"}],"output":{"name":"matrix"}}],[11,"new","la","",1,{"inputs":[{"name":"matrix"}],"output":{"name":"option"}}],[11,"get_l","","",1,null],[11,"solve","","",1,null],[11,"new","","",2,{"inputs":[{"name":"matrix"}],"output":{"name":"eigendecomposition"}}],[11,"get_v","","",2,null],[11,"get_real_eigenvalues","","",2,null],[11,"get_imag_eigenvalues","","",2,null],[11,"get_d","","",2,null],[11,"new","","",3,{"inputs":[{"name":"matrix"}],"output":{"name":"ludecomposition"}}],[11,"is_singular","","",3,null],[11,"is_non_singular","","",3,null],[11,"get_l","","",3,null],[11,"get_u","","",3,null],[11,"get_p","","",3,null],[11,"get_piv","","",3,null],[11,"det","","",3,null],[11,"solve","","",3,null],[11,"new","","",4,{"inputs":[{"name":"matrix"}],"output":{"name":"qrdecomposition"}}],[11,"is_full_rank","","",4,null],[11,"get_h","","",4,null],[11,"get_r","","",4,null],[11,"get_q","","",4,null],[11,"solve","","",4,null],[11,"new","","Calculates SVD.",5,{"inputs":[{"name":"matrix"}],"output":{"name":"svd"}}],[11,"get_u","","",5,null],[11,"get_s","","",5,null],[11,"get_v","","",5,null],[11,"rank","","",5,null],[11,"direct","","Calculates SVD using the direct method. Note that calculating it this way\nis not numerically stable, so it is mostly useful for testing purposes.",5,{"inputs":[{"name":"matrix"}],"output":{"name":"svd"}}],[8,"ApproxEq","","Trait for testing approximate equality",null,null],[10,"approx_epsilon","","",6,{"inputs":[],"output":{"name":"eps"}}],[10,"approx_eq","","",6,null],[10,"approx_eq_eps","","",6,null],[14,"m_one!","","Macro for building matrices.",null,null],[14,"m_rec!","","Helper macro for m!",null,null],[14,"m!","","Macro for building matrices.",null,null]],"paths":[[3,"Matrix"],[3,"CholeskyDecomposition"],[3,"EigenDecomposition"],[3,"LUDecomposition"],[3,"QRDecomposition"],[3,"SVD"],[8,"ApproxEq"]]};
searchIndex["enum_primitive"] = {"doc":"This crate exports a macro `enum_from_primitive!` that wraps an\n`enum` declaration and automatically adds an implementation of\n`num::FromPrimitive` (reexported here), to allow conversion from\nprimitive integers to the enum.  It therefore provides an\nalternative to the built-in `#[derive(FromPrimitive)]`, which\nrequires the unstable `std::num::FromPrimitive` and is disabled in\nRust 1.0.","items":[[11,"is_some","core::option","Returns `true` if the option is a `Some` value",0,null],[11,"is_none","","Returns `true` if the option is a `None` value",0,null],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",0,null],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",0,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",0,null],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",0,null],[11,"unwrap_or","","Returns the contained value or a default.",0,null],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",0,null],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",0,null],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",0,null],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",0,null],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",0,null],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",0,null],[11,"iter","","Returns an iterator over the possibly contained value.",0,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",0,null],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",0,null],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",0,null],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",0,null],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",0,null],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",0,null],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",0,null],[11,"unwrap_or_default","","Returns the contained value or a default",0,null],[11,"hash","core::num","",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"wrapping"}}],[11,"clone","","",1,null],[11,"cmp","","",1,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"gt","","",1,null],[11,"ge","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"shl","","",1,null],[11,"shl_assign","","",1,null],[11,"shr","","",1,null],[11,"shr_assign","","",1,null],[11,"shl","","",1,null],[11,"shl_assign","","",1,null],[11,"shr","","",1,null],[11,"shr_assign","","",1,null],[11,"shl","","",1,null],[11,"shl_assign","","",1,null],[11,"shr","","",1,null],[11,"shr_assign","","",1,null],[11,"shl","","",1,null],[11,"shl_assign","","",1,null],[11,"shr","","",1,null],[11,"shr_assign","","",1,null],[11,"shl","","",1,null],[11,"shl_assign","","",1,null],[11,"shr","","",1,null],[11,"shr_assign","","",1,null],[11,"shl","","",1,null],[11,"shl_assign","","",1,null],[11,"shr","","",1,null],[11,"shr_assign","","",1,null],[11,"shl","","",1,null],[11,"shl_assign","","",1,null],[11,"shr","","",1,null],[11,"shr_assign","","",1,null],[11,"shl","","",1,null],[11,"shl_assign","","",1,null],[11,"shr","","",1,null],[11,"shr_assign","","",1,null],[11,"shl","","",1,null],[11,"shl_assign","","",1,null],[11,"shr","","",1,null],[11,"shr_assign","","",1,null],[11,"shl","","",1,null],[11,"shl_assign","","",1,null],[11,"shr","","",1,null],[11,"shr_assign","","",1,null],[11,"add","","",1,null],[11,"add_assign","","",1,null],[11,"sub","","",1,null],[11,"sub_assign","","",1,null],[11,"mul","","",1,null],[11,"mul_assign","","",1,null],[11,"div","","",1,null],[11,"div_assign","","",1,null],[11,"rem","","",1,null],[11,"rem_assign","","",1,null],[11,"not","","",1,null],[11,"bitxor","","",1,null],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,null],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,null],[11,"bitand_assign","","",1,null],[11,"neg","","",1,null],[11,"add","","",1,null],[11,"add_assign","","",1,null],[11,"sub","","",1,null],[11,"sub_assign","","",1,null],[11,"mul","","",1,null],[11,"mul_assign","","",1,null],[11,"div","","",1,null],[11,"div_assign","","",1,null],[11,"rem","","",1,null],[11,"rem_assign","","",1,null],[11,"not","","",1,null],[11,"bitxor","","",1,null],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,null],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,null],[11,"bitand_assign","","",1,null],[11,"neg","","",1,null],[11,"add","","",1,null],[11,"add_assign","","",1,null],[11,"sub","","",1,null],[11,"sub_assign","","",1,null],[11,"mul","","",1,null],[11,"mul_assign","","",1,null],[11,"div","","",1,null],[11,"div_assign","","",1,null],[11,"rem","","",1,null],[11,"rem_assign","","",1,null],[11,"not","","",1,null],[11,"bitxor","","",1,null],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,null],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,null],[11,"bitand_assign","","",1,null],[11,"neg","","",1,null],[11,"add","","",1,null],[11,"add_assign","","",1,null],[11,"sub","","",1,null],[11,"sub_assign","","",1,null],[11,"mul","","",1,null],[11,"mul_assign","","",1,null],[11,"div","","",1,null],[11,"div_assign","","",1,null],[11,"rem","","",1,null],[11,"rem_assign","","",1,null],[11,"not","","",1,null],[11,"bitxor","","",1,null],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,null],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,null],[11,"bitand_assign","","",1,null],[11,"neg","","",1,null],[11,"add","","",1,null],[11,"add_assign","","",1,null],[11,"sub","","",1,null],[11,"sub_assign","","",1,null],[11,"mul","","",1,null],[11,"mul_assign","","",1,null],[11,"div","","",1,null],[11,"div_assign","","",1,null],[11,"rem","","",1,null],[11,"rem_assign","","",1,null],[11,"not","","",1,null],[11,"bitxor","","",1,null],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,null],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,null],[11,"bitand_assign","","",1,null],[11,"neg","","",1,null],[11,"add","","",1,null],[11,"add_assign","","",1,null],[11,"sub","","",1,null],[11,"sub_assign","","",1,null],[11,"mul","","",1,null],[11,"mul_assign","","",1,null],[11,"div","","",1,null],[11,"div_assign","","",1,null],[11,"rem","","",1,null],[11,"rem_assign","","",1,null],[11,"not","","",1,null],[11,"bitxor","","",1,null],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,null],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,null],[11,"bitand_assign","","",1,null],[11,"neg","","",1,null],[11,"add","","",1,null],[11,"add_assign","","",1,null],[11,"sub","","",1,null],[11,"sub_assign","","",1,null],[11,"mul","","",1,null],[11,"mul_assign","","",1,null],[11,"div","","",1,null],[11,"div_assign","","",1,null],[11,"rem","","",1,null],[11,"rem_assign","","",1,null],[11,"not","","",1,null],[11,"bitxor","","",1,null],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,null],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,null],[11,"bitand_assign","","",1,null],[11,"neg","","",1,null],[11,"add","","",1,null],[11,"add_assign","","",1,null],[11,"sub","","",1,null],[11,"sub_assign","","",1,null],[11,"mul","","",1,null],[11,"mul_assign","","",1,null],[11,"div","","",1,null],[11,"div_assign","","",1,null],[11,"rem","","",1,null],[11,"rem_assign","","",1,null],[11,"not","","",1,null],[11,"bitxor","","",1,null],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,null],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,null],[11,"bitand_assign","","",1,null],[11,"neg","","",1,null],[11,"add","","",1,null],[11,"add_assign","","",1,null],[11,"sub","","",1,null],[11,"sub_assign","","",1,null],[11,"mul","","",1,null],[11,"mul_assign","","",1,null],[11,"div","","",1,null],[11,"div_assign","","",1,null],[11,"rem","","",1,null],[11,"rem_assign","","",1,null],[11,"not","","",1,null],[11,"bitxor","","",1,null],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,null],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,null],[11,"bitand_assign","","",1,null],[11,"neg","","",1,null],[11,"add","","",1,null],[11,"add_assign","","",1,null],[11,"sub","","",1,null],[11,"sub_assign","","",1,null],[11,"mul","","",1,null],[11,"mul_assign","","",1,null],[11,"div","","",1,null],[11,"div_assign","","",1,null],[11,"rem","","",1,null],[11,"rem_assign","","",1,null],[11,"not","","",1,null],[11,"bitxor","","",1,null],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,null],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,null],[11,"bitand_assign","","",1,null],[11,"neg","","",1,null],[11,"eq","core::num::dec2flt","",2,null],[11,"ne","","",2,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"fmt","","",2,null],[11,"fmt","core::num","",3,null],[11,"eq","","",3,null],[11,"clone","","",3,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"fmt","","",4,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"hash","core::nonzero","",6,null],[11,"fmt","","",6,null],[11,"partial_cmp","","",6,null],[11,"lt","","",6,null],[11,"le","","",6,null],[11,"gt","","",6,null],[11,"ge","","",6,null],[11,"cmp","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"clone","","",6,null],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",6,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",6,null],[11,"new","core::ptr","Creates a new `Unique`.",7,null],[11,"get","","Dereferences the content.",7,null],[11,"get_mut","","Mutably dereferences the content.",7,null],[11,"deref","","",7,null],[11,"fmt","","",7,null],[11,"new","","Creates a new `Shared`.",8,null],[11,"clone","","",8,null],[11,"deref","","",8,null],[11,"fmt","","",8,null],[11,"hash","core::marker","",9,null],[11,"eq","","",9,null],[11,"partial_cmp","","",9,null],[11,"cmp","","",9,null],[11,"clone","","",9,null],[11,"default","","",9,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",10,null],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"clone","","",11,null],[11,"fmt","","",11,null],[11,"contains","","# Examples",11,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"clone","","",12,null],[11,"fmt","","",12,null],[11,"contains","","# Examples",12,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"clone","","",13,null],[11,"fmt","","",13,null],[11,"contains","","# Examples",13,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"clone","","",14,null],[11,"fmt","","",14,null],[11,"from","","",14,{"inputs":[{"name":"range"}],"output":{"name":"rangeinclusive"}}],[11,"contains","","# Examples",14,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"clone","","",15,null],[11,"fmt","","",15,null],[11,"contains","","# Examples",15,null],[11,"hash","core::cmp","",16,null],[11,"fmt","","",16,null],[11,"eq","","",16,null],[11,"clone","","",16,null],[11,"reverse","","Reverse the `Ordering`.",16,null],[11,"cmp","","",16,null],[11,"partial_cmp","","",16,null],[11,"fmt","","",17,null],[11,"fmt","","",17,null],[11,"is","","Returns true if the boxed type is the same as `T`",17,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",17,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",17,null],[11,"is","","Forwards to the method defined on the type `Any`.",17,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",17,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",17,null],[11,"hash","core::any","",18,null],[11,"fmt","","",18,null],[11,"eq","","",18,null],[11,"ne","","",18,null],[11,"clone","","",18,null],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",18,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",19,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",20,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",21,null],[11,"clone","","",21,null],[11,"new","","Creates a new `AtomicBool`.",19,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",19,null],[11,"store","","Stores a value into the bool.",19,null],[11,"swap","","Stores a value into the bool, returning the old value.",19,null],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",19,null],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",19,null],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",19,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",19,null],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",19,null],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",19,null],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",19,null],[11,"new","","Creates a new `AtomicPtr`.",20,null],[11,"load","","Loads a value from the pointer.",20,null],[11,"store","","Stores a value into the pointer.",20,null],[11,"swap","","Stores a value into the pointer, returning the old value.",20,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",20,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",20,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",20,null],[11,"default","","",22,{"inputs":[],"output":{"name":"atomici8"}}],[11,"fmt","","",22,null],[11,"new","","Creates a new atomic integer.",22,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"load","","Loads a value from the atomic integer.",22,null],[11,"store","","Stores a value into the atomic integer.",22,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",22,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"fetch_add","","Add to the current value, returning the previous value.",22,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",22,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",22,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",22,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",22,null],[11,"default","","",23,{"inputs":[],"output":{"name":"atomicu8"}}],[11,"fmt","","",23,null],[11,"new","","Creates a new atomic integer.",23,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"load","","Loads a value from the atomic integer.",23,null],[11,"store","","Stores a value into the atomic integer.",23,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",23,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"fetch_add","","Add to the current value, returning the previous value.",23,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",23,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",23,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",23,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",23,null],[11,"default","","",24,{"inputs":[],"output":{"name":"atomici16"}}],[11,"fmt","","",24,null],[11,"new","","Creates a new atomic integer.",24,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"load","","Loads a value from the atomic integer.",24,null],[11,"store","","Stores a value into the atomic integer.",24,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",24,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"fetch_add","","Add to the current value, returning the previous value.",24,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",24,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",24,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",24,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",24,null],[11,"default","","",25,{"inputs":[],"output":{"name":"atomicu16"}}],[11,"fmt","","",25,null],[11,"new","","Creates a new atomic integer.",25,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"load","","Loads a value from the atomic integer.",25,null],[11,"store","","Stores a value into the atomic integer.",25,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",25,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"fetch_add","","Add to the current value, returning the previous value.",25,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",25,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",25,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",25,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",25,null],[11,"default","","",26,{"inputs":[],"output":{"name":"atomici32"}}],[11,"fmt","","",26,null],[11,"new","","Creates a new atomic integer.",26,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"load","","Loads a value from the atomic integer.",26,null],[11,"store","","Stores a value into the atomic integer.",26,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",26,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"fetch_add","","Add to the current value, returning the previous value.",26,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",26,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",26,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",26,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",26,null],[11,"default","","",27,{"inputs":[],"output":{"name":"atomicu32"}}],[11,"fmt","","",27,null],[11,"new","","Creates a new atomic integer.",27,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"load","","Loads a value from the atomic integer.",27,null],[11,"store","","Stores a value into the atomic integer.",27,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",27,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"fetch_add","","Add to the current value, returning the previous value.",27,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",27,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",27,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",27,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",27,null],[11,"default","","",28,{"inputs":[],"output":{"name":"atomici64"}}],[11,"fmt","","",28,null],[11,"new","","Creates a new atomic integer.",28,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"load","","Loads a value from the atomic integer.",28,null],[11,"store","","Stores a value into the atomic integer.",28,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",28,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"fetch_add","","Add to the current value, returning the previous value.",28,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",28,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",28,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",28,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",28,null],[11,"default","","",29,{"inputs":[],"output":{"name":"atomicu64"}}],[11,"fmt","","",29,null],[11,"new","","Creates a new atomic integer.",29,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"load","","Loads a value from the atomic integer.",29,null],[11,"store","","Stores a value into the atomic integer.",29,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",29,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"fetch_add","","Add to the current value, returning the previous value.",29,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",29,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",29,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",29,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",29,null],[11,"default","","",30,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"fmt","","",30,null],[11,"new","","Creates a new atomic integer.",30,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the atomic integer.",30,null],[11,"store","","Stores a value into the atomic integer.",30,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",30,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"fetch_add","","Add to the current value, returning the previous value.",30,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",30,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",30,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",30,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",30,null],[11,"default","","",31,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"fmt","","",31,null],[11,"new","","Creates a new atomic integer.",31,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the atomic integer.",31,null],[11,"store","","Stores a value into the atomic integer.",31,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",31,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",31,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",31,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",31,null],[11,"fetch_add","","Add to the current value, returning the previous value.",31,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",31,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",31,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",31,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",31,null],[11,"fmt","","",19,null],[11,"fmt","","",20,null],[11,"new","core::cell","Creates a new `Cell` containing the given value.",32,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",32,null],[11,"set","","Sets the contained value.",32,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",32,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",32,null],[11,"clone","","",32,null],[11,"default","","",32,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",32,null],[11,"partial_cmp","","",32,null],[11,"lt","","",32,null],[11,"le","","",32,null],[11,"gt","","",32,null],[11,"ge","","",32,null],[11,"cmp","","",32,null],[11,"fmt","","",33,null],[11,"eq","","",33,null],[11,"clone","","",33,null],[11,"new","","Creates a new `RefCell` containing `value`.",34,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",34,null],[11,"borrow_state","","Query the current state of this `RefCell`",34,null],[11,"borrow","","Immutably borrows the wrapped value.",34,null],[11,"borrow_mut","","Mutably borrows the wrapped value.",34,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",34,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",34,null],[11,"clone","","",34,null],[11,"default","","",34,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",34,null],[11,"partial_cmp","","",34,null],[11,"lt","","",34,null],[11,"le","","",34,null],[11,"gt","","",34,null],[11,"ge","","",34,null],[11,"cmp","","",34,null],[11,"deref","","",35,null],[11,"clone","","Copies a `Ref`.",35,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",35,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",35,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",36,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",36,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"deref","","",36,null],[11,"deref_mut","","",36,null],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",37,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",37,null],[11,"get","","Gets a mutable pointer to the wrapped value.",37,null],[11,"default","","",37,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"fmt","core::char","",38,null],[11,"clone","","",38,null],[11,"next","","",38,null],[11,"size_hint","","",38,null],[11,"last","","",38,null],[11,"fmt","","",39,null],[11,"clone","","",39,null],[11,"next","","",39,null],[11,"size_hint","","",39,null],[11,"count","","",39,null],[11,"nth","","",39,null],[11,"last","","",39,null],[11,"fmt","","",40,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",40,null],[11,"next","","",40,null],[11,"size_hint","","",40,null],[11,"fmt","","",41,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",41,null],[11,"next","","",41,null],[11,"size_hint","","",41,null],[11,"fmt","core::iter::range","",42,null],[11,"clone","","",42,null],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",12,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",11,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",14,null],[11,"next","core::iter::range","",42,null],[11,"size_hint","","",42,null],[11,"next","","",42,null],[11,"size_hint","","",42,null],[11,"next","","",42,null],[11,"size_hint","","",42,null],[11,"next","core::ops","",11,null],[11,"size_hint","","",11,null],[11,"next_back","","",11,null],[11,"next","","",12,null],[11,"next","","",14,null],[11,"size_hint","","",14,null],[11,"next_back","","",14,null],[11,"fmt","core::iter::sources","",43,null],[11,"clone","","",43,null],[11,"next","","",43,null],[11,"size_hint","","",43,null],[11,"next_back","","",43,null],[11,"fmt","","",44,null],[11,"next","","",44,null],[11,"size_hint","","",44,null],[11,"next_back","","",44,null],[11,"len","","",44,null],[11,"clone","","",44,null],[11,"default","","",44,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",45,null],[11,"clone","","",45,null],[11,"next","","",45,null],[11,"size_hint","","",45,null],[11,"next_back","","",45,null],[11,"len","","",45,null],[11,"fmt","core::iter","",46,null],[11,"clone","","",46,null],[11,"next","","",46,null],[11,"size_hint","","",46,null],[11,"next_back","","",46,null],[11,"fmt","","",47,null],[11,"clone","","",47,null],[11,"next","","",47,null],[11,"size_hint","","",47,null],[11,"next_back","","",47,null],[11,"fmt","","",48,null],[11,"clone","","",48,null],[11,"next","","",48,null],[11,"size_hint","","",48,null],[11,"fmt","","",49,null],[11,"clone","","",49,null],[11,"next","","",49,null],[11,"count","","",49,null],[11,"nth","","",49,null],[11,"find","","",49,null],[11,"last","","",49,null],[11,"size_hint","","",49,null],[11,"next_back","","",49,null],[11,"fmt","","",50,null],[11,"clone","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next_back","","",50,null],[11,"clone","","",51,null],[11,"fmt","","",51,null],[11,"next","","",51,null],[11,"size_hint","","",51,null],[11,"next_back","","",51,null],[11,"clone","","",52,null],[11,"fmt","","",52,null],[11,"next","","",52,null],[11,"size_hint","","",52,null],[11,"next_back","","",52,null],[11,"clone","","",53,null],[11,"fmt","","",53,null],[11,"next","","",53,null],[11,"size_hint","","",53,null],[11,"next_back","","",53,null],[11,"fmt","","",54,null],[11,"clone","","",54,null],[11,"next","","# Overflow Behavior",54,null],[11,"size_hint","","",54,null],[11,"nth","","",54,null],[11,"count","","",54,null],[11,"next_back","","",54,null],[11,"fmt","","",55,null],[11,"clone","","",55,null],[11,"next","","",55,null],[11,"count","","",55,null],[11,"nth","","",55,null],[11,"last","","",55,null],[11,"size_hint","","",55,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",55,null],[11,"is_empty","","Checks if the iterator has finished iterating.",55,null],[11,"clone","","",56,null],[11,"fmt","","",56,null],[11,"next","","",56,null],[11,"size_hint","","",56,null],[11,"clone","","",57,null],[11,"fmt","","",57,null],[11,"next","","",57,null],[11,"size_hint","","",57,null],[11,"fmt","","",58,null],[11,"clone","","",58,null],[11,"next","","",58,null],[11,"nth","","",58,null],[11,"count","","",58,null],[11,"last","","",58,null],[11,"size_hint","","",58,null],[11,"next_back","","",58,null],[11,"fmt","","",59,null],[11,"clone","","",59,null],[11,"next","","",59,null],[11,"nth","","",59,null],[11,"size_hint","","",59,null],[11,"clone","","",60,null],[11,"fmt","","",60,null],[11,"next","","",60,null],[11,"size_hint","","",60,null],[11,"clone","","",61,null],[11,"fmt","","",61,null],[11,"next","","",61,null],[11,"size_hint","","",61,null],[11,"next_back","","",61,null],[11,"fmt","","",62,null],[11,"clone","","",62,null],[11,"next","","",62,null],[11,"nth","","",62,null],[11,"last","","",62,null],[11,"count","","",62,null],[11,"size_hint","","",62,null],[11,"next_back","","",62,null],[11,"clone","","",63,null],[11,"fmt","","",63,null],[11,"next","","",63,null],[11,"size_hint","","",63,null],[11,"next_back","","",63,null],[11,"hash","core::option","",0,null],[11,"fmt","","",0,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",0,null],[11,"fmt","","",64,null],[11,"next","","",64,null],[11,"size_hint","","",64,null],[11,"next_back","","",64,null],[11,"clone","","",64,null],[11,"fmt","","",65,null],[11,"next","","",65,null],[11,"size_hint","","",65,null],[11,"next_back","","",65,null],[11,"fmt","","",66,null],[11,"clone","","",66,null],[11,"next","","",66,null],[11,"size_hint","","",66,null],[11,"next_back","","",66,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",0,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",67,null],[11,"clone","","",68,null],[11,"hash","core::result","",69,null],[11,"fmt","","",69,null],[11,"cmp","","",69,null],[11,"partial_cmp","","",69,null],[11,"lt","","",69,null],[11,"le","","",69,null],[11,"gt","","",69,null],[11,"ge","","",69,null],[11,"eq","","",69,null],[11,"ne","","",69,null],[11,"clone","","",69,null],[11,"is_ok","","Returns true if the result is `Ok`",69,null],[11,"is_err","","Returns true if the result is `Err`",69,null],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",69,null],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",69,null],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",69,null],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",69,null],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",69,null],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",69,null],[11,"iter","","Returns an iterator over the possibly contained value.",69,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",69,null],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",69,null],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",69,null],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",69,null],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",69,null],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",69,null],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",69,null],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",69,null],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",69,null],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",69,null],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",69,null],[11,"fmt","","",70,null],[11,"next","","",70,null],[11,"size_hint","","",70,null],[11,"next_back","","",70,null],[11,"clone","","",70,null],[11,"fmt","","",71,null],[11,"next","","",71,null],[11,"size_hint","","",71,null],[11,"next_back","","",71,null],[11,"fmt","","",72,null],[11,"next","","",72,null],[11,"size_hint","","",72,null],[11,"next_back","","",72,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",69,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::slice","",73,null],[11,"as_slice","","View the underlying data as a subslice of the original data.",73,null],[11,"next","","",73,null],[11,"size_hint","","",73,null],[11,"count","","",73,null],[11,"nth","","",73,null],[11,"last","","",73,null],[11,"next_back","","",73,null],[11,"clone","","",73,null],[11,"fmt","","",74,null],[11,"into_slice","","View the underlying data as a subslice of the original data.",74,null],[11,"next","","",74,null],[11,"size_hint","","",74,null],[11,"count","","",74,null],[11,"nth","","",74,null],[11,"last","","",74,null],[11,"next_back","","",74,null],[11,"fmt","","",75,null],[11,"clone","","",75,null],[11,"next","","",75,null],[11,"size_hint","","",75,null],[11,"next_back","","",75,null],[11,"fmt","","",76,null],[11,"next","","",76,null],[11,"size_hint","","",76,null],[11,"next_back","","",76,null],[11,"fmt","","",77,null],[11,"fmt","","",78,null],[11,"fmt","","",79,null],[11,"fmt","","",80,null],[11,"next","","",77,null],[11,"size_hint","","",77,null],[11,"next","","",78,null],[11,"size_hint","","",78,null],[11,"next","","",79,null],[11,"size_hint","","",79,null],[11,"next","","",80,null],[11,"size_hint","","",80,null],[11,"fmt","","",81,null],[11,"clone","","",81,null],[11,"next","","",81,null],[11,"size_hint","","",81,null],[11,"count","","",81,null],[11,"nth","","",81,null],[11,"last","","",81,null],[11,"next_back","","",81,null],[11,"fmt","","",82,null],[11,"clone","","",82,null],[11,"next","","",82,null],[11,"size_hint","","",82,null],[11,"count","","",82,null],[11,"nth","","",82,null],[11,"last","","",82,null],[11,"next_back","","",82,null],[11,"fmt","","",83,null],[11,"next","","",83,null],[11,"size_hint","","",83,null],[11,"count","","",83,null],[11,"nth","","",83,null],[11,"last","","",83,null],[11,"next_back","","",83,null],[11,"fmt","core::str::pattern","",84,null],[11,"eq","","",84,null],[11,"ne","","",84,null],[11,"clone","","",84,null],[11,"fmt","","",85,null],[11,"clone","","",85,null],[11,"haystack","","",85,null],[11,"next","","",85,null],[11,"next_match","","",85,null],[11,"next_reject","","",85,null],[11,"next_back","","",85,null],[11,"next_match_back","","",85,null],[11,"next_reject_back","","",85,null],[11,"fmt","","",86,null],[11,"clone","","",86,null],[11,"haystack","","",86,null],[11,"next","","",86,null],[11,"next_match","","",86,null],[11,"next_reject","","",86,null],[11,"next_back","","",86,null],[11,"next_match_back","","",86,null],[11,"next_reject_back","","",86,null],[11,"clone","","",87,null],[11,"fmt","","",87,null],[11,"haystack","","",87,null],[11,"next","","",87,null],[11,"next_match","","",87,null],[11,"next_reject","","",87,null],[11,"next_back","","",87,null],[11,"next_match_back","","",87,null],[11,"next_reject_back","","",87,null],[11,"fmt","","",88,null],[11,"clone","","",88,null],[11,"haystack","","",88,null],[11,"next","","",88,null],[11,"next_match","","",88,null],[11,"next_back","","",88,null],[11,"next_match_back","","",88,null],[11,"eq","core::str","",89,null],[11,"ne","","",89,null],[11,"clone","","",89,null],[11,"fmt","","",89,null],[11,"fmt","","",89,null],[11,"fmt","","",90,null],[11,"clone","","",90,null],[11,"eq","","",90,null],[11,"ne","","",90,null],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",90,null],[11,"fmt","","",90,null],[11,"fmt","","",91,null],[11,"clone","","",91,null],[11,"next","","",91,null],[11,"size_hint","","",91,null],[11,"next_back","","",91,null],[11,"as_str","","View the underlying data as a subslice of the original data.",91,null],[11,"fmt","","",92,null],[11,"clone","","",92,null],[11,"next","","",92,null],[11,"size_hint","","",92,null],[11,"next_back","","",92,null],[11,"as_str","","View the underlying data as a subslice of the original data.",92,null],[11,"fmt","","",93,null],[11,"clone","","",93,null],[11,"next","","",93,null],[11,"size_hint","","",93,null],[11,"count","","",93,null],[11,"last","","",93,null],[11,"nth","","",93,null],[11,"next_back","","",93,null],[11,"len","","",93,null],[11,"fmt","","",94,null],[11,"next","","",94,null],[11,"clone","","",94,null],[11,"fmt","","",95,null],[11,"next","","",95,null],[11,"clone","","",95,null],[11,"next_back","","",94,null],[11,"next_back","","",95,null],[11,"fmt","","",96,null],[11,"next","","",96,null],[11,"clone","","",96,null],[11,"fmt","","",97,null],[11,"next","","",97,null],[11,"clone","","",97,null],[11,"next_back","","",96,null],[11,"next_back","","",97,null],[11,"fmt","","",98,null],[11,"next","","",98,null],[11,"clone","","",98,null],[11,"fmt","","",99,null],[11,"next","","",99,null],[11,"clone","","",99,null],[11,"fmt","","",100,null],[11,"next","","",100,null],[11,"clone","","",100,null],[11,"fmt","","",101,null],[11,"next","","",101,null],[11,"clone","","",101,null],[11,"next_back","","",100,null],[11,"next_back","","",101,null],[11,"fmt","","",102,null],[11,"next","","",102,null],[11,"clone","","",102,null],[11,"fmt","","",103,null],[11,"next","","",103,null],[11,"clone","","",103,null],[11,"next_back","","",102,null],[11,"next_back","","",103,null],[11,"fmt","","",104,null],[11,"clone","","",104,null],[11,"next","","",104,null],[11,"size_hint","","",104,null],[11,"next_back","","",104,null],[11,"fmt","","",105,null],[11,"clone","","",105,null],[11,"next","","",105,null],[11,"size_hint","","",105,null],[11,"next_back","","",105,null],[11,"fmt","","",106,null],[11,"clone","","",106,null],[11,"fmt","core::hash::sip","",107,null],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",107,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",107,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",107,null],[11,"finish","","",107,null],[11,"clone","","",107,null],[11,"default","","",107,{"inputs":[],"output":{"name":"siphasher"}}],[11,"fmt","core::hash","",108,null],[11,"build_hasher","","",108,null],[11,"clone","","",108,null],[11,"default","","",108,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"fmt","core::fmt","",109,null],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",110,null],[11,"finish","","Finishes output and returns any error encountered.",110,null],[11,"field","","Adds a new field to the generated tuple struct output.",111,null],[11,"finish","","Finishes output and returns any error encountered.",111,null],[11,"entry","","Adds a new entry to the set output.",112,null],[11,"entries","","Adds the contents of an iterator of entries to the set output.",112,null],[11,"finish","","Finishes output and returns any error encountered.",112,null],[11,"entry","","Adds a new entry to the list output.",113,null],[11,"entries","","Adds the contents of an iterator of entries to the list output.",113,null],[11,"finish","","Finishes output and returns any error encountered.",113,null],[11,"entry","","Adds a new entry to the map output.",114,null],[11,"entries","","Adds the contents of an iterator of entries to the map output.",114,null],[11,"finish","","Finishes output and returns any error encountered.",114,null],[11,"partial_cmp","core::fmt","",115,null],[11,"eq","","",115,null],[11,"cmp","","",115,null],[11,"hash","","",115,null],[11,"default","","",115,{"inputs":[],"output":{"name":"error"}}],[11,"fmt","","",115,null],[11,"clone","","",115,null],[11,"clone","","",116,null],[11,"fmt","","",116,null],[11,"fmt","","",116,null],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",117,null],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",117,null],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",117,null],[11,"write_fmt","","Writes some formatted information into this instance",117,null],[11,"flags","","Flags for formatting (packed version of rt::Flag)",117,null],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",117,null],[11,"align","","Flag indicating what form of alignment was requested",117,null],[11,"width","","Optionally specified integer width that the output should be",117,null],[11,"precision","","Optionally specified precision for numeric types",117,null],[11,"sign_plus","","Determines if the `+` flag was specified.",117,null],[11,"sign_minus","","Determines if the `-` flag was specified.",117,null],[11,"alternate","","Determines if the `#` flag was specified.",117,null],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",117,null],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",117,null],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",117,null],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",117,null],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",117,null],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",117,null],[11,"write_str","","",117,null],[11,"write_char","","",117,null],[11,"write_fmt","","",117,null],[11,"fmt","","",115,null],[11,"fmt","core::marker","",9,null],[11,"fmt","core::cell","",32,null],[11,"fmt","","",34,null],[11,"fmt","","",35,null],[11,"fmt","","",36,null],[11,"fmt","","",37,null],[4,"Option","enum_primitive","The `Option` type. See [the module level documentation](index.html) for more.",null,null],[13,"None","","No value",0,null],[13,"Some","","Some value `T`",0,null],[11,"fmt","num_traits","",118,null],[11,"fmt","","",119,null],[8,"FromPrimitive","enum_primitive","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",120,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",120,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",120,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",120,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",120,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",120,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",120,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",120,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",120,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",120,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",120,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",120,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[14,"enum_from_primitive_impl_ty!","","Helper macro for internal use by `enum_from_primitive!`.",null,null],[14,"enum_from_primitive_impl!","","Helper macro for internal use by `enum_from_primitive!`.",null,null],[14,"enum_from_primitive!","","Wrap this macro around an `enum` declaration to get an\nautomatically generated implementation of `num::FromPrimitive`.",null,null]],"paths":[[4,"Option"],[3,"Wrapping"],[3,"ParseFloatError"],[4,"FpCategory"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicPtr"],[4,"Ordering"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EncodeUtf8"],[3,"EncodeUtf16"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"CharRange"],[3,"SipHasher"],[3,"BuildHasherDefault"],[4,"Alignment"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[8,"FromPrimitive"]]};
searchIndex["serde_json"] = {"doc":"JSON and serialization","items":[[0,"builder","serde_json","JSON Builders",null,null],[3,"ArrayBuilder","serde_json::builder","This structure provides a simple interface for constructing a JSON array.",null,null],[3,"ObjectBuilder","","This structure provides a simple interface for constructing a JSON object.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"arraybuilder"}}],[11,"new","","Construct an `ObjectBuilder`.",0,{"inputs":[],"output":{"name":"arraybuilder"}}],[11,"build","","Return the constructed `Value`.",0,null],[11,"push","","Insert a value into the array.",0,null],[11,"push_array","","Creates and passes an `ArrayBuilder` into a closure, then inserts the resulting array into\nthis array.",0,null],[11,"push_object","","Creates and passes an `ArrayBuilder` into a closure, then inserts the resulting object into\nthis array.",0,null],[11,"default","","",1,{"inputs":[],"output":{"name":"objectbuilder"}}],[11,"new","","Construct an `ObjectBuilder`.",1,{"inputs":[],"output":{"name":"objectbuilder"}}],[11,"build","","Return the constructed `Value`.",1,null],[11,"insert","","Insert a key-value pair into the object.",1,null],[11,"insert_array","","Creates and passes an `ObjectBuilder` into a closure, then inserts the resulting array into\nthis object.",1,null],[11,"insert_object","","Creates and passes an `ObjectBuilder` into a closure, then inserts the resulting object into\nthis object.",1,null],[0,"de","serde_json","JSON Deserialization",null,null],[3,"Deserializer","serde_json::de","A structure that deserializes JSON into Rust values.",null,null],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",null,null],[5,"from_iter","","Decodes a json value from an iterator over an iterator\n`Iterator&lt;Item=io::Result&lt;u8&gt;&gt;`.",null,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[5,"from_reader","","Decodes a json value from a `std::io::Read`.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"from_slice","","Decodes a json value from a byte slice `&amp;[u8]`.",null,null],[5,"from_str","","Decodes a json value from a `&amp;str`.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Creates the JSON parser from an `std::iter::Iterator`.",2,{"inputs":[{"name":"iter"}],"output":{"name":"self"}}],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized.\nThis allows the `Deserializer` to validate that the input stream is at the end or that it\nonly has trailing whitespace.",2,null],[11,"deserialize","","",2,null],[11,"deserialize_option","","Parses a `null` as a None, and any other values as a `Some(...)`.",2,null],[11,"deserialize_newtype_struct","","Parses a newtype struct as the underlying value.",2,null],[11,"deserialize_enum","","Parses an enum as an object like `{&quot;$KEY&quot;:$VALUE}`, where $VALUE is either a straight\nvalue, a `[..]`, or a `{..}`.",2,null],[11,"deserialize_bool","","",2,null],[11,"deserialize_usize","","",2,null],[11,"deserialize_u8","","",2,null],[11,"deserialize_u16","","",2,null],[11,"deserialize_u32","","",2,null],[11,"deserialize_u64","","",2,null],[11,"deserialize_isize","","",2,null],[11,"deserialize_i8","","",2,null],[11,"deserialize_i16","","",2,null],[11,"deserialize_i32","","",2,null],[11,"deserialize_i64","","",2,null],[11,"deserialize_f32","","",2,null],[11,"deserialize_f64","","",2,null],[11,"deserialize_char","","",2,null],[11,"deserialize_str","","",2,null],[11,"deserialize_string","","",2,null],[11,"deserialize_unit","","",2,null],[11,"deserialize_seq","","",2,null],[11,"deserialize_seq_fixed_size","","",2,null],[11,"deserialize_bytes","","",2,null],[11,"deserialize_map","","",2,null],[11,"deserialize_unit_struct","","",2,null],[11,"deserialize_tuple_struct","","",2,null],[11,"deserialize_struct","","",2,null],[11,"deserialize_struct_field","","",2,null],[11,"deserialize_tuple","","",2,null],[11,"deserialize_ignored_any","","",2,null],[11,"new","","Returns an `Iterator` of decoded JSON values from an iterator over\n`Iterator&lt;Item=io::Result&lt;u8&gt;&gt;`.",3,{"inputs":[{"name":"iter"}],"output":{"name":"streamdeserializer"}}],[11,"next","","",3,null],[0,"error","serde_json","JSON Errors",null,null],[4,"ErrorCode","serde_json::error","The errors that can arise while parsing a JSON stream.",null,null],[13,"Custom","","Catchall for syntax error messages",4,null],[13,"InvalidType","","Incorrect type from value",4,null],[13,"InvalidValue","","Incorrect value",4,null],[13,"InvalidLength","","Invalid length",4,null],[13,"UnknownVariant","","Unknown variant in an enum.",4,null],[13,"UnknownField","","Unknown field in struct.",4,null],[13,"MissingField","","Struct is missing a field.",4,null],[13,"EOFWhileParsingList","","EOF while parsing a list.",4,null],[13,"EOFWhileParsingObject","","EOF while parsing an object.",4,null],[13,"EOFWhileParsingString","","EOF while parsing a string.",4,null],[13,"EOFWhileParsingValue","","EOF while parsing a JSON value.",4,null],[13,"ExpectedColon","","Expected this character to be a `&#39;:&#39;`.",4,null],[13,"ExpectedListCommaOrEnd","","Expected this character to be either a `&#39;,&#39;` or a `]`.",4,null],[13,"ExpectedObjectCommaOrEnd","","Expected this character to be either a `&#39;,&#39;` or a `}`.",4,null],[13,"ExpectedSomeIdent","","Expected to parse either a `true`, `false`, or a `null`.",4,null],[13,"ExpectedSomeValue","","Expected this character to start a JSON value.",4,null],[13,"InvalidEscape","","Invalid hex escape code.",4,null],[13,"InvalidNumber","","Invalid number.",4,null],[13,"NumberOutOfRange","","Number is bigger than the maximum value of its type.",4,null],[13,"InvalidUnicodeCodePoint","","Invalid unicode code point.",4,null],[13,"KeyMustBeAString","","Object key is not a string.",4,null],[13,"LoneLeadingSurrogateInHexEscape","","Lone leading surrogate in hex escape.",4,null],[13,"TrailingCharacters","","JSON has non-whitespace trailing characters after the value.",4,null],[13,"UnexpectedEndOfHexEscape","","Unexpected end of hex excape.",4,null],[4,"Error","","This type represents all possible errors that can occur when serializing or deserializing a\nvalue into JSON.",null,null],[13,"Syntax","","The JSON value had some syntatic error.",5,null],[13,"Io","","Some IO error occurred when serializing or deserializing a value.",5,null],[6,"Result","","Helper alias for `Result` objects that return a JSON `Error`.",null,null],[11,"fmt","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"fmt","","",5,null],[11,"description","","",5,null],[11,"cause","","",5,null],[11,"fmt","","",5,null],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"custom","","",5,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"end_of_stream","","",5,{"inputs":[],"output":{"name":"error"}}],[11,"invalid_type","","",5,{"inputs":[{"name":"type"}],"output":{"name":"error"}}],[11,"invalid_value","","",5,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"invalid_length","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"error"}}],[11,"unknown_variant","","",5,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"unknown_field","","",5,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"missing_field","","",5,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"custom","","Raised when there is general error when deserializing a type.",5,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[0,"ser","serde_json","JSON Serialization",null,null],[3,"Serializer","serde_json::ser","A structure for serializing Rust values into JSON.",null,null],[3,"CompactFormatter","","This structure compacts a JSON value with no extra whitespace.",null,null],[3,"PrettyFormatter","","This structure pretty prints a JSON value to make it human readable.",null,null],[5,"escape_str","","Serializes and escapes a `&amp;str` into a JSON string.",null,{"inputs":[{"name":"w"},{"name":"str"}],"output":{"name":"result"}}],[5,"to_writer","","Encode the specified struct into a json `[u8]` writer.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_writer_pretty","","Encode the specified struct into a json `[u8]` writer.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec","","Encode the specified struct into a json `[u8]` buffer.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec_pretty","","Encode the specified struct into a json `[u8]` buffer.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string","","Encode the specified struct into a json `String` buffer.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string_pretty","","Encode the specified struct into a json `String` buffer.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[8,"Formatter","","This trait abstracts away serializing the JSON control characters, which allows the user to\noptionally pretty print the JSON output.",null,null],[10,"open","","Called when serializing a &#39;{&#39; or &#39;[&#39;.",6,null],[10,"comma","","Called when serializing a &#39;,&#39;.",6,null],[10,"colon","","Called when serializing a &#39;:&#39;.",6,null],[10,"close","","Called when serializing a &#39;}&#39; or &#39;]&#39;.",6,null],[11,"new","","Creates a new JSON serializer.",7,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"pretty","","Creates a new JSON pretty print serializer.",7,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"with_formatter","","Creates a new JSON visitor whose output will be written to the writer\nspecified.",7,{"inputs":[{"name":"w"},{"name":"f"}],"output":{"name":"self"}}],[11,"into_inner","","Unwrap the `Writer` from the `Serializer`.",7,null],[11,"serialize_bool","","",7,null],[11,"serialize_isize","","",7,null],[11,"serialize_i8","","",7,null],[11,"serialize_i16","","",7,null],[11,"serialize_i32","","",7,null],[11,"serialize_i64","","",7,null],[11,"serialize_usize","","",7,null],[11,"serialize_u8","","",7,null],[11,"serialize_u16","","",7,null],[11,"serialize_u32","","",7,null],[11,"serialize_u64","","",7,null],[11,"serialize_f32","","",7,null],[11,"serialize_f64","","",7,null],[11,"serialize_char","","",7,null],[11,"serialize_str","","",7,null],[11,"serialize_bytes","","",7,null],[11,"serialize_unit","","",7,null],[11,"serialize_unit_struct","","",7,null],[11,"serialize_unit_variant","","",7,null],[11,"serialize_newtype_struct","","Serialize newtypes without an object wrapper.",7,null],[11,"serialize_newtype_variant","","",7,null],[11,"serialize_none","","",7,null],[11,"serialize_some","","",7,null],[11,"serialize_seq","","",7,null],[11,"serialize_seq_elt","","",7,null],[11,"serialize_seq_end","","",7,null],[11,"serialize_seq_fixed_size","","",7,null],[11,"serialize_tuple","","",7,null],[11,"serialize_tuple_elt","","",7,null],[11,"serialize_tuple_end","","",7,null],[11,"serialize_tuple_struct","","",7,null],[11,"serialize_tuple_struct_elt","","",7,null],[11,"serialize_tuple_struct_end","","",7,null],[11,"serialize_tuple_variant","","",7,null],[11,"serialize_tuple_variant_elt","","",7,null],[11,"serialize_tuple_variant_end","","",7,null],[11,"serialize_map","","",7,null],[11,"serialize_map_key","","",7,null],[11,"serialize_map_value","","",7,null],[11,"serialize_map_end","","",7,null],[11,"serialize_struct","","",7,null],[11,"serialize_struct_elt","","",7,null],[11,"serialize_struct_end","","",7,null],[11,"serialize_struct_variant","","",7,null],[11,"serialize_struct_variant_elt","","",7,null],[11,"serialize_struct_variant_end","","",7,null],[11,"open","","",8,null],[11,"comma","","",8,null],[11,"colon","","",8,null],[11,"close","","",8,null],[11,"new","","Construct a pretty printer formatter that defaults to using two spaces for indentation.",9,{"inputs":[],"output":{"name":"self"}}],[11,"with_indent","","Construct a pretty printer formatter that uses the `indent` string for indentation.",9,null],[11,"default","","",9,{"inputs":[],"output":{"name":"self"}}],[11,"open","","",9,null],[11,"comma","","",9,null],[11,"colon","","",9,null],[11,"close","","",9,null],[0,"value","serde_json","JSON Value",null,null],[3,"Serializer","serde_json::value","Create a `serde::Serializer` that serializes a `Serialize`e into a `Value`.",null,null],[3,"Deserializer","","Creates a `serde::Deserializer` from a `json::Value` object.",null,null],[4,"Value","","Represents a JSON value",null,null],[13,"Null","","Represents a JSON null value",10,null],[13,"Bool","","Represents a JSON Boolean",10,null],[13,"I64","","Represents a JSON signed integer",10,null],[13,"U64","","Represents a JSON unsigned integer",10,null],[13,"F64","","Represents a JSON floating point number",10,null],[13,"String","","Represents a JSON string",10,null],[13,"Array","","Represents a JSON array",10,null],[13,"Object","","Represents a JSON object",10,null],[5,"to_value","","Shortcut function to encode a `T` into a JSON `Value`",null,{"inputs":[{"name":"t"}],"output":{"name":"value"}}],[5,"from_value","","Shortcut function to decode a JSON `Value` into a `T`",null,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[6,"Map","","Represents a key/value type.",null,null],[6,"MapIntoIter","","Represents the `IntoIter` type.",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",11,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"clone","","",10,null],[11,"find","","If the `Value` is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",10,null],[11,"find_path","","Attempts to get a nested Value Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the `Value` associated with the final key.",10,null],[11,"lookup","","**Deprecated**: Use `Value.pointer()` and pointer syntax instead.",10,null],[11,"pointer","","Looks up a value by a JSON Pointer.",10,null],[11,"search","","If the `Value` is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the `Value` is not an Object, returns None.",10,null],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",10,null],[11,"as_object","","If the `Value` is an Object, returns the associated Map.\nReturns None otherwise.",10,null],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map.\nReturns None otherwise.",10,null],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",10,null],[11,"as_array","","If the `Value` is an Array, returns the associated vector.\nReturns None otherwise.",10,null],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector.\nReturns None otherwise.",10,null],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",10,null],[11,"as_str","","If the `Value` is a String, returns the associated str.\nReturns None otherwise.",10,null],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",10,null],[11,"is_i64","","Returns true if the `Value` is a i64. Returns false otherwise.",10,null],[11,"is_u64","","Returns true if the `Value` is a u64. Returns false otherwise.",10,null],[11,"is_f64","","Returns true if the `Value` is a f64. Returns false otherwise.",10,null],[11,"as_i64","","If the `Value` is a number, return or cast it to a i64.\nReturns None otherwise.",10,null],[11,"as_u64","","If the `Value` is a number, return or cast it to a u64.\nReturns None otherwise.",10,null],[11,"as_f64","","If the `Value` is a number, return or cast it to a f64.\nReturns None otherwise.",10,null],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",10,null],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool.\nReturns None otherwise.",10,null],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",10,null],[11,"as_null","","If the `Value` is a Null, returns ().\nReturns None otherwise.",10,null],[11,"serialize","","",10,null],[11,"deserialize","","",10,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","Serializes a json value into a string",10,null],[11,"fmt","","Serializes a json value into a string",10,null],[11,"from_str","","",10,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Construct a new `Serializer`.",12,{"inputs":[],"output":{"name":"serializer"}}],[11,"unwrap","","Unwrap the `Serializer` and return the `Value`.",12,null],[11,"default","","",12,{"inputs":[],"output":{"name":"self"}}],[11,"serialize_bool","","",12,null],[11,"serialize_isize","","",12,null],[11,"serialize_i8","","",12,null],[11,"serialize_i16","","",12,null],[11,"serialize_i32","","",12,null],[11,"serialize_i64","","",12,null],[11,"serialize_usize","","",12,null],[11,"serialize_u8","","",12,null],[11,"serialize_u16","","",12,null],[11,"serialize_u32","","",12,null],[11,"serialize_u64","","",12,null],[11,"serialize_f32","","",12,null],[11,"serialize_f64","","",12,null],[11,"serialize_char","","",12,null],[11,"serialize_str","","",12,null],[11,"serialize_bytes","","",12,null],[11,"serialize_unit","","",12,null],[11,"serialize_unit_struct","","",12,null],[11,"serialize_unit_variant","","",12,null],[11,"serialize_newtype_struct","","",12,null],[11,"serialize_newtype_variant","","",12,null],[11,"serialize_none","","",12,null],[11,"serialize_some","","",12,null],[11,"serialize_seq","","",12,null],[11,"serialize_seq_elt","","",12,null],[11,"serialize_seq_end","","",12,null],[11,"serialize_seq_fixed_size","","",12,null],[11,"serialize_tuple","","",12,null],[11,"serialize_tuple_elt","","",12,null],[11,"serialize_tuple_end","","",12,null],[11,"serialize_tuple_struct","","",12,null],[11,"serialize_tuple_struct_elt","","",12,null],[11,"serialize_tuple_struct_end","","",12,null],[11,"serialize_tuple_variant","","",12,null],[11,"serialize_tuple_variant_elt","","",12,null],[11,"serialize_tuple_variant_end","","",12,null],[11,"serialize_map","","",12,null],[11,"serialize_map_key","","",12,null],[11,"serialize_map_value","","",12,null],[11,"serialize_map_end","","",12,null],[11,"serialize_struct","","",12,null],[11,"serialize_struct_elt","","",12,null],[11,"serialize_struct_end","","",12,null],[11,"serialize_struct_variant","","",12,null],[11,"serialize_struct_variant_elt","","",12,null],[11,"serialize_struct_variant_end","","",12,null],[11,"new","","Creates a new deserializer instance for deserializing the specified JSON value.",13,{"inputs":[{"name":"value"}],"output":{"name":"deserializer"}}],[11,"deserialize","","",13,null],[11,"deserialize_option","","",13,null],[11,"deserialize_enum","","",13,null],[11,"deserialize_newtype_struct","","",13,null],[11,"deserialize_bool","","",13,null],[11,"deserialize_usize","","",13,null],[11,"deserialize_u8","","",13,null],[11,"deserialize_u16","","",13,null],[11,"deserialize_u32","","",13,null],[11,"deserialize_u64","","",13,null],[11,"deserialize_isize","","",13,null],[11,"deserialize_i8","","",13,null],[11,"deserialize_i16","","",13,null],[11,"deserialize_i32","","",13,null],[11,"deserialize_i64","","",13,null],[11,"deserialize_f32","","",13,null],[11,"deserialize_f64","","",13,null],[11,"deserialize_char","","",13,null],[11,"deserialize_str","","",13,null],[11,"deserialize_string","","",13,null],[11,"deserialize_unit","","",13,null],[11,"deserialize_seq","","",13,null],[11,"deserialize_seq_fixed_size","","",13,null],[11,"deserialize_bytes","","",13,null],[11,"deserialize_map","","",13,null],[11,"deserialize_unit_struct","","",13,null],[11,"deserialize_tuple_struct","","",13,null],[11,"deserialize_struct","","",13,null],[11,"deserialize_struct_field","","",13,null],[11,"deserialize_tuple","","",13,null],[11,"deserialize_ignored_any","","",13,null],[14,"forward_to_deserialize!","serde_json","",null,null]],"paths":[[3,"ArrayBuilder"],[3,"ObjectBuilder"],[3,"Deserializer"],[3,"StreamDeserializer"],[4,"ErrorCode"],[4,"Error"],[8,"Formatter"],[3,"Serializer"],[3,"CompactFormatter"],[3,"PrettyFormatter"],[4,"Value"],[8,"ToJson"],[3,"Serializer"],[3,"Deserializer"]]};
searchIndex["num"] = {"doc":"A collection of numeric types and traits for Rust.","items":[[11,"new","num_bigint","Creates and initializes a BigInt.",0,{"inputs":[{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",0,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",0,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",0,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",0,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",0,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",0,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",0,null],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",0,null],[11,"parse_bytes","","Creates and initializes a `BigInt`.",0,null],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`,\nnot including the sign.",0,null],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it&#39;s not negative.",0,null],[11,"checked_add","","",0,null],[11,"checked_sub","","",0,null],[11,"checked_mul","","",0,null],[11,"checked_div","","",0,null],[11,"hash","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",1,null],[11,"eq","","",1,null],[11,"partial_cmp","","",1,null],[11,"cmp","","",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"biguint"}}],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",1,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"bitand","","",1,null],[11,"bitand","","",1,null],[11,"bitor","","",1,null],[11,"bitor","","",1,null],[11,"bitxor","","",1,null],[11,"bitxor","","",1,null],[11,"shl","","",1,null],[11,"shr","","",1,null],[11,"zero","","",1,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",1,null],[11,"one","","",1,{"inputs":[],"output":{"name":"biguint"}}],[11,"add","","",1,null],[11,"add","","",1,null],[11,"sub","","",1,null],[11,"sub","","",1,null],[11,"mul","","",1,null],[11,"mul","","",1,null],[11,"div","","",1,null],[11,"div","","",1,null],[11,"rem","","",1,null],[11,"rem","","",1,null],[11,"neg","","",1,null],[11,"checked_add","","",1,null],[11,"checked_sub","","",1,null],[11,"checked_mul","","",1,null],[11,"checked_div","","",1,null],[11,"div_rem","","",1,null],[11,"div_floor","","",1,null],[11,"mod_floor","","",1,null],[11,"div_mod_floor","","",1,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",1,null],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",1,null],[11,"divides","","Deprecated, use `is_multiple_of` instead.",1,null],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",1,null],[11,"is_even","","Returns `true` if the number is divisible by `2`.",1,null],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",1,null],[11,"to_i64","","",1,null],[11,"to_u64","","",1,null],[11,"to_f32","","",1,null],[11,"to_f64","","",1,null],[11,"from_i64","","",1,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",1,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",1,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",1,{"inputs":[{"name":"u64"}],"output":{"name":"biguint"}}],[11,"from","","",1,{"inputs":[{"name":"u8"}],"output":{"name":"biguint"}}],[11,"from","","",1,{"inputs":[{"name":"u16"}],"output":{"name":"biguint"}}],[11,"from","","",1,{"inputs":[{"name":"u32"}],"output":{"name":"biguint"}}],[11,"from","","",1,{"inputs":[{"name":"usize"}],"output":{"name":"biguint"}}],[11,"to_biguint","","",0,null],[11,"to_biguint","","",1,null],[11,"new","","Creates and initializes a `BigUint`.",1,{"inputs":[{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",1,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",1,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",1,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",1,null],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",1,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",1,null],[11,"parse_bytes","","Creates and initializes a `BigUint`.",1,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",1,null],[11,"hash","","",2,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"cmp","","",2,null],[11,"partial_cmp","","",2,null],[11,"eq","","",2,null],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",2,null],[11,"neg","","Negate Sign value.",2,null],[11,"mul","","",2,null],[11,"hash","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"decode","","",0,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",0,null],[11,"eq","","",0,null],[11,"partial_cmp","","",0,null],[11,"cmp","","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"bigint"}}],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",0,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"shl","","",0,null],[11,"shr","","",0,null],[11,"zero","","",0,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",0,null],[11,"one","","",0,{"inputs":[],"output":{"name":"bigint"}}],[11,"abs","","",0,null],[11,"abs_sub","","",0,null],[11,"signum","","",0,null],[11,"is_positive","","",0,null],[11,"is_negative","","",0,null],[11,"add","","",0,null],[11,"add","","",0,null],[11,"sub","","",0,null],[11,"sub","","",0,null],[11,"mul","","",0,null],[11,"mul","","",0,null],[11,"div","","",0,null],[11,"div","","",0,null],[11,"rem","","",0,null],[11,"rem","","",0,null],[11,"neg","","",0,null],[11,"checked_add","","",0,null],[11,"checked_sub","","",0,null],[11,"checked_mul","","",0,null],[11,"checked_div","","",0,null],[11,"div_rem","","",0,null],[11,"div_floor","","",0,null],[11,"mod_floor","","",0,null],[11,"div_mod_floor","","",0,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",0,null],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",0,null],[11,"divides","","Deprecated, use `is_multiple_of` instead.",0,null],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",0,null],[11,"is_even","","Returns `true` if the number is divisible by `2`.",0,null],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",0,null],[11,"to_i64","","",0,null],[11,"to_u64","","",0,null],[11,"to_f32","","",0,null],[11,"to_f64","","",0,null],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"i8"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"i16"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"i32"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"isize"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"u8"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"u16"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"u32"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"to_bigint","","",0,null],[11,"to_bigint","","",1,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"description","","",3,null],[11,"from","","",3,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parsebiginterror"}}],[3,"BigInt","num","A big signed integer type.",null,null],[3,"BigUint","","A big unsigned integer type.",null,null],[11,"fmt","num_rational","",4,null],[11,"hash","","",4,null],[11,"clone","","",4,null],[11,"decode","","",4,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"encode","","",4,null],[11,"from_integer","","Creates a ratio representing the integer `t`.",4,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a ratio without checking for `denom == 0` or reducing.",4,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"new","","Create a new Ratio. Fails if `denom == 0`.",4,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer.",4,null],[11,"numer","","Gets an immutable reference to the numerator.",4,null],[11,"denom","","Gets an immutable reference to the denominator.",4,null],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",4,null],[11,"reduced","","Returns a `reduce`d copy of self.",4,null],[11,"recip","","Returns the reciprocal.",4,null],[11,"floor","","Rounds towards minus infinity.",4,null],[11,"ceil","","Rounds towards plus infinity.",4,null],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",4,null],[11,"trunc","","Rounds towards zero.",4,null],[11,"fract","","Returns the fractional part of a number.",4,null],[11,"pow","","Raises the ratio to the power of an exponent",4,null],[11,"from_float","","Converts a float into a rational number.",4,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"cmp","","",4,null],[11,"partial_cmp","","",4,null],[11,"eq","","",4,null],[11,"mul","","",4,null],[11,"mul","","",4,null],[11,"div","","",4,null],[11,"div","","",4,null],[11,"add","","",4,null],[11,"add","","",4,null],[11,"sub","","",4,null],[11,"sub","","",4,null],[11,"rem","","",4,null],[11,"rem","","",4,null],[11,"neg","","",4,null],[11,"zero","","",4,{"inputs":[],"output":{"name":"ratio"}}],[11,"is_zero","","",4,null],[11,"one","","",4,{"inputs":[],"output":{"name":"ratio"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",4,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"abs","","",4,null],[11,"abs_sub","","",4,null],[11,"signum","","",4,null],[11,"is_positive","","",4,null],[11,"is_negative","","",4,null],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",4,null],[11,"from_str","","Parses `numer/denom` or just `numer`.",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"fmt","","",5,null],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"description","","",5,null],[6,"Rational","num","",null,null],[6,"BigRational","","",null,null],[11,"new","num_complex","Create a new Complex",6,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",6,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn&#39;t necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",6,null],[11,"scale","","Multiplies `self` by the scalar `t`.",6,null],[11,"unscale","","Divides `self` by the scalar `t`.",6,null],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",6,null],[11,"inv","","Returns `1/self`",6,null],[11,"norm","","Calculate |self|",6,null],[11,"arg","","Calculate the principal Arg of self.",6,null],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",6,null],[11,"from_polar","","Convert a polar representation into a complex number.",6,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",6,null],[11,"ln","","Computes the principal value of natural logarithm of `self`.",6,null],[11,"sqrt","","Computes the principal value of the square root of `self`.",6,null],[11,"powf","","Raises `self` to a floating point power.",6,null],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",6,null],[11,"powc","","Raises `self` to a complex power.",6,null],[11,"expf","","Raises a floating point number to the complex power `self`.",6,null],[11,"sin","","Computes the sine of `self`.",6,null],[11,"cos","","Computes the cosine of `self`.",6,null],[11,"tan","","Computes the tangent of `self`.",6,null],[11,"asin","","Computes the principal value of the inverse sine of `self`.",6,null],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",6,null],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",6,null],[11,"sinh","","Computes the hyperbolic sine of `self`.",6,null],[11,"cosh","","Computes the hyperbolic cosine of `self`.",6,null],[11,"tanh","","Computes the hyperbolic tangent of `self`.",6,null],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",6,null],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",6,null],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",6,null],[11,"is_nan","","Checks if the given complex number is NaN",6,null],[11,"is_infinite","","Checks if the given complex number is infinite",6,null],[11,"is_finite","","Checks if the given complex number is finite",6,null],[11,"is_normal","","Checks if the given complex number is normal",6,null],[11,"default","","",6,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",6,null],[11,"hash","","",6,null],[11,"clone","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"decode","","",6,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"encode","","",6,null],[11,"from","","",6,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",6,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",6,null],[11,"add","","",6,null],[11,"sub","","",6,null],[11,"sub","","",6,null],[11,"mul","","",6,null],[11,"mul","","",6,null],[11,"div","","",6,null],[11,"div","","",6,null],[11,"neg","","",6,null],[11,"add","","",6,null],[11,"sub","","",6,null],[11,"mul","","",6,null],[11,"div","","",6,null],[11,"add","","",6,null],[11,"sub","","",6,null],[11,"mul","","",6,null],[11,"div","","",6,null],[11,"zero","","",6,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",6,null],[11,"one","","",6,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",6,null],[3,"Complex","num","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",6,null],[12,"im","","Imaginary portion of the complex number",6,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",7,null],[10,"mod_floor","","Floored integer modulo, satisfying:",7,null],[10,"gcd","","Greatest Common Divisor (GCD).",7,null],[10,"lcm","","Lowest Common Multiple (LCM).",7,null],[10,"divides","","Deprecated, use `is_multiple_of` instead.",7,null],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",7,null],[10,"is_even","","Returns `true` if the number is even.",7,null],[10,"is_odd","","Returns `true` if the number is odd.",7,null],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",7,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",7,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"fmt","num_traits","",8,null],[11,"fmt","","",9,null],[8,"Num","num","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",10,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",10,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",11,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",11,null],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",12,{"inputs":[],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",13,null],[10,"abs_sub","","The positive difference of two numbers.",13,null],[10,"signum","","Returns the sign of the number.",13,null],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",13,null],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",13,null],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",14,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",14,{"inputs":[],"output":{"name":"self"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",15,null],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",15,null],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",16,null],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",17,null],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",18,null],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",19,null],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",20,null],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",20,null],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",20,null],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",20,null],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",20,null],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",20,null],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",20,null],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",20,null],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",20,null],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",20,null],[10,"swap_bytes","","Reverses the byte order of the integer.",20,null],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",20,null],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",20,null],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",20,null],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",21,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",21,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",21,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",21,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",21,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",21,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",21,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",21,null],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",21,null],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",21,null],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",21,null],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",21,null],[10,"floor","","Returns the largest integer less than or equal to a number.",21,null],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",21,null],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",21,null],[10,"trunc","","Return the integer part of a number.",21,null],[10,"fract","","Returns the fractional part of a number.",21,null],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",21,null],[10,"signum","","Returns a number that represents the sign of `self`.",21,null],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",21,null],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",21,null],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",21,null],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",21,null],[10,"powi","","Raise a number to an integer power.",21,null],[10,"powf","","Raise a number to a floating point power.",21,null],[10,"sqrt","","Take the square root of a number.",21,null],[10,"exp","","Returns `e^(self)`, (the exponential function).",21,null],[10,"exp2","","Returns `2^(self)`.",21,null],[10,"ln","","Returns the natural logarithm of the number.",21,null],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",21,null],[10,"log2","","Returns the base 2 logarithm of the number.",21,null],[10,"log10","","Returns the base 10 logarithm of the number.",21,null],[11,"to_degrees","","Converts radians to degrees.",21,null],[11,"to_radians","","Converts degrees to radians.",21,null],[10,"max","","Returns the maximum of the two numbers.",21,null],[10,"min","","Returns the minimum of the two numbers.",21,null],[10,"abs_sub","","The positive difference of two numbers.",21,null],[10,"cbrt","","Take the cubic root of a number.",21,null],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",21,null],[10,"sin","","Computes the sine of a number (in radians).",21,null],[10,"cos","","Computes the cosine of a number (in radians).",21,null],[10,"tan","","Computes the tangent of a number (in radians).",21,null],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",21,null],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",21,null],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",21,null],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",21,null],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",21,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",21,null],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",21,null],[10,"sinh","","Hyperbolic sine function.",21,null],[10,"cosh","","Hyperbolic cosine function.",21,null],[10,"tanh","","Hyperbolic tangent function.",21,null],[10,"asinh","","Inverse hyperbolic sine function.",21,null],[10,"acosh","","Inverse hyperbolic cosine function.",21,null],[10,"atanh","","Inverse hyperbolic tangent function.",21,null],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",21,null],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",22,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",22,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",22,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",22,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",22,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",22,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",22,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",22,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",22,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",22,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",22,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",22,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",24,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"cast","","",null,null],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",22,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",22,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",22,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",22,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",22,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",22,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",22,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",22,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",22,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",22,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",22,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",22,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",23,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",24,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"pow","num","",null,null],[5,"pow","num::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[5,"checked_pow","num","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[0,"bigint","","",null,null],[0,"complex","","",null,null],[0,"integer","","",null,null],[0,"iter","","",null,null],[0,"traits","","",null,null],[0,"rational","","",null,null]],"paths":[[3,"BigInt"],[3,"BigUint"],[4,"Sign"],[4,"ParseBigIntError"],[3,"Ratio"],[3,"ParseRatioError"],[3,"Complex"],[8,"Integer"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"]]};
searchIndex["num_rational"] = {"doc":"Rational numbers","items":[[3,"Ratio","num_rational","Represents the ratio between 2 numbers.",null,null],[3,"ParseRatioError","","",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[11,"fmt","","",0,null],[11,"hash","","",0,null],[11,"clone","","",0,null],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"encode","","",0,null],[11,"from_integer","","Creates a ratio representing the integer `t`.",0,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a ratio without checking for `denom == 0` or reducing.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"new","","Create a new Ratio. Fails if `denom == 0`.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer.",0,null],[11,"numer","","Gets an immutable reference to the numerator.",0,null],[11,"denom","","Gets an immutable reference to the denominator.",0,null],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",0,null],[11,"reduced","","Returns a `reduce`d copy of self.",0,null],[11,"recip","","Returns the reciprocal.",0,null],[11,"floor","","Rounds towards minus infinity.",0,null],[11,"ceil","","Rounds towards plus infinity.",0,null],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",0,null],[11,"trunc","","Rounds towards zero.",0,null],[11,"fract","","Returns the fractional part of a number.",0,null],[11,"pow","","Raises the ratio to the power of an exponent",0,null],[11,"from_float","","Converts a float into a rational number.",0,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"eq","","",0,null],[11,"mul","","",0,null],[11,"mul","","",0,null],[11,"div","","",0,null],[11,"div","","",0,null],[11,"add","","",0,null],[11,"add","","",0,null],[11,"sub","","",0,null],[11,"sub","","",0,null],[11,"rem","","",0,null],[11,"rem","","",0,null],[11,"neg","","",0,null],[11,"zero","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"is_zero","","",0,null],[11,"one","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",0,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"abs","","",0,null],[11,"abs_sub","","",0,null],[11,"signum","","",0,null],[11,"is_positive","","",0,null],[11,"is_negative","","",0,null],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",0,null],[11,"from_str","","Parses `numer/denom` or just `numer`.",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"description","","",1,null]],"paths":[[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["mio"] = {"doc":"A fast, low-level IO library for Rust focusing on non-blocking APIs, event\nnotification, and other useful utilities for building high performance IO\napps.","items":[[11,"new","std::net::ip","Creates a new IPv4 address from four eight-bit octets.",0,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"octets","","Returns the four eight-bit integers that make up this address.",0,null],[11,"is_unspecified","","Returns true for the special &#39;unspecified&#39; address 0.0.0.0.",0,null],[11,"is_loopback","","Returns true if this is a loopback address (127.0.0.0/8).",0,null],[11,"is_private","","Returns true if this is a private address.",0,null],[11,"is_link_local","","Returns true if the address is link-local (169.254.0.0/16).",0,null],[11,"is_global","","Returns true if the address appears to be globally routable.\nSee [iana-ipv4-special-registry][ipv4-sr].\n[ipv4-sr]: http://goo.gl/RaZ7lg",0,null],[11,"is_multicast","","Returns true if this is a multicast address.",0,null],[11,"is_broadcast","","Returns true if this is a broadcast address.",0,null],[11,"is_documentation","","Returns true if this address is in a range designated for documentation.",0,null],[11,"to_ipv6_compatible","","Converts this address to an IPv4-compatible IPv6 address.",0,null],[11,"to_ipv6_mapped","","Converts this address to an IPv4-mapped IPv6 address.",0,null],[11,"from","alloc::boxed","",1,{"inputs":[{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",1,{"inputs":[{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",1,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",1,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",1,{"inputs":[{"name":"str"}],"output":{"name":"box"}}],[11,"from","","",1,{"inputs":[{"name":"str"}],"output":{"name":"box"}}],[11,"description","core::str","",2,null],[11,"description","","",3,null],[11,"description","core::num","",4,null],[11,"description","","",5,null],[11,"description","core::num::dec2flt","",6,null],[11,"description","collections::string","",7,null],[11,"description","","",8,null],[11,"description","","",9,null],[11,"description","rustc_unicode::char","",10,null],[11,"description","alloc::boxed","",1,null],[11,"cause","","",1,null],[11,"is","","Returns true if the boxed type is the same as `T`",11,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",11,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",11,null],[11,"is","","Forwards to the method defined on the type `Any`.",11,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",11,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",11,null],[11,"is","","Forwards to the method defined on the type `Any`.",11,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",11,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",11,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",11,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",11,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",11,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"next","std::ascii","",12,null],[11,"size_hint","","",12,null],[11,"next_back","","",12,null],[11,"clone","std::thread::local","",13,null],[11,"eq","","",13,null],[11,"with","","Acquires a reference to the value in this TLS key.",14,null],[11,"state","","Query the current state of this key.",14,null],[11,"new","std::thread::local::elf","",15,{"inputs":[],"output":{"name":"key"}}],[11,"get","","",15,null],[11,"new","std::thread::local::os","",16,{"inputs":[],"output":{"name":"key"}}],[11,"get","","",16,null],[11,"set","std::thread::scoped_tls","Inserts a value into this scoped thread local storage slot for a\nduration of a closure.",17,null],[11,"with","","Gets a value out of this scoped variable.",17,null],[11,"is_set","","Test whether this TLS key has been `set` for the current thread.",17,null],[11,"new","std::thread::scoped_tls::imp","",18,{"inputs":[],"output":{"name":"keyinner"}}],[11,"set","","",18,null],[11,"get","","",18,null],[11,"new","std::thread","Generates the base configuration for spawning a thread, from which\nconfiguration methods can be chained.",19,{"inputs":[],"output":{"name":"builder"}}],[11,"name","","Names the thread-to-be. Currently the name is used for identification\nonly in panic messages.",19,null],[11,"stack_size","","Sets the size of the stack for the new thread.",19,null],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",19,null],[11,"clone","","",20,null],[11,"unpark","","Atomically makes the handle&#39;s token available if it is not already.",20,null],[11,"name","","Gets the thread&#39;s name.",20,null],[11,"fmt","","",20,null],[11,"thread","","Extracts a handle to the underlying thread",21,null],[11,"join","","Waits for the associated thread to finish.",21,null],[11,"clone","std::collections::hash::map","",22,null],[11,"new","","Creates an empty HashMap.",22,{"inputs":[],"output":{"name":"hashmap"}}],[11,"with_capacity","","Creates an empty hash map with the given initial capacity.",22,{"inputs":[{"name":"usize"}],"output":{"name":"hashmap"}}],[11,"with_hasher","","Creates an empty hashmap which will use the given hash builder to hash\nkeys.",22,{"inputs":[{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_capacity_and_hasher","","Creates an empty HashMap with space for at least `capacity`\nelements, using `hasher` to hash the keys.",22,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"hasher","","Returns a reference to the map&#39;s hasher.",22,null],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",22,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashMap`. The collection may reserve more space to avoid\nfrequent reallocations.",22,null],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",22,null],[11,"keys","","An iterator visiting all keys in arbitrary order.\nIterator element type is `&amp;&#39;a K`.",22,null],[11,"values","","An iterator visiting all values in arbitrary order.\nIterator element type is `&amp;&#39;a V`.",22,null],[11,"values_mut","","An iterator visiting all values mutably in arbitrary order.\nIterator element type is `&amp;&#39;a mut V`.",22,null],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order.\nIterator element type is `(&amp;&#39;a K, &amp;&#39;a V)`.",22,null],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order,\nwith mutable references to the values.\nIterator element type is `(&amp;&#39;a K, &amp;&#39;a mut V)`.",22,null],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",22,null],[11,"len","","Returns the number of elements in the map.",22,null],[11,"is_empty","","Returns true if the map contains no elements.",22,null],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the\nallocated memory for reuse.",22,null],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory\nfor reuse.",22,null],[11,"get","","Returns a reference to the value corresponding to the key.",22,null],[11,"contains_key","","Returns true if the map contains a value for the specified key.",22,null],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",22,null],[11,"insert","","Inserts a key-value pair into the map.",22,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",22,null],[11,"eq","","",22,null],[11,"fmt","","",22,null],[11,"default","","",22,{"inputs":[],"output":{"name":"hashmap"}}],[11,"index","","",22,null],[11,"clone","","",23,null],[11,"clone","","",24,null],[11,"clone","","",25,null],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each key-value\npair out of the map in arbitrary order. The map cannot be used after\ncalling this.",22,null],[11,"next","","",23,null],[11,"size_hint","","",23,null],[11,"len","","",23,null],[11,"next","","",26,null],[11,"size_hint","","",26,null],[11,"len","","",26,null],[11,"next","","",27,null],[11,"size_hint","","",27,null],[11,"len","","",27,null],[11,"next","","",24,null],[11,"size_hint","","",24,null],[11,"len","","",24,null],[11,"next","","",25,null],[11,"size_hint","","",25,null],[11,"len","","",25,null],[11,"next","","",28,null],[11,"size_hint","","",28,null],[11,"len","","",28,null],[11,"next","","",29,null],[11,"size_hint","","",29,null],[11,"len","","",29,null],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",30,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",30,null],[11,"key","","Returns a reference to this entry&#39;s key.",30,null],[11,"key","","Gets a reference to the key in the entry.",31,null],[11,"get","","Gets a reference to the value in the entry.",31,null],[11,"get_mut","","Gets a mutable reference to the value in the entry.",31,null],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the map itself",31,null],[11,"insert","","Sets the value of the entry, and returns the entry&#39;s old value",31,null],[11,"remove","","Takes the value out of the entry, and returns it",31,null],[11,"key","","Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.",32,null],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it",32,null],[11,"from_iter","","",22,{"inputs":[{"name":"t"}],"output":{"name":"hashmap"}}],[11,"extend","","",22,null],[11,"extend","","",22,null],[11,"clone","","",33,null],[11,"new","","Constructs a new `RandomState` that is initialized with random keys.",33,{"inputs":[],"output":{"name":"randomstate"}}],[11,"build_hasher","","",33,null],[11,"default","","",33,{"inputs":[],"output":{"name":"randomstate"}}],[11,"clone","std::collections::hash::set","",34,null],[11,"new","","Creates an empty HashSet.",34,{"inputs":[],"output":{"name":"hashset"}}],[11,"with_capacity","","Creates an empty HashSet with space for at least `n` elements in\nthe hash table.",34,{"inputs":[{"name":"usize"}],"output":{"name":"hashset"}}],[11,"with_hasher","","Creates a new empty hash set which will use the given hasher to hash\nkeys.",34,{"inputs":[{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hasher","","Creates an empty HashSet with space for at least `capacity`\nelements in the hash table, using `hasher` to hash the keys.",34,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"hasher","","Returns a reference to the set&#39;s hasher.",34,null],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",34,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashSet`. The collection may reserve more space to avoid\nfrequent reallocations.",34,null],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",34,null],[11,"iter","","An iterator visiting all elements in arbitrary order.\nIterator element type is &amp;&#39;a T.",34,null],[11,"difference","","Visit the values representing the difference.",34,null],[11,"symmetric_difference","","Visit the values representing the symmetric difference.",34,null],[11,"intersection","","Visit the values representing the intersection.",34,null],[11,"union","","Visit the values representing the union.",34,null],[11,"len","","Returns the number of elements in the set.",34,null],[11,"is_empty","","Returns true if the set contains no elements.",34,null],[11,"drain","","Clears the set, returning all elements in an iterator.",34,null],[11,"clear","","Clears the set, removing all values.",34,null],[11,"contains","","Returns `true` if the set contains a value.",34,null],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",34,null],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",34,null],[11,"is_subset","","Returns `true` if the set is a subset of another.",34,null],[11,"is_superset","","Returns `true` if the set is a superset of another.",34,null],[11,"insert","","Adds a value to the set.",34,null],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",34,null],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",34,null],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",34,null],[11,"eq","","",34,null],[11,"fmt","","",34,null],[11,"from_iter","","",34,{"inputs":[{"name":"i"}],"output":{"name":"hashset"}}],[11,"extend","","",34,null],[11,"extend","","",34,null],[11,"default","","",34,{"inputs":[],"output":{"name":"hashset"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out\nof the set in arbitrary order. The set cannot be used after calling\nthis.",34,null],[11,"clone","","",35,null],[11,"next","","",35,null],[11,"size_hint","","",35,null],[11,"len","","",35,null],[11,"next","","",36,null],[11,"size_hint","","",36,null],[11,"len","","",36,null],[11,"next","","",37,null],[11,"size_hint","","",37,null],[11,"len","","",37,null],[11,"clone","","",38,null],[11,"next","","",38,null],[11,"size_hint","","",38,null],[11,"clone","","",39,null],[11,"next","","",39,null],[11,"size_hint","","",39,null],[11,"clone","","",40,null],[11,"next","","",40,null],[11,"size_hint","","",40,null],[11,"clone","","",41,null],[11,"next","","",41,null],[11,"size_hint","","",41,null],[11,"clone","collections::vec_deque","",42,null],[11,"drop","","",42,null],[11,"default","","",42,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",42,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",42,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",42,null],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",42,null],[11,"swap","","Swaps elements at indices `i` and `j`.",42,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",42,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",42,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",42,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",42,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",42,null],[11,"iter","","Returns a front-to-back iterator.",42,null],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",42,null],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",42,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",42,null],[11,"len","","Returns the number of elements in the `VecDeque`.",42,null],[11,"is_empty","","Returns true if the buffer contains no elements",42,null],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",42,null],[11,"clear","","Clears the buffer, removing all values.",42,null],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the\ngiven value.",42,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",42,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",42,null],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",42,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",42,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",42,null],[11,"push_front","","Inserts an element first in the sequence.",42,null],[11,"push_back","","Appends an element to the back of a buffer",42,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",42,null],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",42,null],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",42,null],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",42,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",42,null],[11,"split_off","","Splits the collection into two at the given index.",42,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",42,null],[11,"retain","","Retains only the elements specified by the predicate.",42,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",42,null],[11,"clone","","",43,null],[11,"next","","",43,null],[11,"size_hint","","",43,null],[11,"next_back","","",43,null],[11,"next","","",44,null],[11,"size_hint","","",44,null],[11,"next_back","","",44,null],[11,"clone","","",45,null],[11,"next","","",45,null],[11,"size_hint","","",45,null],[11,"next_back","","",45,null],[11,"drop","","",46,null],[11,"next","","",46,null],[11,"size_hint","","",46,null],[11,"next_back","","",46,null],[11,"eq","","",42,null],[11,"partial_cmp","","",42,null],[11,"cmp","","",42,null],[11,"hash","","",42,null],[11,"index","","",42,null],[11,"index_mut","","",42,null],[11,"from_iter","","",42,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",42,null],[11,"extend","","",42,null],[11,"extend","","",42,null],[11,"fmt","","",42,null],[11,"from","","",42,{"inputs":[{"name":"vec"}],"output":{"name":"vecdeque"}}],[11,"from","collections::vec","",47,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"clone","collections::binary_heap","",48,null],[11,"clone_from","","",48,null],[11,"default","","",48,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"fmt","","",48,null],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",48,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",48,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",48,null],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",48,null],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",48,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",48,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",48,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",48,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",48,null],[11,"push","","Pushes an item onto the binary heap.",48,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",48,null],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",48,null],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",48,null],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",48,null],[11,"len","","Returns the length of the binary heap.",48,null],[11,"is_empty","","Checks if the binary heap is empty.",48,null],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",48,null],[11,"clear","","Drops all items from the binary heap.",48,null],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",48,null],[11,"clone","","",49,null],[11,"next","","",49,null],[11,"size_hint","","",49,null],[11,"next_back","","",49,null],[11,"clone","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next_back","","",50,null],[11,"next","","",51,null],[11,"size_hint","","",51,null],[11,"next_back","","",51,null],[11,"from","","",48,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",47,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",48,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",48,null],[11,"extend","","",48,null],[11,"extend","","",48,null],[11,"clone","collections::linked_list","",52,null],[11,"clone","","",53,null],[11,"default","","",54,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",54,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",54,null],[11,"iter","","Provides a forward iterator.",54,null],[11,"iter_mut","","Provides a forward iterator with mutable references.",54,null],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",54,null],[11,"len","","Returns the length of the `LinkedList`.",54,null],[11,"clear","","Removes all elements from the `LinkedList`.",54,null],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the\ngiven value.",54,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",54,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",54,null],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",54,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",54,null],[11,"push_front","","Adds an element first in the list.",54,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",54,null],[11,"push_back","","Appends an element to the back of a list",54,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",54,null],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",54,null],[11,"front_place","","Returns a place for insertion at the front of the list.",54,null],[11,"back_place","","Returns a place for insertion at the back of the list.",54,null],[11,"drop","","",54,null],[11,"next","","",52,null],[11,"size_hint","","",52,null],[11,"next_back","","",52,null],[11,"next","","",55,null],[11,"size_hint","","",55,null],[11,"next_back","","",55,null],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",55,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",55,null],[11,"next","","",53,null],[11,"size_hint","","",53,null],[11,"next_back","","",53,null],[11,"from_iter","","",54,{"inputs":[{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",54,null],[11,"extend","","",54,null],[11,"extend","","",54,null],[11,"eq","","",54,null],[11,"ne","","",54,null],[11,"partial_cmp","","",54,null],[11,"cmp","","",54,null],[11,"clone","","",54,null],[11,"fmt","","",54,null],[11,"hash","","",54,null],[11,"make_place","","",56,null],[11,"pointer","","",56,null],[11,"finalize","","",56,null],[11,"make_place","","",57,null],[11,"pointer","","",57,null],[11,"finalize","","",57,null],[11,"next","std::env","",58,null],[11,"size_hint","","",58,null],[11,"next","","",59,null],[11,"size_hint","","",59,null],[11,"clone","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"fmt","","",60,null],[11,"fmt","","",60,null],[11,"description","","",60,null],[11,"next","","",61,null],[11,"size_hint","","",61,null],[11,"fmt","","",62,null],[11,"fmt","","",62,null],[11,"description","","",62,null],[11,"next","","",63,null],[11,"size_hint","","",63,null],[11,"len","","",63,null],[11,"next","","",64,null],[11,"size_hint","","",64,null],[11,"len","","",64,null],[11,"clone","std::ffi::c_str","",65,null],[11,"hash","","",65,null],[11,"cmp","","",65,null],[11,"partial_cmp","","",65,null],[11,"lt","","",65,null],[11,"le","","",65,null],[11,"gt","","",65,null],[11,"ge","","",65,null],[11,"eq","","",65,null],[11,"ne","","",65,null],[11,"hash","","",66,null],[11,"fmt","","",67,null],[11,"eq","","",67,null],[11,"ne","","",67,null],[11,"clone","","",67,null],[11,"fmt","","",68,null],[11,"eq","","",68,null],[11,"ne","","",68,null],[11,"clone","","",68,null],[11,"fmt","","",69,null],[11,"eq","","",69,null],[11,"ne","","",69,null],[11,"clone","","",69,null],[11,"new","","Creates a new C-compatible string from a container of bytes.",65,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"from_vec_unchecked","","Creates a C-compatible string from a byte vector without checking for\ninterior 0 bytes.",65,{"inputs":[{"name":"vec"}],"output":{"name":"cstring"}}],[11,"from_raw","","Retakes ownership of a `CString` that was transferred to C.",65,null],[11,"into_raw","","Transfers ownership of the string to a C caller.",65,null],[11,"into_string","","Converts the `CString` into a `String` if it contains valid Unicode data.",65,null],[11,"into_bytes","","Returns the underlying byte buffer.",65,null],[11,"into_bytes_with_nul","","Equivalent to the `into_bytes` function except that the returned vector\nincludes the trailing nul byte.",65,null],[11,"as_bytes","","Returns the contents of this `CString` as a slice of bytes.",65,null],[11,"as_bytes_with_nul","","Equivalent to the `as_bytes` function except that the returned slice\nincludes the trailing nul byte.",65,null],[11,"from_ptr","","Casts a raw C string to a safe C string wrapper.",66,null],[11,"from_bytes_with_nul","","Creates a C string wrapper from a byte slice.",66,null],[11,"from_bytes_with_nul_unchecked","","Unsafely creates a C string wrapper from a byte slice.",66,null],[11,"as_ptr","","Returns the inner pointer to this C string.",66,null],[11,"to_bytes","","Converts this C string to a byte slice.",66,null],[11,"to_bytes_with_nul","","Converts this C string to a byte slice containing the trailing 0 byte.",66,null],[11,"to_str","","Yields a `&amp;str` slice if the `CStr` contains valid UTF-8.",66,null],[11,"to_string_lossy","","Converts a `CStr` into a `Cow&lt;str&gt;`.",66,null],[11,"deref","","",65,null],[11,"fmt","","",65,null],[11,"from","collections::vec","",47,{"inputs":[{"name":"cstring"}],"output":{"name":"vec"}}],[11,"fmt","std::ffi::c_str","",66,null],[11,"default","","",65,{"inputs":[],"output":{"name":"cstring"}}],[11,"borrow","","",65,null],[11,"nul_position","","Returns the position of the nul byte in the slice that was provided to\n`CString::new`.",67,null],[11,"into_vec","","Consumes this error, returning the underlying vector of bytes which\ngenerated the error in the first place.",67,null],[11,"description","","",67,null],[11,"fmt","","",67,null],[11,"from","std::io::error","",70,{"inputs":[{"name":"nulerror"}],"output":{"name":"error"}}],[11,"into_cstring","std::ffi::c_str","Consumes this error, returning original `CString` which generated the\nerror.",69,null],[11,"utf8_error","","Access the underlying UTF-8 error that was the cause of this error.",69,null],[11,"description","","",69,null],[11,"cause","","",69,null],[11,"fmt","","",69,null],[11,"eq","","",66,null],[11,"partial_cmp","","",66,null],[11,"cmp","","",66,null],[11,"to_owned","","",66,null],[11,"from","","",65,{"inputs":[{"name":"cstr"}],"output":{"name":"cstring"}}],[11,"index","","",65,null],[11,"as_ref","","",66,null],[11,"as_ref","","",65,null],[11,"clone","std::ffi::os_str","",71,null],[11,"new","","Constructs a new empty `OsString`.",71,{"inputs":[],"output":{"name":"osstring"}}],[11,"as_os_str","","Converts to an `OsStr` slice.",71,null],[11,"into_string","","Converts the `OsString` into a `String` if it contains valid Unicode data.",71,null],[11,"push","","Extends the string with the given `&amp;OsStr` slice.",71,null],[11,"with_capacity","","Creates a new `OsString` with the given capacity.",71,{"inputs":[{"name":"usize"}],"output":{"name":"osstring"}}],[11,"clear","","Truncates the `OsString` to zero length.",71,null],[11,"capacity","","Returns the capacity this `OsString` can hold without reallocating.",71,null],[11,"reserve","","Reserves capacity for at least `additional` more capacity to be inserted\nin the given `OsString`.",71,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more capacity to\nbe inserted in the given `OsString`. Does nothing if the capacity is\nalready sufficient.",71,null],[11,"from","","",71,{"inputs":[{"name":"string"}],"output":{"name":"osstring"}}],[11,"from","","",71,{"inputs":[{"name":"t"}],"output":{"name":"osstring"}}],[11,"index","","",71,null],[11,"new","","Coerces into an `OsStr` slice.",72,{"inputs":[{"name":"s"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a `&amp;str` slice if the `OsStr` is valid Unicode.",72,null],[11,"to_string_lossy","","Converts an `OsStr` to a `Cow&lt;str&gt;`.",72,null],[11,"to_os_string","","Copies the slice into an owned `OsString`.",72,null],[11,"is_empty","","Checks whether the `OsStr` is empty.",72,null],[11,"len","","Returns the length of this `OsStr`.",72,null],[11,"deref","","",71,null],[11,"default","","",71,{"inputs":[],"output":{"name":"osstring"}}],[11,"fmt","","",71,null],[11,"eq","","",71,null],[11,"eq","","",71,null],[11,"partial_cmp","","",71,null],[11,"lt","","",71,null],[11,"le","","",71,null],[11,"gt","","",71,null],[11,"ge","","",71,null],[11,"partial_cmp","","",71,null],[11,"cmp","","",71,null],[11,"hash","","",71,null],[11,"eq","","",72,null],[11,"eq","","",72,null],[11,"partial_cmp","","",72,null],[11,"lt","","",72,null],[11,"le","","",72,null],[11,"gt","","",72,null],[11,"ge","","",72,null],[11,"partial_cmp","","",72,null],[11,"cmp","","",72,null],[11,"eq","","",71,null],[11,"eq","","",72,null],[11,"partial_cmp","","",71,null],[11,"partial_cmp","","",72,null],[11,"eq","","",71,null],[11,"partial_cmp","","",71,null],[11,"eq","collections::borrow","",73,null],[11,"eq","std::ffi::os_str","",72,null],[11,"partial_cmp","collections::borrow","",73,null],[11,"partial_cmp","std::ffi::os_str","",72,null],[11,"eq","collections::borrow","",73,null],[11,"partial_cmp","","",73,null],[11,"eq","","",73,null],[11,"eq","std::ffi::os_str","",71,null],[11,"partial_cmp","collections::borrow","",73,null],[11,"partial_cmp","std::ffi::os_str","",71,null],[11,"hash","","",72,null],[11,"fmt","","",72,null],[11,"borrow","","",71,null],[11,"to_owned","","",72,null],[11,"as_ref","","",72,null],[11,"as_ref","","",71,null],[11,"as_ref","collections::string","",74,null],[11,"clone","std::fs","",75,null],[11,"clone","","",76,null],[11,"fmt","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"clone","","",77,null],[11,"hash","","",78,null],[11,"eq","","",78,null],[11,"ne","","",78,null],[11,"clone","","",78,null],[11,"open","","Attempts to open a file in read-only mode.",79,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"create","","Opens a file in write-only mode.",79,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"sync_all","","Attempts to sync all OS-internal metadata to disk.",79,null],[11,"sync_data","","This function is similar to `sync_all`, except that it may not\nsynchronize file metadata to the filesystem.",79,null],[11,"set_len","","Truncates or extends the underlying file, updating the size of\nthis file to become `size`.",79,null],[11,"metadata","","Queries metadata about the underlying file.",79,null],[11,"try_clone","","Creates a new independently owned handle to the underlying file.",79,null],[11,"fmt","","",79,null],[11,"read","","",79,null],[11,"read_to_end","","",79,null],[11,"write","","",79,null],[11,"flush","","",79,null],[11,"seek","","",79,null],[11,"new","","Creates a blank new set of options ready for configuration.",76,{"inputs":[],"output":{"name":"openoptions"}}],[11,"read","","Sets the option for read access.",76,null],[11,"write","","Sets the option for write access.",76,null],[11,"append","","Sets the option for the append mode.",76,null],[11,"truncate","","Sets the option for truncating a previous file.",76,null],[11,"create","","Sets the option for creating a new file.",76,null],[11,"create_new","","Sets the option to always create a new file.",76,null],[11,"open","","Opens a file at `path` with the options specified by `self`.",76,null],[11,"file_type","","Returns the file type for this metadata.",75,null],[11,"is_dir","","Returns whether this metadata is for a directory.",75,null],[11,"is_file","","Returns whether this metadata is for a regular file.",75,null],[11,"len","","Returns the size of the file, in bytes, this metadata is for.",75,null],[11,"permissions","","Returns the permissions of the file this metadata is for.",75,null],[11,"modified","","Returns the last modification time listed in this metadata.",75,null],[11,"accessed","","Returns the last access time of this metadata.",75,null],[11,"created","","Returns the creation time listed in the this metadata.",75,null],[11,"readonly","","Returns whether these permissions describe a readonly file.",77,null],[11,"set_readonly","","Modifies the readonly flag for this set of permissions.",77,null],[11,"is_dir","","Test whether this file type represents a directory.",78,null],[11,"is_file","","Test whether this file type represents a regular file.",78,null],[11,"is_symlink","","Test whether this file type represents a symbolic link.",78,null],[11,"next","","",80,null],[11,"path","","Returns the full path to the file that this entry represents.",81,null],[11,"metadata","","Return the metadata for the file that this entry points at.",81,null],[11,"file_type","","Return the file type for the file that this entry points at.",81,null],[11,"file_name","","Returns the bare file name of this directory entry without any other\nleading path component.",81,null],[11,"new","","Creates a new set of options with default mode/security settings for all\nplatforms and also non-recursive.",82,{"inputs":[],"output":{"name":"dirbuilder"}}],[11,"recursive","","Indicate that directories create should be created recursively, creating\nall parent directories if they do not exist with the same security and\npermissions settings.",82,null],[11,"create","","Create the specified directory with the options configured in this\nbuilder.",82,null],[11,"new","std::io::buffered","Creates a new `BufReader` with a default buffer capacity.",83,{"inputs":[{"name":"r"}],"output":{"name":"bufreader"}}],[11,"with_capacity","","Creates a new `BufReader` with the specified buffer capacity.",83,{"inputs":[{"name":"usize"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"get_ref","","Gets a reference to the underlying reader.",83,null],[11,"get_mut","","Gets a mutable reference to the underlying reader.",83,null],[11,"into_inner","","Unwraps this `BufReader`, returning the underlying reader.",83,null],[11,"read","","",83,null],[11,"fill_buf","","",83,null],[11,"consume","","",83,null],[11,"fmt","","",83,null],[11,"seek","","Seek to an offset, in bytes, in the underlying reader.",83,null],[11,"fmt","","",84,null],[11,"new","","Creates a new `BufWriter` with a default buffer capacity.",85,{"inputs":[{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"with_capacity","","Creates a new `BufWriter` with the specified buffer capacity.",85,{"inputs":[{"name":"usize"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",85,null],[11,"get_mut","","Gets a mutable reference to the underlying writer.",85,null],[11,"into_inner","","Unwraps this `BufWriter`, returning the underlying writer.",85,null],[11,"write","","",85,null],[11,"flush","","",85,null],[11,"fmt","","",85,null],[11,"seek","","Seek to the offset, in bytes, in the underlying writer.",85,null],[11,"drop","","",85,null],[11,"error","","Returns the error which caused the call to `into_inner()` to fail.",84,null],[11,"into_inner","","Returns the buffered writer instance which generated the error.",84,null],[11,"from","std::io::error","",70,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"description","std::io::buffered","",84,null],[11,"fmt","","",84,null],[11,"new","","Creates a new `LineWriter`.",86,{"inputs":[{"name":"w"}],"output":{"name":"linewriter"}}],[11,"with_capacity","","Creates a new `LineWriter` with a specified capacity for the internal\nbuffer.",86,{"inputs":[{"name":"usize"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",86,null],[11,"get_mut","","Gets a mutable reference to the underlying writer.",86,null],[11,"into_inner","","Unwraps this `LineWriter`, returning the underlying writer.",86,null],[11,"write","","",86,null],[11,"flush","","",86,null],[11,"fmt","","",86,null],[11,"fmt","std::io::cursor","",87,null],[11,"clone","","",87,null],[11,"new","","Creates a new cursor wrapping the provided underlying I/O object.",87,{"inputs":[{"name":"t"}],"output":{"name":"cursor"}}],[11,"into_inner","","Consumes this cursor, returning the underlying value.",87,null],[11,"get_ref","","Gets a reference to the underlying value in this cursor.",87,null],[11,"get_mut","","Gets a mutable reference to the underlying value in this cursor.",87,null],[11,"position","","Returns the current position of this cursor.",87,null],[11,"set_position","","Sets the position of this cursor.",87,null],[11,"seek","","",87,null],[11,"read","","",87,null],[11,"fill_buf","","",87,null],[11,"consume","","",87,null],[11,"write","","",87,null],[11,"flush","","",87,null],[11,"write","","",87,null],[11,"flush","","",87,null],[11,"write","","",87,null],[11,"flush","","",87,null],[11,"fmt","std::io::error","",70,null],[11,"fmt","","",88,null],[11,"clone","","",88,null],[11,"eq","","",88,null],[11,"new","","Creates a new I/O error from a known kind of error as well as an\narbitrary error payload.",70,{"inputs":[{"name":"errorkind"},{"name":"e"}],"output":{"name":"error"}}],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",70,{"inputs":[],"output":{"name":"error"}}],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",70,{"inputs":[{"name":"i32"}],"output":{"name":"error"}}],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",70,null],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",70,null],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error\n(if any).",70,null],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",70,null],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",70,null],[11,"fmt","","",70,null],[11,"description","","",70,null],[11,"cause","","",70,null],[11,"read","alloc::boxed","",1,null],[11,"read_to_end","","",1,null],[11,"read_to_string","","",1,null],[11,"read_exact","","",1,null],[11,"write","","",1,null],[11,"flush","","",1,null],[11,"write_all","","",1,null],[11,"write_fmt","","",1,null],[11,"seek","","",1,null],[11,"fill_buf","","",1,null],[11,"consume","","",1,null],[11,"read_until","","",1,null],[11,"read_line","","",1,null],[11,"write","collections::vec","",47,null],[11,"write_all","","",47,null],[11,"flush","","",47,null],[11,"read","std::io::util","",89,null],[11,"fill_buf","","",89,null],[11,"consume","","",89,null],[11,"read","","",90,null],[11,"write","","",91,null],[11,"flush","","",91,null],[11,"lock","std::io::stdio","Locks this handle to the standard input stream, returning a readable\nguard.",92,null],[11,"read_line","","Locks this handle and reads a line of input into the specified buffer.",92,null],[11,"read","","",92,null],[11,"read_to_end","","",92,null],[11,"read_to_string","","",92,null],[11,"read_exact","","",92,null],[11,"read","","",93,null],[11,"read_to_end","","",93,null],[11,"fill_buf","","",93,null],[11,"consume","","",93,null],[11,"lock","","Locks this handle to the standard output stream, returning a writable\nguard.",94,null],[11,"write","","",94,null],[11,"flush","","",94,null],[11,"write_all","","",94,null],[11,"write_fmt","","",94,null],[11,"write","","",95,null],[11,"flush","","",95,null],[11,"lock","","Locks this handle to the standard error stream, returning a writable\nguard.",96,null],[11,"write","","",96,null],[11,"flush","","",96,null],[11,"write_all","","",96,null],[11,"write_fmt","","",96,null],[11,"write","","",97,null],[11,"flush","","",97,null],[11,"fmt","std::io","",98,null],[11,"clone","","",98,null],[11,"eq","","",98,null],[11,"ne","","",98,null],[11,"read","","",99,null],[11,"fill_buf","","",99,null],[11,"consume","","",99,null],[11,"limit","","Returns the number of bytes that can be read before this instance will\nreturn EOF.",100,null],[11,"read","","",100,null],[11,"fill_buf","","",100,null],[11,"consume","","",100,null],[11,"next","","",101,null],[11,"fmt","","",102,null],[11,"next","","",103,null],[11,"description","","",102,null],[11,"cause","","",102,null],[11,"fmt","","",102,null],[11,"next","","",104,null],[11,"next","","",105,null],[11,"cmp","std::net::ip","",106,null],[11,"partial_cmp","","",106,null],[11,"lt","","",106,null],[11,"le","","",106,null],[11,"gt","","",106,null],[11,"ge","","",106,null],[11,"hash","","",106,null],[11,"fmt","","",106,null],[11,"eq","","",106,null],[11,"ne","","",106,null],[11,"clone","","",106,null],[11,"fmt","","",107,null],[11,"hash","","",107,null],[11,"clone","","",107,null],[11,"eq","","",107,null],[11,"fmt","","",106,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"hash","","",0,null],[11,"partial_cmp","","",0,null],[11,"cmp","","",0,null],[11,"from","","",0,{"inputs":[{"name":"u32"}],"output":{"name":"ipv4addr"}}],[11,"from","","",0,null],[11,"new","","Creates a new IPv6 address from eight 16-bit segments.",108,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Returns the eight 16-bit segments that make up this address.",108,null],[11,"is_unspecified","","Returns true for the special &#39;unspecified&#39; address ::.",108,null],[11,"is_loopback","","Returns true if this is a loopback address (::1).",108,null],[11,"is_global","","Returns true if the address appears to be globally routable.",108,null],[11,"is_unique_local","","Returns true if this is a unique local address (IPv6).",108,null],[11,"is_unicast_link_local","","Returns true if the address is unicast and link-local (fe80::/10).",108,null],[11,"is_unicast_site_local","","Returns true if this is a deprecated unicast site-local address (IPv6\nfec0::/10).",108,null],[11,"is_documentation","","Returns true if this is an address reserved for documentation\nThis is defined to be 2001:db8::/32 in RFC 3849.",108,null],[11,"is_unicast_global","","Returns true if the address is a globally routable unicast address.",108,null],[11,"multicast_scope","","Returns the address&#39;s multicast scope if the address is multicast.",108,null],[11,"is_multicast","","Returns true if this is a multicast address.",108,null],[11,"to_ipv4","","Converts this address to an IPv4 address. Returns None if this address is\nneither IPv4-compatible or IPv4-mapped.",108,null],[11,"octets","","Returns the sixteen eight-bit integers the IPv6 address consists of.",108,null],[11,"fmt","","",108,null],[11,"fmt","","",108,null],[11,"clone","","",108,null],[11,"eq","","",108,null],[11,"hash","","",108,null],[11,"partial_cmp","","",108,null],[11,"cmp","","",108,null],[11,"from","","",108,null],[11,"fmt","std::net::addr","",109,null],[11,"hash","","",109,null],[11,"eq","","",109,null],[11,"ne","","",109,null],[11,"clone","","",109,null],[11,"new","","Creates a new socket address from the (ip, port) pair.",109,{"inputs":[{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"socketaddr"}}],[11,"ip","","Returns the IP address associated with this socket address.",109,null],[11,"set_ip","","Change the IP address associated with this socket address.",109,null],[11,"port","","Returns the port number associated with this socket address.",109,null],[11,"set_port","","Change the port number associated with this socket address.",109,null],[11,"new","","Creates a new socket address from the (ip, port) pair.",110,{"inputs":[{"name":"ipv4addr"},{"name":"u16"}],"output":{"name":"socketaddrv4"}}],[11,"ip","","Returns the IP address associated with this socket address.",110,null],[11,"set_ip","","Change the IP address associated with this socket address.",110,null],[11,"port","","Returns the port number associated with this socket address.",110,null],[11,"set_port","","Change the port number associated with this socket address.",110,null],[11,"new","","Creates a new socket address from the ip/port/flowinfo/scope_id\ncomponents.",111,{"inputs":[{"name":"ipv6addr"},{"name":"u16"},{"name":"u32"},{"name":"u32"}],"output":{"name":"socketaddrv6"}}],[11,"ip","","Returns the IP address associated with this socket address.",111,null],[11,"set_ip","","Change the IP address associated with this socket address.",111,null],[11,"port","","Returns the port number associated with this socket address.",111,null],[11,"set_port","","Change the port number associated with this socket address.",111,null],[11,"flowinfo","","Returns the flow information associated with this address,\ncorresponding to the `sin6_flowinfo` field in C.",111,null],[11,"set_flowinfo","","Change the flow information associated with this socket address.",111,null],[11,"scope_id","","Returns the scope ID associated with this address,\ncorresponding to the `sin6_scope_id` field in C.",111,null],[11,"set_scope_id","","Change the scope ID associated with this socket address.",111,null],[11,"fmt","","",109,null],[11,"fmt","","",110,null],[11,"fmt","","",110,null],[11,"fmt","","",111,null],[11,"fmt","","",111,null],[11,"clone","","",110,null],[11,"clone","","",111,null],[11,"eq","","",110,null],[11,"eq","","",111,null],[11,"hash","","",110,null],[11,"hash","","",111,null],[11,"to_socket_addrs","","",109,null],[11,"to_socket_addrs","","",110,null],[11,"to_socket_addrs","","",111,null],[11,"connect","std::net::tcp","Opens a TCP connection to a remote host.",112,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",112,null],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",112,null],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",112,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",112,null],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",112,null],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",112,null],[11,"read_timeout","","Returns the read timeout of this socket.",112,null],[11,"write_timeout","","Returns the write timeout of this socket.",112,null],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",112,null],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",112,null],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",112,null],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",112,null],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",112,null],[11,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",112,null],[11,"read","","",112,null],[11,"read_to_end","","",112,null],[11,"write","","",112,null],[11,"flush","","",112,null],[11,"fmt","","",112,null],[11,"bind","","Creates a new `TcpListener` which will be bound to the specified\naddress.",113,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the local socket address of this listener.",113,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",113,null],[11,"accept","","Accept a new incoming connection from this listener.",113,null],[11,"incoming","","Returns an iterator over the connections being received on this\nlistener.",113,null],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",113,null],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",113,null],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",113,null],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",113,null],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",113,null],[11,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",113,null],[11,"next","","",114,null],[11,"fmt","","",113,null],[11,"bind","std::net::udp","Creates a UDP socket from the given address.",115,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.",115,null],[11,"send_to","","Sends data on the socket to the given address. On success, returns the\nnumber of bytes written.",115,null],[11,"local_addr","","Returns the socket address that this socket was created from.",115,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",115,null],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",115,null],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",115,null],[11,"read_timeout","","Returns the read timeout of this socket.",115,null],[11,"write_timeout","","Returns the write timeout of this socket.",115,null],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",115,null],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",115,null],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",115,null],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",115,null],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",115,null],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",115,null],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",115,null],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",115,null],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",115,null],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",115,null],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",115,null],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",115,null],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",115,null],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",115,null],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",115,null],[11,"connect","","Connects this UDP socket to a remote address, allowing the `send` and\n`recv` syscalls to be used to send data and also applies filters to only\nreceive data from the specified address.",115,null],[11,"send","","Sends data on the socket to the remote address to which it is connected.",115,null],[11,"recv","","Receives data on the socket from the remote address to which it is\nconnected.",115,null],[11,"set_nonblocking","","Moves this UDP socket into or out of nonblocking mode.",115,null],[11,"fmt","","",115,null],[11,"from_str","std::net::ip","",106,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",108,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","std::net::addr","",110,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",111,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",109,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","std::net::parser","",116,null],[11,"ne","","",116,null],[11,"clone","","",116,null],[11,"fmt","","",116,null],[11,"fmt","","",116,null],[11,"description","","",116,null],[11,"fmt","std::net","",117,null],[11,"eq","","",117,null],[11,"clone","","",117,null],[11,"next","","",118,null],[11,"clone","std::os::linux::raw::arch","",119,null],[11,"as_raw_stat","std::fs","",75,null],[11,"st_dev","","",75,null],[11,"st_ino","","",75,null],[11,"st_mode","","",75,null],[11,"st_nlink","","",75,null],[11,"st_uid","","",75,null],[11,"st_gid","","",75,null],[11,"st_rdev","","",75,null],[11,"st_size","","",75,null],[11,"st_atime","","",75,null],[11,"st_atime_nsec","","",75,null],[11,"st_mtime","","",75,null],[11,"st_mtime_nsec","","",75,null],[11,"st_ctime","","",75,null],[11,"st_ctime_nsec","","",75,null],[11,"st_blksize","","",75,null],[11,"st_blocks","","",75,null],[11,"as_raw_fd","","",79,null],[11,"from_raw_fd","","",79,{"inputs":[{"name":"i32"}],"output":{"name":"file"}}],[11,"into_raw_fd","","",79,null],[11,"as_raw_fd","std::net::tcp","",112,null],[11,"as_raw_fd","","",113,null],[11,"as_raw_fd","std::net::udp","",115,null],[11,"from_raw_fd","std::net::tcp","",112,{"inputs":[{"name":"i32"}],"output":{"name":"tcpstream"}}],[11,"from_raw_fd","","",113,{"inputs":[{"name":"i32"}],"output":{"name":"tcplistener"}}],[11,"from_raw_fd","std::net::udp","",115,{"inputs":[{"name":"i32"}],"output":{"name":"udpsocket"}}],[11,"into_raw_fd","std::net::tcp","",112,null],[11,"into_raw_fd","","",113,null],[11,"into_raw_fd","std::net::udp","",115,null],[11,"from_vec","std::ffi::os_str","",71,{"inputs":[{"name":"vec"}],"output":{"name":"osstring"}}],[11,"into_vec","","",71,null],[11,"from_bytes","","",72,null],[11,"as_bytes","","",72,null],[11,"mode","std::fs","",77,null],[11,"set_mode","","",77,null],[11,"from_mode","","",77,{"inputs":[{"name":"u32"}],"output":{"name":"permissions"}}],[11,"mode","","",76,null],[11,"custom_flags","","",76,null],[11,"dev","","",75,null],[11,"ino","","",75,null],[11,"mode","","",75,null],[11,"nlink","","",75,null],[11,"uid","","",75,null],[11,"gid","","",75,null],[11,"rdev","","",75,null],[11,"size","","",75,null],[11,"atime","","",75,null],[11,"atime_nsec","","",75,null],[11,"mtime","","",75,null],[11,"mtime_nsec","","",75,null],[11,"ctime","","",75,null],[11,"ctime_nsec","","",75,null],[11,"blksize","","",75,null],[11,"blocks","","",75,null],[11,"is_block_device","","",78,null],[11,"is_char_device","","",78,null],[11,"is_fifo","","",78,null],[11,"is_socket","","",78,null],[11,"ino","","",81,null],[11,"mode","","",82,null],[11,"uid","std::process","",120,null],[11,"gid","","",120,null],[11,"session_leader","","",120,null],[11,"before_exec","","",120,null],[11,"exec","","",120,null],[11,"from_raw","","",121,{"inputs":[{"name":"i32"}],"output":{"name":"exitstatus"}}],[11,"signal","","",121,null],[11,"from_raw_fd","","",122,{"inputs":[{"name":"i32"}],"output":{"name":"stdio"}}],[11,"as_raw_fd","","",123,null],[11,"as_raw_fd","","",124,null],[11,"as_raw_fd","","",125,null],[11,"into_raw_fd","","",123,null],[11,"into_raw_fd","","",124,null],[11,"into_raw_fd","","",125,null],[11,"as_pthread_t","std::thread","",21,null],[11,"into_pthread_t","","",21,null],[11,"clone","std::sys::ext::net","",126,null],[11,"is_unnamed","","Returns true iff the address is unnamed.",126,null],[11,"as_pathname","","Returns the contents of this address if it is a `pathname` address.",126,null],[11,"fmt","","",126,null],[11,"fmt","","",127,null],[11,"connect","","Connects to the socket named by `path`.",127,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"pair","","Creates an unnamed pair of connected sockets.",127,{"inputs":[],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",127,null],[11,"local_addr","","Returns the socket address of the local half of this connection.",127,null],[11,"peer_addr","","Returns the socket address of the remote half of this connection.",127,null],[11,"set_read_timeout","","Sets the read timeout for the socket.",127,null],[11,"set_write_timeout","","Sets the write timeout for the socket.",127,null],[11,"read_timeout","","Returns the read timeout of this socket.",127,null],[11,"write_timeout","","Returns the write timeout of this socket.",127,null],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",127,null],[11,"take_error","","Returns the value of the `SO_ERROR` option.",127,null],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",127,null],[11,"read","","",127,null],[11,"read_to_end","","",127,null],[11,"write","","",127,null],[11,"flush","","",127,null],[11,"as_raw_fd","","",127,null],[11,"from_raw_fd","","",127,{"inputs":[{"name":"i32"}],"output":{"name":"unixstream"}}],[11,"into_raw_fd","","",127,null],[11,"fmt","","",128,null],[11,"bind","","Creates a new `UnixListener` bound to the specified socket.",128,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"accept","","Accepts a new incoming connection to this listener.",128,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",128,null],[11,"local_addr","","Returns the local socket address of this listener.",128,null],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",128,null],[11,"take_error","","Returns the value of the `SO_ERROR` option.",128,null],[11,"incoming","","Returns an iterator over incoming connections.",128,null],[11,"as_raw_fd","","",128,null],[11,"from_raw_fd","","",128,{"inputs":[{"name":"i32"}],"output":{"name":"unixlistener"}}],[11,"into_raw_fd","","",128,null],[11,"fmt","","",129,null],[11,"next","","",129,null],[11,"size_hint","","",129,null],[11,"fmt","","",130,null],[11,"bind","","Creates a Unix datagram socket bound to the given path.",130,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"unbound","","Creates a Unix Datagram socket which is not bound to any address.",130,{"inputs":[],"output":{"name":"result"}}],[11,"pair","","Create an unnamed pair of connected sockets.",130,{"inputs":[],"output":{"name":"result"}}],[11,"connect","","Connects the socket to the specified address.",130,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",130,null],[11,"local_addr","","Returns the address of this socket.",130,null],[11,"peer_addr","","Returns the address of this socket&#39;s peer.",130,null],[11,"recv_from","","Receives data from the socket.",130,null],[11,"recv","","Receives data from the socket.",130,null],[11,"send_to","","Sends data on the socket to the specified address.",130,null],[11,"send","","Sends data on the socket to the socket&#39;s peer.",130,null],[11,"set_read_timeout","","Sets the read timeout for the socket.",130,null],[11,"set_write_timeout","","Sets the write timeout for the socket.",130,null],[11,"read_timeout","","Returns the read timeout of this socket.",130,null],[11,"write_timeout","","Returns the write timeout of this socket.",130,null],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",130,null],[11,"take_error","","Returns the value of the `SO_ERROR` option.",130,null],[11,"shutdown","","Shut down the read, write, or both halves of this connection.",130,null],[11,"as_raw_fd","","",130,null],[11,"from_raw_fd","","",130,{"inputs":[{"name":"i32"}],"output":{"name":"unixdatagram"}}],[11,"into_raw_fd","","",130,null],[11,"deref","std::panic","",131,null],[11,"deref_mut","","",131,null],[11,"call_once","","",131,null],[11,"new","","Creates a new `AssertRecoverSafe` wrapper around the provided type.",132,{"inputs":[{"name":"t"}],"output":{"name":"assertrecoversafe"}}],[11,"into_inner","","Consumes the `AssertRecoverSafe`, returning the wrapped value.",132,null],[11,"deref","","",132,null],[11,"deref_mut","","",132,null],[11,"call_once","","",132,null],[11,"eq","std::path","",133,null],[11,"ne","","",133,null],[11,"cmp","","",133,null],[11,"partial_cmp","","",133,null],[11,"lt","","",133,null],[11,"le","","",133,null],[11,"gt","","",133,null],[11,"ge","","",133,null],[11,"hash","","",133,null],[11,"fmt","","",133,null],[11,"clone","","",133,null],[11,"is_verbatim","","Determines if the prefix is verbatim, i.e. begins with `\\\\?\\`.",133,null],[11,"fmt","","",134,null],[11,"clone","","",134,null],[11,"kind","","The parsed prefix data.",134,null],[11,"as_os_str","","The raw `OsStr` slice for this prefix.",134,null],[11,"eq","","",134,null],[11,"partial_cmp","","",134,null],[11,"cmp","","",134,null],[11,"hash","","",134,null],[11,"fmt","","",135,null],[11,"hash","","",135,null],[11,"cmp","","",135,null],[11,"partial_cmp","","",135,null],[11,"lt","","",135,null],[11,"le","","",135,null],[11,"gt","","",135,null],[11,"ge","","",135,null],[11,"eq","","",135,null],[11,"ne","","",135,null],[11,"clone","","",135,null],[11,"as_os_str","","Extracts the underlying `OsStr` slice",135,null],[11,"as_ref","","",135,null],[11,"clone","","",136,null],[11,"clone","","",137,null],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",136,null],[11,"as_ref","","",136,null],[11,"as_ref","","",136,null],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",137,null],[11,"as_ref","","",137,null],[11,"as_ref","","",137,null],[11,"next","","",137,null],[11,"next_back","","",137,null],[11,"next","","",136,null],[11,"next_back","","",136,null],[11,"eq","","",136,null],[11,"partial_cmp","","",136,null],[11,"cmp","","",136,null],[11,"clone","","",138,null],[11,"new","","Allocates an empty `PathBuf`.",138,{"inputs":[],"output":{"name":"pathbuf"}}],[11,"as_path","","Coerces to a `Path` slice.",138,null],[11,"push","","Extends `self` with `path`.",138,null],[11,"pop","","Truncate `self` to `self.parent()`.",138,null],[11,"set_file_name","","Updates `self.file_name()` to `file_name`.",138,null],[11,"set_extension","","Updates `self.extension()` to `extension`.",138,null],[11,"into_os_string","","Consumes the `PathBuf`, yielding its internal `OsString` storage.",138,null],[11,"from","","",138,{"inputs":[{"name":"t"}],"output":{"name":"pathbuf"}}],[11,"from","","",138,{"inputs":[{"name":"osstring"}],"output":{"name":"pathbuf"}}],[11,"from","","",138,{"inputs":[{"name":"string"}],"output":{"name":"pathbuf"}}],[11,"from_iter","","",138,{"inputs":[{"name":"i"}],"output":{"name":"pathbuf"}}],[11,"extend","","",138,null],[11,"fmt","","",138,null],[11,"new","","Directly wrap a string slice as a `Path` slice.",139,{"inputs":[{"name":"s"}],"output":{"name":"path"}}],[11,"as_os_str","","Yields the underlying `OsStr` slice.",139,null],[11,"to_str","","Yields a `&amp;str` slice if the `Path` is valid unicode.",139,null],[11,"to_string_lossy","","Converts a `Path` to a `Cow&lt;str&gt;`.",139,null],[11,"to_path_buf","","Converts a `Path` to an owned `PathBuf`.",139,null],[11,"is_absolute","","A path is *absolute* if it is independent of the current directory.",139,null],[11,"is_relative","","A path is *relative* if it is not absolute.",139,null],[11,"has_root","","A path has a root if the body of the path begins with the directory separator.",139,null],[11,"parent","","The path without its final component, if any.",139,null],[11,"file_name","","The final component of the path, if it is a normal file.",139,null],[11,"strip_prefix","","Returns a path that, when joined onto `base`, yields `self`.",139,null],[11,"starts_with","","Determines whether `base` is a prefix of `self`.",139,null],[11,"ends_with","","Determines whether `child` is a suffix of `self`.",139,null],[11,"file_stem","","Extracts the stem (non-extension) portion of `self.file_name()`.",139,null],[11,"extension","","Extracts the extension of `self.file_name()`, if possible.",139,null],[11,"join","","Creates an owned `PathBuf` with `path` adjoined to `self`.",139,null],[11,"with_file_name","","Creates an owned `PathBuf` like `self` but with the given file name.",139,null],[11,"with_extension","","Creates an owned `PathBuf` like `self` but with the given extension.",139,null],[11,"components","","Produce an iterator over the components of the path.",139,null],[11,"iter","","Produce an iterator over the path&#39;s components viewed as `OsStr` slices.",139,null],[11,"display","","Returns an object that implements `Display` for safely printing paths\nthat may contain non-Unicode data.",139,null],[11,"metadata","","Query the file system to get information about a file, directory, etc.",139,null],[11,"symlink_metadata","","Query the metadata about a file without following symlinks.",139,null],[11,"canonicalize","","Returns the canonical form of the path with all intermediate components\nnormalized and symbolic links resolved.",139,null],[11,"read_link","","Reads a symbolic link, returning the file that the link points to.",139,null],[11,"read_dir","","Returns an iterator over the entries within a directory.",139,null],[11,"exists","","Returns whether the path points at an existing entity.",139,null],[11,"is_file","","Returns whether the path is pointing at a regular file.",139,null],[11,"is_dir","","Returns whether the path is pointing at a directory.",139,null],[11,"deref","","",138,null],[11,"borrow","","",138,null],[11,"from","collections::borrow","",73,{"inputs":[{"name":"path"}],"output":{"name":"cow"}}],[11,"from","","",73,{"inputs":[{"name":"pathbuf"}],"output":{"name":"cow"}}],[11,"to_owned","std::path","",139,null],[11,"eq","","",138,null],[11,"hash","","",138,null],[11,"partial_cmp","","",138,null],[11,"cmp","","",138,null],[11,"as_ref","","",138,null],[11,"into","","",138,null],[11,"eq","","",140,null],[11,"ne","","",140,null],[11,"clone","","",140,null],[11,"fmt","","",140,null],[11,"as_ref","","",139,null],[11,"fmt","","",139,null],[11,"fmt","","",141,null],[11,"fmt","","",141,null],[11,"eq","","",139,null],[11,"hash","","",139,null],[11,"partial_cmp","","",139,null],[11,"cmp","","",139,null],[11,"as_ref","","",139,null],[11,"as_ref","std::ffi::os_str","",72,null],[11,"as_ref","collections::borrow","",73,null],[11,"as_ref","std::ffi::os_str","",71,null],[11,"as_ref","collections::string","",74,null],[11,"as_ref","std::path","",138,null],[11,"eq","","",138,null],[11,"eq","","",139,null],[11,"partial_cmp","","",138,null],[11,"partial_cmp","","",139,null],[11,"eq","","",138,null],[11,"partial_cmp","","",138,null],[11,"eq","collections::borrow","",73,null],[11,"eq","std::path","",139,null],[11,"partial_cmp","collections::borrow","",73,null],[11,"partial_cmp","std::path","",139,null],[11,"eq","collections::borrow","",73,null],[11,"partial_cmp","","",73,null],[11,"eq","","",73,null],[11,"eq","std::path","",138,null],[11,"partial_cmp","collections::borrow","",73,null],[11,"partial_cmp","std::path","",138,null],[11,"eq","","",138,null],[11,"eq","std::ffi::os_str","",72,null],[11,"partial_cmp","std::path","",138,null],[11,"partial_cmp","std::ffi::os_str","",72,null],[11,"eq","std::path","",138,null],[11,"partial_cmp","","",138,null],[11,"eq","","",138,null],[11,"eq","collections::borrow","",73,null],[11,"partial_cmp","std::path","",138,null],[11,"partial_cmp","collections::borrow","",73,null],[11,"eq","std::path","",138,null],[11,"eq","std::ffi::os_str","",71,null],[11,"partial_cmp","std::path","",138,null],[11,"partial_cmp","std::ffi::os_str","",71,null],[11,"eq","std::path","",139,null],[11,"eq","std::ffi::os_str","",72,null],[11,"partial_cmp","std::path","",139,null],[11,"partial_cmp","std::ffi::os_str","",72,null],[11,"eq","std::path","",139,null],[11,"partial_cmp","","",139,null],[11,"eq","","",139,null],[11,"eq","collections::borrow","",73,null],[11,"partial_cmp","std::path","",139,null],[11,"partial_cmp","collections::borrow","",73,null],[11,"eq","std::path","",139,null],[11,"eq","std::ffi::os_str","",71,null],[11,"partial_cmp","std::path","",139,null],[11,"partial_cmp","std::ffi::os_str","",71,null],[11,"eq","","",72,null],[11,"partial_cmp","","",72,null],[11,"eq","collections::borrow","",73,null],[11,"partial_cmp","","",73,null],[11,"eq","std::ffi::os_str","",71,null],[11,"partial_cmp","","",71,null],[11,"eq","collections::borrow","",73,null],[11,"eq","std::ffi::os_str","",72,null],[11,"partial_cmp","collections::borrow","",73,null],[11,"partial_cmp","std::ffi::os_str","",72,null],[11,"eq","collections::borrow","",73,null],[11,"partial_cmp","","",73,null],[11,"eq","","",73,null],[11,"eq","std::ffi::os_str","",71,null],[11,"partial_cmp","collections::borrow","",73,null],[11,"partial_cmp","std::ffi::os_str","",71,null],[11,"fmt","std::path","",140,null],[11,"description","","",140,null],[11,"write","std::process","",123,null],[11,"flush","","",123,null],[11,"read","","",124,null],[11,"read_to_end","","",124,null],[11,"read","","",125,null],[11,"read_to_end","","",125,null],[11,"new","","Constructs a new `Command` for launching the program at\npath `program`, with the following default configuration:",120,{"inputs":[{"name":"s"}],"output":{"name":"command"}}],[11,"arg","","Add an argument to pass to the program.",120,null],[11,"args","","Add multiple arguments to pass to the program.",120,null],[11,"env","","Inserts or updates an environment variable mapping.",120,null],[11,"env_remove","","Removes an environment variable mapping.",120,null],[11,"env_clear","","Clears the entire environment map for the child process.",120,null],[11,"current_dir","","Sets the working directory for the child process.",120,null],[11,"stdin","","Configuration for the child process&#39;s stdin handle (file descriptor 0).",120,null],[11,"stdout","","Configuration for the child process&#39;s stdout handle (file descriptor 1).",120,null],[11,"stderr","","Configuration for the child process&#39;s stderr handle (file descriptor 2).",120,null],[11,"spawn","","Executes the command as a child process, returning a handle to it.",120,null],[11,"output","","Executes the command as a child process, waiting for it to finish and\ncollecting all of its output.",120,null],[11,"status","","Executes a command as a child process, waiting for it to finish and\ncollecting its exit status.",120,null],[11,"fmt","","Format the program and arguments of a Command for display. Any\nnon-utf8 data is lossily converted using the utf8 replacement\ncharacter.",120,null],[11,"clone","","",142,null],[11,"eq","","",142,null],[11,"ne","","",142,null],[11,"fmt","","",142,null],[11,"piped","","A new pipe should be arranged to connect the parent and child processes.",122,{"inputs":[],"output":{"name":"stdio"}}],[11,"inherit","","The child inherits from the corresponding parent descriptor.",122,{"inputs":[],"output":{"name":"stdio"}}],[11,"null","","This stream will be ignored. This is the equivalent of attaching the\nstream to `/dev/null`",122,{"inputs":[],"output":{"name":"stdio"}}],[11,"fmt","","",121,null],[11,"clone","","",121,null],[11,"eq","","",121,null],[11,"ne","","",121,null],[11,"success","","Was termination successful? Signal termination not considered a success,\nand success is defined as a zero exit status.",121,null],[11,"code","","Returns the exit code of the process, if any.",121,null],[11,"fmt","","",121,null],[11,"kill","","Forces the child to exit. This is equivalent to sending a\nSIGKILL on unix platforms.",143,null],[11,"id","","Returns the OS-assigned process identifier associated with this child.",143,null],[11,"wait","","Waits for the child to exit completely, returning the status that it\nexited with. This function will continue to have the same return value\nafter it has been called at least once.",143,null],[11,"wait_with_output","","Simultaneously waits for the child to exit and collect all remaining\noutput on the stdout/stderr handles, returning an `Output`\ninstance.",143,null],[11,"new","std::sync::mpsc::select","Creates a new selection structure. This set is initially empty.",144,{"inputs":[],"output":{"name":"select"}}],[11,"handle","","Creates a new handle into this receiver set for a new receiver. Note\nthat this does *not* add the receiver to the receiver set, for that you\nmust call the `add` method on the handle itself.",144,null],[11,"wait","","Waits for an event on this receiver set. The returned value is *not* an\nindex, but rather an id. This id can be queried against any active\n`Handle` structures (each one has an `id` method). The handle with\nthe matching `id` will have some sort of event available on it. The\nevent could either be that data is available or the corresponding\nchannel has been closed.",144,null],[11,"id","","Retrieves the id of this handle.",145,null],[11,"recv","","Blocks to receive a value on the underlying receiver, returning `Some` on\nsuccess or `None` if the channel disconnects. This function has the same\nsemantics as `Receiver.recv`",145,null],[11,"add","","Adds this handle to the receiver set that the handle was created from. This\nmethod can be called multiple times, but it has no effect if `add` was\ncalled previously.",145,null],[11,"remove","","Removes this handle from the `Select` set. This method is unsafe because\nit has no guarantee that the `Handle` was not moved since `add` was\ncalled.",145,null],[11,"drop","","",144,null],[11,"drop","","",145,null],[11,"fmt","","",144,null],[11,"fmt","","",145,null],[11,"clone","std::sync::mpsc","",146,null],[11,"eq","","",146,null],[11,"ne","","",146,null],[11,"fmt","","",147,null],[11,"clone","","",147,null],[11,"eq","","",147,null],[11,"fmt","","",148,null],[11,"clone","","",148,null],[11,"eq","","",148,null],[11,"clone","","",149,null],[11,"eq","","",149,null],[11,"ne","","",149,null],[11,"send","","Attempts to send a value on this channel, returning it back if it could\nnot be sent.",150,null],[11,"clone","","",150,null],[11,"drop","","",150,null],[11,"fmt","","",150,null],[11,"send","","Sends a value on this synchronous channel.",151,null],[11,"try_send","","Attempts to send a value on this channel without blocking.",151,null],[11,"clone","","",151,null],[11,"drop","","",151,null],[11,"fmt","","",151,null],[11,"try_recv","","Attempts to return a pending value on this receiver without blocking",152,null],[11,"recv","","Attempts to wait for a value on this receiver, returning an error if the\ncorresponding channel has hung up.",152,null],[11,"iter","","Returns an iterator that will block waiting for messages, but never\n`panic!`. It will return `None` when the channel has hung up.",152,null],[11,"next","","",153,null],[11,"next","","",154,null],[11,"into_iter","","",152,null],[11,"drop","","",152,null],[11,"fmt","","",152,null],[11,"fmt","","",146,null],[11,"fmt","","",146,null],[11,"description","","",146,null],[11,"cause","","",146,null],[11,"fmt","","",149,null],[11,"fmt","","",149,null],[11,"description","","",149,null],[11,"cause","","",149,null],[11,"fmt","","",147,null],[11,"description","","",147,null],[11,"cause","","",147,null],[11,"fmt","","",148,null],[11,"description","","",148,null],[11,"cause","","",148,null],[11,"new","std::sync::barrier","Creates a new barrier that can block a given number of threads.",155,{"inputs":[{"name":"usize"}],"output":{"name":"barrier"}}],[11,"wait","","Blocks the current thread until all threads have rendezvoused here.",155,null],[11,"is_leader","","Returns whether this thread from `wait` is the &quot;leader thread&quot;.",156,null],[11,"clone","std::sync::condvar","",157,null],[11,"eq","","",157,null],[11,"ne","","",157,null],[11,"fmt","","",157,null],[11,"timed_out","","Returns whether the wait was known to have timed out.",157,null],[11,"new","","Creates a new condition variable which is ready to be waited on and\nnotified.",158,{"inputs":[],"output":{"name":"condvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",158,null],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",158,null],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",158,null],[11,"notify_one","","Wakes up one blocked thread on this condvar.",158,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",158,null],[11,"default","","",158,{"inputs":[],"output":{"name":"condvar"}}],[11,"drop","","",158,null],[11,"new","","Creates a new condition variable",159,{"inputs":[],"output":{"name":"staticcondvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",159,null],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",159,null],[11,"wait_timeout_with","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",159,null],[11,"notify_one","","Wakes up one blocked thread on this condvar.",159,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",159,null],[11,"destroy","","Deallocates all resources associated with this static condvar.",159,null],[11,"new","std::sync::mutex","Creates a new mutex in an unlocked state ready for use.",160,{"inputs":[{"name":"t"}],"output":{"name":"mutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",160,null],[11,"try_lock","","Attempts to acquire this lock.",160,null],[11,"is_poisoned","","Determines whether the lock is poisoned.",160,null],[11,"into_inner","","Consumes this mutex, returning the underlying data.",160,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",160,null],[11,"drop","","",160,null],[11,"default","","",160,{"inputs":[],"output":{"name":"mutex"}}],[11,"fmt","","",160,null],[11,"new","","Creates a new mutex in an unlocked state ready for use.",161,{"inputs":[],"output":{"name":"staticmutex"}}],[11,"lock","","Acquires this lock, see `Mutex::lock`",161,null],[11,"try_lock","","Attempts to grab this lock, see `Mutex::try_lock`",161,null],[11,"destroy","","Deallocates resources associated with this static mutex.",161,null],[11,"deref","","",162,null],[11,"deref_mut","","",162,null],[11,"drop","","",162,null],[11,"new","std::sync::once","Creates a new `Once` value.",163,{"inputs":[],"output":{"name":"once"}}],[11,"call_once","","Performs an initialization routine once and only once. The given closure\nwill be executed if this is the first time `call_once` has been called,\nand otherwise the routine will *not* be invoked.",163,null],[11,"call_once_force","","Performs the same function as `call_once` except ignores poisoning.",163,null],[11,"poisoned","","Returns whether the associated `Once` has been poisoned.",164,null],[11,"new","std::sync::rwlock","Creates a new instance of an `RwLock&lt;T&gt;` which is unlocked.",165,{"inputs":[{"name":"t"}],"output":{"name":"rwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",165,null],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",165,null],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",165,null],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",165,null],[11,"is_poisoned","","Determines whether the lock is poisoned.",165,null],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",165,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",165,null],[11,"drop","","",165,null],[11,"fmt","","",165,null],[11,"default","","",165,{"inputs":[],"output":{"name":"rwlock"}}],[11,"new","","Creates a new rwlock.",166,{"inputs":[],"output":{"name":"staticrwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",166,null],[11,"try_read","","Attempts to acquire this lock with shared read access.",166,null],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",166,null],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",166,null],[11,"destroy","","Deallocates all resources associated with this static lock.",166,null],[11,"map","","Transform this guard to hold a sub-borrow of the original data.",167,{"inputs":[{"name":"rwlockreadguard"},{"name":"f"}],"output":{"name":"rwlockreadguard"}}],[11,"map","","Transform this guard to hold a sub-borrow of the original data.",168,{"inputs":[{"name":"rwlockwriteguard"},{"name":"f"}],"output":{"name":"rwlockwriteguard"}}],[11,"deref","","",167,null],[11,"deref","","",168,null],[11,"deref_mut","","",168,null],[11,"drop","","",167,null],[11,"drop","","",168,null],[11,"default","core::sync::atomic","",169,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",170,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",171,null],[11,"clone","","",171,null],[11,"new","","Creates a new `AtomicBool`.",169,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",169,null],[11,"store","","Stores a value into the bool.",169,null],[11,"swap","","Stores a value into the bool, returning the old value.",169,null],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",169,null],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",169,null],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",169,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",169,null],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",169,null],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",169,null],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",169,null],[11,"new","","Creates a new `AtomicPtr`.",170,null],[11,"load","","Loads a value from the pointer.",170,null],[11,"store","","Stores a value into the pointer.",170,null],[11,"swap","","Stores a value into the pointer, returning the old value.",170,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",170,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",170,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",170,null],[11,"default","","",172,{"inputs":[],"output":{"name":"atomici8"}}],[11,"fmt","","",172,null],[11,"new","","Creates a new atomic integer.",172,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"load","","Loads a value from the atomic integer.",172,null],[11,"store","","Stores a value into the atomic integer.",172,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",172,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",172,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",172,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",172,null],[11,"fetch_add","","Add to the current value, returning the previous value.",172,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",172,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",172,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",172,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",172,null],[11,"default","","",173,{"inputs":[],"output":{"name":"atomicu8"}}],[11,"fmt","","",173,null],[11,"new","","Creates a new atomic integer.",173,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"load","","Loads a value from the atomic integer.",173,null],[11,"store","","Stores a value into the atomic integer.",173,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",173,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",173,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",173,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",173,null],[11,"fetch_add","","Add to the current value, returning the previous value.",173,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",173,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",173,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",173,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",173,null],[11,"default","","",174,{"inputs":[],"output":{"name":"atomici16"}}],[11,"fmt","","",174,null],[11,"new","","Creates a new atomic integer.",174,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"load","","Loads a value from the atomic integer.",174,null],[11,"store","","Stores a value into the atomic integer.",174,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",174,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",174,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",174,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",174,null],[11,"fetch_add","","Add to the current value, returning the previous value.",174,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",174,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",174,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",174,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",174,null],[11,"default","","",175,{"inputs":[],"output":{"name":"atomicu16"}}],[11,"fmt","","",175,null],[11,"new","","Creates a new atomic integer.",175,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"load","","Loads a value from the atomic integer.",175,null],[11,"store","","Stores a value into the atomic integer.",175,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",175,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",175,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",175,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",175,null],[11,"fetch_add","","Add to the current value, returning the previous value.",175,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",175,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",175,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",175,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",175,null],[11,"default","","",176,{"inputs":[],"output":{"name":"atomici32"}}],[11,"fmt","","",176,null],[11,"new","","Creates a new atomic integer.",176,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"load","","Loads a value from the atomic integer.",176,null],[11,"store","","Stores a value into the atomic integer.",176,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",176,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",176,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",176,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",176,null],[11,"fetch_add","","Add to the current value, returning the previous value.",176,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",176,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",176,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",176,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",176,null],[11,"default","","",177,{"inputs":[],"output":{"name":"atomicu32"}}],[11,"fmt","","",177,null],[11,"new","","Creates a new atomic integer.",177,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"load","","Loads a value from the atomic integer.",177,null],[11,"store","","Stores a value into the atomic integer.",177,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",177,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",177,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",177,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",177,null],[11,"fetch_add","","Add to the current value, returning the previous value.",177,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",177,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",177,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",177,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",177,null],[11,"default","","",178,{"inputs":[],"output":{"name":"atomici64"}}],[11,"fmt","","",178,null],[11,"new","","Creates a new atomic integer.",178,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"load","","Loads a value from the atomic integer.",178,null],[11,"store","","Stores a value into the atomic integer.",178,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",178,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",178,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",178,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",178,null],[11,"fetch_add","","Add to the current value, returning the previous value.",178,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",178,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",178,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",178,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",178,null],[11,"default","","",179,{"inputs":[],"output":{"name":"atomicu64"}}],[11,"fmt","","",179,null],[11,"new","","Creates a new atomic integer.",179,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"load","","Loads a value from the atomic integer.",179,null],[11,"store","","Stores a value into the atomic integer.",179,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",179,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",179,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",179,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",179,null],[11,"fetch_add","","Add to the current value, returning the previous value.",179,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",179,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",179,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",179,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",179,null],[11,"default","","",180,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"fmt","","",180,null],[11,"new","","Creates a new atomic integer.",180,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the atomic integer.",180,null],[11,"store","","Stores a value into the atomic integer.",180,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",180,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",180,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",180,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",180,null],[11,"fetch_add","","Add to the current value, returning the previous value.",180,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",180,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",180,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",180,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",180,null],[11,"default","","",181,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"fmt","","",181,null],[11,"new","","Creates a new atomic integer.",181,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the atomic integer.",181,null],[11,"store","","Stores a value into the atomic integer.",181,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",181,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",181,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",181,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",181,null],[11,"fetch_add","","Add to the current value, returning the previous value.",181,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",181,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",181,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",181,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",181,null],[11,"fmt","","",169,null],[11,"fmt","","",170,null],[11,"hash","std::time::duration","",182,null],[11,"fmt","","",182,null],[11,"cmp","","",182,null],[11,"partial_cmp","","",182,null],[11,"lt","","",182,null],[11,"le","","",182,null],[11,"gt","","",182,null],[11,"ge","","",182,null],[11,"eq","","",182,null],[11,"ne","","",182,null],[11,"clone","","",182,null],[11,"new","","Creates a new `Duration` from the specified number of seconds and\nadditional nanosecond precision.",182,{"inputs":[{"name":"u64"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"from_secs","","Creates a new `Duration` from the specified number of seconds.",182,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"from_millis","","Creates a new `Duration` from the specified number of milliseconds.",182,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"as_secs","","Returns the number of whole seconds represented by this duration.",182,null],[11,"subsec_nanos","","Returns the nanosecond precision represented by this duration.",182,null],[11,"add","","",182,null],[11,"add_assign","","",182,null],[11,"sub","","",182,null],[11,"sub_assign","","",182,null],[11,"mul","","",182,null],[11,"mul_assign","","",182,null],[11,"div","","",182,null],[11,"div_assign","","",182,null],[11,"cmp","std::time","",183,null],[11,"partial_cmp","","",183,null],[11,"lt","","",183,null],[11,"le","","",183,null],[11,"gt","","",183,null],[11,"ge","","",183,null],[11,"eq","","",183,null],[11,"ne","","",183,null],[11,"clone","","",183,null],[11,"cmp","","",184,null],[11,"partial_cmp","","",184,null],[11,"lt","","",184,null],[11,"le","","",184,null],[11,"gt","","",184,null],[11,"ge","","",184,null],[11,"eq","","",184,null],[11,"ne","","",184,null],[11,"clone","","",184,null],[11,"fmt","","",185,null],[11,"clone","","",185,null],[11,"now","","Returns an instant corresponding to &quot;now&quot;.",183,{"inputs":[],"output":{"name":"instant"}}],[11,"duration_since","","Returns the amount of time elapsed from another instant to this one.",183,null],[11,"duration_from_earlier","","Deprecated, renamed to `duration_since`",183,null],[11,"elapsed","","Returns the amount of time elapsed since this instant was created.",183,null],[11,"add","","",183,null],[11,"add_assign","","",183,null],[11,"sub","","",183,null],[11,"sub_assign","","",183,null],[11,"sub","","",183,null],[11,"fmt","","",183,null],[11,"now","","Returns the system time corresponding to &quot;now&quot;.",184,{"inputs":[],"output":{"name":"systemtime"}}],[11,"duration_since","","Returns the amount of time elapsed from an earlier point in time.",184,null],[11,"duration_from_earlier","","Deprecated, renamed to `duration_since`",184,null],[11,"elapsed","","Returns the amount of time elapsed since this system time was created.",184,null],[11,"add","","",184,null],[11,"add_assign","","",184,null],[11,"sub","","",184,null],[11,"sub_assign","","",184,null],[11,"fmt","","",184,null],[11,"duration","","Returns the positive duration which represents how far forward the\nsecond system time was from the first.",185,null],[11,"description","","",185,null],[11,"fmt","","",185,null],[11,"fmt","std::sys_common::poison","",186,null],[11,"fmt","","",186,null],[11,"description","","",186,null],[11,"new","","Creates a `PoisonError`.",186,{"inputs":[{"name":"t"}],"output":{"name":"poisonerror"}}],[11,"into_inner","","Consumes this error indicating that a lock is poisoned, returning the\nunderlying guard to allow access regardless.",186,null],[11,"get_ref","","Reaches into this error indicating that a lock is poisoned, returning a\nreference to the underlying guard to allow access regardless.",186,null],[11,"get_mut","","Reaches into this error indicating that a lock is poisoned, returning a\nmutable reference to the underlying guard to allow access regardless.",186,null],[11,"from","","",187,{"inputs":[{"name":"poisonerror"}],"output":{"name":"trylockerror"}}],[11,"fmt","","",187,null],[11,"fmt","","",187,null],[11,"description","","",187,null],[11,"cause","","",187,null],[11,"clone","libc::unix","",188,null],[11,"clone","","",189,null],[11,"clone","","",190,null],[11,"clone","","",191,null],[11,"clone","","",192,null],[11,"clone","","",193,null],[11,"clone","","",194,null],[11,"clone","","",195,null],[11,"clone","","",196,null],[11,"clone","","",197,null],[11,"clone","","",198,null],[11,"clone","","",199,null],[11,"clone","","",200,null],[11,"clone","libc::unix::notbsd","",201,null],[11,"clone","","",202,null],[11,"clone","","",203,null],[11,"clone","","",204,null],[11,"clone","","",205,null],[11,"clone","","",206,null],[11,"clone","","",207,null],[11,"clone","","",208,null],[11,"clone","","",209,null],[11,"clone","","",210,null],[11,"clone","","",211,null],[11,"clone","","",212,null],[11,"clone","","",213,null],[11,"clone","","",214,null],[11,"clone","","",215,null],[11,"clone","libc::unix::notbsd::linux","",216,null],[11,"clone","","",217,null],[11,"clone","","",218,null],[11,"clone","","",219,null],[11,"clone","","",220,null],[11,"clone","","",221,null],[11,"clone","","",222,null],[11,"clone","","",223,null],[11,"clone","","",224,null],[11,"clone","","",225,null],[11,"clone","","",226,null],[11,"clone","","",227,null],[11,"clone","","",228,null],[11,"clone","","",229,null],[11,"clone","","",230,null],[11,"clone","","",231,null],[11,"clone","libc::unix::notbsd::linux::other","",232,null],[11,"clone","","",233,null],[11,"clone","","",234,null],[11,"clone","","",235,null],[11,"clone","","",236,null],[11,"clone","","",237,null],[11,"clone","","",238,null],[11,"clone","","",239,null],[11,"clone","","",240,null],[11,"clone","","",241,null],[11,"clone","","",242,null],[11,"clone","libc::unix::notbsd::linux::other::b64","",243,null],[11,"clone","libc::unix::notbsd::linux::other::b64::x86_64","",244,null],[11,"clone","","",245,null],[11,"clone","","",246,null],[11,"clone","","",247,null],[11,"clone","","",248,null],[11,"clone","","",249,null],[11,"clone","","",250,null],[11,"clone","","",251,null],[11,"payload","std::panicking","Returns the payload associated with the panic.",252,null],[11,"location","","Returns information about the location from which the panic originated,\nif available.",252,null],[11,"file","","Returns the name of the source file from which the panic originated.",253,null],[11,"line","","Returns the line number from which the panic originated.",253,null],[11,"clone","alloc::boxed","",254,null],[11,"pointer","","",255,null],[11,"make_place","","",255,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"finalize","","",255,null],[11,"finalize","","",1,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",254,null],[11,"drop","","",255,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",1,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",1,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box&#39;s contents.",1,null],[11,"clone_from","","Copies `source`&#39;s contents into `self` without creating a new allocation.",1,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"ge","","",1,null],[11,"gt","","",1,null],[11,"cmp","","",1,null],[11,"hash","","",1,null],[11,"from","","",1,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",1,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",1,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"next","","",1,null],[11,"size_hint","","",1,null],[11,"next_back","","",1,null],[11,"call_once","","",1,null],[11,"call_once","","",1,null],[11,"clone","","",1,null],[11,"borrow","","",1,null],[11,"borrow_mut","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"borrow","collections::borrow","",73,null],[11,"clone","","",73,null],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",73,null],[11,"into_owned","","Extracts the owned data.",73,null],[11,"deref","","",73,null],[11,"cmp","","",73,null],[11,"eq","","",73,null],[11,"partial_cmp","","",73,null],[11,"fmt","","",73,null],[11,"fmt","","",73,null],[11,"hash","","",73,null],[11,"as_ref","","",73,null],[11,"cmp","collections::string","",74,null],[11,"partial_cmp","","",74,null],[11,"lt","","",74,null],[11,"le","","",74,null],[11,"gt","","",74,null],[11,"ge","","",74,null],[11,"fmt","","",7,null],[11,"fmt","","",8,null],[11,"new","","Creates a new empty `String`.",74,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",74,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",74,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",74,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\nif `v` contains any invalid data.",74,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",74,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",74,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",74,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",74,null],[11,"as_str","","Extracts a string slice containing the entire string.",74,null],[11,"as_mut_str","","Extracts a string slice containing the entire string.",74,null],[11,"push_str","","Appends a given string slice onto the end of this `String`.",74,null],[11,"capacity","","Returns this `String`&#39;s capacity, in bytes.",74,null],[11,"reserve","","Ensures that this `String`&#39;s capacity is at least `additional` bytes\nlarger than its length.",74,null],[11,"reserve_exact","","Ensures that this `String`&#39;s capacity is `additional` bytes\nlarger than its length.",74,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",74,null],[11,"push","","Appends the given `char` to the end of this `String`.",74,null],[11,"as_bytes","","Returns a byte slice of this `String`&#39;s contents.",74,null],[11,"truncate","","Shortens this `String` to the specified length.",74,null],[11,"pop","","Removes the last character from the string buffer and returns it.",74,null],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",74,null],[11,"insert","","Inserts a character into this `String` at a byte position.",74,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",74,null],[11,"len","","Returns the length of this `String`, in bytes.",74,null],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",74,null],[11,"clear","","Truncates this `String`, removing all contents.",74,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",74,null],[11,"into_boxed_str","","Converts this `String` into a `Box&lt;str&gt;`.",74,null],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",7,null],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",7,null],[11,"fmt","","",7,null],[11,"fmt","","",8,null],[11,"clone","","",74,null],[11,"clone_from","","",74,null],[11,"from_iter","","",74,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",74,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",74,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",74,null],[11,"extend","","",74,null],[11,"extend","","",74,null],[11,"extend","","",74,null],[11,"eq","","",74,null],[11,"ne","","",74,null],[11,"eq","","",74,null],[11,"ne","","",74,null],[11,"eq","","",74,null],[11,"ne","","",74,null],[11,"eq","collections::borrow","",73,null],[11,"ne","","",73,null],[11,"eq","","",73,null],[11,"ne","","",73,null],[11,"eq","","",73,null],[11,"ne","","",73,null],[11,"eq","collections::string","",74,null],[11,"ne","","",74,null],[11,"default","","",74,{"inputs":[],"output":{"name":"string"}}],[11,"fmt","","",74,null],[11,"fmt","","",74,null],[11,"hash","","",74,null],[11,"add","","",74,null],[11,"index","","",74,null],[11,"index","","",74,null],[11,"index","","",74,null],[11,"index","","",74,null],[11,"index","","",74,null],[11,"index","","",74,null],[11,"index_mut","","",74,null],[11,"index_mut","","",74,null],[11,"index_mut","","",74,null],[11,"index_mut","","",74,null],[11,"index_mut","","",74,null],[11,"index_mut","","",74,null],[11,"deref","","",74,null],[11,"deref_mut","","",74,null],[11,"from_str","","",74,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",9,null],[11,"fmt","","",9,null],[11,"fmt","","",9,null],[11,"eq","","",9,null],[11,"as_ref","","",74,null],[11,"as_ref","","",74,null],[11,"from","","",74,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",73,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",73,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",74,null],[11,"write_str","","",74,null],[11,"write_char","","",74,null],[11,"drop","","",256,null],[11,"next","","",256,null],[11,"size_hint","","",256,null],[11,"next_back","","",256,null],[11,"borrow","collections::vec","",47,null],[11,"borrow_mut","","",47,null],[11,"fmt","core::hash::sip","",257,null],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",257,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",257,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",257,null],[11,"finish","","",257,null],[11,"clone","","",257,null],[11,"default","","",257,{"inputs":[],"output":{"name":"siphasher"}}],[11,"fmt","core::hash","",258,null],[11,"build_hasher","","",258,null],[11,"clone","","",258,null],[11,"default","","",258,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"hash","core::option","",259,null],[11,"fmt","","",259,null],[11,"cmp","","",259,null],[11,"partial_cmp","","",259,null],[11,"lt","","",259,null],[11,"le","","",259,null],[11,"gt","","",259,null],[11,"ge","","",259,null],[11,"eq","","",259,null],[11,"ne","","",259,null],[11,"clone","","",259,null],[11,"is_some","","Returns `true` if the option is a `Some` value",259,null],[11,"is_none","","Returns `true` if the option is a `None` value",259,null],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",259,null],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",259,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",259,null],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",259,null],[11,"unwrap_or","","Returns the contained value or a default.",259,null],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",259,null],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",259,null],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",259,null],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",259,null],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",259,null],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",259,null],[11,"iter","","Returns an iterator over the possibly contained value.",259,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",259,null],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",259,null],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",259,null],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",259,null],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",259,null],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",259,null],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",259,null],[11,"unwrap_or_default","","Returns the contained value or a default",259,null],[11,"default","","",259,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",259,null],[11,"fmt","","",260,null],[11,"next","","",260,null],[11,"size_hint","","",260,null],[11,"next_back","","",260,null],[11,"clone","","",260,null],[11,"fmt","","",261,null],[11,"next","","",261,null],[11,"size_hint","","",261,null],[11,"next_back","","",261,null],[11,"fmt","","",262,null],[11,"clone","","",262,null],[11,"next","","",262,null],[11,"size_hint","","",262,null],[11,"next_back","","",262,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",259,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"new","alloc::rc","Constructs a new `Rc&lt;T&gt;`.",263,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Rc&lt;T&gt;` has exactly one strong reference.",263,{"inputs":[{"name":"rc"}],"output":{"name":"result"}}],[11,"would_unwrap","","Checks if `Rc::try_unwrap` would return `Ok`.",263,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"downgrade","","Downgrades the `Rc&lt;T&gt;` to a `Weak&lt;T&gt;` reference.",263,{"inputs":[{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",263,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",263,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or `Weak&lt;T&gt;` values that share\nthe same inner value.",263,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Rc&lt;T&gt;` has\none strong reference and no weak references.",263,{"inputs":[{"name":"rc"}],"output":{"name":"option"}}],[11,"make_mut","","Make a mutable reference into the given `Rc&lt;T&gt;` by cloning the inner\ndata if the `Rc&lt;T&gt;` doesn&#39;t have one strong reference and no weak\nreferences.",263,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"deref","","",263,null],[11,"drop","","Drops the `Rc&lt;T&gt;`.",263,null],[11,"clone","","Makes a clone of the `Rc&lt;T&gt;`.",263,null],[11,"default","","Creates a new `Rc&lt;T&gt;`, with the `Default` value for `T`.",263,{"inputs":[],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc&lt;T&gt;`s.",263,null],[11,"ne","","Inequality for two `Rc&lt;T&gt;`s.",263,null],[11,"partial_cmp","","Partial comparison for two `Rc&lt;T&gt;`s.",263,null],[11,"lt","","Less-than comparison for two `Rc&lt;T&gt;`s.",263,null],[11,"le","","&#39;Less-than or equal to&#39; comparison for two `Rc&lt;T&gt;`s.",263,null],[11,"gt","","Greater-than comparison for two `Rc&lt;T&gt;`s.",263,null],[11,"ge","","&#39;Greater-than or equal to&#39; comparison for two `Rc&lt;T&gt;`s.",263,null],[11,"cmp","","Comparison for two `Rc&lt;T&gt;`s.",263,null],[11,"hash","","",263,null],[11,"fmt","","",263,null],[11,"fmt","","",263,null],[11,"fmt","","",263,null],[11,"from","","",263,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"new","","Constructs a new `Weak&lt;T&gt;` without an accompanying instance of T.",264,{"inputs":[],"output":{"name":"weak"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",264,null],[11,"drop","","Drops the `Weak&lt;T&gt;`.",264,null],[11,"clone","","Makes a clone of the `Weak&lt;T&gt;`.",264,null],[11,"fmt","","",264,null],[11,"default","","",264,{"inputs":[],"output":{"name":"weak"}}],[11,"borrow","","",263,null],[11,"as_ref","","",263,null],[11,"new","core::ptr","Creates a new `Unique`.",265,null],[11,"get","","Dereferences the content.",265,null],[11,"get_mut","","Mutably dereferences the content.",265,null],[11,"deref","","",265,null],[11,"fmt","","",265,null],[11,"new","","Creates a new `Shared`.",266,null],[11,"clone","","",266,null],[11,"deref","","",266,null],[11,"fmt","","",266,null],[11,"new","collections::vec","Constructs a new, empty `Vec&lt;T&gt;`.",47,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",47,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",47,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",47,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",47,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",47,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",47,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",47,null],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",47,null],[11,"as_slice","","Extracts a slice containing the entire vector.",47,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",47,null],[11,"set_len","","Sets the length of a vector.",47,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",47,null],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",47,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",47,null],[11,"retain","","Retains only the elements specified by the predicate.",47,null],[11,"push","","Appends an element to the back of a collection.",47,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",47,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",47,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",47,null],[11,"clear","","Clears the vector, removing all values.",47,null],[11,"len","","Returns the number of elements in the vector.",47,null],[11,"is_empty","","Returns `true` if the vector contains no elements.",47,null],[11,"split_off","","Splits the collection into two at the given index.",47,null],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",47,null],[11,"extend_from_slice","","Appends all elements in a slice to the `Vec`.",47,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",47,null],[11,"clone","","",47,null],[11,"clone_from","","",47,null],[11,"hash","","",47,null],[11,"index","","",47,null],[11,"index_mut","","",47,null],[11,"index","","",47,null],[11,"index","","",47,null],[11,"index","","",47,null],[11,"index","","",47,null],[11,"index","","",47,null],[11,"index","","",47,null],[11,"index_mut","","",47,null],[11,"index_mut","","",47,null],[11,"index_mut","","",47,null],[11,"index_mut","","",47,null],[11,"index_mut","","",47,null],[11,"index_mut","","",47,null],[11,"deref","","",47,null],[11,"deref_mut","","",47,null],[11,"from_iter","","",47,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",47,null],[11,"extend","","",47,null],[11,"extend","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","collections::borrow","",73,null],[11,"ne","","",73,null],[11,"eq","","",73,null],[11,"ne","","",73,null],[11,"eq","","",73,null],[11,"ne","","",73,null],[11,"eq","collections::vec","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"partial_cmp","","",47,null],[11,"cmp","","",47,null],[11,"drop","","",47,null],[11,"default","","",47,{"inputs":[],"output":{"name":"vec"}}],[11,"fmt","","",47,null],[11,"as_ref","","",47,null],[11,"as_mut","","",47,null],[11,"as_ref","","",47,null],[11,"as_mut","","",47,null],[11,"from","","",47,null],[11,"from","","",47,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","collections::borrow","",73,null],[11,"from","","",73,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from_iter","","",73,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"next","collections::vec","",267,null],[11,"size_hint","","",267,null],[11,"count","","",267,null],[11,"next_back","","",267,null],[11,"clone","","",267,null],[11,"drop","","",267,null],[11,"next","","",268,null],[11,"size_hint","","",268,null],[11,"next_back","","",268,null],[11,"drop","","",268,null],[11,"clone","core::raw","",269,null],[11,"clone","","",270,null],[11,"eq","core::ops","",271,null],[11,"clone","","",271,null],[11,"fmt","","",271,null],[11,"eq","","",272,null],[11,"ne","","",272,null],[11,"clone","","",272,null],[11,"fmt","","",272,null],[11,"contains","","# Examples",272,null],[11,"eq","","",273,null],[11,"ne","","",273,null],[11,"clone","","",273,null],[11,"fmt","","",273,null],[11,"contains","","# Examples",273,null],[11,"eq","","",274,null],[11,"ne","","",274,null],[11,"clone","","",274,null],[11,"fmt","","",274,null],[11,"contains","","# Examples",274,null],[11,"eq","","",275,null],[11,"ne","","",275,null],[11,"clone","","",275,null],[11,"fmt","","",275,null],[11,"from","","",275,{"inputs":[{"name":"range"}],"output":{"name":"rangeinclusive"}}],[11,"contains","","# Examples",275,null],[11,"eq","","",276,null],[11,"ne","","",276,null],[11,"clone","","",276,null],[11,"fmt","","",276,null],[11,"contains","","# Examples",276,null],[11,"fmt","","",277,null],[11,"fmt","","",277,null],[11,"is","","Returns true if the boxed type is the same as `T`",277,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",277,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",277,null],[11,"is","","Forwards to the method defined on the type `Any`.",277,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",277,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",277,null],[11,"hash","core::any","",278,null],[11,"fmt","","",278,null],[11,"eq","","",278,null],[11,"ne","","",278,null],[11,"clone","","",278,null],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",278,{"inputs":[],"output":{"name":"typeid"}}],[11,"hash","core::result","",279,null],[11,"fmt","","",279,null],[11,"cmp","","",279,null],[11,"partial_cmp","","",279,null],[11,"lt","","",279,null],[11,"le","","",279,null],[11,"gt","","",279,null],[11,"ge","","",279,null],[11,"eq","","",279,null],[11,"ne","","",279,null],[11,"clone","","",279,null],[11,"is_ok","","Returns true if the result is `Ok`",279,null],[11,"is_err","","Returns true if the result is `Err`",279,null],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",279,null],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",279,null],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",279,null],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",279,null],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",279,null],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",279,null],[11,"iter","","Returns an iterator over the possibly contained value.",279,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",279,null],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",279,null],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",279,null],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",279,null],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",279,null],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",279,null],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",279,null],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",279,null],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",279,null],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",279,null],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",279,null],[11,"fmt","","",280,null],[11,"next","","",280,null],[11,"size_hint","","",280,null],[11,"next_back","","",280,null],[11,"clone","","",280,null],[11,"fmt","","",281,null],[11,"next","","",281,null],[11,"size_hint","","",281,null],[11,"next_back","","",281,null],[11,"fmt","","",282,null],[11,"next","","",282,null],[11,"size_hint","","",282,null],[11,"next_back","","",282,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",279,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"next","rustc_unicode::char","",283,null],[11,"next","","",284,null],[11,"clone","","",285,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"next","","",285,null],[11,"size_hint","","",285,null],[11,"unpaired_surrogate","","Returns the unpaired surrogate which caused this error.",10,null],[11,"fmt","","",10,null],[11,"new","core::cell","Creates a new `Cell` containing the given value.",286,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",286,null],[11,"set","","Sets the contained value.",286,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",286,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",286,null],[11,"clone","","",286,null],[11,"default","","",286,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",286,null],[11,"partial_cmp","","",286,null],[11,"lt","","",286,null],[11,"le","","",286,null],[11,"gt","","",286,null],[11,"ge","","",286,null],[11,"cmp","","",286,null],[11,"fmt","","",287,null],[11,"eq","","",287,null],[11,"clone","","",287,null],[11,"new","","Creates a new `RefCell` containing `value`.",288,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",288,null],[11,"borrow_state","","Query the current state of this `RefCell`",288,null],[11,"borrow","","Immutably borrows the wrapped value.",288,null],[11,"borrow_mut","","Mutably borrows the wrapped value.",288,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",288,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",288,null],[11,"clone","","",288,null],[11,"default","","",288,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",288,null],[11,"partial_cmp","","",288,null],[11,"lt","","",288,null],[11,"le","","",288,null],[11,"gt","","",288,null],[11,"ge","","",288,null],[11,"cmp","","",288,null],[11,"deref","","",289,null],[11,"clone","","Copies a `Ref`.",289,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",289,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",289,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",290,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",290,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"deref","","",290,null],[11,"deref_mut","","",290,null],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",291,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",291,null],[11,"get","","Gets a mutable pointer to the wrapped value.",291,null],[11,"default","","",291,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"fmt","core::iter::range","",292,null],[11,"clone","","",292,null],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",273,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",272,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",275,null],[11,"next","core::iter::range","",292,null],[11,"size_hint","","",292,null],[11,"next","","",292,null],[11,"size_hint","","",292,null],[11,"next","","",292,null],[11,"size_hint","","",292,null],[11,"next","core::ops","",272,null],[11,"size_hint","","",272,null],[11,"next_back","","",272,null],[11,"next","","",273,null],[11,"next","","",275,null],[11,"size_hint","","",275,null],[11,"next_back","","",275,null],[11,"fmt","core::iter::sources","",293,null],[11,"clone","","",293,null],[11,"next","","",293,null],[11,"size_hint","","",293,null],[11,"next_back","","",293,null],[11,"fmt","","",294,null],[11,"next","","",294,null],[11,"size_hint","","",294,null],[11,"next_back","","",294,null],[11,"len","","",294,null],[11,"clone","","",294,null],[11,"default","","",294,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",295,null],[11,"clone","","",295,null],[11,"next","","",295,null],[11,"size_hint","","",295,null],[11,"next_back","","",295,null],[11,"len","","",295,null],[11,"fmt","core::iter","",296,null],[11,"clone","","",296,null],[11,"next","","",296,null],[11,"size_hint","","",296,null],[11,"next_back","","",296,null],[11,"fmt","","",297,null],[11,"clone","","",297,null],[11,"next","","",297,null],[11,"size_hint","","",297,null],[11,"next_back","","",297,null],[11,"fmt","","",298,null],[11,"clone","","",298,null],[11,"next","","",298,null],[11,"size_hint","","",298,null],[11,"fmt","","",299,null],[11,"clone","","",299,null],[11,"next","","",299,null],[11,"count","","",299,null],[11,"nth","","",299,null],[11,"find","","",299,null],[11,"last","","",299,null],[11,"size_hint","","",299,null],[11,"next_back","","",299,null],[11,"fmt","","",300,null],[11,"clone","","",300,null],[11,"next","","",300,null],[11,"size_hint","","",300,null],[11,"next_back","","",300,null],[11,"clone","","",301,null],[11,"fmt","","",301,null],[11,"next","","",301,null],[11,"size_hint","","",301,null],[11,"next_back","","",301,null],[11,"clone","","",302,null],[11,"fmt","","",302,null],[11,"next","","",302,null],[11,"size_hint","","",302,null],[11,"next_back","","",302,null],[11,"clone","","",303,null],[11,"fmt","","",303,null],[11,"next","","",303,null],[11,"size_hint","","",303,null],[11,"next_back","","",303,null],[11,"fmt","","",304,null],[11,"clone","","",304,null],[11,"next","","# Overflow Behavior",304,null],[11,"size_hint","","",304,null],[11,"nth","","",304,null],[11,"count","","",304,null],[11,"next_back","","",304,null],[11,"fmt","","",305,null],[11,"clone","","",305,null],[11,"next","","",305,null],[11,"count","","",305,null],[11,"nth","","",305,null],[11,"last","","",305,null],[11,"size_hint","","",305,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",305,null],[11,"is_empty","","Checks if the iterator has finished iterating.",305,null],[11,"clone","","",306,null],[11,"fmt","","",306,null],[11,"next","","",306,null],[11,"size_hint","","",306,null],[11,"clone","","",307,null],[11,"fmt","","",307,null],[11,"next","","",307,null],[11,"size_hint","","",307,null],[11,"fmt","","",308,null],[11,"clone","","",308,null],[11,"next","","",308,null],[11,"nth","","",308,null],[11,"count","","",308,null],[11,"last","","",308,null],[11,"size_hint","","",308,null],[11,"next_back","","",308,null],[11,"fmt","","",309,null],[11,"clone","","",309,null],[11,"next","","",309,null],[11,"nth","","",309,null],[11,"size_hint","","",309,null],[11,"clone","","",310,null],[11,"fmt","","",310,null],[11,"next","","",310,null],[11,"size_hint","","",310,null],[11,"clone","","",311,null],[11,"fmt","","",311,null],[11,"next","","",311,null],[11,"size_hint","","",311,null],[11,"next_back","","",311,null],[11,"fmt","","",312,null],[11,"clone","","",312,null],[11,"next","","",312,null],[11,"nth","","",312,null],[11,"last","","",312,null],[11,"count","","",312,null],[11,"size_hint","","",312,null],[11,"next_back","","",312,null],[11,"clone","","",313,null],[11,"fmt","","",313,null],[11,"next","","",313,null],[11,"size_hint","","",313,null],[11,"next_back","","",313,null],[11,"hash","core::marker","",314,null],[11,"eq","","",314,null],[11,"partial_cmp","","",314,null],[11,"cmp","","",314,null],[11,"clone","","",314,null],[11,"default","","",314,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"clone","collections::str","",315,null],[11,"next","","",315,null],[11,"size_hint","","",315,null],[11,"borrow","collections::string","",74,null],[11,"fmt","core::str::pattern","",316,null],[11,"eq","","",316,null],[11,"ne","","",316,null],[11,"clone","","",316,null],[11,"fmt","","",317,null],[11,"clone","","",317,null],[11,"haystack","","",317,null],[11,"next","","",317,null],[11,"next_match","","",317,null],[11,"next_reject","","",317,null],[11,"next_back","","",317,null],[11,"next_match_back","","",317,null],[11,"next_reject_back","","",317,null],[11,"fmt","","",318,null],[11,"clone","","",318,null],[11,"haystack","","",318,null],[11,"next","","",318,null],[11,"next_match","","",318,null],[11,"next_reject","","",318,null],[11,"next_back","","",318,null],[11,"next_match_back","","",318,null],[11,"next_reject_back","","",318,null],[11,"clone","","",319,null],[11,"fmt","","",319,null],[11,"haystack","","",319,null],[11,"next","","",319,null],[11,"next_match","","",319,null],[11,"next_reject","","",319,null],[11,"next_back","","",319,null],[11,"next_match_back","","",319,null],[11,"next_reject_back","","",319,null],[11,"fmt","","",320,null],[11,"clone","","",320,null],[11,"haystack","","",320,null],[11,"next","","",320,null],[11,"next_match","","",320,null],[11,"next_back","","",320,null],[11,"next_match_back","","",320,null],[11,"hash","core::cmp","",321,null],[11,"fmt","","",321,null],[11,"eq","","",321,null],[11,"clone","","",321,null],[11,"reverse","","Reverse the `Ordering`.",321,null],[11,"cmp","","",321,null],[11,"partial_cmp","","",321,null],[3,"Ipv4Addr","mio","Representation of an IPv4 address.",null,null],[3,"Ipv6Addr","","Representation of an IPv6 address.",null,null],[3,"PollOpt","","",null,null],[3,"EventSet","","",null,null],[3,"IoEvent","","",null,null],[12,"kind","","",322,null],[12,"token","","",322,null],[3,"EventLoop","","Single threaded IO event loop.",null,null],[3,"EventLoopConfig","","Configure EventLoop runtime details",null,null],[3,"Sender","","Sends messages to the EventLoop from other threads.",null,null],[3,"Poll","","",null,null],[3,"Events","","",null,null],[3,"Timeout","","",null,null],[3,"TimerError","","",null,null],[3,"Token","","",null,null],[12,"0","","",323,null],[3,"Io","","",null,null],[3,"Selector","","",null,null],[4,"IpAddr","","An IP address, either a IPv4 or IPv6 address.",null,null],[13,"V4","","",324,null],[13,"V6","","",324,null],[4,"NotifyError","","",null,null],[13,"Io","","",325,null],[13,"Full","","",325,null],[13,"Closed","","",325,null],[0,"util","","Utilities for non-blocking IO programs",null,null],[3,"BoundedQueue","mio::util","",null,null],[11,"with_capacity","","",326,{"inputs":[{"name":"usize"}],"output":{"name":"queue"}}],[11,"push","","",326,null],[11,"pop","","",326,null],[11,"clone","","",326,null],[6,"Slab","","",null,null],[11,"cmp","mio","",327,null],[11,"partial_cmp","","",327,null],[11,"lt","","",327,null],[11,"le","","",327,null],[11,"gt","","",327,null],[11,"ge","","",327,null],[11,"clone","","",327,null],[11,"eq","","",327,null],[11,"ne","","",327,null],[11,"edge","","",327,{"inputs":[],"output":{"name":"pollopt"}}],[11,"empty","","",327,{"inputs":[],"output":{"name":"pollopt"}}],[11,"level","","",327,{"inputs":[],"output":{"name":"pollopt"}}],[11,"oneshot","","",327,{"inputs":[],"output":{"name":"pollopt"}}],[11,"all","","",327,{"inputs":[],"output":{"name":"pollopt"}}],[11,"is_edge","","",327,null],[11,"is_level","","",327,null],[11,"is_oneshot","","",327,null],[11,"bits","","",327,null],[11,"contains","","",327,null],[11,"insert","","",327,null],[11,"remove","","",327,null],[11,"bitor","","",327,null],[11,"bitxor","","",327,null],[11,"bitand","","",327,null],[11,"sub","","",327,null],[11,"not","","",327,null],[11,"fmt","","",327,null],[11,"cmp","","",328,null],[11,"partial_cmp","","",328,null],[11,"lt","","",328,null],[11,"le","","",328,null],[11,"gt","","",328,null],[11,"ge","","",328,null],[11,"clone","","",328,null],[11,"eq","","",328,null],[11,"ne","","",328,null],[11,"none","","",328,{"inputs":[],"output":{"name":"eventset"}}],[11,"readable","","",328,{"inputs":[],"output":{"name":"eventset"}}],[11,"writable","","",328,{"inputs":[],"output":{"name":"eventset"}}],[11,"error","","",328,{"inputs":[],"output":{"name":"eventset"}}],[11,"hup","","",328,{"inputs":[],"output":{"name":"eventset"}}],[11,"all","","",328,{"inputs":[],"output":{"name":"eventset"}}],[11,"is_readable","","",328,null],[11,"is_writable","","",328,null],[11,"is_error","","",328,null],[11,"is_hup","","",328,null],[11,"insert","","",328,null],[11,"remove","","",328,null],[11,"bits","","",328,null],[11,"contains","","",328,null],[11,"bitor","","",328,null],[11,"bitxor","","",328,null],[11,"bitand","","",328,null],[11,"sub","","",328,null],[11,"not","","",328,null],[11,"fmt","","",328,null],[11,"fmt","","",322,null],[11,"eq","","",322,null],[11,"ne","","",322,null],[11,"clone","","",322,null],[11,"new","","Create a new IoEvent.",322,{"inputs":[{"name":"eventset"},{"name":"token"}],"output":{"name":"ioevent"}}],[11,"fmt","","",329,null],[11,"clone","","",329,null],[11,"new","","Creates a new configuration for the event loop with all default options\nspecified.",329,{"inputs":[],"output":{"name":"eventloopconfig"}}],[11,"notify_capacity","","Sets the maximum number of messages that can be buffered on the event\nloop&#39;s notification channel before a send will fail.",329,null],[11,"messages_per_tick","","Sets the maximum number of messages that can be processed on any tick of\nthe event loop.",329,null],[11,"timer_tick_ms","","",329,null],[11,"timer_wheel_size","","",329,null],[11,"timer_capacity","","",329,null],[11,"default","","",329,{"inputs":[],"output":{"name":"eventloopconfig"}}],[11,"fmt","","",330,null],[11,"new","","Initializes a new event loop using default configuration settings. The\nevent loop will not be running yet.",330,{"inputs":[],"output":{"name":"result"}}],[11,"configured","","",330,{"inputs":[{"name":"eventloopconfig"}],"output":{"name":"result"}}],[11,"channel","","Returns a sender that allows sending messages to the event loop in a\nthread-safe way, waking up the event loop if needed.",330,null],[11,"timeout_ms","","Schedules a timeout after the requested time interval. When the\nduration has been reached,\n[Handler::timeout](trait.Handler.html#method.timeout) will be invoked\npassing in the supplied token.",330,null],[11,"clear_timeout","","If the supplied timeout has not been triggered, cancel it such that it\nwill not be triggered in the future.",330,null],[11,"shutdown","","Tells the event loop to exit after it is done handling all events in the\ncurrent iteration.",330,null],[11,"is_running","","Indicates whether the event loop is currently running. If it&#39;s not it has either\nstopped or is scheduled to stop on the next tick.",330,null],[11,"register","","Registers an IO handle with the event loop.",330,null],[11,"reregister","","Re-Registers an IO handle with the event loop.",330,null],[11,"run","","Keep spinning the event loop indefinitely, and notify the handler whenever\nany of the registered handles are ready.",330,null],[11,"deregister","","Deregisters an IO handle with the event loop.",330,null],[11,"run_once","","Spin the event loop once, with a timeout of one second, and notify the\nhandler if any of the registered handles become ready during that\ntime.",330,null],[11,"drop","","",330,null],[11,"clone","","",331,null],[11,"fmt","","",331,null],[11,"send","","",331,null],[11,"read_to_end","mio::io","Read all bytes until EOF in this source, placing them into `buf`.",332,null],[11,"read_to_string","","Read all bytes until EOF in this source, placing them into `buf`.",332,null],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",332,null],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of `Read`.",332,null],[11,"bytes","","Transforms this `Read` instance to an `Iterator` over its bytes.",332,null],[11,"chars","","Transforms this `Read` instance to an `Iterator` over `char`s.",332,null],[11,"chain","","Creates an adaptor which will chain this stream with another.",332,null],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",332,null],[11,"write_all","","Attempts to write an entire buffer into this write.",333,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error\nencountered.",333,null],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of `Write`.",333,null],[11,"from_str","mio","",324,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",325,null],[11,"fmt","","",325,null],[11,"description","","",325,null],[11,"cause","","",325,null],[11,"new","","",334,{"inputs":[],"output":{"name":"result"}}],[11,"register","","",334,null],[11,"reregister","","",334,null],[11,"deregister","","",334,null],[11,"poll","","",334,null],[11,"event","","",334,null],[11,"events","","",334,null],[11,"fmt","","",334,null],[11,"next","","",335,null],[11,"fmt","","",336,null],[11,"new","","",336,{"inputs":[],"output":{"name":"result"}}],[11,"id","","",336,null],[11,"select","","Wait for events from the OS",336,null],[11,"register","","Register event interests for the given IO handle with the OS",336,null],[11,"reregister","","Register event interests for the given IO handle with the OS",336,null],[11,"deregister","","Deregister event interests for the given IO handle with the OS",336,null],[11,"drop","","",336,null],[11,"fmt","","",337,null],[11,"from_raw_fd","","",337,{"inputs":[{"name":"rawfd"}],"output":{"name":"io"}}],[11,"from","","",337,{"inputs":[{"name":"rawfd"}],"output":{"name":"io"}}],[11,"from_raw_fd","","",337,{"inputs":[{"name":"rawfd"}],"output":{"name":"io"}}],[11,"as_raw_fd","","",337,null],[11,"register","","",337,null],[11,"reregister","","",337,null],[11,"deregister","","",337,null],[11,"read","","",337,null],[11,"write","","",337,null],[11,"flush","","",337,null],[11,"drop","","",337,null],[11,"clone","libc::unix","",338,null],[11,"clone","","",339,null],[11,"clone","","",340,null],[11,"clone","","",341,null],[11,"clone","","",342,null],[11,"clone","","",343,null],[11,"clone","","",344,null],[11,"clone","","",345,null],[11,"clone","","",346,null],[11,"clone","","",347,null],[11,"clone","","",348,null],[11,"clone","","",349,null],[11,"clone","","",350,null],[11,"clone","","",351,null],[11,"clone","libc::unix::notbsd","",352,null],[11,"clone","","",353,null],[11,"clone","","",354,null],[11,"clone","","",355,null],[11,"clone","","",356,null],[11,"clone","","",357,null],[11,"clone","","",358,null],[11,"clone","","",359,null],[11,"clone","","",360,null],[11,"clone","","",361,null],[11,"clone","","",362,null],[11,"clone","","",363,null],[11,"clone","","",364,null],[11,"clone","","",365,null],[11,"clone","","",366,null],[11,"clone","libc::unix::notbsd::linux","",367,null],[11,"clone","","",368,null],[11,"clone","","",369,null],[11,"clone","","",370,null],[11,"clone","","",371,null],[11,"clone","","",372,null],[11,"clone","","",373,null],[11,"clone","","",374,null],[11,"clone","","",375,null],[11,"clone","","",376,null],[11,"clone","","",377,null],[11,"clone","","",378,null],[11,"clone","","",379,null],[11,"clone","","",380,null],[11,"clone","","",381,null],[11,"clone","","",382,null],[11,"clone","libc::unix::notbsd::linux::other","",383,null],[11,"clone","","",384,null],[11,"clone","","",385,null],[11,"clone","","",386,null],[11,"clone","","",387,null],[11,"clone","","",388,null],[11,"clone","","",389,null],[11,"clone","","",390,null],[11,"clone","","",391,null],[11,"clone","","",392,null],[11,"clone","","",393,null],[11,"clone","","",394,null],[11,"clone","libc::unix::notbsd::linux::other::b64","",395,null],[11,"clone","","",396,null],[11,"clone","libc::unix::notbsd::linux::other::b64::x86_64","",397,null],[11,"clone","","",398,null],[11,"clone","","",399,null],[11,"clone","","",400,null],[11,"clone","","",401,null],[11,"clone","","",402,null],[11,"clone","","",403,null],[11,"clone","","",404,null],[11,"from_errno","nix","",405,{"inputs":[{"name":"errno"}],"output":{"name":"error"}}],[11,"last","","",405,{"inputs":[],"output":{"name":"error"}}],[11,"invalid_argument","","",405,{"inputs":[],"output":{"name":"error"}}],[11,"errno","","",405,null],[11,"last","nix::errno::consts","",406,{"inputs":[],"output":{"name":"errno"}}],[11,"desc","","",406,null],[11,"from_i32","","",406,{"inputs":[{"name":"i32"}],"output":{"name":"errno"}}],[11,"clear","","",406,null],[11,"result","","Returns `Ok(value)` if it does not contain the sentinel value. This\nshould not be used when `-1` is not the errno sentinel value.",406,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[11,"description","","",406,null],[11,"fmt","","",406,null],[11,"from","std::io::error","",70,{"inputs":[{"name":"errno"}],"output":{"name":"error"}}],[11,"eq","nix::errno::consts","",406,null],[11,"clone","","",406,null],[11,"fmt","","",406,null],[11,"fmt","nix::fcntl::ffi::os","",407,null],[11,"default","","",407,{"inputs":[],"output":{"name":"flock"}}],[11,"clone","","",407,null],[11,"hash","nix::fcntl::consts","",408,null],[11,"cmp","","",408,null],[11,"partial_cmp","","",408,null],[11,"lt","","",408,null],[11,"le","","",408,null],[11,"gt","","",408,null],[11,"ge","","",408,null],[11,"clone","","",408,null],[11,"eq","","",408,null],[11,"ne","","",408,null],[11,"fmt","","",408,null],[11,"empty","","Returns an empty set of flags.",408,{"inputs":[],"output":{"name":"splicefflags"}}],[11,"all","","Returns the set containing all flags.",408,{"inputs":[],"output":{"name":"splicefflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",408,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",408,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",408,{"inputs":[{"name":"u32"}],"output":{"name":"splicefflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",408,null],[11,"is_all","","Returns `true` if all flags are currently set.",408,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",408,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",408,null],[11,"insert","","Inserts the specified flags in-place.",408,null],[11,"remove","","Removes the specified flags in-place.",408,null],[11,"toggle","","Toggles the specified flags in-place.",408,null],[11,"bitor","","Returns the union of the two sets of flags.",408,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",408,null],[11,"bitand","","Returns the intersection between the two sets of flags.",408,null],[11,"sub","","Returns the set difference of the two sets of flags.",408,null],[11,"not","","Returns the complement of this set of flags.",408,null],[11,"from_iter","","",408,{"inputs":[{"name":"t"}],"output":{"name":"splicefflags"}}],[11,"hash","","",409,null],[11,"cmp","","",409,null],[11,"partial_cmp","","",409,null],[11,"lt","","",409,null],[11,"le","","",409,null],[11,"gt","","",409,null],[11,"ge","","",409,null],[11,"clone","","",409,null],[11,"eq","","",409,null],[11,"ne","","",409,null],[11,"fmt","","",409,null],[11,"empty","","Returns an empty set of flags.",409,{"inputs":[],"output":{"name":"oflag"}}],[11,"all","","Returns the set containing all flags.",409,{"inputs":[],"output":{"name":"oflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",409,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",409,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",409,{"inputs":[{"name":"i32"}],"output":{"name":"oflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",409,null],[11,"is_all","","Returns `true` if all flags are currently set.",409,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",409,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",409,null],[11,"insert","","Inserts the specified flags in-place.",409,null],[11,"remove","","Removes the specified flags in-place.",409,null],[11,"toggle","","Toggles the specified flags in-place.",409,null],[11,"bitor","","Returns the union of the two sets of flags.",409,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",409,null],[11,"bitand","","Returns the intersection between the two sets of flags.",409,null],[11,"sub","","Returns the set difference of the two sets of flags.",409,null],[11,"not","","Returns the complement of this set of flags.",409,null],[11,"from_iter","","",409,{"inputs":[{"name":"t"}],"output":{"name":"oflag"}}],[11,"hash","","",410,null],[11,"cmp","","",410,null],[11,"partial_cmp","","",410,null],[11,"lt","","",410,null],[11,"le","","",410,null],[11,"gt","","",410,null],[11,"ge","","",410,null],[11,"clone","","",410,null],[11,"eq","","",410,null],[11,"ne","","",410,null],[11,"fmt","","",410,null],[11,"empty","","Returns an empty set of flags.",410,{"inputs":[],"output":{"name":"fdflag"}}],[11,"all","","Returns the set containing all flags.",410,{"inputs":[],"output":{"name":"fdflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",410,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",410,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",410,{"inputs":[{"name":"i32"}],"output":{"name":"fdflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",410,null],[11,"is_all","","Returns `true` if all flags are currently set.",410,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",410,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",410,null],[11,"insert","","Inserts the specified flags in-place.",410,null],[11,"remove","","Removes the specified flags in-place.",410,null],[11,"toggle","","Toggles the specified flags in-place.",410,null],[11,"bitor","","Returns the union of the two sets of flags.",410,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",410,null],[11,"bitand","","Returns the intersection between the two sets of flags.",410,null],[11,"sub","","Returns the set difference of the two sets of flags.",410,null],[11,"not","","Returns the complement of this set of flags.",410,null],[11,"from_iter","","",410,{"inputs":[{"name":"t"}],"output":{"name":"fdflag"}}],[11,"hash","","",411,null],[11,"cmp","","",411,null],[11,"partial_cmp","","",411,null],[11,"lt","","",411,null],[11,"le","","",411,null],[11,"gt","","",411,null],[11,"ge","","",411,null],[11,"clone","","",411,null],[11,"eq","","",411,null],[11,"ne","","",411,null],[11,"fmt","","",411,null],[11,"empty","","Returns an empty set of flags.",411,{"inputs":[],"output":{"name":"sealflag"}}],[11,"all","","Returns the set containing all flags.",411,{"inputs":[],"output":{"name":"sealflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",411,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",411,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",411,{"inputs":[{"name":"i32"}],"output":{"name":"sealflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",411,null],[11,"is_all","","Returns `true` if all flags are currently set.",411,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",411,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",411,null],[11,"insert","","Inserts the specified flags in-place.",411,null],[11,"remove","","Removes the specified flags in-place.",411,null],[11,"toggle","","Toggles the specified flags in-place.",411,null],[11,"bitor","","Returns the union of the two sets of flags.",411,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",411,null],[11,"bitand","","Returns the intersection between the two sets of flags.",411,null],[11,"sub","","Returns the set difference of the two sets of flags.",411,null],[11,"not","","Returns the complement of this set of flags.",411,null],[11,"from_iter","","",411,{"inputs":[{"name":"t"}],"output":{"name":"sealflag"}}],[11,"hash","nix::mount","",412,null],[11,"cmp","","",412,null],[11,"partial_cmp","","",412,null],[11,"lt","","",412,null],[11,"le","","",412,null],[11,"gt","","",412,null],[11,"ge","","",412,null],[11,"clone","","",412,null],[11,"eq","","",412,null],[11,"ne","","",412,null],[11,"fmt","","",412,null],[11,"empty","","Returns an empty set of flags.",412,{"inputs":[],"output":{"name":"msflags"}}],[11,"all","","Returns the set containing all flags.",412,{"inputs":[],"output":{"name":"msflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",412,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",412,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",412,{"inputs":[{"name":"u64"}],"output":{"name":"msflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",412,null],[11,"is_all","","Returns `true` if all flags are currently set.",412,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",412,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",412,null],[11,"insert","","Inserts the specified flags in-place.",412,null],[11,"remove","","Removes the specified flags in-place.",412,null],[11,"toggle","","Toggles the specified flags in-place.",412,null],[11,"bitor","","Returns the union of the two sets of flags.",412,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",412,null],[11,"bitand","","Returns the intersection between the two sets of flags.",412,null],[11,"sub","","Returns the set difference of the two sets of flags.",412,null],[11,"not","","Returns the complement of this set of flags.",412,null],[11,"from_iter","","",412,{"inputs":[{"name":"t"}],"output":{"name":"msflags"}}],[11,"hash","","",413,null],[11,"cmp","","",413,null],[11,"partial_cmp","","",413,null],[11,"lt","","",413,null],[11,"le","","",413,null],[11,"gt","","",413,null],[11,"ge","","",413,null],[11,"clone","","",413,null],[11,"eq","","",413,null],[11,"ne","","",413,null],[11,"fmt","","",413,null],[11,"empty","","Returns an empty set of flags.",413,{"inputs":[],"output":{"name":"mntflags"}}],[11,"all","","Returns the set containing all flags.",413,{"inputs":[],"output":{"name":"mntflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",413,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",413,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",413,{"inputs":[{"name":"i32"}],"output":{"name":"mntflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",413,null],[11,"is_all","","Returns `true` if all flags are currently set.",413,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",413,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",413,null],[11,"insert","","Inserts the specified flags in-place.",413,null],[11,"remove","","Removes the specified flags in-place.",413,null],[11,"toggle","","Toggles the specified flags in-place.",413,null],[11,"bitor","","Returns the union of the two sets of flags.",413,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",413,null],[11,"bitand","","Returns the intersection between the two sets of flags.",413,null],[11,"sub","","Returns the set difference of the two sets of flags.",413,null],[11,"not","","Returns the complement of this set of flags.",413,null],[11,"from_iter","","",413,{"inputs":[{"name":"t"}],"output":{"name":"mntflags"}}],[11,"hash","nix::mqueue::consts","",414,null],[11,"cmp","","",414,null],[11,"partial_cmp","","",414,null],[11,"lt","","",414,null],[11,"le","","",414,null],[11,"gt","","",414,null],[11,"ge","","",414,null],[11,"clone","","",414,null],[11,"eq","","",414,null],[11,"ne","","",414,null],[11,"fmt","","",414,null],[11,"empty","","Returns an empty set of flags.",414,{"inputs":[],"output":{"name":"mq_oflag"}}],[11,"all","","Returns the set containing all flags.",414,{"inputs":[],"output":{"name":"mq_oflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",414,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",414,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",414,{"inputs":[{"name":"i32"}],"output":{"name":"mq_oflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",414,null],[11,"is_all","","Returns `true` if all flags are currently set.",414,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",414,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",414,null],[11,"insert","","Inserts the specified flags in-place.",414,null],[11,"remove","","Removes the specified flags in-place.",414,null],[11,"toggle","","Toggles the specified flags in-place.",414,null],[11,"bitor","","Returns the union of the two sets of flags.",414,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",414,null],[11,"bitand","","Returns the intersection between the two sets of flags.",414,null],[11,"sub","","Returns the set difference of the two sets of flags.",414,null],[11,"not","","Returns the complement of this set of flags.",414,null],[11,"from_iter","","",414,{"inputs":[{"name":"t"}],"output":{"name":"mq_oflag"}}],[11,"hash","","",415,null],[11,"cmp","","",415,null],[11,"partial_cmp","","",415,null],[11,"lt","","",415,null],[11,"le","","",415,null],[11,"gt","","",415,null],[11,"ge","","",415,null],[11,"clone","","",415,null],[11,"eq","","",415,null],[11,"ne","","",415,null],[11,"fmt","","",415,null],[11,"empty","","Returns an empty set of flags.",415,{"inputs":[],"output":{"name":"fdflag"}}],[11,"all","","Returns the set containing all flags.",415,{"inputs":[],"output":{"name":"fdflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",415,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",415,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",415,{"inputs":[{"name":"i32"}],"output":{"name":"fdflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",415,null],[11,"is_all","","Returns `true` if all flags are currently set.",415,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",415,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",415,null],[11,"insert","","Inserts the specified flags in-place.",415,null],[11,"remove","","Removes the specified flags in-place.",415,null],[11,"toggle","","Toggles the specified flags in-place.",415,null],[11,"bitor","","Returns the union of the two sets of flags.",415,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",415,null],[11,"bitand","","Returns the intersection between the two sets of flags.",415,null],[11,"sub","","Returns the set difference of the two sets of flags.",415,null],[11,"not","","Returns the complement of this set of flags.",415,null],[11,"from_iter","","",415,{"inputs":[{"name":"t"}],"output":{"name":"fdflag"}}],[11,"eq","nix::mqueue","",416,null],[11,"ne","","",416,null],[11,"fmt","","",416,null],[11,"clone","","",416,null],[11,"new","","",416,{"inputs":[{"name":"i64"},{"name":"i64"},{"name":"i64"},{"name":"i64"}],"output":{"name":"mqattr"}}],[11,"fmt","nix::poll::ffi","",417,null],[11,"clone","","",417,null],[11,"hash","nix::poll::ffi::consts","",418,null],[11,"cmp","","",418,null],[11,"partial_cmp","","",418,null],[11,"lt","","",418,null],[11,"le","","",418,null],[11,"gt","","",418,null],[11,"ge","","",418,null],[11,"clone","","",418,null],[11,"eq","","",418,null],[11,"ne","","",418,null],[11,"fmt","","",418,null],[11,"empty","","Returns an empty set of flags.",418,{"inputs":[],"output":{"name":"eventflags"}}],[11,"all","","Returns the set containing all flags.",418,{"inputs":[],"output":{"name":"eventflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",418,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",418,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",418,{"inputs":[{"name":"i16"}],"output":{"name":"eventflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",418,null],[11,"is_all","","Returns `true` if all flags are currently set.",418,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",418,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",418,null],[11,"insert","","Inserts the specified flags in-place.",418,null],[11,"remove","","Removes the specified flags in-place.",418,null],[11,"toggle","","Toggles the specified flags in-place.",418,null],[11,"bitor","","Returns the union of the two sets of flags.",418,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",418,null],[11,"bitand","","Returns the intersection between the two sets of flags.",418,null],[11,"sub","","Returns the set difference of the two sets of flags.",418,null],[11,"not","","Returns the complement of this set of flags.",418,null],[11,"from_iter","","",418,{"inputs":[{"name":"t"}],"output":{"name":"eventflags"}}],[11,"hash","nix::sched","",419,null],[11,"cmp","","",419,null],[11,"partial_cmp","","",419,null],[11,"lt","","",419,null],[11,"le","","",419,null],[11,"gt","","",419,null],[11,"ge","","",419,null],[11,"clone","","",419,null],[11,"eq","","",419,null],[11,"ne","","",419,null],[11,"fmt","","",419,null],[11,"empty","","Returns an empty set of flags.",419,{"inputs":[],"output":{"name":"cloneflags"}}],[11,"all","","Returns the set containing all flags.",419,{"inputs":[],"output":{"name":"cloneflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",419,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",419,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",419,{"inputs":[{"name":"i32"}],"output":{"name":"cloneflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",419,null],[11,"is_all","","Returns `true` if all flags are currently set.",419,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",419,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",419,null],[11,"insert","","Inserts the specified flags in-place.",419,null],[11,"remove","","Removes the specified flags in-place.",419,null],[11,"toggle","","Toggles the specified flags in-place.",419,null],[11,"bitor","","Returns the union of the two sets of flags.",419,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",419,null],[11,"bitand","","Returns the intersection between the two sets of flags.",419,null],[11,"sub","","Returns the set difference of the two sets of flags.",419,null],[11,"not","","Returns the complement of this set of flags.",419,null],[11,"from_iter","","",419,{"inputs":[{"name":"t"}],"output":{"name":"cloneflags"}}],[11,"clone","","",420,null],[11,"new","","",420,{"inputs":[],"output":{"name":"cpuset"}}],[11,"set","","",420,null],[11,"unset","","",420,null],[11,"hash","nix::sys::epoll","",421,null],[11,"cmp","","",421,null],[11,"partial_cmp","","",421,null],[11,"lt","","",421,null],[11,"le","","",421,null],[11,"gt","","",421,null],[11,"ge","","",421,null],[11,"clone","","",421,null],[11,"eq","","",421,null],[11,"ne","","",421,null],[11,"fmt","","",421,null],[11,"empty","","Returns an empty set of flags.",421,{"inputs":[],"output":{"name":"epolleventkind"}}],[11,"all","","Returns the set containing all flags.",421,{"inputs":[],"output":{"name":"epolleventkind"}}],[11,"bits","","Returns the raw value of the flags currently stored.",421,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",421,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",421,{"inputs":[{"name":"u32"}],"output":{"name":"epolleventkind"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",421,null],[11,"is_all","","Returns `true` if all flags are currently set.",421,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",421,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",421,null],[11,"insert","","Inserts the specified flags in-place.",421,null],[11,"remove","","Removes the specified flags in-place.",421,null],[11,"toggle","","Toggles the specified flags in-place.",421,null],[11,"bitor","","Returns the union of the two sets of flags.",421,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",421,null],[11,"bitand","","Returns the intersection between the two sets of flags.",421,null],[11,"sub","","Returns the set difference of the two sets of flags.",421,null],[11,"not","","Returns the complement of this set of flags.",421,null],[11,"from_iter","","",421,{"inputs":[{"name":"t"}],"output":{"name":"epolleventkind"}}],[11,"clone","","",422,null],[11,"clone","","",423,null],[11,"hash","nix::sys::memfd","",424,null],[11,"cmp","","",424,null],[11,"partial_cmp","","",424,null],[11,"lt","","",424,null],[11,"le","","",424,null],[11,"gt","","",424,null],[11,"ge","","",424,null],[11,"clone","","",424,null],[11,"eq","","",424,null],[11,"ne","","",424,null],[11,"fmt","","",424,null],[11,"empty","","Returns an empty set of flags.",424,{"inputs":[],"output":{"name":"memfdcreateflag"}}],[11,"all","","Returns the set containing all flags.",424,{"inputs":[],"output":{"name":"memfdcreateflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",424,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",424,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",424,{"inputs":[{"name":"u32"}],"output":{"name":"memfdcreateflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",424,null],[11,"is_all","","Returns `true` if all flags are currently set.",424,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",424,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",424,null],[11,"insert","","Inserts the specified flags in-place.",424,null],[11,"remove","","Removes the specified flags in-place.",424,null],[11,"toggle","","Toggles the specified flags in-place.",424,null],[11,"bitor","","Returns the union of the two sets of flags.",424,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",424,null],[11,"bitand","","Returns the intersection between the two sets of flags.",424,null],[11,"sub","","Returns the set difference of the two sets of flags.",424,null],[11,"not","","Returns the complement of this set of flags.",424,null],[11,"from_iter","","",424,{"inputs":[{"name":"t"}],"output":{"name":"memfdcreateflag"}}],[11,"hash","nix::sys::signal","",425,null],[11,"cmp","","",425,null],[11,"partial_cmp","","",425,null],[11,"lt","","",425,null],[11,"le","","",425,null],[11,"gt","","",425,null],[11,"ge","","",425,null],[11,"clone","","",425,null],[11,"eq","","",425,null],[11,"ne","","",425,null],[11,"fmt","","",425,null],[11,"empty","","Returns an empty set of flags.",425,{"inputs":[],"output":{"name":"saflag"}}],[11,"all","","Returns the set containing all flags.",425,{"inputs":[],"output":{"name":"saflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",425,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",425,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",425,{"inputs":[{"name":"i32"}],"output":{"name":"saflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",425,null],[11,"is_all","","Returns `true` if all flags are currently set.",425,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",425,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",425,null],[11,"insert","","Inserts the specified flags in-place.",425,null],[11,"remove","","Removes the specified flags in-place.",425,null],[11,"toggle","","Toggles the specified flags in-place.",425,null],[11,"bitor","","Returns the union of the two sets of flags.",425,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",425,null],[11,"bitand","","Returns the intersection between the two sets of flags.",425,null],[11,"sub","","Returns the set difference of the two sets of flags.",425,null],[11,"not","","Returns the complement of this set of flags.",425,null],[11,"from_iter","","",425,{"inputs":[{"name":"t"}],"output":{"name":"saflag"}}],[11,"hash","","",426,null],[11,"cmp","","",426,null],[11,"partial_cmp","","",426,null],[11,"lt","","",426,null],[11,"le","","",426,null],[11,"gt","","",426,null],[11,"ge","","",426,null],[11,"clone","","",426,null],[11,"eq","","",426,null],[11,"ne","","",426,null],[11,"fmt","","",426,null],[11,"empty","","Returns an empty set of flags.",426,{"inputs":[],"output":{"name":"sigflag"}}],[11,"all","","Returns the set containing all flags.",426,{"inputs":[],"output":{"name":"sigflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",426,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",426,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",426,{"inputs":[{"name":"i32"}],"output":{"name":"sigflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",426,null],[11,"is_all","","Returns `true` if all flags are currently set.",426,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",426,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",426,null],[11,"insert","","Inserts the specified flags in-place.",426,null],[11,"remove","","Removes the specified flags in-place.",426,null],[11,"toggle","","Toggles the specified flags in-place.",426,null],[11,"bitor","","Returns the union of the two sets of flags.",426,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",426,null],[11,"bitand","","Returns the intersection between the two sets of flags.",426,null],[11,"sub","","Returns the set difference of the two sets of flags.",426,null],[11,"not","","Returns the complement of this set of flags.",426,null],[11,"from_iter","","",426,{"inputs":[{"name":"t"}],"output":{"name":"sigflag"}}],[11,"clone","","",427,null],[11,"all","","",427,{"inputs":[],"output":{"name":"sigset"}}],[11,"empty","","",427,{"inputs":[],"output":{"name":"sigset"}}],[11,"add","","",427,null],[11,"remove","","",427,null],[11,"contains","","",427,null],[11,"thread_get_mask","","Gets the currently blocked (masked) set of signals for the calling thread.",427,{"inputs":[],"output":{"name":"result"}}],[11,"thread_set_mask","","Sets the set of signals as the signal mask for the calling thread.",427,null],[11,"thread_block","","Adds the set of signals to the signal mask for the calling thread.",427,null],[11,"thread_unblock","","Removes the set of signals from the signal mask for the calling thread.",427,null],[11,"thread_swap_mask","","Sets the set of signals as the signal mask, and returns the old mask.",427,null],[11,"wait","","Suspends execution of the calling thread until one of the signals in the\nsignal mask becomes pending, and returns the accepted signal.",427,null],[11,"as_ref","","",427,null],[11,"eq","","",428,null],[11,"ne","","",428,null],[11,"clone","","",428,null],[11,"new","","This function will set or unset the flag `SA_SIGINFO` depending on the\ntype of the `handler` argument.",429,{"inputs":[{"name":"sighandler"},{"name":"saflag"},{"name":"sigset"}],"output":{"name":"sigaction"}}],[11,"hash","nix::sys::socket::addr","",430,null],[11,"fmt","","",430,null],[11,"eq","","",430,null],[11,"clone","","",430,null],[11,"from_std","","",431,{"inputs":[{"name":"socketaddr"}],"output":{"name":"inetaddr"}}],[11,"new","","",431,{"inputs":[{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"inetaddr"}}],[11,"ip","","Gets the IP address associated with this socket address.",431,null],[11,"port","","Gets the port number associated with this socket address",431,null],[11,"to_std","","",431,null],[11,"to_str","","",431,null],[11,"eq","","",431,null],[11,"hash","","",431,null],[11,"clone","","",431,null],[11,"fmt","","",431,null],[11,"new_v4","","Create a new IpAddr that contains an IPv4 address.",432,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipaddr"}}],[11,"new_v6","","Create a new IpAddr that contains an IPv6 address.",432,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipaddr"}}],[11,"fmt","","",432,null],[11,"new","","",433,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"from_std","","",433,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"any","","",433,{"inputs":[],"output":{"name":"ipv4addr"}}],[11,"octets","","",433,null],[11,"to_std","","",433,null],[11,"eq","","",433,null],[11,"hash","","",433,null],[11,"clone","","",433,null],[11,"fmt","","",433,null],[11,"clone","","",434,null],[11,"new","","",434,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"from_std","","",434,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Return the eight 16-bit segments that make up this address",434,null],[11,"to_std","","",434,null],[11,"fmt","","",434,null],[11,"new","","Create a new sockaddr_un representing a filesystem path.",435,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"new_abstract","","Create a new sockaddr_un representing an address in the\n&quot;abstract namespace&quot;. This is a Linux-specific extension,\nprimarily used to allow chrooted processes to communicate with\nspecific daemons.",435,null],[11,"path","","If this address represents a filesystem path, return that path.",435,null],[11,"eq","","",435,null],[11,"hash","","",435,null],[11,"clone","","",435,null],[11,"fmt","","",435,null],[11,"new_inet","","",436,{"inputs":[{"name":"inetaddr"}],"output":{"name":"sockaddr"}}],[11,"new_unix","","",436,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"new_netlink","","",436,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"sockaddr"}}],[11,"family","","",436,null],[11,"to_str","","",436,null],[11,"as_ffi_pair","","",436,null],[11,"eq","","",436,null],[11,"hash","","",436,null],[11,"clone","","",436,null],[11,"fmt","","",436,null],[11,"clone","nix::sys::socket::addr::netlink","",437,null],[11,"eq","","",437,null],[11,"hash","","",437,null],[11,"new","","",437,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"netlinkaddr"}}],[11,"pid","","",437,null],[11,"groups","","",437,null],[11,"fmt","","",437,null],[11,"hash","nix::sys::socket::consts::os","",438,null],[11,"cmp","","",438,null],[11,"partial_cmp","","",438,null],[11,"lt","","",438,null],[11,"le","","",438,null],[11,"gt","","",438,null],[11,"ge","","",438,null],[11,"clone","","",438,null],[11,"eq","","",438,null],[11,"ne","","",438,null],[11,"fmt","","",438,null],[11,"empty","","Returns an empty set of flags.",438,{"inputs":[],"output":{"name":"msgflags"}}],[11,"all","","Returns the set containing all flags.",438,{"inputs":[],"output":{"name":"msgflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",438,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",438,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",438,{"inputs":[{"name":"i32"}],"output":{"name":"msgflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",438,null],[11,"is_all","","Returns `true` if all flags are currently set.",438,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",438,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",438,null],[11,"insert","","Inserts the specified flags in-place.",438,null],[11,"remove","","Removes the specified flags in-place.",438,null],[11,"toggle","","Toggles the specified flags in-place.",438,null],[11,"bitor","","Returns the union of the two sets of flags.",438,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",438,null],[11,"bitand","","Returns the intersection between the two sets of flags.",438,null],[11,"sub","","Returns the set difference of the two sets of flags.",438,null],[11,"not","","Returns the complement of this set of flags.",438,null],[11,"from_iter","","",438,{"inputs":[{"name":"t"}],"output":{"name":"msgflags"}}],[11,"clone","nix::sys::socket::multicast","",439,null],[11,"fmt","","",439,null],[11,"new","","",439,{"inputs":[{"name":"ipv4addr"},{"name":"option"}],"output":{"name":"ip_mreq"}}],[11,"new","","",440,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6_mreq"}}],[11,"fmt","nix::sys::socket::sockopt","",441,null],[11,"clone","","",441,null],[11,"set","","",441,null],[11,"get","","",441,null],[11,"fmt","","",442,null],[11,"clone","","",442,null],[11,"set","","",442,null],[11,"get","","",442,null],[11,"fmt","","",443,null],[11,"clone","","",443,null],[11,"set","","",443,null],[11,"get","","",443,null],[11,"fmt","","",444,null],[11,"clone","","",444,null],[11,"set","","",444,null],[11,"get","","",444,null],[11,"fmt","","",445,null],[11,"clone","","",445,null],[11,"set","","",445,null],[11,"fmt","","",446,null],[11,"clone","","",446,null],[11,"set","","",446,null],[11,"fmt","","",447,null],[11,"clone","","",447,null],[11,"set","","",447,null],[11,"fmt","","",448,null],[11,"clone","","",448,null],[11,"set","","",448,null],[11,"fmt","","",449,null],[11,"clone","","",449,null],[11,"set","","",449,null],[11,"get","","",449,null],[11,"fmt","","",450,null],[11,"clone","","",450,null],[11,"set","","",450,null],[11,"get","","",450,null],[11,"fmt","","",451,null],[11,"clone","","",451,null],[11,"set","","",451,null],[11,"get","","",451,null],[11,"fmt","","",452,null],[11,"clone","","",452,null],[11,"set","","",452,null],[11,"get","","",452,null],[11,"fmt","","",453,null],[11,"clone","","",453,null],[11,"set","","",453,null],[11,"get","","",453,null],[11,"fmt","","",454,null],[11,"clone","","",454,null],[11,"set","","",454,null],[11,"get","","",454,null],[11,"fmt","","",455,null],[11,"clone","","",455,null],[11,"get","","",455,null],[11,"fmt","","",456,null],[11,"clone","","",456,null],[11,"set","","",456,null],[11,"get","","",456,null],[11,"fmt","","",457,null],[11,"clone","","",457,null],[11,"get","","",457,null],[11,"fmt","","",458,null],[11,"clone","","",458,null],[11,"set","","",458,null],[11,"get","","",458,null],[11,"fmt","","",459,null],[11,"clone","","",459,null],[11,"set","","",459,null],[11,"get","","",459,null],[11,"fmt","","",460,null],[11,"clone","","",460,null],[11,"set","","",460,null],[11,"get","","",460,null],[11,"fmt","","",461,null],[11,"clone","","",461,null],[11,"set","","",461,null],[11,"fmt","","",462,null],[11,"clone","","",462,null],[11,"set","","",462,null],[11,"fmt","","",463,null],[11,"clone","","",463,null],[11,"get","","",463,null],[11,"fmt","","",464,null],[11,"clone","","",464,null],[11,"get","","",464,null],[11,"fmt","nix::sys::socket","",465,null],[11,"eq","","",465,null],[11,"clone","","",465,null],[11,"hash","","",466,null],[11,"cmp","","",466,null],[11,"partial_cmp","","",466,null],[11,"lt","","",466,null],[11,"le","","",466,null],[11,"gt","","",466,null],[11,"ge","","",466,null],[11,"clone","","",466,null],[11,"eq","","",466,null],[11,"ne","","",466,null],[11,"fmt","","",466,null],[11,"empty","","Returns an empty set of flags.",466,{"inputs":[],"output":{"name":"sockflag"}}],[11,"all","","Returns the set containing all flags.",466,{"inputs":[],"output":{"name":"sockflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",466,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",466,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",466,{"inputs":[{"name":"i32"}],"output":{"name":"sockflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",466,null],[11,"is_all","","Returns `true` if all flags are currently set.",466,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",466,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",466,null],[11,"insert","","Inserts the specified flags in-place.",466,null],[11,"remove","","Removes the specified flags in-place.",466,null],[11,"toggle","","Toggles the specified flags in-place.",466,null],[11,"bitor","","Returns the union of the two sets of flags.",466,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",466,null],[11,"bitand","","Returns the intersection between the two sets of flags.",466,null],[11,"sub","","Returns the set difference of the two sets of flags.",466,null],[11,"not","","Returns the complement of this set of flags.",466,null],[11,"from_iter","","",466,{"inputs":[{"name":"t"}],"output":{"name":"sockflag"}}],[11,"new","","Create a CmsgSpace&lt;T&gt;. The structure is used only for space, so\nthe fields are uninitialized.",467,{"inputs":[],"output":{"name":"cmsgspace"}}],[11,"cmsgs","","Iterate over the valid control messages pointed to by this\nmsghdr.",468,null],[11,"next","","",469,null],[11,"fmt","","",470,null],[11,"clone","","",470,null],[11,"fmt","","",471,null],[11,"eq","","",471,null],[11,"ne","","",471,null],[11,"clone","","",471,null],[11,"fmt","","",472,null],[11,"eq","","",472,null],[11,"clone","","",472,null],[11,"hash","nix::sys::stat","",473,null],[11,"cmp","","",473,null],[11,"partial_cmp","","",473,null],[11,"lt","","",473,null],[11,"le","","",473,null],[11,"gt","","",473,null],[11,"ge","","",473,null],[11,"clone","","",473,null],[11,"eq","","",473,null],[11,"ne","","",473,null],[11,"fmt","","",473,null],[11,"empty","","Returns an empty set of flags.",473,{"inputs":[],"output":{"name":"sflag"}}],[11,"all","","Returns the set containing all flags.",473,{"inputs":[],"output":{"name":"sflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",473,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",473,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",473,{"inputs":[{"name":"u32"}],"output":{"name":"sflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",473,null],[11,"is_all","","Returns `true` if all flags are currently set.",473,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",473,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",473,null],[11,"insert","","Inserts the specified flags in-place.",473,null],[11,"remove","","Removes the specified flags in-place.",473,null],[11,"toggle","","Toggles the specified flags in-place.",473,null],[11,"bitor","","Returns the union of the two sets of flags.",473,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",473,null],[11,"bitand","","Returns the intersection between the two sets of flags.",473,null],[11,"sub","","Returns the set difference of the two sets of flags.",473,null],[11,"not","","Returns the complement of this set of flags.",473,null],[11,"from_iter","","",473,{"inputs":[{"name":"t"}],"output":{"name":"sflag"}}],[11,"hash","","",474,null],[11,"cmp","","",474,null],[11,"partial_cmp","","",474,null],[11,"lt","","",474,null],[11,"le","","",474,null],[11,"gt","","",474,null],[11,"ge","","",474,null],[11,"clone","","",474,null],[11,"eq","","",474,null],[11,"ne","","",474,null],[11,"fmt","","",474,null],[11,"empty","","Returns an empty set of flags.",474,{"inputs":[],"output":{"name":"mode"}}],[11,"all","","Returns the set containing all flags.",474,{"inputs":[],"output":{"name":"mode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",474,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",474,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",474,{"inputs":[{"name":"u32"}],"output":{"name":"mode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",474,null],[11,"is_all","","Returns `true` if all flags are currently set.",474,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",474,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",474,null],[11,"insert","","Inserts the specified flags in-place.",474,null],[11,"remove","","Removes the specified flags in-place.",474,null],[11,"toggle","","Toggles the specified flags in-place.",474,null],[11,"bitor","","Returns the union of the two sets of flags.",474,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",474,null],[11,"bitand","","Returns the intersection between the two sets of flags.",474,null],[11,"sub","","Returns the set difference of the two sets of flags.",474,null],[11,"not","","Returns the complement of this set of flags.",474,null],[11,"from_iter","","",474,{"inputs":[{"name":"t"}],"output":{"name":"mode"}}],[11,"clone","nix::sys::termios::ffi::consts","",475,null],[11,"hash","","",476,null],[11,"cmp","","",476,null],[11,"partial_cmp","","",476,null],[11,"lt","","",476,null],[11,"le","","",476,null],[11,"gt","","",476,null],[11,"ge","","",476,null],[11,"clone","","",476,null],[11,"eq","","",476,null],[11,"ne","","",476,null],[11,"fmt","","",476,null],[11,"empty","","Returns an empty set of flags.",476,{"inputs":[],"output":{"name":"inputflags"}}],[11,"all","","Returns the set containing all flags.",476,{"inputs":[],"output":{"name":"inputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",476,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",476,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",476,{"inputs":[{"name":"u32"}],"output":{"name":"inputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",476,null],[11,"is_all","","Returns `true` if all flags are currently set.",476,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",476,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",476,null],[11,"insert","","Inserts the specified flags in-place.",476,null],[11,"remove","","Removes the specified flags in-place.",476,null],[11,"toggle","","Toggles the specified flags in-place.",476,null],[11,"bitor","","Returns the union of the two sets of flags.",476,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",476,null],[11,"bitand","","Returns the intersection between the two sets of flags.",476,null],[11,"sub","","Returns the set difference of the two sets of flags.",476,null],[11,"not","","Returns the complement of this set of flags.",476,null],[11,"from_iter","","",476,{"inputs":[{"name":"t"}],"output":{"name":"inputflags"}}],[11,"hash","","",477,null],[11,"cmp","","",477,null],[11,"partial_cmp","","",477,null],[11,"lt","","",477,null],[11,"le","","",477,null],[11,"gt","","",477,null],[11,"ge","","",477,null],[11,"clone","","",477,null],[11,"eq","","",477,null],[11,"ne","","",477,null],[11,"fmt","","",477,null],[11,"empty","","Returns an empty set of flags.",477,{"inputs":[],"output":{"name":"outputflags"}}],[11,"all","","Returns the set containing all flags.",477,{"inputs":[],"output":{"name":"outputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",477,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",477,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",477,{"inputs":[{"name":"u32"}],"output":{"name":"outputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",477,null],[11,"is_all","","Returns `true` if all flags are currently set.",477,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",477,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",477,null],[11,"insert","","Inserts the specified flags in-place.",477,null],[11,"remove","","Removes the specified flags in-place.",477,null],[11,"toggle","","Toggles the specified flags in-place.",477,null],[11,"bitor","","Returns the union of the two sets of flags.",477,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",477,null],[11,"bitand","","Returns the intersection between the two sets of flags.",477,null],[11,"sub","","Returns the set difference of the two sets of flags.",477,null],[11,"not","","Returns the complement of this set of flags.",477,null],[11,"from_iter","","",477,{"inputs":[{"name":"t"}],"output":{"name":"outputflags"}}],[11,"hash","","",478,null],[11,"cmp","","",478,null],[11,"partial_cmp","","",478,null],[11,"lt","","",478,null],[11,"le","","",478,null],[11,"gt","","",478,null],[11,"ge","","",478,null],[11,"clone","","",478,null],[11,"eq","","",478,null],[11,"ne","","",478,null],[11,"fmt","","",478,null],[11,"empty","","Returns an empty set of flags.",478,{"inputs":[],"output":{"name":"controlflags"}}],[11,"all","","Returns the set containing all flags.",478,{"inputs":[],"output":{"name":"controlflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",478,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",478,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",478,{"inputs":[{"name":"u32"}],"output":{"name":"controlflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",478,null],[11,"is_all","","Returns `true` if all flags are currently set.",478,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",478,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",478,null],[11,"insert","","Inserts the specified flags in-place.",478,null],[11,"remove","","Removes the specified flags in-place.",478,null],[11,"toggle","","Toggles the specified flags in-place.",478,null],[11,"bitor","","Returns the union of the two sets of flags.",478,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",478,null],[11,"bitand","","Returns the intersection between the two sets of flags.",478,null],[11,"sub","","Returns the set difference of the two sets of flags.",478,null],[11,"not","","Returns the complement of this set of flags.",478,null],[11,"from_iter","","",478,{"inputs":[{"name":"t"}],"output":{"name":"controlflags"}}],[11,"hash","","",479,null],[11,"cmp","","",479,null],[11,"partial_cmp","","",479,null],[11,"lt","","",479,null],[11,"le","","",479,null],[11,"gt","","",479,null],[11,"ge","","",479,null],[11,"clone","","",479,null],[11,"eq","","",479,null],[11,"ne","","",479,null],[11,"fmt","","",479,null],[11,"empty","","Returns an empty set of flags.",479,{"inputs":[],"output":{"name":"localflags"}}],[11,"all","","Returns the set containing all flags.",479,{"inputs":[],"output":{"name":"localflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",479,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",479,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",479,{"inputs":[{"name":"u32"}],"output":{"name":"localflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",479,null],[11,"is_all","","Returns `true` if all flags are currently set.",479,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",479,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",479,null],[11,"insert","","Inserts the specified flags in-place.",479,null],[11,"remove","","Removes the specified flags in-place.",479,null],[11,"toggle","","Toggles the specified flags in-place.",479,null],[11,"bitor","","Returns the union of the two sets of flags.",479,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",479,null],[11,"bitand","","Returns the intersection between the two sets of flags.",479,null],[11,"sub","","Returns the set difference of the two sets of flags.",479,null],[11,"not","","Returns the complement of this set of flags.",479,null],[11,"from_iter","","",479,{"inputs":[{"name":"t"}],"output":{"name":"localflags"}}],[11,"clone","","",480,null],[11,"clone","","",481,null],[11,"clone","","",482,null],[11,"clone","nix::sys::utsname","",483,null],[11,"sysname","","",483,null],[11,"nodename","","",483,null],[11,"release","","",483,null],[11,"version","","",483,null],[11,"machine","","",483,null],[11,"hash","nix::sys::wait","",484,null],[11,"cmp","","",484,null],[11,"partial_cmp","","",484,null],[11,"lt","","",484,null],[11,"le","","",484,null],[11,"gt","","",484,null],[11,"ge","","",484,null],[11,"clone","","",484,null],[11,"eq","","",484,null],[11,"ne","","",484,null],[11,"fmt","","",484,null],[11,"empty","","Returns an empty set of flags.",484,{"inputs":[],"output":{"name":"waitpidflag"}}],[11,"all","","Returns the set containing all flags.",484,{"inputs":[],"output":{"name":"waitpidflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",484,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",484,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",484,{"inputs":[{"name":"i32"}],"output":{"name":"waitpidflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",484,null],[11,"is_all","","Returns `true` if all flags are currently set.",484,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",484,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",484,null],[11,"insert","","Inserts the specified flags in-place.",484,null],[11,"remove","","Removes the specified flags in-place.",484,null],[11,"toggle","","Toggles the specified flags in-place.",484,null],[11,"bitor","","Returns the union of the two sets of flags.",484,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",484,null],[11,"bitand","","Returns the intersection between the two sets of flags.",484,null],[11,"sub","","Returns the set difference of the two sets of flags.",484,null],[11,"not","","Returns the complement of this set of flags.",484,null],[11,"from_iter","","",484,{"inputs":[{"name":"t"}],"output":{"name":"waitpidflag"}}],[11,"fmt","","",485,null],[11,"clone","","",485,null],[11,"eq","","",485,null],[11,"ne","","",485,null],[11,"hash","nix::sys::mman","",486,null],[11,"cmp","","",486,null],[11,"partial_cmp","","",486,null],[11,"lt","","",486,null],[11,"le","","",486,null],[11,"gt","","",486,null],[11,"ge","","",486,null],[11,"clone","","",486,null],[11,"eq","","",486,null],[11,"ne","","",486,null],[11,"fmt","","",486,null],[11,"empty","","Returns an empty set of flags.",486,{"inputs":[],"output":{"name":"protflags"}}],[11,"all","","Returns the set containing all flags.",486,{"inputs":[],"output":{"name":"protflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",486,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",486,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",486,{"inputs":[{"name":"i32"}],"output":{"name":"protflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",486,null],[11,"is_all","","Returns `true` if all flags are currently set.",486,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",486,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",486,null],[11,"insert","","Inserts the specified flags in-place.",486,null],[11,"remove","","Removes the specified flags in-place.",486,null],[11,"toggle","","Toggles the specified flags in-place.",486,null],[11,"bitor","","Returns the union of the two sets of flags.",486,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",486,null],[11,"bitand","","Returns the intersection between the two sets of flags.",486,null],[11,"sub","","Returns the set difference of the two sets of flags.",486,null],[11,"not","","Returns the complement of this set of flags.",486,null],[11,"from_iter","","",486,{"inputs":[{"name":"t"}],"output":{"name":"protflags"}}],[11,"hash","nix::sys::mman::consts","",487,null],[11,"cmp","","",487,null],[11,"partial_cmp","","",487,null],[11,"lt","","",487,null],[11,"le","","",487,null],[11,"gt","","",487,null],[11,"ge","","",487,null],[11,"clone","","",487,null],[11,"eq","","",487,null],[11,"ne","","",487,null],[11,"fmt","","",487,null],[11,"empty","","Returns an empty set of flags.",487,{"inputs":[],"output":{"name":"mapflags"}}],[11,"all","","Returns the set containing all flags.",487,{"inputs":[],"output":{"name":"mapflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",487,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",487,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",487,{"inputs":[{"name":"i32"}],"output":{"name":"mapflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",487,null],[11,"is_all","","Returns `true` if all flags are currently set.",487,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",487,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",487,null],[11,"insert","","Inserts the specified flags in-place.",487,null],[11,"remove","","Removes the specified flags in-place.",487,null],[11,"toggle","","Toggles the specified flags in-place.",487,null],[11,"bitor","","Returns the union of the two sets of flags.",487,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",487,null],[11,"bitand","","Returns the intersection between the two sets of flags.",487,null],[11,"sub","","Returns the set difference of the two sets of flags.",487,null],[11,"not","","Returns the complement of this set of flags.",487,null],[11,"from_iter","","",487,{"inputs":[{"name":"t"}],"output":{"name":"mapflags"}}],[11,"hash","","",488,null],[11,"cmp","","",488,null],[11,"partial_cmp","","",488,null],[11,"lt","","",488,null],[11,"le","","",488,null],[11,"gt","","",488,null],[11,"ge","","",488,null],[11,"clone","","",488,null],[11,"eq","","",488,null],[11,"ne","","",488,null],[11,"fmt","","",488,null],[11,"empty","","Returns an empty set of flags.",488,{"inputs":[],"output":{"name":"msflags"}}],[11,"all","","Returns the set containing all flags.",488,{"inputs":[],"output":{"name":"msflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",488,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",488,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",488,{"inputs":[{"name":"i32"}],"output":{"name":"msflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",488,null],[11,"is_all","","Returns `true` if all flags are currently set.",488,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",488,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",488,null],[11,"insert","","Inserts the specified flags in-place.",488,null],[11,"remove","","Removes the specified flags in-place.",488,null],[11,"toggle","","Toggles the specified flags in-place.",488,null],[11,"bitor","","Returns the union of the two sets of flags.",488,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",488,null],[11,"bitand","","Returns the intersection between the two sets of flags.",488,null],[11,"sub","","Returns the set difference of the two sets of flags.",488,null],[11,"not","","Returns the complement of this set of flags.",488,null],[11,"from_iter","","",488,{"inputs":[{"name":"t"}],"output":{"name":"msflags"}}],[11,"as_slice","nix::sys::uio","",489,null],[11,"from_slice","","",489,null],[11,"from_mut_slice","","",489,null],[11,"fmt","nix::sys::time","",490,null],[11,"cmp","","",490,null],[11,"partial_cmp","","",490,null],[11,"lt","","",490,null],[11,"le","","",490,null],[11,"gt","","",490,null],[11,"ge","","",490,null],[11,"eq","","",490,null],[11,"ne","","",490,null],[11,"clone","","",490,null],[11,"zero","","",490,{"inputs":[],"output":{"name":"timeval"}}],[11,"hours","","",490,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"minutes","","",490,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"seconds","","",490,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"milliseconds","","",490,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"microseconds","","Makes a new `TimeVal` with given number of microseconds.",490,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"num_hours","","",490,null],[11,"num_minutes","","",490,null],[11,"num_seconds","","",490,null],[11,"num_milliseconds","","",490,null],[11,"num_microseconds","","",490,null],[11,"neg","","",490,null],[11,"add","","",490,null],[11,"sub","","",490,null],[11,"mul","","",490,null],[11,"div","","",490,null],[11,"fmt","","",490,null],[11,"clone","nix::sys::select","",491,null],[11,"new","","",491,{"inputs":[],"output":{"name":"fdset"}}],[11,"insert","","",491,null],[11,"remove","","",491,null],[11,"contains","","",491,null],[11,"clear","","",491,null],[11,"as_int","nix::sys::quota::quota","",492,null],[11,"hash","","",493,null],[11,"cmp","","",493,null],[11,"partial_cmp","","",493,null],[11,"lt","","",493,null],[11,"le","","",493,null],[11,"gt","","",493,null],[11,"ge","","",493,null],[11,"clone","","",493,null],[11,"eq","","",493,null],[11,"ne","","",493,null],[11,"default","","",493,{"inputs":[],"output":{"name":"quotavalidflags"}}],[11,"fmt","","",493,null],[11,"empty","","Returns an empty set of flags.",493,{"inputs":[],"output":{"name":"quotavalidflags"}}],[11,"all","","Returns the set containing all flags.",493,{"inputs":[],"output":{"name":"quotavalidflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",493,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",493,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",493,{"inputs":[{"name":"u32"}],"output":{"name":"quotavalidflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",493,null],[11,"is_all","","Returns `true` if all flags are currently set.",493,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",493,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",493,null],[11,"insert","","Inserts the specified flags in-place.",493,null],[11,"remove","","Removes the specified flags in-place.",493,null],[11,"toggle","","Toggles the specified flags in-place.",493,null],[11,"bitor","","Returns the union of the two sets of flags.",493,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",493,null],[11,"bitand","","Returns the intersection between the two sets of flags.",493,null],[11,"sub","","Returns the set difference of the two sets of flags.",493,null],[11,"not","","Returns the complement of this set of flags.",493,null],[11,"from_iter","","",493,{"inputs":[{"name":"t"}],"output":{"name":"quotavalidflags"}}],[11,"clone","","",494,null],[11,"fmt","","",494,null],[11,"default","","",494,{"inputs":[],"output":{"name":"dqblk"}}],[11,"clone","nix::sys::statfs::vfs","",495,null],[11,"fmt","","",495,null],[11,"hash","nix::sys::statvfs::vfs","",496,null],[11,"cmp","","",496,null],[11,"partial_cmp","","",496,null],[11,"lt","","",496,null],[11,"le","","",496,null],[11,"gt","","",496,null],[11,"ge","","",496,null],[11,"clone","","",496,null],[11,"eq","","",496,null],[11,"ne","","",496,null],[11,"default","","",496,{"inputs":[],"output":{"name":"fsflags"}}],[11,"fmt","","",496,null],[11,"empty","","Returns an empty set of flags.",496,{"inputs":[],"output":{"name":"fsflags"}}],[11,"all","","Returns the set containing all flags.",496,{"inputs":[],"output":{"name":"fsflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",496,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",496,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",496,{"inputs":[{"name":"u64"}],"output":{"name":"fsflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",496,null],[11,"is_all","","Returns `true` if all flags are currently set.",496,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",496,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",496,null],[11,"insert","","Inserts the specified flags in-place.",496,null],[11,"remove","","Removes the specified flags in-place.",496,null],[11,"toggle","","Toggles the specified flags in-place.",496,null],[11,"bitor","","Returns the union of the two sets of flags.",496,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",496,null],[11,"bitand","","Returns the intersection between the two sets of flags.",496,null],[11,"sub","","Returns the set difference of the two sets of flags.",496,null],[11,"not","","Returns the complement of this set of flags.",496,null],[11,"from_iter","","",496,{"inputs":[{"name":"t"}],"output":{"name":"fsflags"}}],[11,"clone","","",497,null],[11,"fmt","","",497,null],[11,"for_path","","Create a new `Statvfs` object and fill it with information about\nthe mount that contains `path`",497,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"update_with_path","","Replace information in this struct with information about `path`",497,null],[11,"for_fd","","Create a new `Statvfs` object and fill it with information from fd",497,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"update_with_fd","","Replace information in this struct with information about `fd`",497,null],[11,"default","","Create a statvfs object initialized to all zeros",497,{"inputs":[],"output":{"name":"statvfs"}}],[11,"clone","nix::unistd","",498,null],[11,"is_child","","",498,null],[11,"is_parent","","",498,null],[11,"eq","nix","",405,null],[11,"ne","","",405,null],[11,"fmt","","",405,null],[11,"clone","","",405,null],[11,"from","","",405,{"inputs":[{"name":"errno"}],"output":{"name":"error"}}],[11,"description","","",405,null],[11,"fmt","","",405,null],[11,"from","std::io::error","",70,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"len","std::ffi::os_str","",72,null],[11,"with_nix_path","","",72,null],[11,"len","std::ffi::c_str","",66,null],[11,"with_nix_path","","",66,null],[11,"len","std::path","",139,null],[11,"with_nix_path","","",139,null],[11,"len","","",138,null],[11,"with_nix_path","","",138,null],[11,"len","core::option","",259,null],[11,"with_nix_path","","",259,null],[11,"clone","mio","",499,null],[11,"fmt","","",500,null],[11,"hash","","",323,null],[11,"cmp","","",323,null],[11,"partial_cmp","","",323,null],[11,"lt","","",323,null],[11,"le","","",323,null],[11,"gt","","",323,null],[11,"ge","","",323,null],[11,"eq","","",323,null],[11,"ne","","",323,null],[11,"fmt","","",323,null],[11,"clone","","",323,null],[11,"as_usize","","",323,null],[11,"from_usize","","",323,{"inputs":[{"name":"usize"}],"output":{"name":"token"}}],[11,"as_usize","","",323,null],[0,"tcp","","",null,null],[4,"Shutdown","mio::tcp","Possible values which can be passed to the `shutdown` method of `TcpStream`.",null,null],[13,"Read","","Indicates that the reading portion of this stream/socket should be shut\ndown. All currently blocked and future reads will return `Ok(0)`.",117,null],[13,"Write","","Indicates that the writing portion of this stream/socket should be shut\ndown. All currently blocked and future writes will return an error.",117,null],[13,"Both","","Shut down both the reading and writing portions of this stream.",117,null],[3,"TcpStream","","",null,null],[3,"TcpListener","","",null,null],[11,"fmt","","",501,null],[11,"connect","","Create a new TCP stream an issue a non-blocking connect to the specified\naddress.",501,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"connect_stream","","Creates a new `TcpStream` from the pending socket inside the given\n`std::net::TcpBuilder`, connecting it to the address specified.",501,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"peer_addr","","",501,null],[11,"local_addr","","",501,null],[11,"try_clone","","",501,null],[11,"shutdown","","",501,null],[11,"set_nodelay","","",501,null],[11,"set_keepalive","","",501,null],[11,"take_socket_error","","",501,null],[11,"read","","",501,null],[11,"write","","",501,null],[11,"flush","","",501,null],[11,"register","","",501,null],[11,"reregister","","",501,null],[11,"deregister","","",501,null],[11,"fmt","","",502,null],[11,"bind","","Convenience method to bind a new TCP listener to the specified address\nto receive new connections.",502,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"from_listener","","Creates a new `TcpListener` from an instance of a\n`std::net::TcpListener` type.",502,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"accept","","Accepts a new `TcpStream`.",502,null],[11,"local_addr","","",502,null],[11,"try_clone","","",502,null],[11,"take_socket_error","","",502,null],[11,"register","","",502,null],[11,"reregister","","",502,null],[11,"deregister","","",502,null],[11,"accept","","",502,null],[11,"as_raw_fd","","",501,null],[11,"from_raw_fd","","",501,{"inputs":[{"name":"rawfd"}],"output":{"name":"tcpstream"}}],[11,"as_raw_fd","","",502,null],[11,"from_raw_fd","","",502,{"inputs":[{"name":"rawfd"}],"output":{"name":"tcplistener"}}],[0,"udp","mio","",null,null],[3,"UdpSocket","mio::udp","",null,null],[11,"fmt","","",503,null],[11,"v4","","Returns a new, unbound, non-blocking, IPv4 UDP socket",503,{"inputs":[],"output":{"name":"result"}}],[11,"v6","","Returns a new, unbound, non-blocking, IPv6 UDP socket",503,{"inputs":[],"output":{"name":"result"}}],[11,"bound","","",503,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"bind","","",503,null],[11,"local_addr","","",503,null],[11,"try_clone","","",503,null],[11,"send_to","","",503,null],[11,"recv_from","","",503,null],[11,"set_broadcast","","",503,null],[11,"set_multicast_loop","","",503,null],[11,"join_multicast","","",503,null],[11,"leave_multicast","","",503,null],[11,"set_multicast_time_to_live","","",503,null],[11,"register","","",503,null],[11,"reregister","","",503,null],[11,"deregister","","",503,null],[11,"from","","",503,{"inputs":[{"name":"udpsocket"}],"output":{"name":"udpsocket"}}],[11,"as_raw_fd","","",503,null],[11,"from_raw_fd","","",503,{"inputs":[{"name":"rawfd"}],"output":{"name":"udpsocket"}}],[0,"unix","mio","",null,null],[3,"PipeReader","mio::unix","",null,null],[3,"PipeWriter","","",null,null],[3,"UnixListener","","",null,null],[3,"UnixSocket","","",null,null],[3,"UnixStream","","",null,null],[3,"EventedFd","","",null,null],[12,"0","","",504,null],[5,"pipe","","",null,{"inputs":[],"output":{"name":"result"}}],[0,"prelude","mio","",null,null],[3,"EventLoop","mio::prelude","Single threaded IO event loop.",null,null],[8,"TryRead","","",null,null],[11,"try_read_buf","","",505,null],[10,"try_read","","",505,null],[8,"TryWrite","","",null,null],[11,"try_write_buf","","",506,null],[10,"try_write","","",506,null],[6,"TimerResult","mio","",null,null],[8,"Handler","","",null,null],[16,"Timeout","","",507,null],[16,"Message","","",507,null],[11,"ready","","Invoked when the socket represented by `token` is ready to be operated\non. `events` indicates the specific operations that are\nready to be performed.",507,null],[11,"notify","","Invoked when a message has been received via the event loop&#39;s channel.",507,null],[11,"timeout","","Invoked when a timeout has completed.",507,null],[11,"interrupted","","Invoked when `EventLoop` has been interrupted by a signal interrupt.",507,null],[11,"tick","","Invoked at the end of an event loop tick.",507,null],[8,"TryRead","","",null,null],[11,"try_read_buf","","",505,null],[10,"try_read","","",505,null],[8,"TryWrite","","",null,null],[11,"try_write_buf","","",506,null],[10,"try_write","","",506,null],[8,"Evented","","A value that may be registered with an `EventLoop`",null,null],[8,"TryAccept","","",null,null],[16,"Output","","",508,null],[10,"accept","","",508,null],[11,"ready","","Invoked when the socket represented by `token` is ready to be operated\non. `events` indicates the specific operations that are\nready to be performed.",507,null],[11,"notify","","Invoked when a message has been received via the event loop&#39;s channel.",507,null],[11,"timeout","","Invoked when a timeout has completed.",507,null],[11,"interrupted","","Invoked when `EventLoop` has been interrupted by a signal interrupt.",507,null],[11,"tick","","Invoked at the end of an event loop tick.",507,null],[11,"try_read_buf","mio::prelude","",505,null],[11,"try_write_buf","","",506,null],[11,"fmt","mio::tcp","",501,null],[11,"connect","","Create a new TCP stream an issue a non-blocking connect to the specified\naddress.",501,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"connect_stream","","Creates a new `TcpStream` from the pending socket inside the given\n`std::net::TcpBuilder`, connecting it to the address specified.",501,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"peer_addr","","",501,null],[11,"local_addr","","",501,null],[11,"try_clone","","",501,null],[11,"shutdown","","",501,null],[11,"set_nodelay","","",501,null],[11,"set_keepalive","","",501,null],[11,"take_socket_error","","",501,null],[11,"read","","",501,null],[11,"write","","",501,null],[11,"flush","","",501,null],[11,"register","","",501,null],[11,"reregister","","",501,null],[11,"deregister","","",501,null],[11,"fmt","","",502,null],[11,"bind","","Convenience method to bind a new TCP listener to the specified address\nto receive new connections.",502,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"from_listener","","Creates a new `TcpListener` from an instance of a\n`std::net::TcpListener` type.",502,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"accept","","Accepts a new `TcpStream`.",502,null],[11,"local_addr","","",502,null],[11,"try_clone","","",502,null],[11,"take_socket_error","","",502,null],[11,"register","","",502,null],[11,"reregister","","",502,null],[11,"deregister","","",502,null],[11,"accept","","",502,null],[11,"as_raw_fd","","",501,null],[11,"from_raw_fd","","",501,{"inputs":[{"name":"rawfd"}],"output":{"name":"tcpstream"}}],[11,"as_raw_fd","","",502,null],[11,"from_raw_fd","","",502,{"inputs":[{"name":"rawfd"}],"output":{"name":"tcplistener"}}],[11,"fmt","mio::udp","",503,null],[11,"v4","","Returns a new, unbound, non-blocking, IPv4 UDP socket",503,{"inputs":[],"output":{"name":"result"}}],[11,"v6","","Returns a new, unbound, non-blocking, IPv6 UDP socket",503,{"inputs":[],"output":{"name":"result"}}],[11,"bound","","",503,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"bind","","",503,null],[11,"local_addr","","",503,null],[11,"try_clone","","",503,null],[11,"send_to","","",503,null],[11,"recv_from","","",503,null],[11,"set_broadcast","","",503,null],[11,"set_multicast_loop","","",503,null],[11,"join_multicast","","",503,null],[11,"leave_multicast","","",503,null],[11,"set_multicast_time_to_live","","",503,null],[11,"register","","",503,null],[11,"reregister","","",503,null],[11,"deregister","","",503,null],[11,"from","","",503,{"inputs":[{"name":"udpsocket"}],"output":{"name":"udpsocket"}}],[11,"as_raw_fd","","",503,null],[11,"from_raw_fd","","",503,{"inputs":[{"name":"rawfd"}],"output":{"name":"udpsocket"}}],[11,"fmt","mio::unix","",509,null],[11,"stream","","Returns a new, unbound, non-blocking Unix domain socket",509,{"inputs":[],"output":{"name":"result"}}],[11,"connect","","Connect the socket to the specified address",509,null],[11,"bind","","Bind the socket to the specified address",509,null],[11,"listen","","Listen for incoming requests",509,null],[11,"try_clone","","",509,null],[11,"register","","",509,null],[11,"reregister","","",509,null],[11,"deregister","","",509,null],[11,"from","","",509,{"inputs":[{"name":"unixsocket"}],"output":{"name":"unixsocket"}}],[11,"fmt","","",510,null],[11,"connect","","",510,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"try_clone","","",510,null],[11,"read_recv_fd","","",510,null],[11,"try_read_recv_fd","","",510,null],[11,"try_read_buf_recv_fd","","",510,null],[11,"write_send_fd","","",510,null],[11,"try_write_send_fd","","",510,null],[11,"try_write_buf_send_fd","","",510,null],[11,"read","","",510,null],[11,"write","","",510,null],[11,"flush","","",510,null],[11,"register","","",510,null],[11,"reregister","","",510,null],[11,"deregister","","",510,null],[11,"from","","",510,{"inputs":[{"name":"unixsocket"}],"output":{"name":"unixstream"}}],[11,"fmt","","",511,null],[11,"bind","","",511,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"accept","","",511,null],[11,"try_clone","","",511,null],[11,"register","","",511,null],[11,"reregister","","",511,null],[11,"deregister","","",511,null],[11,"accept","","",511,null],[11,"from","","",511,{"inputs":[{"name":"unixsocket"}],"output":{"name":"unixlistener"}}],[11,"fmt","","",512,null],[11,"read","","",512,null],[11,"register","","",512,null],[11,"reregister","","",512,null],[11,"deregister","","",512,null],[11,"from","","",512,{"inputs":[{"name":"io"}],"output":{"name":"pipereader"}}],[11,"fmt","","",513,null],[11,"write","","",513,null],[11,"flush","","",513,null],[11,"register","","",513,null],[11,"reregister","","",513,null],[11,"deregister","","",513,null],[11,"from","","",513,{"inputs":[{"name":"io"}],"output":{"name":"pipewriter"}}],[11,"as_raw_fd","","",509,null],[11,"from_raw_fd","","",509,{"inputs":[{"name":"rawfd"}],"output":{"name":"unixsocket"}}],[11,"as_raw_fd","","",510,null],[11,"from_raw_fd","","",510,{"inputs":[{"name":"rawfd"}],"output":{"name":"unixstream"}}],[11,"as_raw_fd","","",511,null],[11,"from_raw_fd","","",511,{"inputs":[{"name":"rawfd"}],"output":{"name":"unixlistener"}}],[11,"as_raw_fd","","",512,null],[11,"from_raw_fd","","",512,{"inputs":[{"name":"rawfd"}],"output":{"name":"pipereader"}}],[11,"as_raw_fd","","",513,null],[11,"from_raw_fd","","",513,{"inputs":[{"name":"rawfd"}],"output":{"name":"pipewriter"}}],[11,"fmt","","",504,null],[11,"register","","",504,null],[11,"reregister","","",504,null],[11,"deregister","","",504,null]],"paths":[[3,"Ipv4Addr"],[3,"Box"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"ParseIntError"],[3,"TryFromIntError"],[3,"ParseFloatError"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"DecodeUtf16Error"],[8,"Error"],[3,"EscapeDefault"],[4,"LocalKeyState"],[3,"LocalKey"],[3,"Key"],[3,"Key"],[3,"ScopedKey"],[3,"KeyInner"],[3,"Builder"],[3,"Thread"],[3,"JoinHandle"],[3,"HashMap"],[3,"Iter"],[3,"Keys"],[3,"Values"],[3,"IterMut"],[3,"IntoIter"],[3,"ValuesMut"],[3,"Drain"],[4,"Entry"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"RandomState"],[3,"HashSet"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"Vec"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Iter"],[3,"IntoIter"],[3,"LinkedList"],[3,"IterMut"],[3,"FrontPlace"],[3,"BackPlace"],[3,"Vars"],[3,"VarsOs"],[4,"VarError"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"ArgsOs"],[3,"CString"],[3,"CStr"],[3,"NulError"],[3,"FromBytesWithNulError"],[3,"IntoStringError"],[3,"Error"],[3,"OsString"],[3,"OsStr"],[4,"Cow"],[3,"String"],[3,"Metadata"],[3,"OpenOptions"],[3,"Permissions"],[3,"FileType"],[3,"File"],[3,"ReadDir"],[3,"DirEntry"],[3,"DirBuilder"],[3,"BufReader"],[3,"IntoInnerError"],[3,"BufWriter"],[3,"LineWriter"],[3,"Cursor"],[4,"ErrorKind"],[3,"Empty"],[3,"Repeat"],[3,"Sink"],[3,"Stdin"],[3,"StdinLock"],[3,"Stdout"],[3,"StdoutLock"],[3,"Stderr"],[3,"StderrLock"],[4,"SeekFrom"],[3,"Chain"],[3,"Take"],[3,"Bytes"],[4,"CharsError"],[3,"Chars"],[3,"Split"],[3,"Lines"],[4,"IpAddr"],[4,"Ipv6MulticastScope"],[3,"Ipv6Addr"],[4,"SocketAddr"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"TcpStream"],[3,"TcpListener"],[3,"Incoming"],[3,"UdpSocket"],[3,"AddrParseError"],[4,"Shutdown"],[3,"LookupHost"],[3,"stat"],[3,"Command"],[3,"ExitStatus"],[3,"Stdio"],[3,"ChildStdin"],[3,"ChildStdout"],[3,"ChildStderr"],[3,"SocketAddr"],[3,"UnixStream"],[3,"UnixListener"],[3,"Incoming"],[3,"UnixDatagram"],[3,"AssertUnwindSafe"],[3,"AssertRecoverSafe"],[4,"Prefix"],[3,"PrefixComponent"],[4,"Component"],[3,"Components"],[3,"Iter"],[3,"PathBuf"],[3,"Path"],[3,"StripPrefixError"],[3,"Display"],[3,"Output"],[3,"Child"],[3,"Select"],[3,"Handle"],[3,"SendError"],[3,"RecvError"],[4,"TryRecvError"],[4,"TrySendError"],[3,"Sender"],[3,"SyncSender"],[3,"Receiver"],[3,"Iter"],[3,"IntoIter"],[3,"Barrier"],[3,"BarrierWaitResult"],[3,"WaitTimeoutResult"],[3,"Condvar"],[3,"StaticCondvar"],[3,"Mutex"],[3,"StaticMutex"],[3,"MutexGuard"],[3,"Once"],[3,"OnceState"],[3,"RwLock"],[3,"StaticRwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"AtomicBool"],[3,"AtomicPtr"],[4,"Ordering"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Duration"],[3,"Instant"],[3,"SystemTime"],[3,"SystemTimeError"],[3,"PoisonError"],[4,"TryLockError"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"fd_set"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"passwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"fsid_t"],[3,"mq_attr"],[3,"cpu_set_t"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"sigset_t"],[3,"stat"],[3,"stat64"],[3,"pthread_attr_t"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"PanicInfo"],[3,"Location"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Drain"],[3,"SipHasher"],[3,"BuildHasherDefault"],[4,"Option"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Rc"],[3,"Weak"],[3,"Unique"],[3,"Shared"],[3,"IntoIter"],[3,"Drain"],[3,"Slice"],[3,"TraitObject"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[8,"Any"],[3,"TypeId"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"ToLowercase"],[3,"ToUppercase"],[3,"DecodeUtf16"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"PhantomData"],[3,"EncodeUtf16"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"Ordering"],[3,"IoEvent"],[3,"Token"],[4,"IpAddr"],[4,"NotifyError"],[3,"BoundedQueue"],[3,"PollOpt"],[3,"EventSet"],[3,"EventLoopConfig"],[3,"EventLoop"],[3,"Sender"],[8,"Read"],[8,"Write"],[3,"Poll"],[3,"Events"],[3,"Selector"],[3,"Io"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"fd_set"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"passwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"fsid_t"],[3,"mq_attr"],[3,"cpu_set_t"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"sem_t"],[3,"sigset_t"],[3,"sysinfo"],[3,"stat"],[3,"stat64"],[3,"pthread_attr_t"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"mcontext_t"],[3,"ucontext_t"],[4,"Error"],[4,"Errno"],[3,"flock"],[3,"SpliceFFlags"],[3,"OFlag"],[3,"FdFlag"],[3,"SealFlag"],[3,"MsFlags"],[3,"MntFlags"],[3,"MQ_OFlag"],[3,"FdFlag"],[3,"MqAttr"],[3,"PollFd"],[3,"EventFlags"],[3,"CloneFlags"],[3,"CpuSet"],[3,"EpollEventKind"],[4,"EpollOp"],[3,"EpollEvent"],[3,"MemFdCreateFlag"],[3,"SaFlag"],[3,"SigFlag"],[3,"SigSet"],[4,"SigHandler"],[3,"SigAction"],[4,"AddressFamily"],[4,"InetAddr"],[4,"IpAddr"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[3,"UnixAddr"],[4,"SockAddr"],[3,"NetlinkAddr"],[3,"MsgFlags"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"ReuseAddr"],[3,"ReusePort"],[3,"TcpNoDelay"],[3,"Linger"],[3,"IpAddMembership"],[3,"IpDropMembership"],[3,"Ipv6AddMembership"],[3,"Ipv6DropMembership"],[3,"IpMulticastTtl"],[3,"IpMulticastLoop"],[3,"ReceiveTimeout"],[3,"SendTimeout"],[3,"Broadcast"],[3,"OobInline"],[3,"SocketError"],[3,"KeepAlive"],[3,"PeerCredentials"],[3,"TcpKeepIdle"],[3,"RcvBuf"],[3,"SndBuf"],[3,"RcvBufForce"],[3,"SndBufForce"],[3,"SockType"],[3,"AcceptConn"],[4,"SockType"],[3,"SockFlag"],[3,"CmsgSpace"],[3,"RecvMsg"],[3,"CmsgIterator"],[3,"linger"],[3,"ucred"],[4,"Shutdown"],[3,"SFlag"],[3,"Mode"],[3,"Termios"],[3,"InputFlags"],[3,"OutputFlags"],[3,"ControlFlags"],[3,"LocalFlags"],[4,"SetArg"],[4,"FlushArg"],[4,"FlowArg"],[3,"UtsName"],[3,"WaitPidFlag"],[4,"WaitStatus"],[3,"ProtFlags"],[3,"MapFlags"],[3,"MsFlags"],[3,"IoVec"],[3,"TimeVal"],[3,"FdSet"],[3,"QuotaCmd"],[3,"QuotaValidFlags"],[3,"Dqblk"],[3,"Statfs"],[3,"FsFlags"],[3,"Statvfs"],[4,"Fork"],[3,"Timeout"],[3,"TimerError"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[3,"EventedFd"],[8,"TryRead"],[8,"TryWrite"],[8,"Handler"],[8,"TryAccept"],[3,"UnixSocket"],[3,"UnixStream"],[3,"UnixListener"],[3,"PipeReader"],[3,"PipeWriter"]]};
searchIndex["bincode"] = {"doc":"`bincode` is a crate for encoding and decoding using a tiny binary\nserialization strategy.","items":[[3,"RefBox","bincode","A struct for encoding nested reference types.",null,null],[3,"StrBox","","Like a RefBox, but encoding from a `str` and decoedes to a `String`.",null,null],[3,"SliceBox","","Like a RefBox, but encodes from a `[T]` and encodes to a `Vec&lt;T&gt;`.",null,null],[4,"SizeLimit","","A limit on the amount of bytes that can be read or written.",null,null],[13,"Infinite","","",0,null],[13,"Bounded","","",0,null],[11,"clone","","",1,null],[11,"hash","","",1,null],[11,"cmp","","",1,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"gt","","",1,null],[11,"ge","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",2,null],[11,"hash","","",2,null],[11,"cmp","","",2,null],[11,"partial_cmp","","",2,null],[11,"lt","","",2,null],[11,"le","","",2,null],[11,"gt","","",2,null],[11,"ge","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"fmt","","",2,null],[11,"clone","","",3,null],[11,"hash","","",3,null],[11,"cmp","","",3,null],[11,"partial_cmp","","",3,null],[11,"lt","","",3,null],[11,"le","","",3,null],[11,"gt","","",3,null],[11,"ge","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"fmt","","",3,null],[11,"new","","Creates a new RefBox that looks at a borrowed value.",1,{"inputs":[{"name":"t"}],"output":{"name":"refbox"}}],[11,"take","","Takes the value out of this refbox.",1,null],[11,"try_take","","Tries to take the value out of this refbox.",1,null],[11,"encode","","",1,null],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",1,null],[11,"deserialize","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","","Creates a new StrBox that looks at a borrowed value.",2,{"inputs":[{"name":"str"}],"output":{"name":"strbox"}}],[11,"into_string","","Extract a String from a StrBox.",2,null],[11,"to_owned","","Convert to an Owned `SliceBox`.",2,null],[11,"as_ref","","",2,null],[11,"boxed","","Creates a new StrBox made from an allocated String.",2,{"inputs":[{"name":"string"}],"output":{"name":"strbox"}}],[11,"take","","Takes the value out of this refbox.",2,null],[11,"try_take","","Tries to take the value out of this refbox.",2,null],[11,"encode","","",2,null],[11,"decode","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",2,null],[11,"deserialize","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","","Creates a new RefBox that looks at a borrowed value.",3,null],[11,"into_vec","","Extract a `Vec&lt;T&gt;` from a `SliceBox`.",3,null],[11,"to_owned","","Convert to an Owned `SliceBox`.",3,null],[11,"boxed","","Creates a new SliceBox made from an allocated `Vec&lt;T&gt;`.",3,{"inputs":[{"name":"vec"}],"output":{"name":"slicebox"}}],[11,"take","","Takes the value out of this refbox.",3,null],[11,"try_take","","Tries to take the value out of this refbox.",3,null],[11,"encode","","",3,null],[11,"decode","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",3,null],[11,"deserialize","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deref","","",1,null],[11,"deref","","",3,null],[0,"rustc_serialize","","A collection of serialization and deserialization functions\nthat use the `rustc_serialize` crate for the encodable and decodable\nimplementation.",null,null],[3,"SizeChecker","bincode::rustc_serialize","",null,null],[12,"size_limit","","",4,null],[12,"written","","",4,null],[3,"EncoderWriter","","An Encoder that encodes values directly into a Writer.",null,null],[3,"DecoderReader","","A Decoder that reads bytes from a buffer.",null,null],[3,"InvalidEncoding","","",null,null],[12,"desc","","",5,null],[12,"detail","","",5,null],[4,"EncodingError","","An error that can be produced during encoding.",null,null],[13,"IoError","","An error originating from the underlying `Writer`.",6,null],[13,"SizeLimit","","An object could not be encoded with the given size limit.",6,null],[4,"DecodingError","","An error that can be produced during decoding.",null,null],[13,"IoError","","If the error stems from the reader that is being used\nduring decoding, that error will be stored and returned here.",7,null],[13,"InvalidEncoding","","If the bytes in the reader are not decodable because of an invalid\nencoding, this error will be returned.  This error is only possible\nif a stream is corrupted.  A stream produced from `encode` or `encode_into`\nshould **never** produce an InvalidEncoding error.",7,null],[13,"SizeLimit","","If decoding a message takes more than the provided size limit, this\nerror is returned.",7,null],[5,"encode","","Encodes an encodable object into a `Vec` of bytes.",null,{"inputs":[{"name":"t"},{"name":"sizelimit"}],"output":{"name":"encodingresult"}}],[5,"decode","","Decodes a slice of bytes into an object.",null,null],[5,"encode_into","","Encodes an object directly into a `Writer`.",null,{"inputs":[{"name":"t"},{"name":"w"},{"name":"sizelimit"}],"output":{"name":"encodingresult"}}],[5,"decode_from","","Decoes an object directly from a `Buffer`ed Reader.",null,{"inputs":[{"name":"r"},{"name":"sizelimit"}],"output":{"name":"decodingresult"}}],[5,"encoded_size","","Returns the size that an object would be if encoded using bincode.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"encoded_size_bounded","","Given a maximum size limit, check how large an object would be if it\nwere to be encoded.",null,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"option"}}],[11,"fmt","","",5,null],[11,"clone","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"fmt","","",5,null],[11,"fmt","","",7,null],[11,"fmt","","",7,null],[11,"description","","",7,null],[11,"cause","","",7,null],[11,"from","","",7,{"inputs":[{"name":"ioerror"}],"output":{"name":"decodingerror"}}],[11,"new","","",8,{"inputs":[{"name":"r"},{"name":"sizelimit"}],"output":{"name":"decoderreader"}}],[11,"bytes_read","","Returns the number of bytes read from the contained Reader.",8,null],[11,"read_nil","","",8,null],[11,"read_usize","","",8,null],[11,"read_u64","","",8,null],[11,"read_u32","","",8,null],[11,"read_u16","","",8,null],[11,"read_u8","","",8,null],[11,"read_isize","","",8,null],[11,"read_i64","","",8,null],[11,"read_i32","","",8,null],[11,"read_i16","","",8,null],[11,"read_i8","","",8,null],[11,"read_bool","","",8,null],[11,"read_f64","","",8,null],[11,"read_f32","","",8,null],[11,"read_char","","",8,null],[11,"read_str","","",8,null],[11,"read_enum","","",8,null],[11,"read_enum_variant","","",8,null],[11,"read_enum_variant_arg","","",8,null],[11,"read_enum_struct_variant","","",8,null],[11,"read_enum_struct_variant_field","","",8,null],[11,"read_struct","","",8,null],[11,"read_struct_field","","",8,null],[11,"read_tuple","","",8,null],[11,"read_tuple_arg","","",8,null],[11,"read_tuple_struct","","",8,null],[11,"read_tuple_struct_arg","","",8,null],[11,"read_option","","",8,null],[11,"read_seq","","",8,null],[11,"read_seq_elt","","",8,null],[11,"read_map","","",8,null],[11,"read_map_elt_key","","",8,null],[11,"read_map_elt_val","","",8,null],[11,"error","","",8,null],[11,"fmt","","",6,null],[11,"fmt","","",6,null],[11,"description","","",6,null],[11,"cause","","",6,null],[11,"new","","",9,{"inputs":[{"name":"w"}],"output":{"name":"encoderwriter"}}],[11,"new","","",4,{"inputs":[{"name":"u64"}],"output":{"name":"sizechecker"}}],[11,"emit_nil","","",9,null],[11,"emit_usize","","",9,null],[11,"emit_u64","","",9,null],[11,"emit_u32","","",9,null],[11,"emit_u16","","",9,null],[11,"emit_u8","","",9,null],[11,"emit_isize","","",9,null],[11,"emit_i64","","",9,null],[11,"emit_i32","","",9,null],[11,"emit_i16","","",9,null],[11,"emit_i8","","",9,null],[11,"emit_bool","","",9,null],[11,"emit_f64","","",9,null],[11,"emit_f32","","",9,null],[11,"emit_char","","",9,null],[11,"emit_str","","",9,null],[11,"emit_enum","","",9,null],[11,"emit_enum_variant","","",9,null],[11,"emit_enum_variant_arg","","",9,null],[11,"emit_enum_struct_variant","","",9,null],[11,"emit_enum_struct_variant_field","","",9,null],[11,"emit_struct","","",9,null],[11,"emit_struct_field","","",9,null],[11,"emit_tuple","","",9,null],[11,"emit_tuple_arg","","",9,null],[11,"emit_tuple_struct","","",9,null],[11,"emit_tuple_struct_arg","","",9,null],[11,"emit_option","","",9,null],[11,"emit_option_none","","",9,null],[11,"emit_option_some","","",9,null],[11,"emit_seq","","",9,null],[11,"emit_seq_elt","","",9,null],[11,"emit_map","","",9,null],[11,"emit_map_elt_key","","",9,null],[11,"emit_map_elt_val","","",9,null],[11,"emit_nil","","",4,null],[11,"emit_usize","","",4,null],[11,"emit_u64","","",4,null],[11,"emit_u32","","",4,null],[11,"emit_u16","","",4,null],[11,"emit_u8","","",4,null],[11,"emit_isize","","",4,null],[11,"emit_i64","","",4,null],[11,"emit_i32","","",4,null],[11,"emit_i16","","",4,null],[11,"emit_i8","","",4,null],[11,"emit_bool","","",4,null],[11,"emit_f64","","",4,null],[11,"emit_f32","","",4,null],[11,"emit_char","","",4,null],[11,"emit_str","","",4,null],[11,"emit_enum","","",4,null],[11,"emit_enum_variant","","",4,null],[11,"emit_enum_variant_arg","","",4,null],[11,"emit_enum_struct_variant","","",4,null],[11,"emit_enum_struct_variant_field","","",4,null],[11,"emit_struct","","",4,null],[11,"emit_struct_field","","",4,null],[11,"emit_tuple","","",4,null],[11,"emit_tuple_arg","","",4,null],[11,"emit_tuple_struct","","",4,null],[11,"emit_tuple_struct_arg","","",4,null],[11,"emit_option","","",4,null],[11,"emit_option_none","","",4,null],[11,"emit_option_some","","",4,null],[11,"emit_seq","","",4,null],[11,"emit_seq_elt","","",4,null],[11,"emit_map","","",4,null],[11,"emit_map_elt_key","","",4,null],[11,"emit_map_elt_val","","",4,null],[6,"EncodingResult","","",null,null],[6,"DecodingResult","","",null,null],[0,"serde","bincode","A collection of serialization and deserialization functions\nthat use the `serde` crate for the serialazble and deserializable\nimplementation.",null,null],[3,"Deserializer","bincode::serde","A Deserializer that reads bytes from a buffer.",null,null],[3,"InvalidEncoding","","",null,null],[12,"desc","","",10,null],[12,"detail","","",10,null],[3,"Serializer","","An Serializer that encodes values directly into a Writer.",null,null],[4,"DeserializeError","","An error that can be produced during decoding.",null,null],[13,"IoError","","If the error stems from the reader that is being used\nduring decoding, that error will be stored and returned here.",11,null],[13,"InvalidEncoding","","If the bytes in the reader are not decodable because of an invalid\nencoding, this error will be returned.  This error is only possible\nif a stream is corrupted.  A stream produced from `encode` or `encode_into`\nshould **never** produce an InvalidEncoding error.",11,null],[13,"SizeLimit","","If decoding a message takes more than the provided size limit, this\nerror is returned.",11,null],[13,"Serde","","",11,null],[4,"SerializeError","","An error that can be produced during encoding.",null,null],[13,"IoError","","An error originating from the underlying `Writer`.",12,null],[13,"SizeLimit","","An object could not be encoded with the given size limit.",12,null],[13,"Custom","","A custom error message",12,null],[5,"serialize_into","","Serializes an object directly into a `Writer`.",null,{"inputs":[{"name":"w"},{"name":"t"},{"name":"sizelimit"}],"output":{"name":"serializeresult"}}],[5,"serialize","","Serializes a serializable object into a `Vec` of bytes.",null,{"inputs":[{"name":"t"},{"name":"sizelimit"}],"output":{"name":"serializeresult"}}],[5,"serialized_size","","Returns the size that an object would be if serialized using bincode.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"serialized_size_bounded","","Given a maximum size limit, check how large an object would be if it\nwere to be serialized.",null,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"option"}}],[5,"deserialize_from","","Deserializes an object directly from a `Buffer`ed Reader.",null,{"inputs":[{"name":"r"},{"name":"sizelimit"}],"output":{"name":"deserializeresult"}}],[5,"deserialize","","Deserializes a slice of bytes into an object.",null,null],[11,"fmt","","",10,null],[11,"clone","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"fmt","","",10,null],[11,"fmt","","",11,null],[11,"description","","",11,null],[11,"cause","","",11,null],[11,"from","","",11,{"inputs":[{"name":"ioerror"}],"output":{"name":"deserializeerror"}}],[11,"from","","",11,{"inputs":[{"name":"error"}],"output":{"name":"deserializeerror"}}],[11,"fmt","","",11,null],[11,"custom","","",11,{"inputs":[{"name":"t"}],"output":{"name":"deserializeerror"}}],[11,"end_of_stream","","",11,{"inputs":[],"output":{"name":"deserializeerror"}}],[11,"new","","",13,{"inputs":[{"name":"r"},{"name":"sizelimit"}],"output":{"name":"deserializer"}}],[11,"bytes_read","","Returns the number of bytes read from the contained Reader.",13,null],[11,"deserialize","","",13,null],[11,"deserialize_bool","","",13,null],[11,"deserialize_u16","","",13,null],[11,"deserialize_u32","","",13,null],[11,"deserialize_u64","","",13,null],[11,"deserialize_i16","","",13,null],[11,"deserialize_i32","","",13,null],[11,"deserialize_i64","","",13,null],[11,"deserialize_f32","","",13,null],[11,"deserialize_f64","","",13,null],[11,"deserialize_u8","","",13,null],[11,"deserialize_usize","","",13,null],[11,"deserialize_i8","","",13,null],[11,"deserialize_isize","","",13,null],[11,"deserialize_unit","","",13,null],[11,"deserialize_char","","",13,null],[11,"deserialize_str","","",13,null],[11,"deserialize_string","","",13,null],[11,"deserialize_bytes","","",13,null],[11,"deserialize_enum","","",13,null],[11,"deserialize_tuple","","",13,null],[11,"deserialize_seq_fixed_size","","",13,null],[11,"deserialize_option","","",13,null],[11,"deserialize_seq","","",13,null],[11,"deserialize_map","","",13,null],[11,"deserialize_struct","","",13,null],[11,"deserialize_struct_field","","",13,null],[11,"deserialize_newtype_struct","","",13,null],[11,"deserialize_unit_struct","","",13,null],[11,"deserialize_tuple_struct","","",13,null],[11,"deserialize_ignored_any","","",13,null],[11,"visit_variant","","",13,null],[11,"visit_unit","","",13,null],[11,"visit_newtype","","",13,null],[11,"visit_tuple","","",13,null],[11,"visit_struct","","",13,null],[11,"fmt","","",12,null],[11,"custom","","",12,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",12,null],[11,"description","","",12,null],[11,"cause","","",12,null],[11,"new","","",14,{"inputs":[{"name":"w"}],"output":{"name":"serializer"}}],[11,"serialize_unit","","",14,null],[11,"serialize_unit_struct","","",14,null],[11,"serialize_bool","","",14,null],[11,"serialize_u8","","",14,null],[11,"serialize_u16","","",14,null],[11,"serialize_u32","","",14,null],[11,"serialize_u64","","",14,null],[11,"serialize_usize","","",14,null],[11,"serialize_i8","","",14,null],[11,"serialize_i16","","",14,null],[11,"serialize_i32","","",14,null],[11,"serialize_i64","","",14,null],[11,"serialize_isize","","",14,null],[11,"serialize_f32","","",14,null],[11,"serialize_f64","","",14,null],[11,"serialize_str","","",14,null],[11,"serialize_char","","",14,null],[11,"serialize_bytes","","",14,null],[11,"serialize_none","","",14,null],[11,"serialize_some","","",14,null],[11,"serialize_seq","","",14,null],[11,"serialize_seq_elt","","",14,null],[11,"serialize_seq_end","","",14,null],[11,"serialize_seq_fixed_size","","",14,null],[11,"serialize_tuple","","",14,null],[11,"serialize_tuple_elt","","",14,null],[11,"serialize_tuple_end","","",14,null],[11,"serialize_tuple_struct","","",14,null],[11,"serialize_tuple_struct_elt","","",14,null],[11,"serialize_tuple_struct_end","","",14,null],[11,"serialize_tuple_variant","","",14,null],[11,"serialize_tuple_variant_elt","","",14,null],[11,"serialize_tuple_variant_end","","",14,null],[11,"serialize_map","","",14,null],[11,"serialize_map_key","","",14,null],[11,"serialize_map_value","","",14,null],[11,"serialize_map_end","","",14,null],[11,"serialize_struct","","",14,null],[11,"serialize_struct_elt","","",14,null],[11,"serialize_struct_end","","",14,null],[11,"serialize_struct_variant","","",14,null],[11,"serialize_struct_variant_elt","","",14,null],[11,"serialize_struct_variant_end","","",14,null],[11,"serialize_newtype_struct","","",14,null],[11,"serialize_newtype_variant","","",14,null],[11,"serialize_unit_variant","","",14,null],[6,"DeserializeResult","","",null,null],[6,"SerializeResult","","",null,null],[11,"partial_cmp","bincode","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"cmp","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"hash","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null]],"paths":[[4,"SizeLimit"],[3,"RefBox"],[3,"StrBox"],[3,"SliceBox"],[3,"SizeChecker"],[3,"InvalidEncoding"],[4,"EncodingError"],[4,"DecodingError"],[3,"DecoderReader"],[3,"EncoderWriter"],[3,"InvalidEncoding"],[4,"DeserializeError"],[4,"SerializeError"],[3,"Deserializer"],[3,"Serializer"]]};
searchIndex["docopt"] = {"doc":"Docopt for Rust. This implementation conforms to the\n[official description of Docopt](http://docopt.org/) and\n[passes its test suite](https://github.com/docopt/docopt/pull/201).","items":[[3,"ArgvMap","docopt","A map containing matched values from command line arguments.",null,null],[3,"Decoder","","Decoder for `ArgvMap` into your own `Decodable` types.",null,null],[3,"Docopt","","The main Docopt type, which is constructed with a Docopt usage string.",null,null],[4,"Error","","Represents the different types of Docopt errors.",null,null],[13,"Usage","","Parsing the usage string failed.",0,null],[13,"Argv","","Parsing the argv specified failed.",0,null],[13,"NoMatch","","The given argv parsed successfully, but it did not match any example\nusage of the program.",0,null],[13,"Decode","","This indicates a problem decoding a successful argv match into a\ndecodable value.",0,null],[13,"WithProgramUsage","","Parsing failed, and the program usage should be printed next to the\nfailure message. Typically this wraps `Argv` and `NoMatch` errors.",0,null],[13,"Help","","Decoding or parsing failed because the command line specified that the\nhelp message should be printed.",0,null],[13,"Version","","Decoding or parsing failed because the command line specified that the\nversion should be printed",0,null],[4,"Value","","A matched command line value.",null,null],[13,"Switch","","A boolean value from a flag that has no argument.",1,null],[13,"Counted","","The number of occurrences of a repeated flag.",1,null],[13,"Plain","","A positional or flag argument.",1,null],[13,"List","","A List of positional or flag arguments.",1,null],[11,"fmt","","",0,null],[11,"fatal","","Return whether this was a fatal error or not.",0,null],[11,"exit","","Print this error and immediately exit the program.",0,null],[11,"fmt","","",0,null],[11,"description","","",0,null],[11,"cause","","",0,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"new","","Parse the Docopt usage string given.",2,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","Parse and decode the given argv.",2,null],[11,"parse","","Parse command line arguments and try to match them against a usage\npattern specified in the Docopt string.",2,null],[11,"argv","","Set the argv to be used for Docopt parsing.",2,null],[11,"options_first","","Enables the &quot;options first&quot; Docopt behavior.",2,null],[11,"help","","Enables automatic handling of `--help`.",2,null],[11,"version","","Enables automatic handling of `--version`.",2,null],[11,"clone","","",3,null],[11,"decode","","Tries to decode the map of values into a struct.",3,null],[11,"get_bool","","Finds the value corresponding to `key` and calls `as_bool()` on it.\nIf the key does not exist, `false` is returned.",3,null],[11,"get_count","","Finds the value corresponding to `key` and calls `as_count()` on it.\nIf the key does not exist, `0` is returned.",3,null],[11,"get_str","","Finds the value corresponding to `key` and calls `as_str()` on it.\nIf the key does not exist, `&quot;&quot;` is returned.",3,null],[11,"get_vec","","Finds the value corresponding to `key` and calls `as_vec()` on it.\nIf the key does not exist, `vec!()` is returned.",3,null],[11,"find","","Return the raw value corresponding to some `key`.",3,null],[11,"len","","Return the number of values, not including synonyms.",3,null],[11,"fmt","","",3,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"as_bool","","Returns the value as a bool.",1,null],[11,"as_count","","Returns the value as a count of the number of times it occurred.",1,null],[11,"as_str","","Returns the value as a string.",1,null],[11,"as_vec","","Returns the value as a list of strings.",1,null],[11,"error","","",4,null],[11,"read_nil","","",4,null],[11,"read_usize","","",4,null],[11,"read_u64","","",4,null],[11,"read_u32","","",4,null],[11,"read_u16","","",4,null],[11,"read_u8","","",4,null],[11,"read_isize","","",4,null],[11,"read_i64","","",4,null],[11,"read_i32","","",4,null],[11,"read_i16","","",4,null],[11,"read_i8","","",4,null],[11,"read_bool","","",4,null],[11,"read_f64","","",4,null],[11,"read_f32","","",4,null],[11,"read_char","","",4,null],[11,"read_str","","",4,null],[11,"read_enum","","",4,null],[11,"read_enum_variant","","",4,null],[11,"read_enum_variant_arg","","",4,null],[11,"read_enum_struct_variant","","",4,null],[11,"read_enum_struct_variant_field","","",4,null],[11,"read_struct","","",4,null],[11,"read_struct_field","","",4,null],[11,"read_tuple","","",4,null],[11,"read_tuple_arg","","",4,null],[11,"read_tuple_struct","","",4,null],[11,"read_tuple_struct_arg","","",4,null],[11,"read_option","","",4,null],[11,"read_seq","","",4,null],[11,"read_seq_elt","","",4,null],[11,"read_map","","",4,null],[11,"read_map_elt_key","","",4,null],[11,"read_map_elt_val","","",4,null]],"paths":[[4,"Error"],[4,"Value"],[3,"Docopt"],[3,"ArgvMap"],[3,"Decoder"]]};
searchIndex["num_bigint"] = {"doc":"A Big integer (signed version: `BigInt`, unsigned version: `BigUint`).","items":[[3,"BigUint","num_bigint","A big unsigned integer type.",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"Sign","","A Sign is a `BigInt`&#39;s composing element.",null,null],[13,"Minus","","",0,null],[13,"NoSign","","",0,null],[13,"Plus","","",0,null],[4,"ParseBigIntError","","",null,null],[13,"ParseInt","","",1,null],[13,"Other","","",1,null],[0,"big_digit","","",null,null],[5,"from_doublebigdigit","num_bigint::big_digit","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"inputs":[{"name":"bigdigit"},{"name":"bigdigit"}],"output":{"name":"doublebigdigit"}}],[17,"BITS","","",null,null],[17,"BASE","","",null,null],[6,"BigDigit","num_bigint","A `BigDigit` is a `BigUint`&#39;s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its\nsize is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",2,null],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",3,null],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",4,null],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",4,null],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails\nwhen the bound is zero.",4,null],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,null],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,null],[11,"hash","","",5,null],[11,"fmt","","",5,null],[11,"clone","","",5,null],[11,"decode","","",5,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",5,null],[11,"eq","","",5,null],[11,"partial_cmp","","",5,null],[11,"cmp","","",5,null],[11,"default","","",5,{"inputs":[],"output":{"name":"biguint"}}],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"bitand","","",5,null],[11,"bitand","","",5,null],[11,"bitor","","",5,null],[11,"bitor","","",5,null],[11,"bitxor","","",5,null],[11,"bitxor","","",5,null],[11,"shl","","",5,null],[11,"shr","","",5,null],[11,"zero","","",5,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",5,null],[11,"one","","",5,{"inputs":[],"output":{"name":"biguint"}}],[11,"add","","",5,null],[11,"add","","",5,null],[11,"sub","","",5,null],[11,"sub","","",5,null],[11,"mul","","",5,null],[11,"mul","","",5,null],[11,"div","","",5,null],[11,"div","","",5,null],[11,"rem","","",5,null],[11,"rem","","",5,null],[11,"neg","","",5,null],[11,"checked_add","","",5,null],[11,"checked_sub","","",5,null],[11,"checked_mul","","",5,null],[11,"checked_div","","",5,null],[11,"div_rem","","",5,null],[11,"div_floor","","",5,null],[11,"mod_floor","","",5,null],[11,"div_mod_floor","","",5,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",5,null],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",5,null],[11,"divides","","Deprecated, use `is_multiple_of` instead.",5,null],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",5,null],[11,"is_even","","Returns `true` if the number is divisible by `2`.",5,null],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",5,null],[11,"to_i64","","",5,null],[11,"to_u64","","",5,null],[11,"to_f32","","",5,null],[11,"to_f64","","",5,null],[11,"from_i64","","",5,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",5,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",5,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",5,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"to_biguint","","",6,null],[11,"to_biguint","","",5,null],[11,"new","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",5,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",5,null],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",5,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",5,null],[11,"parse_bytes","","Creates and initializes a `BigUint`.",5,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",5,null],[11,"hash","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"eq","","",0,null],[11,"decode","","",0,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",0,null],[11,"neg","","Negate Sign value.",0,null],[11,"mul","","",0,null],[11,"hash","","",6,null],[11,"fmt","","",6,null],[11,"clone","","",6,null],[11,"decode","","",6,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",6,null],[11,"eq","","",6,null],[11,"partial_cmp","","",6,null],[11,"cmp","","",6,null],[11,"default","","",6,{"inputs":[],"output":{"name":"bigint"}}],[11,"fmt","","",6,null],[11,"fmt","","",6,null],[11,"fmt","","",6,null],[11,"fmt","","",6,null],[11,"fmt","","",6,null],[11,"from_str","","",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"shl","","",6,null],[11,"shr","","",6,null],[11,"zero","","",6,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",6,null],[11,"one","","",6,{"inputs":[],"output":{"name":"bigint"}}],[11,"abs","","",6,null],[11,"abs_sub","","",6,null],[11,"signum","","",6,null],[11,"is_positive","","",6,null],[11,"is_negative","","",6,null],[11,"add","","",6,null],[11,"add","","",6,null],[11,"sub","","",6,null],[11,"sub","","",6,null],[11,"mul","","",6,null],[11,"mul","","",6,null],[11,"div","","",6,null],[11,"div","","",6,null],[11,"rem","","",6,null],[11,"rem","","",6,null],[11,"neg","","",6,null],[11,"checked_add","","",6,null],[11,"checked_sub","","",6,null],[11,"checked_mul","","",6,null],[11,"checked_div","","",6,null],[11,"div_rem","","",6,null],[11,"div_floor","","",6,null],[11,"mod_floor","","",6,null],[11,"div_mod_floor","","",6,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",6,null],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",6,null],[11,"divides","","Deprecated, use `is_multiple_of` instead.",6,null],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",6,null],[11,"is_even","","Returns `true` if the number is divisible by `2`.",6,null],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",6,null],[11,"to_i64","","",6,null],[11,"to_u64","","",6,null],[11,"to_f32","","",6,null],[11,"to_f64","","",6,null],[11,"from_i64","","",6,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",6,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",6,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",6,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"biguint"}],"output":{"name":"self"}}],[11,"to_bigint","","",6,null],[11,"to_bigint","","",5,null],[11,"new","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",6,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",6,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",6,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",6,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",6,null],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",6,null],[11,"parse_bytes","","Creates and initializes a `BigInt`.",6,null],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`,\nnot including the sign.",6,null],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it&#39;s not negative.",6,null],[11,"checked_add","","",6,null],[11,"checked_sub","","",6,null],[11,"checked_mul","","",6,null],[11,"checked_div","","",6,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"description","","",1,null],[11,"from","","",1,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parsebiginterror"}}]],"paths":[[4,"Sign"],[4,"ParseBigIntError"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"],[3,"BigUint"],[3,"BigInt"]]};
searchIndex["jpeg_decoder"] = {"doc":"","items":[[3,"Decoder","jpeg_decoder","",null,null],[3,"ImageInfo","","",null,null],[12,"width","","",0,null],[12,"height","","",0,null],[12,"pixel_format","","",0,null],[4,"PixelFormat","","",null,null],[13,"L8","","",1,null],[13,"RGB24","","",1,null],[13,"CMYK32","","",1,null],[4,"Error","","",null,null],[13,"Format","","",2,null],[13,"Unsupported","","",2,null],[13,"Io","","",2,null],[13,"Internal","","",2,null],[4,"UnsupportedFeature","","",null,null],[13,"Hierarchical","","",3,null],[13,"Lossless","","",3,null],[13,"ArithmeticEntropyCoding","","",3,null],[13,"SamplePrecision","","",3,null],[13,"ComponentCount","","",3,null],[13,"DNL","","",3,null],[13,"SubsamplingRatio","","",3,null],[11,"eq","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"new","","",4,{"inputs":[{"name":"r"}],"output":{"name":"decoder"}}],[11,"info","","",4,null],[11,"read_info","","",4,null],[11,"decode","","",4,null],[11,"fmt","","",3,null],[11,"fmt","","",2,null],[11,"fmt","","",2,null],[11,"description","","",2,null],[11,"cause","","",2,null],[11,"from","","",2,{"inputs":[{"name":"ioerror"}],"output":{"name":"error"}}],[11,"from","","",2,{"inputs":[{"name":"recverror"}],"output":{"name":"error"}}],[11,"from","","",2,{"inputs":[{"name":"senderror"}],"output":{"name":"error"}}]],"paths":[[3,"ImageInfo"],[4,"PixelFormat"],[4,"Error"],[4,"UnsupportedFeature"],[3,"Decoder"]]};
searchIndex["num_complex"] = {"doc":"Complex numbers.","items":[[3,"Complex","num_complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",0,null],[11,"hash","","",0,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"encode","","",0,null],[11,"new","","Create a new Complex",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",0,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn&#39;t necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",0,null],[11,"scale","","Multiplies `self` by the scalar `t`.",0,null],[11,"unscale","","Divides `self` by the scalar `t`.",0,null],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,null],[11,"inv","","Returns `1/self`",0,null],[11,"norm","","Calculate |self|",0,null],[11,"arg","","Calculate the principal Arg of self.",0,null],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,null],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,null],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,null],[11,"powf","","Raises `self` to a floating point power.",0,null],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",0,null],[11,"powc","","Raises `self` to a complex power.",0,null],[11,"expf","","Raises a floating point number to the complex power `self`.",0,null],[11,"sin","","Computes the sine of `self`.",0,null],[11,"cos","","Computes the cosine of `self`.",0,null],[11,"tan","","Computes the tangent of `self`.",0,null],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,null],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,null],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,null],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,null],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,null],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,null],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,null],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,null],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,null],[11,"is_nan","","Checks if the given complex number is NaN",0,null],[11,"is_infinite","","Checks if the given complex number is infinite",0,null],[11,"is_finite","","Checks if the given complex number is finite",0,null],[11,"is_normal","","Checks if the given complex number is normal",0,null],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,null],[11,"add","","",0,null],[11,"sub","","",0,null],[11,"sub","","",0,null],[11,"mul","","",0,null],[11,"mul","","",0,null],[11,"div","","",0,null],[11,"div","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"sub","","",0,null],[11,"mul","","",0,null],[11,"div","","",0,null],[11,"add","","",0,null],[11,"sub","","",0,null],[11,"mul","","",0,null],[11,"div","","",0,null],[11,"zero","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",0,null],[11,"one","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",0,null]],"paths":[[3,"Complex"]]};
searchIndex["png"] = {"doc":"# PNG encoder and decoder\nThis crate contains a PNG decoder. It supports reading of single lines or whole frames.\n## The decoder\nThe most important types for decoding purposes are [`Decoder`](struct.Decoder.html) and\n[`Reader`](struct.Reader.html). They both wrap a `std::io::Read`.\n`Decoder` serves as a builder for `Reader`. Calling `Decoder::read_info` reads from the `Read` until the\nimage data is reached.\n### Using the decoder\n    use std::fs::File;","items":[[3,"PixelDimensions","png","Pixel dimensions information",null,null],[12,"xppu","","Pixels per unit, X axis",0,null],[12,"yppu","","Pixels per unit, Y axis",0,null],[12,"unit","","Either *Meter* or *Unspecified*",0,null],[3,"FrameControl","","Frame control information",null,null],[12,"sequence_number","","Sequence number of the animation chunk, starting from 0",1,null],[12,"width","","Width of the following frame",1,null],[12,"height","","Height of the following frame",1,null],[12,"x_offset","","X position at which to render the following frame",1,null],[12,"y_offset","","Y position at which to render the following frame",1,null],[12,"delay_num","","Frame delay fraction numerator",1,null],[12,"delay_den","","Frame delay fraction denominator",1,null],[12,"dispose_op","","Type of frame area disposal to be done after rendering this frame",1,null],[12,"blend_op","","Type of frame area rendering for this frame",1,null],[3,"AnimationControl","","Animation control information",null,null],[12,"num_frames","","Number of frames",2,null],[12,"num_plays","","Number of times to loop this APNG.  0 indicates infinite looping.",2,null],[3,"Info","","PNG info struct",null,null],[12,"width","","",3,null],[12,"height","","",3,null],[12,"bit_depth","","",3,null],[12,"color_type","","",3,null],[12,"interlaced","","",3,null],[12,"trns","","",3,null],[12,"pixel_dims","","",3,null],[12,"palette","","",3,null],[12,"frame_control","","",3,null],[12,"animation_control","","",3,null],[3,"Transformations","","# Output transformations",null,null],[3,"Decoder","","PNG Decoder",null,null],[3,"Reader","","PNG reader (mostly high-level interface)",null,null],[3,"OutputInfo","","Output info",null,null],[12,"width","","",4,null],[12,"height","","",4,null],[12,"color_type","","",4,null],[12,"bit_depth","","",4,null],[12,"line_size","","",4,null],[3,"StreamingDecoder","","PNG StreamingDecoder (low-level interface)",null,null],[3,"Encoder","","",null,null],[3,"Writer","","",null,null],[4,"ColorType","","",null,null],[13,"Grayscale","","",5,null],[13,"RGB","","",5,null],[13,"Indexed","","",5,null],[13,"GrayscaleAlpha","","",5,null],[13,"RGBA","","",5,null],[4,"BitDepth","","Bit depth of the png file",null,null],[13,"One","","",6,null],[13,"Two","","",6,null],[13,"Four","","",6,null],[13,"Eight","","",6,null],[13,"Sixteen","","",6,null],[4,"Unit","","Physical unit of the pixel dimensions",null,null],[13,"Unspecified","","",7,null],[13,"Meter","","",7,null],[4,"Decoded","","Result of the decoding process",null,null],[13,"Nothing","","Nothing decoded yet",8,null],[13,"Header","","",8,null],[13,"ChunkBegin","","",8,null],[13,"ChunkComplete","","",8,null],[13,"PixelDimensions","","",8,null],[13,"AnimationControl","","",8,null],[13,"FrameControl","","",8,null],[13,"ImageData","","Decoded raw image data.",8,null],[13,"PartialChunk","","",8,null],[13,"ImageEnd","","",8,null],[4,"DecodingError","","",null,null],[13,"IoError","","",9,null],[13,"Format","","",9,null],[13,"InvalidSignature","","",9,null],[13,"CrcMismatch","","",9,null],[12,"recover","png::DecodingError","bytes to skip to try to recover from this error",9,null],[12,"crc_val","","Stored CRC32 value",9,null],[12,"crc_sum","","Calculated CRC32 sum",9,null],[12,"chunk","","",9,null],[13,"Other","png","",9,null],[13,"CorruptFlateStream","","",9,null],[4,"EncodingError","","",null,null],[13,"IoError","","",10,null],[13,"Format","","",10,null],[0,"chunk","","Chunk types and functions",null,null],[5,"is_critical","png::chunk","Returns true if the chunk is critical.",null,{"inputs":[{"name":"chunktype"}],"output":{"name":"bool"}}],[5,"is_private","","Returns true if the chunk is private.",null,{"inputs":[{"name":"chunktype"}],"output":{"name":"bool"}}],[5,"reserved_set","","Checks whether the reserved bit of the chunk name is set.\nIf it is set the chunk name is invalid.",null,{"inputs":[{"name":"chunktype"}],"output":{"name":"bool"}}],[5,"save_to_copy","","Returns true if the chunk is safe to copy if unknown.",null,{"inputs":[{"name":"chunktype"}],"output":{"name":"bool"}}],[6,"ChunkType","","",null,null],[17,"IHDR","","Image header",null,null],[17,"PLTE","","Palette",null,null],[17,"IDAT","","Image data",null,null],[17,"IEND","","Image trailer",null,null],[17,"tRNS","","Transparency",null,null],[17,"bKGD","","Background colour",null,null],[17,"tIME","","Image last-modification time",null,null],[17,"pHYs","","Physical pixel dimensions",null,null],[17,"acTL","","Animation control",null,null],[17,"fcTL","","Frame control",null,null],[17,"fdAT","","Frame data",null,null],[11,"fmt","png","",8,null],[11,"fmt","","",9,null],[11,"description","","",9,null],[11,"fmt","","",9,null],[11,"from","","",9,{"inputs":[{"name":"error"}],"output":{"name":"decodingerror"}}],[11,"from","","",9,{"inputs":[{"name":"string"}],"output":{"name":"decodingerror"}}],[11,"from","std::io::error","",11,{"inputs":[{"name":"decodingerror"}],"output":{"name":"error"}}],[11,"new","png","Creates a new StreamingDecoder",12,{"inputs":[],"output":{"name":"streamingdecoder"}}],[11,"reset","","Resets the StreamingDecoder",12,null],[11,"update","","Low level StreamingDecoder interface.",12,null],[11,"set_param","","",13,null],[11,"buffer_size","","Returns the size needed to hold a decoded frame",4,null],[11,"new","","",14,{"inputs":[{"name":"r"}],"output":{"name":"decoder"}}],[11,"read_info","","Reads all meta data until the first IDAT chunk",14,null],[11,"info","","",15,null],[11,"next_frame","","Decodes the next frame into `buf`",15,null],[11,"next_row","","Returns the next processed row of the image",15,null],[11,"next_interlaced_row","","Returns the next processed row of the image",15,null],[11,"output_color_type","","Returns the color type and the number of bits per sample\nof the data returned by `Reader::next_row` and Reader::frames`.",15,null],[11,"output_buffer_size","","Returns the number of bytes required to hold a deinterlaced image frame\nthat is decoded using the given input transformations.",15,null],[11,"output_line_size","","Returns the number of bytes required to hold a deinterlaced row.",15,null],[11,"fmt","","",10,null],[11,"description","","",10,null],[11,"fmt","","",10,null],[11,"from","","",10,{"inputs":[{"name":"error"}],"output":{"name":"encodingerror"}}],[11,"from","std::io::error","",11,{"inputs":[{"name":"encodingerror"}],"output":{"name":"error"}}],[11,"new","png","",16,{"inputs":[{"name":"w"},{"name":"u32"},{"name":"u32"}],"output":{"name":"encoder"}}],[11,"write_header","","",16,null],[11,"set_param","","",5,null],[11,"set_param","","",6,null],[11,"write_chunk","","",17,null],[11,"write_image_data","","Writes the image data.",17,null],[11,"drop","","",17,null],[11,"eq","","",5,null],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"samples","","Returns the number of samples used per pixel of `ColorType`",5,null],[11,"from_u8","","u8 -&gt; Self. Temporary solution until Rust provides a canonical one.",5,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"eq","","",6,null],[11,"clone","","",6,null],[11,"fmt","","",6,null],[11,"from_u8","","u8 -&gt; Self. Temporary solution until Rust provides a canonical one.",6,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"eq","","",7,null],[11,"clone","","",7,null],[11,"fmt","","",7,null],[11,"from_u8","","u8 -&gt; Self. Temporary solution until Rust provides a canonical one.",7,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"fmt","","",1,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"fmt","","",3,null],[11,"default","","",3,{"inputs":[],"output":{"name":"info"}}],[11,"size","","Size of the image",3,null],[11,"is_animated","","Returns true if the image is an APNG image.",3,null],[11,"animation_control","","Returns the frame control information of the image",3,null],[11,"frame_control","","Returns the frame control information of the current frame",3,null],[11,"bits_per_pixel","","Returns the bits per pixel",3,null],[11,"bytes_per_pixel","","Returns the bytes per pixel",3,null],[11,"raw_bytes","","Returns the number of bytes needed for one deinterlaced image",3,null],[11,"raw_row_length","","Returns the number of bytes needed for one deinterlaced row",3,null],[11,"raw_row_length_from_width","","Returns the number of bytes needed for one deinterlaced row of width `width`",3,null],[11,"hash","","",13,null],[11,"cmp","","",13,null],[11,"partial_cmp","","",13,null],[11,"lt","","",13,null],[11,"le","","",13,null],[11,"gt","","",13,null],[11,"ge","","",13,null],[11,"clone","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"fmt","","",13,null],[11,"empty","","Returns an empty set of flags.",13,{"inputs":[],"output":{"name":"transformations"}}],[11,"all","","Returns the set containing all flags.",13,{"inputs":[],"output":{"name":"transformations"}}],[11,"bits","","Returns the raw value of the flags currently stored.",13,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",13,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",13,{"inputs":[{"name":"u32"}],"output":{"name":"transformations"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",13,null],[11,"is_all","","Returns `true` if all flags are currently set.",13,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",13,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",13,null],[11,"insert","","Inserts the specified flags in-place.",13,null],[11,"remove","","Removes the specified flags in-place.",13,null],[11,"toggle","","Toggles the specified flags in-place.",13,null],[11,"bitor","","Returns the union of the two sets of flags.",13,null],[11,"bitor_assign","","Adds the set of flags.",13,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",13,null],[11,"bitxor_assign","","Toggles the set of flags.",13,null],[11,"bitand","","Returns the intersection between the two sets of flags.",13,null],[11,"bitand_assign","","Disables all flags disabled in the set.",13,null],[11,"sub","","Returns the set difference of the two sets of flags.",13,null],[11,"sub_assign","","Disables all flags enabled in the set.",13,null],[11,"not","","Returns the complement of this set of flags.",13,null],[11,"extend","","",13,null],[11,"from_iter","","",13,{"inputs":[{"name":"t"}],"output":{"name":"transformations"}}],[17,"TRANSFORM_IDENTITY","","No transformation",null,null],[17,"TRANSFORM_STRIP_16","","Strip 16-bit samples to 8 bits",null,null],[17,"TRANSFORM_STRIP_ALPHA","","Discard the alpha channel",null,null],[17,"TRANSFORM_PACKING","","Expand 1, 2 and 4-bit samples to bytes",null,null],[17,"TRANSFORM_PACKSWAP","","Change order of packed pixels to LSB first",null,null],[17,"TRANSFORM_EXPAND","","Expand paletted images to RGB, expand grayscale images of\nless than 8-bit depth to 8-bit depth, and expand tRNS chunks\nto alpha channels.",null,null],[17,"TRANSFORM_INVERT_MONO","","Invert monochrome images",null,null],[17,"TRANSFORM_SHIFT","","Normalize pixels to the sBIT depth",null,null],[17,"TRANSFORM_BGR","","Flip RGB to BGR, RGBA to BGRA",null,null],[17,"TRANSFORM_SWAP_ALPHA","","Flip RGBA to ARGB or GA to AG",null,null],[17,"TRANSFORM_SWAP_ENDIAN","","Byte-swap 16-bit samples",null,null],[17,"TRANSFORM_INVERT_ALPHA","","Change alpha from opacity to transparency",null,null],[17,"TRANSFORM_STRIP_FILLER","","",null,null],[17,"TRANSFORM_STRIP_FILLER_BEFORE","","",null,null],[17,"TRANSFORM_STRIP_FILLER_AFTER","","",null,null],[17,"TRANSFORM_GRAY_TO_RGB","","",null,null],[17,"TRANSFORM_EXPAND_16","","",null,null],[17,"TRANSFORM_SCALE_16","","",null,null],[8,"Parameter","","Configuration parameter trait",null,null],[10,"set_param","","",18,null],[8,"HasParameters","","Object has parameters",null,null],[11,"set","","",19,null],[11,"set","","",19,null]],"paths":[[3,"PixelDimensions"],[3,"FrameControl"],[3,"AnimationControl"],[3,"Info"],[3,"OutputInfo"],[4,"ColorType"],[4,"BitDepth"],[4,"Unit"],[4,"Decoded"],[4,"DecodingError"],[4,"EncodingError"],[3,"Error"],[3,"StreamingDecoder"],[3,"Transformations"],[3,"Decoder"],[3,"Reader"],[3,"Encoder"],[3,"Writer"],[8,"Parameter"],[8,"HasParameters"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[11,"encode","collections::string","",0,null],[11,"decode","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",1,null],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",2,null],[11,"decode","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::borrow","",3,null],[11,"decode","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",4,null],[11,"decode","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::option","",5,null],[11,"decode","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",6,null],[11,"decode","","",6,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::path","",7,null],[11,"encode","","",8,null],[11,"decode","","",8,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",9,null],[11,"decode","","",9,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",10,null],[11,"decode","","",10,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",11,null],[11,"decode","","",11,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::linked_list","",12,null],[11,"decode","","",12,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec_deque","",13,null],[11,"decode","","",13,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::map","",14,null],[11,"decode","","",14,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::set","",15,null],[11,"decode","","",15,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::map","",16,null],[11,"decode","","",16,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::set","",17,null],[11,"decode","","",17,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",18,null],[12,"newline","","Newline to use",18,null],[12,"pad","","True to pad output with `=` characters",18,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",18,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",19,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",19,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",20,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",20,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",21,null],[13,"InvalidBase64Length","","The input had an invalid length",21,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",22,null],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",23,null],[11,"fmt","","",19,null],[11,"clone","","",19,null],[11,"fmt","","",20,null],[11,"clone","","",20,null],[11,"fmt","","",18,null],[11,"clone","","",18,null],[11,"clone","","",21,null],[11,"fmt","","",21,null],[11,"description","","",21,null],[11,"fmt","","",21,null],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",24,null],[13,"InvalidHexLength","","The input had an invalid length",24,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",25,null],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",26,null],[11,"clone","","",24,null],[11,"fmt","","",24,null],[11,"description","","",24,null],[11,"fmt","","",24,null],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",27,null],[13,"U64","","",27,null],[13,"F64","","",27,null],[13,"String","","",27,null],[13,"Boolean","","",27,null],[13,"Array","","",27,null],[13,"Object","","",27,null],[13,"Null","","",27,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",28,null],[13,"InvalidNumber","","",28,null],[13,"EOFWhileParsingObject","","",28,null],[13,"EOFWhileParsingArray","","",28,null],[13,"EOFWhileParsingValue","","",28,null],[13,"EOFWhileParsingString","","",28,null],[13,"KeyMustBeAString","","",28,null],[13,"ExpectedColon","","",28,null],[13,"TrailingCharacters","","",28,null],[13,"TrailingComma","","",28,null],[13,"InvalidEscape","","",28,null],[13,"InvalidUnicodeCodePoint","","",28,null],[13,"LoneLeadingSurrogateInHexEscape","","",28,null],[13,"UnexpectedEndOfHexEscape","","",28,null],[13,"UnrecognizedHex","","",28,null],[13,"NotFourDigit","","",28,null],[13,"ControlCharacterInString","","",28,null],[13,"NotUtf8","","",28,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",29,null],[13,"IoError","","",29,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",30,null],[13,"ExpectedError","","",30,null],[13,"MissingFieldError","","",30,null],[13,"UnknownVariantError","","",30,null],[13,"ApplicationError","","",30,null],[13,"EOF","","",30,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",31,null],[13,"BadHashmapKey","","",31,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",32,null],[13,"ObjectEnd","","",32,null],[13,"ArrayStart","","",32,null],[13,"ArrayEnd","","",32,null],[13,"BooleanValue","","",32,null],[13,"I64Value","","",32,null],[13,"U64Value","","",32,null],[13,"F64Value","","",32,null],[13,"StringValue","","",32,null],[13,"NullValue","","",32,null],[13,"Error","","",32,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(&quot;foo&quot;), Key(&quot;bar&quot;), Index(3) and Key(&quot;x&quot;) are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",33,null],[13,"Key","","",33,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&amp;str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",34,null],[11,"fmt","","",27,null],[11,"partial_cmp","","",27,null],[11,"lt","","",27,null],[11,"le","","",27,null],[11,"gt","","",27,null],[11,"ge","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"clone","","",27,null],[11,"eq","","",28,null],[11,"clone","","",28,null],[11,"fmt","","",29,null],[11,"eq","","",29,null],[11,"fmt","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"fmt","","",31,null],[11,"clone","","",31,null],[11,"fmt","","",28,null],[11,"description","","",30,null],[11,"cause","","",30,null],[11,"fmt","","",30,null],[11,"from","","",30,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",29,null],[11,"fmt","","",29,null],[11,"from","","",29,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",31,null],[11,"fmt","","",31,null],[11,"from","","",31,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",35,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",35,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",35,null],[11,"emit_nil","","",35,null],[11,"emit_usize","","",35,null],[11,"emit_u64","","",35,null],[11,"emit_u32","","",35,null],[11,"emit_u16","","",35,null],[11,"emit_u8","","",35,null],[11,"emit_isize","","",35,null],[11,"emit_i64","","",35,null],[11,"emit_i32","","",35,null],[11,"emit_i16","","",35,null],[11,"emit_i8","","",35,null],[11,"emit_bool","","",35,null],[11,"emit_f64","","",35,null],[11,"emit_f32","","",35,null],[11,"emit_char","","",35,null],[11,"emit_str","","",35,null],[11,"emit_enum","","",35,null],[11,"emit_enum_variant","","",35,null],[11,"emit_enum_variant_arg","","",35,null],[11,"emit_enum_struct_variant","","",35,null],[11,"emit_enum_struct_variant_field","","",35,null],[11,"emit_struct","","",35,null],[11,"emit_struct_field","","",35,null],[11,"emit_tuple","","",35,null],[11,"emit_tuple_arg","","",35,null],[11,"emit_tuple_struct","","",35,null],[11,"emit_tuple_struct_arg","","",35,null],[11,"emit_option","","",35,null],[11,"emit_option_none","","",35,null],[11,"emit_option_some","","",35,null],[11,"emit_seq","","",35,null],[11,"emit_seq_elt","","",35,null],[11,"emit_map","","",35,null],[11,"emit_map_elt_key","","",35,null],[11,"emit_map_elt_val","","",35,null],[11,"encode","","",27,null],[11,"from_reader","","Decodes a json value from an `&amp;mut io::Read`",27,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",27,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",27,null],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",27,null],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",27,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",27,null],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",27,null],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",27,null],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",27,null],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",27,null],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",27,null],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",27,null],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",27,null],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",27,null],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",27,null],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",27,null],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",27,null],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",27,null],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",27,null],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",27,null],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",27,null],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",27,null],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",27,null],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",27,null],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",27,null],[11,"index","","",27,null],[11,"index","","",27,null],[11,"fmt","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"fmt","","",33,null],[11,"clone","","",33,null],[11,"eq","","",33,null],[11,"ne","","",33,null],[11,"new","","",36,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",36,null],[11,"is_empty","","Returns true if the stack is empty.",36,null],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",36,null],[11,"is_equal_to","","Compares this stack with an array of StackElements.",36,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"top","","Returns the top-most element (if any).",36,null],[11,"next","","",37,null],[11,"new","","Creates the JSON parser.",37,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",37,null],[11,"new","","Create a JSON Builder.",38,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",38,null],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",39,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",39,null],[11,"read_usize","","",39,null],[11,"read_u8","","",39,null],[11,"read_u16","","",39,null],[11,"read_u32","","",39,null],[11,"read_u64","","",39,null],[11,"read_isize","","",39,null],[11,"read_i8","","",39,null],[11,"read_i16","","",39,null],[11,"read_i32","","",39,null],[11,"read_i64","","",39,null],[11,"read_f32","","",39,null],[11,"read_f64","","",39,null],[11,"read_bool","","",39,null],[11,"read_char","","",39,null],[11,"read_str","","",39,null],[11,"read_enum","","",39,null],[11,"read_enum_variant","","",39,null],[11,"read_enum_variant_arg","","",39,null],[11,"read_enum_struct_variant","","",39,null],[11,"read_enum_struct_variant_field","","",39,null],[11,"read_struct","","",39,null],[11,"read_struct_field","","",39,null],[11,"read_tuple","","",39,null],[11,"read_tuple_arg","","",39,null],[11,"read_tuple_struct","","",39,null],[11,"read_tuple_struct_arg","","",39,null],[11,"read_option","","",39,null],[11,"read_seq","","",39,null],[11,"read_seq_elt","","",39,null],[11,"read_map","","",39,null],[11,"read_map_elt_key","","",39,null],[11,"read_map_elt_val","","",39,null],[11,"error","","",39,null],[11,"to_json","","",27,null],[11,"to_json","collections::string","",0,null],[11,"to_json","collections::vec","",4,null],[11,"to_json","collections::btree::map","",14,null],[11,"to_json","std::collections::hash::map","",16,null],[11,"to_json","core::option","",5,null],[11,"fmt","rustc_serialize::json","Encodes a json value into a string",27,null],[11,"fmt","","Encodes a json value into a string",40,null],[11,"fmt","","Encodes a json value into a string",41,null],[11,"indent","","Set the indentation level for the emitted JSON",42,null],[11,"fmt","","Encodes a json value into a string",42,null],[11,"from_str","","",27,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","",null,null],[16,"Error","","",43,null],[10,"read_nil","","",43,null],[10,"read_usize","","",43,null],[10,"read_u64","","",43,null],[10,"read_u32","","",43,null],[10,"read_u16","","",43,null],[10,"read_u8","","",43,null],[10,"read_isize","","",43,null],[10,"read_i64","","",43,null],[10,"read_i32","","",43,null],[10,"read_i16","","",43,null],[10,"read_i8","","",43,null],[10,"read_bool","","",43,null],[10,"read_f64","","",43,null],[10,"read_f32","","",43,null],[10,"read_char","","",43,null],[10,"read_str","","",43,null],[10,"read_enum","","",43,null],[10,"read_enum_variant","","",43,null],[10,"read_enum_variant_arg","","",43,null],[10,"read_enum_struct_variant","","",43,null],[10,"read_enum_struct_variant_field","","",43,null],[10,"read_struct","","",43,null],[10,"read_struct_field","","",43,null],[10,"read_tuple","","",43,null],[10,"read_tuple_arg","","",43,null],[10,"read_tuple_struct","","",43,null],[10,"read_tuple_struct_arg","","",43,null],[10,"read_option","","",43,null],[10,"read_seq","","",43,null],[10,"read_seq_elt","","",43,null],[10,"read_map","","",43,null],[10,"read_map_elt_key","","",43,null],[10,"read_map_elt_val","","",43,null],[10,"error","","",43,null],[8,"Encoder","","",null,null],[16,"Error","","",44,null],[10,"emit_nil","","",44,null],[10,"emit_usize","","",44,null],[10,"emit_u64","","",44,null],[10,"emit_u32","","",44,null],[10,"emit_u16","","",44,null],[10,"emit_u8","","",44,null],[10,"emit_isize","","",44,null],[10,"emit_i64","","",44,null],[10,"emit_i32","","",44,null],[10,"emit_i16","","",44,null],[10,"emit_i8","","",44,null],[10,"emit_bool","","",44,null],[10,"emit_f64","","",44,null],[10,"emit_f32","","",44,null],[10,"emit_char","","",44,null],[10,"emit_str","","",44,null],[10,"emit_enum","","",44,null],[10,"emit_enum_variant","","",44,null],[10,"emit_enum_variant_arg","","",44,null],[10,"emit_enum_struct_variant","","",44,null],[10,"emit_enum_struct_variant_field","","",44,null],[10,"emit_struct","","",44,null],[10,"emit_struct_field","","",44,null],[10,"emit_tuple","","",44,null],[10,"emit_tuple_arg","","",44,null],[10,"emit_tuple_struct","","",44,null],[10,"emit_tuple_struct_arg","","",44,null],[10,"emit_option","","",44,null],[10,"emit_option_none","","",44,null],[10,"emit_option_some","","",44,null],[10,"emit_seq","","",44,null],[10,"emit_seq_elt","","",44,null],[10,"emit_map","","",44,null],[10,"emit_map_elt_key","","",44,null],[10,"emit_map_elt_val","","",44,null],[8,"Decodable","","",null,null],[10,"decode","","",45,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",46,null],[8,"DecoderHelpers","","",null,null],[10,"read_to_vec","","",47,null],[8,"EncoderHelpers","","",null,null],[10,"emit_from_vec","","",48,null]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[4,"Cow"],[3,"Vec"],[4,"Option"],[3,"PhantomData"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["nix"] = {"doc":"Rust friendly bindings to the various *nix system functions.","items":[[11,"clone","libc::unix","",0,null],[11,"clone","","",1,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"clone","","",4,null],[11,"clone","","",5,null],[11,"clone","","",6,null],[11,"clone","","",7,null],[11,"clone","","",8,null],[11,"clone","","",9,null],[11,"clone","","",10,null],[11,"clone","","",11,null],[11,"clone","","",12,null],[11,"clone","","",13,null],[11,"clone","libc::unix::notbsd","",14,null],[11,"clone","","",15,null],[11,"clone","","",16,null],[11,"clone","","",17,null],[11,"clone","","",18,null],[11,"clone","","",19,null],[11,"clone","","",20,null],[11,"clone","","",21,null],[11,"clone","","",22,null],[11,"clone","","",23,null],[11,"clone","","",24,null],[11,"clone","","",25,null],[11,"clone","","",26,null],[11,"clone","","",27,null],[11,"clone","","",28,null],[11,"clone","libc::unix::notbsd::linux","",29,null],[11,"clone","","",30,null],[11,"clone","","",31,null],[11,"clone","","",32,null],[11,"clone","","",33,null],[11,"clone","","",34,null],[11,"clone","","",35,null],[11,"clone","","",36,null],[11,"clone","","",37,null],[11,"clone","","",38,null],[11,"clone","","",39,null],[11,"clone","","",40,null],[11,"clone","","",41,null],[11,"clone","","",42,null],[11,"clone","","",43,null],[11,"clone","","",44,null],[11,"clone","libc::unix::notbsd::linux::other","",45,null],[11,"clone","","",46,null],[11,"clone","","",47,null],[11,"clone","","",48,null],[11,"clone","","",49,null],[11,"clone","","",50,null],[11,"clone","","",51,null],[11,"clone","","",52,null],[11,"clone","","",53,null],[11,"clone","","",54,null],[11,"clone","","",55,null],[11,"clone","","",56,null],[11,"clone","libc::unix::notbsd::linux::other::b64","",57,null],[11,"clone","","",58,null],[11,"clone","libc::unix::notbsd::linux::other::b64::x86_64","",59,null],[11,"clone","","",60,null],[11,"clone","","",61,null],[11,"clone","","",62,null],[11,"clone","","",63,null],[11,"clone","","",64,null],[11,"clone","","",65,null],[11,"clone","","",66,null],[6,"c_int","nix","",null,null],[4,"c_void","","",null,null],[4,"Errno","","",null,null],[13,"UnknownErrno","","",67,null],[13,"EPERM","","",67,null],[13,"ENOENT","","",67,null],[13,"ESRCH","","",67,null],[13,"EINTR","","",67,null],[13,"EIO","","",67,null],[13,"ENXIO","","",67,null],[13,"E2BIG","","",67,null],[13,"ENOEXEC","","",67,null],[13,"EBADF","","",67,null],[13,"ECHILD","","",67,null],[13,"EAGAIN","","",67,null],[13,"ENOMEM","","",67,null],[13,"EACCES","","",67,null],[13,"EFAULT","","",67,null],[13,"ENOTBLK","","",67,null],[13,"EBUSY","","",67,null],[13,"EEXIST","","",67,null],[13,"EXDEV","","",67,null],[13,"ENODEV","","",67,null],[13,"ENOTDIR","","",67,null],[13,"EISDIR","","",67,null],[13,"EINVAL","","",67,null],[13,"ENFILE","","",67,null],[13,"EMFILE","","",67,null],[13,"ENOTTY","","",67,null],[13,"ETXTBSY","","",67,null],[13,"EFBIG","","",67,null],[13,"ENOSPC","","",67,null],[13,"ESPIPE","","",67,null],[13,"EROFS","","",67,null],[13,"EMLINK","","",67,null],[13,"EPIPE","","",67,null],[13,"EDOM","","",67,null],[13,"ERANGE","","",67,null],[13,"EDEADLK","","",67,null],[13,"ENAMETOOLONG","","",67,null],[13,"ENOLCK","","",67,null],[13,"ENOSYS","","",67,null],[13,"ENOTEMPTY","","",67,null],[13,"ELOOP","","",67,null],[13,"ENOMSG","","",67,null],[13,"EIDRM","","",67,null],[13,"ECHRNG","","",67,null],[13,"EL2NSYNC","","",67,null],[13,"EL3HLT","","",67,null],[13,"EL3RST","","",67,null],[13,"ELNRNG","","",67,null],[13,"EUNATCH","","",67,null],[13,"ENOCSI","","",67,null],[13,"EL2HLT","","",67,null],[13,"EBADE","","",67,null],[13,"EBADR","","",67,null],[13,"EXFULL","","",67,null],[13,"ENOANO","","",67,null],[13,"EBADRQC","","",67,null],[13,"EBADSLT","","",67,null],[13,"EBFONT","","",67,null],[13,"ENOSTR","","",67,null],[13,"ENODATA","","",67,null],[13,"ETIME","","",67,null],[13,"ENOSR","","",67,null],[13,"ENONET","","",67,null],[13,"ENOPKG","","",67,null],[13,"EREMOTE","","",67,null],[13,"ENOLINK","","",67,null],[13,"EADV","","",67,null],[13,"ESRMNT","","",67,null],[13,"ECOMM","","",67,null],[13,"EPROTO","","",67,null],[13,"EMULTIHOP","","",67,null],[13,"EDOTDOT","","",67,null],[13,"EBADMSG","","",67,null],[13,"EOVERFLOW","","",67,null],[13,"ENOTUNIQ","","",67,null],[13,"EBADFD","","",67,null],[13,"EREMCHG","","",67,null],[13,"ELIBACC","","",67,null],[13,"ELIBBAD","","",67,null],[13,"ELIBSCN","","",67,null],[13,"ELIBMAX","","",67,null],[13,"ELIBEXEC","","",67,null],[13,"EILSEQ","","",67,null],[13,"ERESTART","","",67,null],[13,"ESTRPIPE","","",67,null],[13,"EUSERS","","",67,null],[13,"ENOTSOCK","","",67,null],[13,"EDESTADDRREQ","","",67,null],[13,"EMSGSIZE","","",67,null],[13,"EPROTOTYPE","","",67,null],[13,"ENOPROTOOPT","","",67,null],[13,"EPROTONOSUPPORT","","",67,null],[13,"ESOCKTNOSUPPORT","","",67,null],[13,"EOPNOTSUPP","","",67,null],[13,"EPFNOSUPPORT","","",67,null],[13,"EAFNOSUPPORT","","",67,null],[13,"EADDRINUSE","","",67,null],[13,"EADDRNOTAVAIL","","",67,null],[13,"ENETDOWN","","",67,null],[13,"ENETUNREACH","","",67,null],[13,"ENETRESET","","",67,null],[13,"ECONNABORTED","","",67,null],[13,"ECONNRESET","","",67,null],[13,"ENOBUFS","","",67,null],[13,"EISCONN","","",67,null],[13,"ENOTCONN","","",67,null],[13,"ESHUTDOWN","","",67,null],[13,"ETOOMANYREFS","","",67,null],[13,"ETIMEDOUT","","",67,null],[13,"ECONNREFUSED","","",67,null],[13,"EHOSTDOWN","","",67,null],[13,"EHOSTUNREACH","","",67,null],[13,"EALREADY","","",67,null],[13,"EINPROGRESS","","",67,null],[13,"ESTALE","","",67,null],[13,"EUCLEAN","","",67,null],[13,"ENOTNAM","","",67,null],[13,"ENAVAIL","","",67,null],[13,"EISNAM","","",67,null],[13,"EREMOTEIO","","",67,null],[13,"EDQUOT","","",67,null],[13,"ENOMEDIUM","","",67,null],[13,"EMEDIUMTYPE","","",67,null],[13,"ECANCELED","","",67,null],[13,"ENOKEY","","",67,null],[13,"EKEYEXPIRED","","",67,null],[13,"EKEYREVOKED","","",67,null],[13,"EKEYREJECTED","","",67,null],[13,"EOWNERDEAD","","",67,null],[13,"ENOTRECOVERABLE","","",67,null],[13,"ERFKILL","","",67,null],[13,"EHWPOISON","","",67,null],[4,"Error","","",null,null],[13,"Sys","","",68,null],[13,"InvalidPath","","",68,null],[0,"errno","","",null,null],[4,"Errno","nix::errno","",null,null],[13,"UnknownErrno","","",67,null],[13,"EPERM","","",67,null],[13,"ENOENT","","",67,null],[13,"ESRCH","","",67,null],[13,"EINTR","","",67,null],[13,"EIO","","",67,null],[13,"ENXIO","","",67,null],[13,"E2BIG","","",67,null],[13,"ENOEXEC","","",67,null],[13,"EBADF","","",67,null],[13,"ECHILD","","",67,null],[13,"EAGAIN","","",67,null],[13,"ENOMEM","","",67,null],[13,"EACCES","","",67,null],[13,"EFAULT","","",67,null],[13,"ENOTBLK","","",67,null],[13,"EBUSY","","",67,null],[13,"EEXIST","","",67,null],[13,"EXDEV","","",67,null],[13,"ENODEV","","",67,null],[13,"ENOTDIR","","",67,null],[13,"EISDIR","","",67,null],[13,"EINVAL","","",67,null],[13,"ENFILE","","",67,null],[13,"EMFILE","","",67,null],[13,"ENOTTY","","",67,null],[13,"ETXTBSY","","",67,null],[13,"EFBIG","","",67,null],[13,"ENOSPC","","",67,null],[13,"ESPIPE","","",67,null],[13,"EROFS","","",67,null],[13,"EMLINK","","",67,null],[13,"EPIPE","","",67,null],[13,"EDOM","","",67,null],[13,"ERANGE","","",67,null],[13,"EDEADLK","","",67,null],[13,"ENAMETOOLONG","","",67,null],[13,"ENOLCK","","",67,null],[13,"ENOSYS","","",67,null],[13,"ENOTEMPTY","","",67,null],[13,"ELOOP","","",67,null],[13,"ENOMSG","","",67,null],[13,"EIDRM","","",67,null],[13,"ECHRNG","","",67,null],[13,"EL2NSYNC","","",67,null],[13,"EL3HLT","","",67,null],[13,"EL3RST","","",67,null],[13,"ELNRNG","","",67,null],[13,"EUNATCH","","",67,null],[13,"ENOCSI","","",67,null],[13,"EL2HLT","","",67,null],[13,"EBADE","","",67,null],[13,"EBADR","","",67,null],[13,"EXFULL","","",67,null],[13,"ENOANO","","",67,null],[13,"EBADRQC","","",67,null],[13,"EBADSLT","","",67,null],[13,"EBFONT","","",67,null],[13,"ENOSTR","","",67,null],[13,"ENODATA","","",67,null],[13,"ETIME","","",67,null],[13,"ENOSR","","",67,null],[13,"ENONET","","",67,null],[13,"ENOPKG","","",67,null],[13,"EREMOTE","","",67,null],[13,"ENOLINK","","",67,null],[13,"EADV","","",67,null],[13,"ESRMNT","","",67,null],[13,"ECOMM","","",67,null],[13,"EPROTO","","",67,null],[13,"EMULTIHOP","","",67,null],[13,"EDOTDOT","","",67,null],[13,"EBADMSG","","",67,null],[13,"EOVERFLOW","","",67,null],[13,"ENOTUNIQ","","",67,null],[13,"EBADFD","","",67,null],[13,"EREMCHG","","",67,null],[13,"ELIBACC","","",67,null],[13,"ELIBBAD","","",67,null],[13,"ELIBSCN","","",67,null],[13,"ELIBMAX","","",67,null],[13,"ELIBEXEC","","",67,null],[13,"EILSEQ","","",67,null],[13,"ERESTART","","",67,null],[13,"ESTRPIPE","","",67,null],[13,"EUSERS","","",67,null],[13,"ENOTSOCK","","",67,null],[13,"EDESTADDRREQ","","",67,null],[13,"EMSGSIZE","","",67,null],[13,"EPROTOTYPE","","",67,null],[13,"ENOPROTOOPT","","",67,null],[13,"EPROTONOSUPPORT","","",67,null],[13,"ESOCKTNOSUPPORT","","",67,null],[13,"EOPNOTSUPP","","",67,null],[13,"EPFNOSUPPORT","","",67,null],[13,"EAFNOSUPPORT","","",67,null],[13,"EADDRINUSE","","",67,null],[13,"EADDRNOTAVAIL","","",67,null],[13,"ENETDOWN","","",67,null],[13,"ENETUNREACH","","",67,null],[13,"ENETRESET","","",67,null],[13,"ECONNABORTED","","",67,null],[13,"ECONNRESET","","",67,null],[13,"ENOBUFS","","",67,null],[13,"EISCONN","","",67,null],[13,"ENOTCONN","","",67,null],[13,"ESHUTDOWN","","",67,null],[13,"ETOOMANYREFS","","",67,null],[13,"ETIMEDOUT","","",67,null],[13,"ECONNREFUSED","","",67,null],[13,"EHOSTDOWN","","",67,null],[13,"EHOSTUNREACH","","",67,null],[13,"EALREADY","","",67,null],[13,"EINPROGRESS","","",67,null],[13,"ESTALE","","",67,null],[13,"EUCLEAN","","",67,null],[13,"ENOTNAM","","",67,null],[13,"ENAVAIL","","",67,null],[13,"EISNAM","","",67,null],[13,"EREMOTEIO","","",67,null],[13,"EDQUOT","","",67,null],[13,"ENOMEDIUM","","",67,null],[13,"EMEDIUMTYPE","","",67,null],[13,"ECANCELED","","",67,null],[13,"ENOKEY","","",67,null],[13,"EKEYEXPIRED","","",67,null],[13,"EKEYREVOKED","","",67,null],[13,"EKEYREJECTED","","",67,null],[13,"EOWNERDEAD","","",67,null],[13,"ENOTRECOVERABLE","","",67,null],[13,"ERFKILL","","",67,null],[13,"EHWPOISON","","",67,null],[5,"from_i32","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"errno"}}],[5,"errno","","Returns the platform-specific value of errno",null,{"inputs":[],"output":{"name":"i32"}}],[11,"eq","nix","",67,null],[11,"clone","","",67,null],[11,"fmt","","",67,null],[17,"EWOULDBLOCK","nix::errno","",null,null],[17,"EDEADLOCK","","",null,null],[8,"ErrnoSentinel","","The sentinel value indicates that a function failed and more detailed\ninformation about the error can be found in `errno`",null,null],[10,"sentinel","","",69,{"inputs":[],"output":{"name":"self"}}],[11,"last","nix","",67,{"inputs":[],"output":{"name":"self"}}],[11,"desc","","",67,null],[11,"from_i32","","",67,{"inputs":[{"name":"i32"}],"output":{"name":"errno"}}],[11,"clear","","",67,null],[11,"result","","Returns `Ok(value)` if it does not contain the sentinel value. This\nshould not be used when `-1` is not the errno sentinel value.",67,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[11,"description","","",67,null],[11,"fmt","","",67,null],[11,"from","std::io::error","",70,{"inputs":[{"name":"errno"}],"output":{"name":"self"}}],[0,"features","nix","",null,null],[5,"socket_atomic_cloexec","nix::features","",null,{"inputs":[],"output":{"name":"bool"}}],[0,"fcntl","nix","",null,null],[3,"SpliceFFlags","nix::fcntl","",null,null],[3,"OFlag","","",null,null],[3,"FdFlag","","",null,null],[3,"SealFlag","","",null,null],[3,"flock","","",null,null],[12,"l_type","","",71,null],[12,"l_whence","","",71,null],[12,"l_start","","",71,null],[12,"l_len","","",71,null],[12,"l_pid","","",71,null],[12,"l_sysid","","",71,null],[4,"FcntlArg","","",null,null],[13,"F_DUPFD","","",72,null],[13,"F_DUPFD_CLOEXEC","","",72,null],[13,"F_GETFD","","",72,null],[13,"F_SETFD","","",72,null],[13,"F_GETFL","","",72,null],[13,"F_SETFL","","",72,null],[13,"F_SETLK","","",72,null],[13,"F_SETLKW","","",72,null],[13,"F_GETLK","","",72,null],[13,"F_OFD_SETLK","","",72,null],[13,"F_OFD_SETLKW","","",72,null],[13,"F_OFD_GETLK","","",72,null],[13,"F_ADD_SEALS","","",72,null],[13,"F_GET_SEALS","","",72,null],[4,"FlockArg","","",null,null],[13,"LockShared","","",73,null],[13,"LockExclusive","","",73,null],[13,"Unlock","","",73,null],[13,"LockSharedNonblock","","",73,null],[13,"LockExclusiveNonblock","","",73,null],[13,"UnlockNonblock","","",73,null],[5,"open","","",null,{"inputs":[{"name":"p"},{"name":"oflag"},{"name":"mode"}],"output":{"name":"result"}}],[5,"fcntl","","",null,{"inputs":[{"name":"rawfd"},{"name":"fcntlarg"}],"output":{"name":"result"}}],[5,"flock","","",null,{"inputs":[{"name":"rawfd"},{"name":"flockarg"}],"output":{"name":"result"}}],[5,"splice","","",null,{"inputs":[{"name":"rawfd"},{"name":"option"},{"name":"rawfd"},{"name":"option"},{"name":"usize"},{"name":"splicefflags"}],"output":{"name":"result"}}],[5,"tee","","",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"},{"name":"usize"},{"name":"splicefflags"}],"output":{"name":"result"}}],[5,"vmsplice","","",null,null],[11,"fmt","","",71,null],[11,"default","","",71,{"inputs":[],"output":{"name":"flock"}}],[11,"clone","","",71,null],[11,"hash","","",74,null],[11,"cmp","","",74,null],[11,"partial_cmp","","",74,null],[11,"lt","","",74,null],[11,"le","","",74,null],[11,"gt","","",74,null],[11,"ge","","",74,null],[11,"clone","","",74,null],[11,"eq","","",74,null],[11,"ne","","",74,null],[11,"fmt","","",74,null],[11,"empty","","Returns an empty set of flags.",74,{"inputs":[],"output":{"name":"splicefflags"}}],[11,"all","","Returns the set containing all flags.",74,{"inputs":[],"output":{"name":"splicefflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",74,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",74,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",74,{"inputs":[{"name":"c_uint"}],"output":{"name":"splicefflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",74,null],[11,"is_all","","Returns `true` if all flags are currently set.",74,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",74,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",74,null],[11,"insert","","Inserts the specified flags in-place.",74,null],[11,"remove","","Removes the specified flags in-place.",74,null],[11,"toggle","","Toggles the specified flags in-place.",74,null],[11,"bitor","","Returns the union of the two sets of flags.",74,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",74,null],[11,"bitand","","Returns the intersection between the two sets of flags.",74,null],[11,"sub","","Returns the set difference of the two sets of flags.",74,null],[11,"not","","Returns the complement of this set of flags.",74,null],[11,"from_iter","","",74,{"inputs":[{"name":"t"}],"output":{"name":"splicefflags"}}],[11,"hash","","",75,null],[11,"cmp","","",75,null],[11,"partial_cmp","","",75,null],[11,"lt","","",75,null],[11,"le","","",75,null],[11,"gt","","",75,null],[11,"ge","","",75,null],[11,"clone","","",75,null],[11,"eq","","",75,null],[11,"ne","","",75,null],[11,"fmt","","",75,null],[11,"empty","","Returns an empty set of flags.",75,{"inputs":[],"output":{"name":"oflag"}}],[11,"all","","Returns the set containing all flags.",75,{"inputs":[],"output":{"name":"oflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",75,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",75,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",75,{"inputs":[{"name":"c_int"}],"output":{"name":"oflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",75,null],[11,"is_all","","Returns `true` if all flags are currently set.",75,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",75,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",75,null],[11,"insert","","Inserts the specified flags in-place.",75,null],[11,"remove","","Removes the specified flags in-place.",75,null],[11,"toggle","","Toggles the specified flags in-place.",75,null],[11,"bitor","","Returns the union of the two sets of flags.",75,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",75,null],[11,"bitand","","Returns the intersection between the two sets of flags.",75,null],[11,"sub","","Returns the set difference of the two sets of flags.",75,null],[11,"not","","Returns the complement of this set of flags.",75,null],[11,"from_iter","","",75,{"inputs":[{"name":"t"}],"output":{"name":"oflag"}}],[11,"hash","","",76,null],[11,"cmp","","",76,null],[11,"partial_cmp","","",76,null],[11,"lt","","",76,null],[11,"le","","",76,null],[11,"gt","","",76,null],[11,"ge","","",76,null],[11,"clone","","",76,null],[11,"eq","","",76,null],[11,"ne","","",76,null],[11,"fmt","","",76,null],[11,"empty","","Returns an empty set of flags.",76,{"inputs":[],"output":{"name":"fdflag"}}],[11,"all","","Returns the set containing all flags.",76,{"inputs":[],"output":{"name":"fdflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",76,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",76,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",76,{"inputs":[{"name":"c_int"}],"output":{"name":"fdflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",76,null],[11,"is_all","","Returns `true` if all flags are currently set.",76,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",76,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",76,null],[11,"insert","","Inserts the specified flags in-place.",76,null],[11,"remove","","Removes the specified flags in-place.",76,null],[11,"toggle","","Toggles the specified flags in-place.",76,null],[11,"bitor","","Returns the union of the two sets of flags.",76,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",76,null],[11,"bitand","","Returns the intersection between the two sets of flags.",76,null],[11,"sub","","Returns the set difference of the two sets of flags.",76,null],[11,"not","","Returns the complement of this set of flags.",76,null],[11,"from_iter","","",76,{"inputs":[{"name":"t"}],"output":{"name":"fdflag"}}],[11,"hash","","",77,null],[11,"cmp","","",77,null],[11,"partial_cmp","","",77,null],[11,"lt","","",77,null],[11,"le","","",77,null],[11,"gt","","",77,null],[11,"ge","","",77,null],[11,"clone","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"fmt","","",77,null],[11,"empty","","Returns an empty set of flags.",77,{"inputs":[],"output":{"name":"sealflag"}}],[11,"all","","Returns the set containing all flags.",77,{"inputs":[],"output":{"name":"sealflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",77,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",77,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",77,{"inputs":[{"name":"c_int"}],"output":{"name":"sealflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",77,null],[11,"is_all","","Returns `true` if all flags are currently set.",77,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",77,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",77,null],[11,"insert","","Inserts the specified flags in-place.",77,null],[11,"remove","","Removes the specified flags in-place.",77,null],[11,"toggle","","Toggles the specified flags in-place.",77,null],[11,"bitor","","Returns the union of the two sets of flags.",77,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",77,null],[11,"bitand","","Returns the intersection between the two sets of flags.",77,null],[11,"sub","","Returns the set difference of the two sets of flags.",77,null],[11,"not","","Returns the complement of this set of flags.",77,null],[11,"from_iter","","",77,{"inputs":[{"name":"t"}],"output":{"name":"sealflag"}}],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_LARGEFILE","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"O_NOATIME","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_PATH","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"O_NDELAY","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"F_SEAL_SEAL","","",null,null],[17,"F_SEAL_SHRINK","","",null,null],[17,"F_SEAL_GROW","","",null,null],[17,"F_SEAL_WRITE","","",null,null],[0,"mount","nix","",null,null],[3,"MsFlags","nix::mount","",null,null],[3,"MntFlags","","",null,null],[5,"mount","","",null,{"inputs":[{"name":"option"},{"name":"p2"},{"name":"option"},{"name":"msflags"},{"name":"option"}],"output":{"name":"result"}}],[5,"umount","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"umount2","","",null,{"inputs":[{"name":"p"},{"name":"mntflags"}],"output":{"name":"result"}}],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_VERBOSE","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_NOSEC","","",null,null],[17,"MS_BORN","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[11,"hash","","",78,null],[11,"cmp","","",78,null],[11,"partial_cmp","","",78,null],[11,"lt","","",78,null],[11,"le","","",78,null],[11,"gt","","",78,null],[11,"ge","","",78,null],[11,"clone","","",78,null],[11,"eq","","",78,null],[11,"ne","","",78,null],[11,"fmt","","",78,null],[11,"empty","","Returns an empty set of flags.",78,{"inputs":[],"output":{"name":"msflags"}}],[11,"all","","Returns the set containing all flags.",78,{"inputs":[],"output":{"name":"msflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",78,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",78,{"inputs":[{"name":"c_ulong"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",78,{"inputs":[{"name":"c_ulong"}],"output":{"name":"msflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",78,null],[11,"is_all","","Returns `true` if all flags are currently set.",78,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",78,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",78,null],[11,"insert","","Inserts the specified flags in-place.",78,null],[11,"remove","","Removes the specified flags in-place.",78,null],[11,"toggle","","Toggles the specified flags in-place.",78,null],[11,"bitor","","Returns the union of the two sets of flags.",78,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",78,null],[11,"bitand","","Returns the intersection between the two sets of flags.",78,null],[11,"sub","","Returns the set difference of the two sets of flags.",78,null],[11,"not","","Returns the complement of this set of flags.",78,null],[11,"from_iter","","",78,{"inputs":[{"name":"t"}],"output":{"name":"msflags"}}],[11,"hash","","",79,null],[11,"cmp","","",79,null],[11,"partial_cmp","","",79,null],[11,"lt","","",79,null],[11,"le","","",79,null],[11,"gt","","",79,null],[11,"ge","","",79,null],[11,"clone","","",79,null],[11,"eq","","",79,null],[11,"ne","","",79,null],[11,"fmt","","",79,null],[11,"empty","","Returns an empty set of flags.",79,{"inputs":[],"output":{"name":"mntflags"}}],[11,"all","","Returns the set containing all flags.",79,{"inputs":[],"output":{"name":"mntflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",79,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",79,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",79,{"inputs":[{"name":"c_int"}],"output":{"name":"mntflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",79,null],[11,"is_all","","Returns `true` if all flags are currently set.",79,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",79,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",79,null],[11,"insert","","Inserts the specified flags in-place.",79,null],[11,"remove","","Removes the specified flags in-place.",79,null],[11,"toggle","","Toggles the specified flags in-place.",79,null],[11,"bitor","","Returns the union of the two sets of flags.",79,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",79,null],[11,"bitand","","Returns the intersection between the two sets of flags.",79,null],[11,"sub","","Returns the set difference of the two sets of flags.",79,null],[11,"not","","Returns the complement of this set of flags.",79,null],[11,"from_iter","","",79,{"inputs":[{"name":"t"}],"output":{"name":"mntflags"}}],[0,"mqueue","nix","Posix Message Queue functions",null,null],[3,"MQ_OFlag","nix::mqueue","",null,null],[3,"FdFlag","","",null,null],[3,"MqAttr","","",null,null],[12,"mq_flags","","",80,null],[12,"mq_maxmsg","","",80,null],[12,"mq_msgsize","","",80,null],[12,"mq_curmsgs","","",80,null],[5,"mq_open","","",null,{"inputs":[{"name":"cstring"},{"name":"mq_oflag"},{"name":"mode"},{"name":"option"}],"output":{"name":"result"}}],[5,"mq_unlink","","",null,{"inputs":[{"name":"cstring"}],"output":{"name":"result"}}],[5,"mq_close","","",null,{"inputs":[{"name":"mqd"}],"output":{"name":"result"}}],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,{"inputs":[{"name":"mqd"}],"output":{"name":"result"}}],[5,"mq_setattr","","Set the attributes of the message queue. Only O_NONBLOCK can be set, everything else will be ignored\nReturns the old attributes\nIt is recommend to use the mq_set_nonblock() and mq_remove_nonblock() convenience functions as they are easier to use",null,{"inputs":[{"name":"mqd"},{"name":"mqattr"}],"output":{"name":"result"}}],[5,"mq_set_nonblock","","Convenience function.\nSets the O_NONBLOCK attribute for a given message queue descriptor\nReturns the old attributes",null,{"inputs":[{"name":"mqd"}],"output":{"name":"result"}}],[5,"mq_remove_nonblock","","Convenience function.\nRemoves O_NONBLOCK attribute for a given message queue descriptor\nReturns the old attributes",null,{"inputs":[{"name":"mqd"}],"output":{"name":"result"}}],[11,"hash","","",81,null],[11,"cmp","","",81,null],[11,"partial_cmp","","",81,null],[11,"lt","","",81,null],[11,"le","","",81,null],[11,"gt","","",81,null],[11,"ge","","",81,null],[11,"clone","","",81,null],[11,"eq","","",81,null],[11,"ne","","",81,null],[11,"fmt","","",81,null],[11,"empty","","Returns an empty set of flags.",81,{"inputs":[],"output":{"name":"mq_oflag"}}],[11,"all","","Returns the set containing all flags.",81,{"inputs":[],"output":{"name":"mq_oflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",81,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",81,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",81,{"inputs":[{"name":"c_int"}],"output":{"name":"mq_oflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",81,null],[11,"is_all","","Returns `true` if all flags are currently set.",81,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",81,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",81,null],[11,"insert","","Inserts the specified flags in-place.",81,null],[11,"remove","","Removes the specified flags in-place.",81,null],[11,"toggle","","Toggles the specified flags in-place.",81,null],[11,"bitor","","Returns the union of the two sets of flags.",81,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",81,null],[11,"bitand","","Returns the intersection between the two sets of flags.",81,null],[11,"sub","","Returns the set difference of the two sets of flags.",81,null],[11,"not","","Returns the complement of this set of flags.",81,null],[11,"from_iter","","",81,{"inputs":[{"name":"t"}],"output":{"name":"mq_oflag"}}],[11,"hash","","",82,null],[11,"cmp","","",82,null],[11,"partial_cmp","","",82,null],[11,"lt","","",82,null],[11,"le","","",82,null],[11,"gt","","",82,null],[11,"ge","","",82,null],[11,"clone","","",82,null],[11,"eq","","",82,null],[11,"ne","","",82,null],[11,"fmt","","",82,null],[11,"empty","","Returns an empty set of flags.",82,{"inputs":[],"output":{"name":"fdflag"}}],[11,"all","","Returns the set containing all flags.",82,{"inputs":[],"output":{"name":"fdflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",82,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",82,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",82,{"inputs":[{"name":"c_int"}],"output":{"name":"fdflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",82,null],[11,"is_all","","Returns `true` if all flags are currently set.",82,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",82,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",82,null],[11,"insert","","Inserts the specified flags in-place.",82,null],[11,"remove","","Removes the specified flags in-place.",82,null],[11,"toggle","","Toggles the specified flags in-place.",82,null],[11,"bitor","","Returns the union of the two sets of flags.",82,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",82,null],[11,"bitand","","Returns the intersection between the two sets of flags.",82,null],[11,"sub","","Returns the set difference of the two sets of flags.",82,null],[11,"not","","Returns the complement of this set of flags.",82,null],[11,"from_iter","","",82,{"inputs":[{"name":"t"}],"output":{"name":"fdflag"}}],[6,"MQd","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"FD_CLOEXEC","","",null,null],[11,"eq","","",80,null],[11,"ne","","",80,null],[11,"fmt","","",80,null],[11,"clone","","",80,null],[11,"new","","",80,{"inputs":[{"name":"c_long"},{"name":"c_long"},{"name":"c_long"},{"name":"c_long"}],"output":{"name":"mqattr"}}],[0,"poll","nix","",null,null],[3,"PollFd","nix::poll","",null,null],[12,"fd","","",83,null],[12,"events","","",83,null],[12,"revents","","",83,null],[3,"EventFlags","","",null,null],[5,"poll","","",null,null],[11,"hash","","",84,null],[11,"cmp","","",84,null],[11,"partial_cmp","","",84,null],[11,"lt","","",84,null],[11,"le","","",84,null],[11,"gt","","",84,null],[11,"ge","","",84,null],[11,"clone","","",84,null],[11,"eq","","",84,null],[11,"ne","","",84,null],[11,"fmt","","",84,null],[11,"empty","","Returns an empty set of flags.",84,{"inputs":[],"output":{"name":"eventflags"}}],[11,"all","","Returns the set containing all flags.",84,{"inputs":[],"output":{"name":"eventflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",84,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",84,{"inputs":[{"name":"c_short"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",84,{"inputs":[{"name":"c_short"}],"output":{"name":"eventflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",84,null],[11,"is_all","","Returns `true` if all flags are currently set.",84,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",84,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",84,null],[11,"insert","","Inserts the specified flags in-place.",84,null],[11,"remove","","Removes the specified flags in-place.",84,null],[11,"toggle","","Toggles the specified flags in-place.",84,null],[11,"bitor","","Returns the union of the two sets of flags.",84,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",84,null],[11,"bitand","","Returns the intersection between the two sets of flags.",84,null],[11,"sub","","Returns the set difference of the two sets of flags.",84,null],[11,"not","","Returns the complement of this set of flags.",84,null],[11,"from_iter","","",84,{"inputs":[{"name":"t"}],"output":{"name":"eventflags"}}],[11,"fmt","","",83,null],[11,"clone","","",83,null],[6,"nfds_t","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[0,"net","nix","",null,null],[0,"if_","nix::net","Network interface name resolution.",null,null],[5,"if_nametoindex","nix::net::if_","Resolve an interface into a interface number.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[0,"sched","nix","",null,null],[3,"CloneFlags","nix::sched","",null,null],[3,"CpuSet","","",null,null],[5,"sched_setaffinity","","",null,{"inputs":[{"name":"isize"},{"name":"cpuset"}],"output":{"name":"result"}}],[5,"clone","","",null,null],[5,"unshare","","",null,{"inputs":[{"name":"cloneflags"}],"output":{"name":"result"}}],[5,"setns","","",null,{"inputs":[{"name":"rawfd"},{"name":"cloneflags"}],"output":{"name":"result"}}],[6,"CloneCb","","",null,null],[6,"CpuMask","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[11,"hash","","",85,null],[11,"cmp","","",85,null],[11,"partial_cmp","","",85,null],[11,"lt","","",85,null],[11,"le","","",85,null],[11,"gt","","",85,null],[11,"ge","","",85,null],[11,"clone","","",85,null],[11,"eq","","",85,null],[11,"ne","","",85,null],[11,"fmt","","",85,null],[11,"empty","","Returns an empty set of flags.",85,{"inputs":[],"output":{"name":"cloneflags"}}],[11,"all","","Returns the set containing all flags.",85,{"inputs":[],"output":{"name":"cloneflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",85,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",85,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",85,{"inputs":[{"name":"c_int"}],"output":{"name":"cloneflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",85,null],[11,"is_all","","Returns `true` if all flags are currently set.",85,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",85,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",85,null],[11,"insert","","Inserts the specified flags in-place.",85,null],[11,"remove","","Removes the specified flags in-place.",85,null],[11,"toggle","","Toggles the specified flags in-place.",85,null],[11,"bitor","","Returns the union of the two sets of flags.",85,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",85,null],[11,"bitand","","Returns the intersection between the two sets of flags.",85,null],[11,"sub","","Returns the set difference of the two sets of flags.",85,null],[11,"not","","Returns the complement of this set of flags.",85,null],[11,"from_iter","","",85,{"inputs":[{"name":"t"}],"output":{"name":"cloneflags"}}],[11,"clone","","",86,null],[11,"new","","",86,{"inputs":[],"output":{"name":"cpuset"}}],[11,"set","","",86,null],[11,"unset","","",86,null],[0,"sys","nix","",null,null],[0,"epoll","nix::sys","",null,null],[3,"EpollEventKind","nix::sys::epoll","",null,null],[3,"EpollEvent","","",null,null],[12,"events","","",87,null],[12,"data","","",87,null],[4,"EpollOp","","",null,null],[13,"EpollCtlAdd","","",88,null],[13,"EpollCtlDel","","",88,null],[13,"EpollCtlMod","","",88,null],[5,"epoll_create","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"epoll_ctl","","",null,{"inputs":[{"name":"rawfd"},{"name":"epollop"},{"name":"rawfd"},{"name":"epollevent"}],"output":{"name":"result"}}],[5,"epoll_wait","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"EPOLLET","","",null,null],[11,"hash","","",89,null],[11,"cmp","","",89,null],[11,"partial_cmp","","",89,null],[11,"lt","","",89,null],[11,"le","","",89,null],[11,"gt","","",89,null],[11,"ge","","",89,null],[11,"clone","","",89,null],[11,"eq","","",89,null],[11,"ne","","",89,null],[11,"fmt","","",89,null],[11,"empty","","Returns an empty set of flags.",89,{"inputs":[],"output":{"name":"epolleventkind"}}],[11,"all","","Returns the set containing all flags.",89,{"inputs":[],"output":{"name":"epolleventkind"}}],[11,"bits","","Returns the raw value of the flags currently stored.",89,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",89,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",89,{"inputs":[{"name":"u32"}],"output":{"name":"epolleventkind"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",89,null],[11,"is_all","","Returns `true` if all flags are currently set.",89,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",89,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",89,null],[11,"insert","","Inserts the specified flags in-place.",89,null],[11,"remove","","Removes the specified flags in-place.",89,null],[11,"toggle","","Toggles the specified flags in-place.",89,null],[11,"bitor","","Returns the union of the two sets of flags.",89,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",89,null],[11,"bitand","","Returns the intersection between the two sets of flags.",89,null],[11,"sub","","Returns the set difference of the two sets of flags.",89,null],[11,"not","","Returns the complement of this set of flags.",89,null],[11,"from_iter","","",89,{"inputs":[{"name":"t"}],"output":{"name":"epolleventkind"}}],[11,"clone","","",88,null],[11,"clone","","",87,null],[0,"memfd","nix::sys","",null,null],[3,"MemFdCreateFlag","nix::sys::memfd","",null,null],[5,"memfd_create","","",null,{"inputs":[{"name":"cstr"},{"name":"memfdcreateflag"}],"output":{"name":"result"}}],[17,"MFD_CLOEXEC","","",null,null],[17,"MFD_ALLOW_SEALING","","",null,null],[11,"hash","","",90,null],[11,"cmp","","",90,null],[11,"partial_cmp","","",90,null],[11,"lt","","",90,null],[11,"le","","",90,null],[11,"gt","","",90,null],[11,"ge","","",90,null],[11,"clone","","",90,null],[11,"eq","","",90,null],[11,"ne","","",90,null],[11,"fmt","","",90,null],[11,"empty","","Returns an empty set of flags.",90,{"inputs":[],"output":{"name":"memfdcreateflag"}}],[11,"all","","Returns the set containing all flags.",90,{"inputs":[],"output":{"name":"memfdcreateflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",90,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",90,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",90,{"inputs":[{"name":"c_uint"}],"output":{"name":"memfdcreateflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",90,null],[11,"is_all","","Returns `true` if all flags are currently set.",90,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",90,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",90,null],[11,"insert","","Inserts the specified flags in-place.",90,null],[11,"remove","","Removes the specified flags in-place.",90,null],[11,"toggle","","Toggles the specified flags in-place.",90,null],[11,"bitor","","Returns the union of the two sets of flags.",90,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",90,null],[11,"bitand","","Returns the intersection between the two sets of flags.",90,null],[11,"sub","","Returns the set difference of the two sets of flags.",90,null],[11,"not","","Returns the complement of this set of flags.",90,null],[11,"from_iter","","",90,{"inputs":[{"name":"t"}],"output":{"name":"memfdcreateflag"}}],[0,"ioctl","nix::sys","Provide helpers for making ioctl system calls",null,null],[4,"c_void","nix::sys::ioctl::libc","",null,null],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[5,"isalnum","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isalpha","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"iscntrl","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isdigit","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isgraph","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"islower","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isprint","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"ispunct","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isspace","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isupper","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isxdigit","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"tolower","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"toupper","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[5,"abs","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"atof","","",null,null],[5,"labs","","",null,{"inputs":[{"name":"i64"}],"output":{"name":"i64"}}],[5,"rand","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"srand","","",null,null],[17,"ABDAY_7","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"IXON","","",null,null],[5,"telldir","","",null,null],[17,"_IOFBF","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"TCXONC","","",null,null],[17,"DT_REG","","",null,null],[17,"NOFLSH","","",null,null],[17,"SYS_perf_event_open","","",null,null],[6,"gid_t","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[6,"off_t","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[5,"getuid","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"connect","","",null,null],[17,"CLONE_PARENT","","",null,null],[5,"munmap","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"ENOMEM","","",null,null],[5,"tcsetattr","","",null,null],[5,"posix_memalign","","",null,null],[5,"closedir","","",null,null],[17,"WNOWAIT","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[5,"seekdir","","",null,null],[5,"pathconf","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"VT1","","",null,null],[17,"ST_APPEND","","",null,null],[5,"dlsym","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ENODEV","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"POLLERR","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"mkdir","","",null,null],[6,"tcflag_t","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[5,"futimens","","",null,null],[5,"fchmodat","","",null,null],[5,"readdir64_r","","",null,null],[5,"mount","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"EBADRQC","","",null,null],[4,"locale_t","","",null,null],[17,"EPOLLWRNORM","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"ftello","","",null,null],[17,"S_IFIFO","","",null,null],[5,"getpid","","",null,{"inputs":[],"output":{"name":"i32"}}],[17,"EMLINK","","",null,null],[4,"timezone","","",null,null],[17,"EBADFD","","",null,null],[17,"ECOMM","","",null,null],[17,"EBADE","","",null,null],[17,"F_OK","","",null,null],[17,"EISDIR","","",null,null],[17,"VDISCARD","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"ELIBMAX","","",null,null],[17,"VMIN","","",null,null],[5,"sscanf","","",null,null],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"bool"}}],[17,"LOG_NFACILITIES","","",null,null],[5,"pthread_mutex_lock","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[5,"mkostemp","","",null,null],[17,"S_IXOTH","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"SIGUNUSED","","",null,null],[5,"select","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"O_NONBLOCK","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"NL1","","",null,null],[17,"SHM_RDONLY","","",null,null],[6,"blkcnt64_t","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"sem_close","","",null,null],[17,"S_IRGRP","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"S_IROTH","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",39,null],[12,"f_frsize","","",39,null],[12,"f_blocks","","",39,null],[12,"f_bfree","","",39,null],[12,"f_bavail","","",39,null],[12,"f_files","","",39,null],[12,"f_ffree","","",39,null],[12,"f_favail","","",39,null],[12,"f_fsid","","",39,null],[12,"f_flag","","",39,null],[12,"f_namemax","","",39,null],[17,"SEEK_DATA","","",null,null],[17,"F_GETFD","","",null,null],[3,"flock","","",null,null],[12,"l_type","","",53,null],[12,"l_whence","","",53,null],[12,"l_start","","",53,null],[12,"l_len","","",53,null],[12,"l_pid","","",53,null],[17,"S_IFCHR","","",null,null],[5,"gethostname","","",null,null],[17,"PROT_GROWSUP","","",null,null],[6,"in_addr_t","","",null,null],[3,"lconv","","",null,null],[12,"decimal_point","","",28,null],[12,"thousands_sep","","",28,null],[12,"grouping","","",28,null],[12,"int_curr_symbol","","",28,null],[12,"currency_symbol","","",28,null],[12,"mon_decimal_point","","",28,null],[12,"mon_thousands_sep","","",28,null],[12,"mon_grouping","","",28,null],[12,"positive_sign","","",28,null],[12,"negative_sign","","",28,null],[12,"int_frac_digits","","",28,null],[12,"frac_digits","","",28,null],[12,"p_cs_precedes","","",28,null],[12,"p_sep_by_space","","",28,null],[12,"n_cs_precedes","","",28,null],[12,"n_sep_by_space","","",28,null],[12,"p_sign_posn","","",28,null],[12,"n_sign_posn","","",28,null],[12,"int_p_cs_precedes","","",28,null],[12,"int_p_sep_by_space","","",28,null],[12,"int_n_cs_precedes","","",28,null],[12,"int_n_sep_by_space","","",28,null],[12,"int_p_sign_posn","","",28,null],[12,"int_n_sign_posn","","",28,null],[17,"MS_MOVE","","",null,null],[17,"LOCK_NB","","",null,null],[5,"sysctl","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"EREMOTE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[5,"signalfd","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"SIG_DFL","","",null,null],[17,"TCSETSF","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"SIGILL","","",null,null],[17,"ABMON_9","","",null,null],[17,"CS6","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"ENOENT","","",null,null],[5,"prlimit64","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[5,"unlinkat","","",null,null],[17,"ELIBSCN","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[5,"execvp","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"TCOFLUSH","","",null,null],[5,"symlink","","",null,null],[5,"nice","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"getrusage","","",null,null],[17,"MS_DIRSYNC","","",null,null],[6,"loff_t","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"SIGUSR1","","",null,null],[17,"WNOHANG","","",null,null],[5,"lsetxattr","","",null,null],[17,"ELNRNG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"O_WRONLY","","",null,null],[17,"SO_BROADCAST","","",null,null],[5,"fsync","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"MAP_LOCKED","","",null,null],[5,"mmap64","","",null,null],[5,"ftello64","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[5,"fork","","",null,{"inputs":[],"output":{"name":"i32"}}],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[5,"clock_getres","","",null,null],[5,"getppid","","",null,{"inputs":[],"output":{"name":"i32"}}],[17,"_SC_2_LOCALEDEF","","",null,null],[5,"mkfifoat","","",null,null],[5,"printf","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"cfsetospeed","","",null,null],[17,"VSUSP","","",null,null],[17,"EPROTOTYPE","","",null,null],[5,"quotactl","","",null,null],[5,"linkat","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[5,"preadv","","",null,null],[17,"F_SETFL","","",null,null],[5,"getpwuid_r","","",null,null],[17,"SIGQUIT","","",null,null],[5,"pipe2","","",null,null],[5,"mkstemps","","",null,null],[17,"SIGIO","","",null,null],[17,"BUFSIZ","","",null,null],[17,"F_GETOWN","","",null,null],[5,"getaddrinfo","","",null,null],[5,"listxattr","","",null,null],[17,"ENOPROTOOPT","","",null,null],[5,"globfree64","","",null,null],[17,"ENONET","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"SIGSTOP","","",null,null],[17,"EDOM","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"ESPIPE","","",null,null],[17,"QIF_ITIME","","",null,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",7,null],[12,"imr_interface","","",7,null],[17,"Q_SETINFO","","",null,null],[17,"IGNBRK","","",null,null],[17,"SIGSTKSZ","","",null,null],[5,"fsetpos64","","",null,null],[3,"utsname","","",null,null],[12,"sysname","","",27,null],[12,"nodename","","",27,null],[12,"release","","",27,null],[12,"version","","",27,null],[12,"machine","","",27,null],[12,"domainname","","",27,null],[3,"fd_set","","",null,null],[5,"setrlimit64","","",null,null],[5,"fgetpos64","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[5,"swapcontext","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[3,"pthread_attr_t","","",null,null],[5,"alarm","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[17,"MAP_FIXED","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"TAB3","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[5,"freelocale","","",null,null],[5,"futimes","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"EOF","","",null,null],[5,"sem_destroy","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"CLONE_FS","","",null,null],[17,"MAP_HUGETLB","","",null,null],[3,"pollfd","","",null,null],[12,"fd","","",11,null],[12,"events","","",11,null],[12,"revents","","",11,null],[5,"sched_get_priority_min","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"sysinfo","","",null,null],[17,"LOCK_SH","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"EBADMSG","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"CS8","","",null,null],[5,"sigfillset","","",null,null],[6,"nlink_t","","",null,null],[17,"TIOCSTI","","",null,null],[5,"sem_open","","",null,null],[5,"FD_SET","","",null,null],[17,"ECHOKE","","",null,null],[17,"MON_5","","",null,null],[17,"PTRACE_KILL","","",null,null],[6,"suseconds_t","","",null,null],[17,"LOG_ERR","","",null,null],[5,"glob64","","",null,null],[17,"TIOCGWINSZ","","",null,null],[5,"sem_post","","",null,null],[5,"gettimeofday","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[5,"fcntl","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[17,"TCFLSH","","",null,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",24,null],[17,"LOG_PRIMASK","","",null,null],[17,"AF_INET6","","",null,null],[5,"sigismember","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ERESTART","","",null,null],[17,"EPOLLERR","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"ABDAY_4","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"TCP_MD5SIG","","",null,null],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"if_nametoindex","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"PROT_NONE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"AF_UNIX","","",null,null],[17,"F_TEST","","",null,null],[17,"CR0","","",null,null],[17,"ENOKEY","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"fgetxattr","","",null,null],[17,"IPC_STAT","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"ENOTBLK","","",null,null],[17,"F_SETFD","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[5,"sched_get_priority_max","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"CLONE_DETACHED","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SIGHUP","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"ISIG","","",null,null],[17,"O_RDWR","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"SIGPWR","","",null,null],[6,"wchar_t","","",null,null],[5,"getegid","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"unlink","","",null,null],[17,"ABMON_6","","",null,null],[17,"ETXTBSY","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"MON_8","","",null,null],[17,"LC_NAME","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[5,"pwritev","","",null,null],[17,"RTLD_LAZY","","",null,null],[5,"epoll_wait","","",null,null],[5,"fstat64","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[5,"fsetxattr","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"TIOCMBIC","","",null,null],[5,"fpathconf","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i64"}}],[5,"tcgetattr","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"MAP_FILE","","",null,null],[5,"sendfile","","",null,null],[17,"S_IFBLK","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"MON_10","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"BS0","","",null,null],[17,"EBADSLT","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[5,"fchmod","","",null,{"inputs":[{"name":"i32"},{"name":"u32"}],"output":{"name":"i32"}}],[17,"ENOTUNIQ","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ENOSTR","","",null,null],[17,"SIGTSTP","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"S_IFREG","","",null,null],[17,"EBUSY","","",null,null],[5,"removexattr","","",null,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",14,null],[12,"sa_data","","",14,null],[17,"DT_BLK","","",null,null],[3,"fsid_t","","",null,null],[5,"wait","","",null,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",31,null],[12,"rlim_max","","",31,null],[17,"ENETRESET","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SIGUSR2","","",null,null],[6,"rlim64_t","","",null,null],[5,"dladdr","","",null,null],[17,"FIONREAD","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"IPPROTO_IP","","",null,null],[5,"duplocale","","",null,{"inputs":[{"name":"locale_t"}],"output":{"name":"locale_t"}}],[17,"LC_PAPER_MASK","","",null,null],[5,"globfree","","",null,null],[17,"SCHED_IDLE","","",null,null],[5,"chdir","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[5,"process_vm_readv","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[5,"sigemptyset","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"LOG_CRON","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"O_DSYNC","","",null,null],[17,"POLLPRI","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"EISCONN","","",null,null],[17,"AF_PACKET","","",null,null],[5,"execv","","",null,null],[17,"SIG_SETMASK","","",null,null],[5,"sem_unlink","","",null,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",65,null],[12,"fpregs","","",65,null],[17,"ENOCSI","","",null,null],[17,"AF_NETLINK","","",null,null],[5,"CPU_ZERO","","",null,null],[3,"utimbuf","","",null,null],[12,"actime","","",0,null],[12,"modtime","","",0,null],[3,"pthread_cond_t","","",null,null],[17,"CSIZE","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",58,null],[12,"loads","","",58,null],[12,"totalram","","",58,null],[12,"freeram","","",58,null],[12,"sharedram","","",58,null],[12,"bufferram","","",58,null],[12,"totalswap","","",58,null],[12,"freeswap","","",58,null],[12,"procs","","",58,null],[12,"pad","","",58,null],[12,"totalhigh","","",58,null],[12,"freehigh","","",58,null],[12,"mem_unit","","",58,null],[12,"_f","","",58,null],[17,"ST_NODIRATIME","","",null,null],[17,"DAY_3","","",null,null],[17,"TCIFLUSH","","",null,null],[5,"lchown","","",null,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",19,null],[12,"ai_family","","",19,null],[12,"ai_socktype","","",19,null],[12,"ai_protocol","","",19,null],[12,"ai_addrlen","","",19,null],[12,"ai_addr","","",19,null],[12,"ai_canonname","","",19,null],[12,"ai_next","","",19,null],[17,"TOSTOP","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"LOG_LOCAL5","","",null,null],[5,"glob","","",null,null],[17,"W_OK","","",null,null],[5,"ftruncate64","","",null,{"inputs":[{"name":"i32"},{"name":"i64"}],"output":{"name":"i32"}}],[17,"T_FMT","","",null,null],[17,"Q_GETFMT","","",null,null],[3,"pthread_mutex_t","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"EIO","","",null,null],[17,"TAB1","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[5,"dup2","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[6,"clockid_t","","",null,null],[5,"shm_open","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"AF_INET","","",null,null],[5,"WIFEXITED","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"bool"}}],[17,"EBFONT","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"ECHO","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"VTIME","","",null,null],[17,"SHM_W","","",null,null],[17,"S_IRWXG","","",null,null],[17,"SIGWINCH","","",null,null],[5,"writev","","",null,null],[5,"statfs","","",null,null],[17,"NOSTR","","",null,null],[17,"DT_DIR","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"TCP_INFO","","",null,null],[5,"readlink","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[3,"stat","","",null,null],[12,"st_dev","","",59,null],[12,"st_ino","","",59,null],[12,"st_nlink","","",59,null],[12,"st_mode","","",59,null],[12,"st_uid","","",59,null],[12,"st_gid","","",59,null],[12,"st_rdev","","",59,null],[12,"st_size","","",59,null],[12,"st_blksize","","",59,null],[12,"st_blocks","","",59,null],[12,"st_atime","","",59,null],[12,"st_atime_nsec","","",59,null],[12,"st_mtime","","",59,null],[12,"st_mtime_nsec","","",59,null],[12,"st_ctime","","",59,null],[12,"st_ctime_nsec","","",59,null],[17,"ISTRIP","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"EXIT_FAILURE","","",null,null],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"bool"}}],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"ESTRPIPE","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",62,null],[12,"exponent","","",62,null],[4,"DIR","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[5,"setcontext","","",null,null],[17,"__WNOTHREAD","","",null,null],[5,"setxattr","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[5,"mq_send","","",null,null],[17,"FLUSHO","","",null,null],[17,"S_IXGRP","","",null,null],[17,"R_OK","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"F_SETLEASE","","",null,null],[5,"sendmsg","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"IPC_RMID","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"F_SETLKW","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"IUTF8","","",null,null],[17,"_IOLBF","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"DAY_1","","",null,null],[5,"if_indextoname","","",null,null],[17,"CSTOPB","","",null,null],[17,"ELIBACC","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"SIGPROF","","",null,null],[17,"S_IWRITE","","",null,null],[17,"RTLD_NOW","","",null,null],[6,"nfds_t","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"X_OK","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[5,"localeconv","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SHM_REMAP","","",null,null],[6,"ino64_t","","",null,null],[5,"umask","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[6,"key_t","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[5,"fstatvfs","","",null,null],[5,"send","","",null,null],[17,"S_IRWXU","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"setuid","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i32"}}],[17,"RUSAGE_SELF","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"PROT_READ","","",null,null],[17,"ICANON","","",null,null],[5,"utimensat","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"ICRNL","","",null,null],[5,"sem_trywait","","",null,null],[5,"rewinddir","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"PARODD","","",null,null],[17,"S_ISGID","","",null,null],[17,"CRTSCTS","","",null,null],[5,"FD_ZERO","","",null,null],[17,"SO_REUSEADDR","","",null,null],[6,"blkcnt_t","","",null,null],[17,"S_IFLNK","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"ABMON_1","","",null,null],[5,"open64","","",null,null],[17,"DAY_2","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[6,"socklen_t","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[5,"geteuid","","",null,{"inputs":[],"output":{"name":"u32"}}],[17,"TCSETAF","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"CBAUD","","",null,null],[5,"creat","","",null,null],[17,"SHM_RND","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"ESRCH","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"SCHED_BATCH","","",null,null],[5,"lseek","","",null,{"inputs":[{"name":"i32"},{"name":"i64"},{"name":"i32"}],"output":{"name":"i64"}}],[17,"TCGETS","","",null,null],[17,"O_TRUNC","","",null,null],[17,"L_tmpnam","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"F_NOTIFY","","",null,null],[5,"sigdelset","","",null,null],[17,"IGNPAR","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[5,"setns","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"ioctl","","",null,{"inputs":[{"name":"i32"},{"name":"u64"}],"output":{"name":"i32"}}],[17,"MAP_FAILED","","",null,null],[5,"setlocale","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[5,"getsockopt","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",64,null],[12,"swd","","",64,null],[12,"ftw","","",64,null],[12,"fop","","",64,null],[12,"rip","","",64,null],[12,"rdp","","",64,null],[12,"mxcsr","","",64,null],[12,"mxcr_mask","","",64,null],[12,"_st","","",64,null],[12,"_xmm","","",64,null],[17,"GLOB_NOMATCH","","",null,null],[17,"ENOTNAM","","",null,null],[5,"epoll_create1","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"SIGURG","","",null,null],[5,"freeifaddrs","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"SYS_gettid","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",33,null],[12,"ifa_name","","",33,null],[12,"ifa_flags","","",33,null],[12,"ifa_addr","","",33,null],[12,"ifa_netmask","","",33,null],[12,"ifa_ifu","","",33,null],[12,"ifa_data","","",33,null],[5,"fscanf","","",null,null],[17,"OPOST","","",null,null],[17,"S_IFDIR","","",null,null],[5,"pclose","","",null,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",46,null],[12,"ss_flags","","",46,null],[12,"ss_size","","",46,null],[17,"ENXIO","","",null,null],[5,"getrlimit64","","",null,null],[17,"NL0","","",null,null],[5,"readlinkat","","",null,null],[17,"MON_12","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"MS_SILENT","","",null,null],[6,"rlim_t","","",null,null],[5,"recv","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SIGTTIN","","",null,null],[17,"ABMON_4","","",null,null],[5,"mq_receive","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[5,"opendir","","",null,null],[5,"epoll_create","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"WEXITED","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[5,"mkdirat","","",null,null],[17,"DAY_4","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[5,"pthread_cond_wait","","",null,null],[17,"ENAMETOOLONG","","",null,null],[5,"fremovexattr","","",null,null],[6,"pid_t","","",null,null],[17,"MADV_DOFORK","","",null,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",63,null],[17,"CLONE_NEWUSER","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"EIDRM","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[5,"pthread_detach","","",null,{"inputs":[{"name":"u64"}],"output":{"name":"i32"}}],[5,"FD_ISSET","","",null,null],[17,"ENOEXEC","","",null,null],[5,"mkostemps","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"MS_MGC_VAL","","",null,null],[5,"getlogin","","",null,null],[17,"ENOTEMPTY","","",null,null],[3,"rusage","","",null,null],[12,"ru_utime","","",4,null],[12,"ru_stime","","",4,null],[12,"ru_maxrss","","",4,null],[12,"ru_ixrss","","",4,null],[12,"ru_idrss","","",4,null],[12,"ru_isrss","","",4,null],[12,"ru_minflt","","",4,null],[12,"ru_majflt","","",4,null],[12,"ru_nswap","","",4,null],[12,"ru_inblock","","",4,null],[12,"ru_oublock","","",4,null],[12,"ru_msgsnd","","",4,null],[12,"ru_msgrcv","","",4,null],[12,"ru_nsignals","","",4,null],[12,"ru_nvcsw","","",4,null],[12,"ru_nivcsw","","",4,null],[17,"ENOTDIR","","",null,null],[5,"splice","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"E2BIG","","",null,null],[17,"IPC_CREAT","","",null,null],[5,"mq_unlink","","",null,null],[17,"VINTR","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"S_IREAD","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[5,"nl_langinfo","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"EMFILE","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[17,"LC_TIME","","",null,null],[17,"BS1","","",null,null],[5,"setlogmask","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[3,"sigset_t","","",null,null],[5,"strerror_r","","",null,null],[5,"fdopen","","",null,null],[5,"posix_fallocate","","",null,{"inputs":[{"name":"i32"},{"name":"i64"},{"name":"i64"}],"output":{"name":"i32"}}],[17,"__WALL","","",null,null],[17,"TIOCCONS","","",null,null],[3,"dirent","","",null,null],[12,"d_ino","","",29,null],[12,"d_off","","",29,null],[12,"d_reclen","","",29,null],[12,"d_type","","",29,null],[12,"d_name","","",29,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"sysconf","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i64"}}],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"BRKINT","","",null,null],[5,"mlockall","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"getsid","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"SO_DEBUG","","",null,null],[5,"setgroups","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"ENOTCONN","","",null,null],[5,"popen","","",null,null],[5,"lstat64","","",null,null],[17,"EL2HLT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"ETOOMANYREFS","","",null,null],[3,"winsize","","",null,null],[12,"ws_row","","",12,null],[12,"ws_col","","",12,null],[12,"ws_xpixel","","",12,null],[12,"ws_ypixel","","",12,null],[3,"timespec","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_nsec","","",2,null],[17,"SPLICE_F_MORE","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[6,"in_port_t","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[17,"ELOOP","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[5,"pthread_self","","",null,{"inputs":[],"output":{"name":"u64"}}],[5,"kill","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[17,"PTRACE_GETREGSET","","",null,null],[5,"utimes","","",null,null],[17,"ENOANO","","",null,null],[5,"fprintf","","",null,null],[5,"prlimit","","",null,null],[5,"mknodat","","",null,null],[17,"S_ISVTX","","",null,null],[17,"DAY_6","","",null,null],[5,"memrchr","","",null,null],[5,"FD_CLR","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[5,"accept","","",null,null],[17,"SEEK_END","","",null,null],[5,"sprintf","","",null,null],[6,"c_long","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"SIGXCPU","","",null,null],[17,"ABDAY_3","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"LOG_FTP","","",null,null],[17,"EINVAL","","",null,null],[17,"ECANCELED","","",null,null],[5,"pselect","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[6,"uid_t","","",null,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",17,null],[12,"sun_path","","",17,null],[17,"EPOLL_CTL_ADD","","",null,null],[6,"useconds_t","","",null,null],[5,"timegm","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[5,"getopt","","",null,null],[5,"getpeername","","",null,null],[17,"CRNCYSTR","","",null,null],[5,"fopen64","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ENOPKG","","",null,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",55,null],[12,"shm_segsz","","",55,null],[12,"shm_atime","","",55,null],[12,"shm_dtime","","",55,null],[12,"shm_ctime","","",55,null],[12,"shm_cpid","","",55,null],[12,"shm_lpid","","",55,null],[12,"shm_nattch","","",55,null],[17,"LOG_NOTICE","","",null,null],[17,"TCSETAW","","",null,null],[5,"mknod","","",null,null],[3,"stat64","","",null,null],[12,"st_dev","","",60,null],[12,"st_ino","","",60,null],[12,"st_nlink","","",60,null],[12,"st_mode","","",60,null],[12,"st_uid","","",60,null],[12,"st_gid","","",60,null],[12,"st_rdev","","",60,null],[12,"st_size","","",60,null],[12,"st_blksize","","",60,null],[12,"st_blocks","","",60,null],[12,"st_atime","","",60,null],[12,"st_atime_nsec","","",60,null],[12,"st_mtime","","",60,null],[12,"st_mtime_nsec","","",60,null],[12,"st_ctime","","",60,null],[12,"st_ctime_nsec","","",60,null],[17,"TAB2","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"EBADR","","",null,null],[5,"cfsetispeed","","",null,null],[5,"CPU_SET","","",null,null],[17,"TCOOFF","","",null,null],[17,"ENAVAIL","","",null,null],[17,"SIG_ERR","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"CS7","","",null,null],[17,"ECHRNG","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"ENOSPC","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[3,"sem_t","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[17,"ECHOPRT","","",null,null],[17,"ST_WRITE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"INLCR","","",null,null],[5,"pthread_join","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"EPIPE","","",null,null],[5,"sched_getscheduler","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"RLIMIT_RSS","","",null,null],[17,"VSTOP","","",null,null],[5,"bind","","",null,null],[5,"pthread_kill","","",null,{"inputs":[{"name":"u64"},{"name":"i32"}],"output":{"name":"i32"}}],[3,"timeval","","",null,null],[12,"tv_sec","","",1,null],[12,"tv_usec","","",1,null],[5,"fdatasync","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"SIGTERM","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[17,"F_DUPFD","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"MON_2","","",null,null],[17,"GLOB_ERR","","",null,null],[5,"listen","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[17,"MS_SYNC","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"ABMON_11","","",null,null],[5,"socket","","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[17,"MADV_DONTNEED","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"ST_MANDLOCK","","",null,null],[5,"getifaddrs","","",null,null],[6,"mode_t","","",null,null],[5,"lremovexattr","","",null,null],[5,"chown","","",null,null],[5,"getcwd","","",null,null],[17,"SO_OOBINLINE","","",null,null],[5,"mmap","","",null,null],[17,"TIOCEXCL","","",null,null],[6,"pthread_t","","",null,null],[6,"nl_item","","",null,null],[17,"ENOBUFS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[5,"isatty","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"TCIOFLUSH","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"DT_LNK","","",null,null],[5,"mq_close","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"sigwaitinfo","","",null,null],[17,"S_IWOTH","","",null,null],[5,"epoll_pwait","","",null,null],[17,"EALREADY","","",null,null],[17,"CODESET","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"ENOTTY","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[6,"time_t","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"ENOTSOCK","","",null,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",15,null],[12,"sin_port","","",15,null],[12,"sin_addr","","",15,null],[12,"sin_zero","","",15,null],[5,"symlinkat","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"shutdown","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[17,"ELIBBAD","","",null,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",6,null],[17,"DT_FIFO","","",null,null],[17,"LOG_CONS","","",null,null],[17,"SIGSTKFLT","","",null,null],[5,"pause","","",null,{"inputs":[],"output":{"name":"i32"}}],[17,"ABDAY_5","","",null,null],[3,"iovec","","",null,null],[12,"iov_base","","",10,null],[12,"iov_len","","",10,null],[6,"dev_t","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[5,"setgid","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i32"}}],[17,"EAGAIN","","",null,null],[17,"MADV_HWPOISON","","",null,null],[5,"forkpty","","",null,null],[5,"getloadavg","","",null,null],[17,"VKILL","","",null,null],[5,"poll","","",null,null],[5,"flock","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"S_IRUSR","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"bool"}}],[5,"process_vm_writev","","",null,null],[17,"F_GETLEASE","","",null,null],[6,"id_t","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",23,null],[12,"tm_min","","",23,null],[12,"tm_hour","","",23,null],[12,"tm_mday","","",23,null],[12,"tm_mon","","",23,null],[12,"tm_year","","",23,null],[12,"tm_wday","","",23,null],[12,"tm_yday","","",23,null],[12,"tm_isdst","","",23,null],[12,"tm_gmtoff","","",23,null],[12,"tm_zone","","",23,null],[17,"O_RSYNC","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[5,"recvmsg","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"O_NDELAY","","",null,null],[17,"SCHED_OTHER","","",null,null],[5,"openat","","",null,null],[5,"stat64","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"SIGALRM","","",null,null],[6,"cc_t","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"LOG_NEWS","","",null,null],[3,"linger","","",null,null],[12,"l_onoff","","",13,null],[12,"l_linger","","",13,null],[5,"setpriority","","",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"i32"}],"output":{"name":"i32"}}],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"TCIOFF","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"VEOL2","","",null,null],[5,"mq_getattr","","",null,null],[3,"epoll_event","","",null,null],[12,"events","","",26,null],[12,"u64","","",26,null],[5,"pthread_getaffinity_np","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[5,"shm_unlink","","",null,null],[17,"S_IRWXO","","",null,null],[3,"ipc_perm","","",null,null],[12,"__key","","",54,null],[12,"uid","","",54,null],[12,"gid","","",54,null],[12,"cuid","","",54,null],[12,"cgid","","",54,null],[12,"mode","","",54,null],[12,"__seq","","",54,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[5,"openlog","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[5,"pthread_create","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[5,"memalign","","",null,null],[5,"uselocale","","",null,{"inputs":[{"name":"locale_t"}],"output":{"name":"locale_t"}}],[17,"_SC_PAGE_SIZE","","",null,null],[3,"statfs","","",null,null],[12,"f_type","","",50,null],[12,"f_bsize","","",50,null],[12,"f_blocks","","",50,null],[12,"f_bfree","","",50,null],[12,"f_bavail","","",50,null],[12,"f_files","","",50,null],[12,"f_ffree","","",50,null],[12,"f_fsid","","",50,null],[12,"f_namelen","","",50,null],[12,"f_frsize","","",50,null],[17,"QIF_ALL","","",null,null],[17,"SIGPOLL","","",null,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",32,null],[12,"gl_pathv","","",32,null],[12,"gl_offs","","",32,null],[12,"gl_flags","","",32,null],[5,"fstat","","",null,null],[17,"HUPCL","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"SIGTTOU","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCSETS","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"SEEK_SET","","",null,null],[5,"clock_gettime","","",null,null],[17,"SO_ERROR","","",null,null],[5,"write","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"ABMON_3","","",null,null],[5,"getcontext","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"EADV","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[3,"dirent64","","",null,null],[12,"d_ino","","",30,null],[12,"d_off","","",30,null],[12,"d_reclen","","",30,null],[12,"d_type","","",30,null],[12,"d_name","","",30,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",21,null],[12,"sll_protocol","","",21,null],[12,"sll_ifindex","","",21,null],[12,"sll_hatype","","",21,null],[12,"sll_pkttype","","",21,null],[12,"sll_halen","","",21,null],[12,"sll_addr","","",21,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_attr_getstack","","",null,null],[17,"SEEK_HOLE","","",null,null],[5,"getpgrp","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"fseeko","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[5,"dup3","","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[17,"LOG_LOCAL1","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[5,"chroot","","",null,null],[17,"ABMON_12","","",null,null],[17,"EBADF","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[5,"sigaltstack","","",null,null],[5,"nl_langinfo_l","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"EFAULT","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"PIPE_BUF","","",null,null],[5,"putenv","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"DAY_7","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"ENOLCK","","",null,null],[17,"CLONE_SETTLS","","",null,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",45,null],[12,"sa_mask","","",45,null],[12,"sa_flags","","",45,null],[17,"O_SYNC","","",null,null],[17,"ABMON_2","","",null,null],[17,"USRQUOTA","","",null,null],[17,"PTRACE_DETACH","","",null,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",66,null],[12,"uc_link","","",66,null],[12,"uc_stack","","",66,null],[12,"uc_mcontext","","",66,null],[12,"uc_sigmask","","",66,null],[17,"MS_I_VERSION","","",null,null],[17,"TIOCMGET","","",null,null],[17,"CR1","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[5,"lstat","","",null,null],[5,"creat64","","",null,null],[5,"posix_madvise","","",null,null],[17,"SIGTRAP","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"SIGCHLD","","",null,null],[5,"getgroups","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"NOEXPR","","",null,null],[17,"ERA_T_FMT","","",null,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",25,null],[12,"dli_fbase","","",25,null],[12,"dli_sname","","",25,null],[12,"dli_saddr","","",25,null],[6,"fsfilcnt_t","","",null,null],[5,"usleep","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i32"}}],[6,"__priority_which_t","","",null,null],[5,"lseek64","","",null,{"inputs":[{"name":"i32"},{"name":"i64"},{"name":"i32"}],"output":{"name":"i64"}}],[17,"MON_9","","",null,null],[17,"RADIXCHAR","","",null,null],[5,"ftruncate","","",null,{"inputs":[{"name":"i32"},{"name":"i64"}],"output":{"name":"i32"}}],[5,"syscall","","",null,{"inputs":[{"name":"i64"}],"output":{"name":"i64"}}],[17,"SIGSEGV","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"SHUT_RDWR","","",null,null],[5,"sem_init","","",null,null],[5,"mq_setattr","","",null,null],[17,"S_IXUSR","","",null,null],[17,"SHM_R","","",null,null],[3,"ucred","","",null,null],[12,"pid","","",49,null],[12,"uid","","",49,null],[12,"gid","","",49,null],[17,"TCOON","","",null,null],[5,"faccessat","","",null,null],[5,"setpgid","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"shmctl","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[5,"sigwait","","",null,null],[5,"snprintf","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"ABMON_8","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"_IONBF","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IGNCR","","",null,null],[17,"VERASE","","",null,null],[5,"setsid","","",null,{"inputs":[],"output":{"name":"i32"}}],[17,"EHOSTUNREACH","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[5,"prctl","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[6,"__fsword_t","","",null,null],[5,"setrlimit","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"O_APPEND","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[6,"pthread_key_t","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"D_T_FMT","","",null,null],[6,"speed_t","","",null,null],[17,"MON_4","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"__WCLONE","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[5,"ttyname","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"FF0","","",null,null],[17,"MON_3","","",null,null],[5,"fstatat","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[5,"raise","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"_SC_2_FORT_RUN","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[5,"pthread_key_delete","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i32"}}],[5,"tcgetpgrp","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"LC_IDENTIFICATION","","",null,null],[17,"SO_LINGER","","",null,null],[3,"termios","","",null,null],[12,"c_iflag","","",52,null],[12,"c_oflag","","",52,null],[12,"c_cflag","","",52,null],[12,"c_lflag","","",52,null],[12,"c_line","","",52,null],[12,"c_cc","","",52,null],[12,"c_ispeed","","",52,null],[12,"c_ospeed","","",52,null],[17,"MAP_POPULATE","","",null,null],[5,"sigtimedwait","","",null,null],[17,"ENODATA","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",41,null],[12,"ssi_errno","","",41,null],[12,"ssi_code","","",41,null],[12,"ssi_pid","","",41,null],[12,"ssi_uid","","",41,null],[12,"ssi_fd","","",41,null],[12,"ssi_tid","","",41,null],[12,"ssi_band","","",41,null],[12,"ssi_overrun","","",41,null],[12,"ssi_trapno","","",41,null],[12,"ssi_status","","",41,null],[12,"ssi_int","","",41,null],[12,"ssi_ptr","","",41,null],[12,"ssi_utime","","",41,null],[12,"ssi_stime","","",41,null],[12,"ssi_addr","","",41,null],[17,"SIGFPE","","",null,null],[17,"ST_RDONLY","","",null,null],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"sem_wait","","",null,null],[17,"PARMRK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"ENOSR","","",null,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",16,null],[12,"sin6_port","","",16,null],[12,"sin6_flowinfo","","",16,null],[12,"sin6_addr","","",16,null],[12,"sin6_scope_id","","",16,null],[6,"greg_t","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"VLNEXT","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"O_EXCL","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ELIBEXEC","","",null,null],[3,"pthread_rwlock_t","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"EROFS","","",null,null],[5,"realpath","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"F_SETOWN","","",null,null],[5,"stat","","",null,null],[17,"EPOLLIN","","",null,null],[17,"ENOMSG","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"EPOLLRDHUP","","",null,null],[5,"localtime_r","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"MAP_STACK","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"ENOSYS","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"EFBIG","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ECHONL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"POLLNVAL","","",null,null],[17,"TCSBRK","","",null,null],[17,"DAY_5","","",null,null],[17,"ENETUNREACH","","",null,null],[5,"tcflush","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[17,"GLOB_NOSORT","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"ABMON_7","","",null,null],[5,"madvise","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"TCSETA","","",null,null],[17,"EUNATCH","","",null,null],[17,"ECHOK","","",null,null],[5,"mlock","","",null,null],[5,"syslog","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"PM_STR","","",null,null],[5,"tcsendbreak","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[17,"EPROTONOSUPPORT","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"LC_ALL","","",null,null],[17,"SIGCONT","","",null,null],[17,"VREPRINT","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"MON_11","","",null,null],[17,"VSTART","","",null,null],[17,"SIGKILL","","",null,null],[17,"IXANY","","",null,null],[17,"ECHOE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"O_ASYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[5,"pread","","",null,null],[5,"mkstemp","","",null,null],[17,"PENDIN","","",null,null],[3,"cpu_set_t","","",null,null],[17,"F_SETLK","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[6,"blksize_t","","",null,null],[17,"MS_ACTIVE","","",null,null],[5,"pthread_sigmask","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"EREMCHG","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[5,"munlock","","",null,null],[5,"close","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"fchownat","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"VWERASE","","",null,null],[5,"mq_open","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"MAP_NORESERVE","","",null,null],[3,"in_addr","","",null,null],[12,"s_addr","","",5,null],[17,"SIGPIPE","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"EEXIST","","",null,null],[5,"sleep","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"read","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"TAB0","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"LOG_PID","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"MON_6","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"ABDAY_6","","",null,null],[6,"sa_family_t","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"makecontext","","",null,null],[5,"shmdt","","",null,null],[17,"IPC_INFO","","",null,null],[5,"getxattr","","",null,null],[17,"QIF_BTIME","","",null,null],[5,"dlclose","","",null,null],[5,"mktime","","",null,null],[17,"F_GETFL","","",null,null],[5,"gmtime_r","","",null,null],[17,"ECHOCTL","","",null,null],[5,"pwrite","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"EDQUOT","","",null,null],[17,"DT_SOCK","","",null,null],[17,"ST_NOSUID","","",null,null],[5,"setenv","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"clone","","",null,null],[17,"POLLIN","","",null,null],[5,"getdtablesize","","",null,{"inputs":[],"output":{"name":"i32"}}],[17,"LC_MESSAGES_MASK","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",40,null],[12,"dqb_bsoftlimit","","",40,null],[12,"dqb_curspace","","",40,null],[12,"dqb_ihardlimit","","",40,null],[12,"dqb_isoftlimit","","",40,null],[12,"dqb_curinodes","","",40,null],[12,"dqb_btime","","",40,null],[12,"dqb_itime","","",40,null],[12,"dqb_valid","","",40,null],[17,"_SC_LINE_MAX","","",null,null],[5,"sched_yield","","",null,{"inputs":[],"output":{"name":"i32"}}],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",8,null],[12,"ipv6mr_interface","","",8,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"MS_NOEXEC","","",null,null],[5,"backtrace","","",null,null],[5,"execve","","",null,null],[17,"EISNAM","","",null,null],[4,"fpos64_t","","",null,null],[17,"LOG_LOCAL0","","",null,null],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"WCONTINUED","","",null,null],[17,"MS_REC","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[5,"statvfs","","",null,null],[5,"sendto","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"SIGABRT","","",null,null],[17,"SHUT_WR","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"EXTPROC","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"S_IEXEC","","",null,null],[5,"pthread_getspecific","","",null,null],[17,"Q_GETINFO","","",null,null],[5,"cfgetospeed","","",null,null],[5,"dup","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"getgid","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"closelog","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EL3RST","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"EPROTO","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"EXFULL","","",null,null],[17,"ONLCR","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"F_TLOCK","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_PERROR","","",null,null],[5,"getsockname","","",null,null],[17,"IXOFF","","",null,null],[17,"CLONE_VFORK","","",null,null],[5,"umount2","","",null,null],[5,"posix_fadvise","","",null,{"inputs":[{"name":"i32"},{"name":"i64"},{"name":"i64"},{"name":"i32"}],"output":{"name":"i32"}}],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"MADV_WILLNEED","","",null,null],[5,"link","","",null,null],[17,"TCGETA","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"VT0","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"EINTR","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"WUNTRACED","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[6,"clock_t","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"RAND_MAX","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"PROT_EXEC","","",null,null],[5,"tcdrain","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"INPCK","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"EPERM","","",null,null],[6,"c_ulong","","",null,null],[5,"unsetenv","","",null,null],[17,"POLLOUT","","",null,null],[5,"__errno_location","","",null,null],[5,"pread64","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"ABMON_10","","",null,null],[5,"signal","","",null,{"inputs":[{"name":"i32"},{"name":"usize"}],"output":{"name":"usize"}}],[17,"SOL_SOCKET","","",null,null],[17,"ETIME","","",null,null],[17,"AM_STR","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"THOUSEP","","",null,null],[5,"open","","",null,null],[17,"QIF_INODES","","",null,null],[5,"eventfd","","",null,{"inputs":[{"name":"u32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"gai_strerror","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"EDEADLK","","",null,null],[17,"IEXTEN","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"EDEADLOCK","","",null,null],[6,"fsblkcnt_t","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"PATH_MAX","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CREAD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",20,null],[12,"nl_pid","","",20,null],[12,"nl_groups","","",20,null],[17,"YESEXPR","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"O_CREAT","","",null,null],[6,"off64_t","","",null,null],[5,"openpty","","",null,null],[17,"EDOTDOT","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"RLIMIT_CPU","","",null,null],[5,"renameat","","",null,null],[17,"SIGBUS","","",null,null],[17,"LC_PAPER","","",null,null],[5,"pipe","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",43,null],[12,"mq_maxmsg","","",43,null],[12,"mq_msgsize","","",43,null],[12,"mq_curmsgs","","",43,null],[17,"SA_RESTART","","",null,null],[5,"mkfifo","","",null,null],[5,"sigaction","","",null,null],[17,"ECHILD","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"ERA","","",null,null],[17,"CLOCAL","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[5,"msync","","",null,null],[17,"SIGINT","","",null,null],[5,"fseeko64","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[5,"freopen64","","",null,null],[5,"sigaddset","","",null,null],[5,"nanosleep","","",null,null],[17,"ERFKILL","","",null,null],[5,"munlockall","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"umount","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[5,"access","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"TMP_MAX","","",null,null],[17,"S_ISUID","","",null,null],[5,"setsockopt","","",null,null],[17,"ESTALE","","",null,null],[17,"SIGIOT","","",null,null],[17,"VEOF","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[5,"pthread_cond_destroy","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"SO_TYPE","","",null,null],[17,"LOCK_EX","","",null,null],[17,"CS5","","",null,null],[17,"PARENB","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[5,"vmsplice","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[5,"getrlimit","","",null,null],[5,"lgetxattr","","",null,null],[17,"IMAXBEL","","",null,null],[5,"cfgetispeed","","",null,null],[5,"getpriority","","",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"i32"}}],[17,"MS_SHARED","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"IPC_SET","","",null,null],[17,"LOG_LPR","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"SCHED_RR","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"MS_SLAVE","","",null,null],[5,"pthread_mutex_init","","",null,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",48,null],[12,"gl_pathv","","",48,null],[12,"gl_offs","","",48,null],[12,"gl_flags","","",48,null],[17,"ERANGE","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[5,"rmdir","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"CLONE_IO","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[5,"unshare","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"TIOCMSET","","",null,null],[17,"VEOL","","",null,null],[17,"_SC_VERSION","","",null,null],[5,"mkdtemp","","",null,null],[17,"SHUT_RD","","",null,null],[5,"sethostname","","",null,null],[17,"ENFILE","","",null,null],[6,"ino_t","","",null,null],[5,"fstatfs","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"MON_7","","",null,null],[17,"IP_HDRINCL","","",null,null],[5,"epoll_ctl","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"TCSETSW","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"NCCS","","",null,null],[5,"tee","","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"usize"},{"name":"u32"}],"output":{"name":"isize"}}],[3,"rlimit","","",null,null],[12,"rlim_cur","","",3,null],[12,"rlim_max","","",3,null],[17,"FF1","","",null,null],[17,"MAP_32BIT","","",null,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",18,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCION","","",null,null],[5,"pthread_key_create","","",null,null],[5,"getnameinfo","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"TCP_REPAIR","","",null,null],[5,"sched_getcpu","","",null,{"inputs":[],"output":{"name":"i32"}}],[17,"MS_BIND","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[3,"msghdr","","",null,null],[12,"msg_name","","",51,null],[12,"msg_namelen","","",51,null],[12,"msg_iov","","",51,null],[12,"msg_iovlen","","",51,null],[12,"msg_control","","",51,null],[12,"msg_controllen","","",51,null],[12,"msg_flags","","",51,null],[5,"newlocale","","",null,null],[5,"fileno","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"FIOCLEX","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"MAP_PRIVATE","","",null,null],[6,"c_char","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"D_FMT","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[5,"shmat","","",null,null],[5,"scanf","","",null,null],[17,"CR2","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"EHWPOISON","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"TCSANOW","","",null,null],[5,"ptrace","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i64"}}],[3,"passwd","","",null,null],[12,"pw_name","","",38,null],[12,"pw_passwd","","",38,null],[12,"pw_uid","","",38,null],[12,"pw_gid","","",38,null],[12,"pw_gecos","","",38,null],[12,"pw_dir","","",38,null],[12,"pw_shell","","",38,null],[5,"mincore","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[6,"mqd_t","","",null,null],[5,"daemon","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[17,"EMULTIHOP","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"S_IWUSR","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[5,"chmod","","",null,null],[17,"EOPNOTSUPP","","",null,null],[6,"sighandler_t","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"POLLHUP","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"EXDEV","","",null,null],[5,"tcflow","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[17,"PTRACE_SYSCALL","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"CR3","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"EILSEQ","","",null,null],[5,"shmget","","",null,{"inputs":[{"name":"i32"},{"name":"usize"},{"name":"i32"}],"output":{"name":"i32"}}],[17,"ESRMNT","","",null,null],[5,"waitpid","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[5,"utime","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"F_GETLK","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"QIF_TIMES","","",null,null],[5,"mprotect","","",null,null],[5,"readv","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"WSTOPPED","","",null,null],[5,"llistxattr","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[5,"readahead","","",null,{"inputs":[{"name":"i32"},{"name":"i64"},{"name":"usize"}],"output":{"name":"isize"}}],[17,"MS_NODIRATIME","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"S_IFMT","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"LC_COLLATE","","",null,null],[5,"dlopen","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"LOG_INFO","","",null,null],[17,"CLONE_VM","","",null,null],[17,"S_IWGRP","","",null,null],[17,"IPC_NOWAIT","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"socketpair","","",null,null],[3,"hostent","","",null,null],[12,"h_name","","",9,null],[12,"h_aliases","","",9,null],[12,"h_addrtype","","",9,null],[12,"h_length","","",9,null],[12,"h_addr_list","","",9,null],[5,"readdir_r","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"SIGSYS","","",null,null],[17,"TIOCINQ","","",null,null],[5,"tmpfile64","","",null,null],[17,"YESSTR","","",null,null],[5,"pthread_cond_signal","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"LOG_USER","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"TCP_CORK","","",null,null],[5,"uname","","",null,null],[5,"recvfrom","","",null,null],[17,"ENOLINK","","",null,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",47,null],[12,"si_errno","","",47,null],[12,"si_code","","",47,null],[12,"_pad","","",47,null],[17,"PTHREAD_STACK_MIN","","",null,null],[5,"pwrite64","","",null,null],[6,"shmatt_t","","",null,null],[17,"Q_SYNC","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"PRIO_USER","","",null,null],[17,"EUSERS","","",null,null],[5,"fallocate","","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i64"},{"name":"i64"}],"output":{"name":"i32"}}],[17,"PRIO_PGRP","","",null,null],[5,"flistxattr","","",null,null],[17,"F_LOCK","","",null,null],[17,"O_FSYNC","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"LOG_SYSLOG","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_attr_init","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"DT_CHR","","",null,null],[17,"EPOLLET","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[5,"pthread_attr_destroy","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[5,"sched_getaffinity","","",null,null],[17,"VQUIT","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"ABMON_5","","",null,null],[17,"FIONBIO","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"MON_1","","",null,null],[17,"EACCES","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[5,"dlerror","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"IP_TTL","","",null,null],[17,"O_DIRECT","","",null,null],[5,"WTERMSIG","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"CLONE_THREAD","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"EKEYREJECTED","","",null,null],[5,"ioc_dir","nix::sys::ioctl","Extracts the &quot;direction&quot; (read/write/none) from an encoded ioctl command.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[5,"ioc_type","","Extracts the type from an encoded ioctl command.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"ioc_nr","","Extracts the ioctl number from an encoded ioctl command.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"ioc_size","","Extracts the size from an encoded ioctl command.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[17,"NRBITS","","",null,null],[17,"TYPEBITS","","",null,null],[17,"NONE","","",null,null],[17,"READ","","",null,null],[17,"WRITE","","",null,null],[17,"SIZEBITS","","",null,null],[17,"DIRBITS","","",null,null],[17,"NRSHIFT","","",null,null],[17,"TYPESHIFT","","",null,null],[17,"SIZESHIFT","","",null,null],[17,"DIRSHIFT","","",null,null],[17,"NRMASK","","",null,null],[17,"TYPEMASK","","",null,null],[17,"SIZEMASK","","",null,null],[17,"DIRMASK","","",null,null],[17,"IN","","",null,null],[17,"OUT","","",null,null],[17,"INOUT","","",null,null],[17,"SIZE_MASK","","",null,null],[0,"sendfile","nix::sys","",null,null],[5,"sendfile","nix::sys::sendfile","",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"},{"name":"option"},{"name":"usize"}],"output":{"name":"result"}}],[0,"signal","nix::sys","",null,null],[17,"SIGHUP","nix::sys::signal","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"SIGTRAP","","",null,null],[17,"SIGIOT","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[3,"SaFlag","","",null,null],[3,"SigFlag","","",null,null],[3,"SigSet","","",null,null],[3,"SigAction","","",null,null],[4,"SigHandler","","",null,null],[13,"SigDfl","","",91,null],[13,"SigIgn","","",91,null],[13,"Handler","","",91,null],[13,"SigAction","","",91,null],[5,"sigaction","","",null,{"inputs":[{"name":"signum"},{"name":"sigaction"}],"output":{"name":"result"}}],[5,"pthread_sigmask","","Manages the signal mask (set of blocked signals) for the calling thread.",null,{"inputs":[{"name":"sigflag"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[5,"kill","","",null,{"inputs":[{"name":"pid_t"},{"name":"signum"}],"output":{"name":"result"}}],[5,"raise","","",null,{"inputs":[{"name":"signum"}],"output":{"name":"result"}}],[6,"SigNum","","",null,null],[17,"SIGEMT","","",null,null],[17,"NSIG","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"SIG_SETMASK","","",null,null],[11,"hash","","",92,null],[11,"cmp","","",92,null],[11,"partial_cmp","","",92,null],[11,"lt","","",92,null],[11,"le","","",92,null],[11,"gt","","",92,null],[11,"ge","","",92,null],[11,"clone","","",92,null],[11,"eq","","",92,null],[11,"ne","","",92,null],[11,"fmt","","",92,null],[11,"empty","","Returns an empty set of flags.",92,{"inputs":[],"output":{"name":"saflag"}}],[11,"all","","Returns the set containing all flags.",92,{"inputs":[],"output":{"name":"saflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",92,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",92,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",92,{"inputs":[{"name":"c_int"}],"output":{"name":"saflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",92,null],[11,"is_all","","Returns `true` if all flags are currently set.",92,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",92,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",92,null],[11,"insert","","Inserts the specified flags in-place.",92,null],[11,"remove","","Removes the specified flags in-place.",92,null],[11,"toggle","","Toggles the specified flags in-place.",92,null],[11,"bitor","","Returns the union of the two sets of flags.",92,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",92,null],[11,"bitand","","Returns the intersection between the two sets of flags.",92,null],[11,"sub","","Returns the set difference of the two sets of flags.",92,null],[11,"not","","Returns the complement of this set of flags.",92,null],[11,"from_iter","","",92,{"inputs":[{"name":"t"}],"output":{"name":"saflag"}}],[11,"hash","","",93,null],[11,"cmp","","",93,null],[11,"partial_cmp","","",93,null],[11,"lt","","",93,null],[11,"le","","",93,null],[11,"gt","","",93,null],[11,"ge","","",93,null],[11,"clone","","",93,null],[11,"eq","","",93,null],[11,"ne","","",93,null],[11,"fmt","","",93,null],[11,"empty","","Returns an empty set of flags.",93,{"inputs":[],"output":{"name":"sigflag"}}],[11,"all","","Returns the set containing all flags.",93,{"inputs":[],"output":{"name":"sigflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",93,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",93,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",93,{"inputs":[{"name":"c_int"}],"output":{"name":"sigflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",93,null],[11,"is_all","","Returns `true` if all flags are currently set.",93,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",93,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",93,null],[11,"insert","","Inserts the specified flags in-place.",93,null],[11,"remove","","Removes the specified flags in-place.",93,null],[11,"toggle","","Toggles the specified flags in-place.",93,null],[11,"bitor","","Returns the union of the two sets of flags.",93,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",93,null],[11,"bitand","","Returns the intersection between the two sets of flags.",93,null],[11,"sub","","Returns the set difference of the two sets of flags.",93,null],[11,"not","","Returns the complement of this set of flags.",93,null],[11,"from_iter","","",93,{"inputs":[{"name":"t"}],"output":{"name":"sigflag"}}],[11,"clone","","",94,null],[11,"all","","",94,{"inputs":[],"output":{"name":"sigset"}}],[11,"empty","","",94,{"inputs":[],"output":{"name":"sigset"}}],[11,"add","","",94,null],[11,"remove","","",94,null],[11,"contains","","",94,null],[11,"thread_get_mask","","Gets the currently blocked (masked) set of signals for the calling thread.",94,{"inputs":[],"output":{"name":"result"}}],[11,"thread_set_mask","","Sets the set of signals as the signal mask for the calling thread.",94,null],[11,"thread_block","","Adds the set of signals to the signal mask for the calling thread.",94,null],[11,"thread_unblock","","Removes the set of signals from the signal mask for the calling thread.",94,null],[11,"thread_swap_mask","","Sets the set of signals as the signal mask, and returns the old mask.",94,null],[11,"wait","","Suspends execution of the calling thread until one of the signals in the\nsignal mask becomes pending, and returns the accepted signal.",94,null],[11,"as_ref","","",94,null],[11,"eq","","",91,null],[11,"ne","","",91,null],[11,"clone","","",91,null],[11,"new","","This function will set or unset the flag `SA_SIGINFO` depending on the\ntype of the `handler` argument.",95,{"inputs":[{"name":"sighandler"},{"name":"saflag"},{"name":"sigset"}],"output":{"name":"sigaction"}}],[0,"socket","nix::sys","Socket interface functions",null,null],[3,"in_addr","nix::sys::socket","",null,null],[12,"s_addr","","",5,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",6,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",14,null],[12,"sa_data","","",14,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",15,null],[12,"sin_port","","",15,null],[12,"sin_addr","","",15,null],[12,"sin_zero","","",15,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",16,null],[12,"sin6_port","","",16,null],[12,"sin6_flowinfo","","",16,null],[12,"sin6_addr","","",16,null],[12,"sin6_scope_id","","",16,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",17,null],[12,"sun_path","","",17,null],[6,"sa_family_t","","",null,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",18,null],[3,"UnixAddr","","A wrapper around sockaddr_un. We track the length of sun_path,\nbecause it may not be null-terminated (unconnected and abstract\nsockets). Note that the actual sockaddr length is greater by\nsize_of::&lt;sa_family_t&gt;().",null,null],[12,"0","","",96,null],[12,"1","","",96,null],[3,"Ipv4Addr","","",null,null],[12,"0","","",97,null],[3,"Ipv6Addr","","",null,null],[12,"0","","",98,null],[3,"NetlinkAddr","","",null,null],[12,"0","","",99,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",100,null],[12,"imr_interface","","",100,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",101,null],[12,"ipv6mr_interface","","",101,null],[3,"MsgFlags","","",null,null],[3,"SockFlag","","",null,null],[3,"CmsgSpace","","A structure used to make room in a cmsghdr passed to recvmsg. The\nsize and alignment match that of a cmsghdr followed by a T, but the\nfields are not accessible, as the actual types will change on a call\nto recvmsg.",null,null],[3,"RecvMsg","","",null,null],[12,"bytes","","",102,null],[12,"address","","",102,null],[12,"flags","","",102,null],[3,"CmsgIterator","","",null,null],[3,"linger","","",null,null],[12,"l_onoff","","",103,null],[12,"l_linger","","",103,null],[3,"ucred","","",null,null],[4,"AddressFamily","","",null,null],[13,"Unix","","",104,null],[13,"Inet","","",104,null],[13,"Inet6","","",104,null],[13,"Netlink","","",104,null],[13,"Packet","","",104,null],[4,"SockAddr","","Represents a socket address",null,null],[13,"Inet","","",105,null],[13,"Unix","","",105,null],[13,"Netlink","","",105,null],[4,"InetAddr","","",null,null],[13,"V4","","",106,null],[13,"V6","","",106,null],[4,"IpAddr","","",null,null],[13,"V4","","",107,null],[13,"V6","","",107,null],[4,"SockType","","",null,null],[13,"Stream","","",108,null],[13,"Datagram","","",108,null],[13,"SeqPacket","","",108,null],[13,"Raw","","",108,null],[13,"Rdm","","",108,null],[4,"ControlMessage","","A type-safe wrapper around a single control message. More types may\nbe added to this enum; do not exhaustively pattern-match it.\n[Further reading](http://man7.org/linux/man-pages/man3/cmsg.3.html)",null,null],[13,"ScmRights","","A message of type SCM_RIGHTS, containing an array of file\ndescriptors passed between processes. See the description in the\n&quot;Ancillary messages&quot; section of the\n[unix(7) man page](http://man7.org/linux/man-pages/man7/unix.7.html).",109,null],[4,"SockLevel","","The protocol level at which to get / set socket options. Used as an\nargument to `getsockopt` and `setsockopt`.",null,null],[13,"Socket","","",110,null],[13,"Tcp","","",110,null],[13,"Ip","","",110,null],[13,"Ipv6","","",110,null],[13,"Udp","","",110,null],[13,"Netlink","","",110,null],[4,"Shutdown","","",null,null],[13,"Read","","Further receptions will be disallowed.",111,null],[13,"Write","","Further  transmissions will be disallowed.",111,null],[13,"Both","","Further receptions and transmissions will be disallowed.",111,null],[5,"sendmsg","","Send data in scatter-gather vectors to a socket, possibly accompanied\nby ancillary data. Optionally direct the message at the given address,\nas with sendto.",null,null],[5,"recvmsg","","Receive message in scatter-gather vectors from a socket, and\noptionally receive ancillary data into the provided buffer.\nIf no ancillary data is desired, use () as the type parameter.",null,null],[5,"socket","","Create an endpoint for communication",null,{"inputs":[{"name":"addressfamily"},{"name":"socktype"},{"name":"sockflag"},{"name":"c_int"}],"output":{"name":"result"}}],[5,"socketpair","","Create a pair of connected sockets",null,{"inputs":[{"name":"addressfamily"},{"name":"socktype"},{"name":"c_int"},{"name":"sockflag"}],"output":{"name":"result"}}],[5,"listen","","Listen for connections on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"usize"}],"output":{"name":"result"}}],[5,"bind","","Bind a name to a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockaddr"}],"output":{"name":"result"}}],[5,"accept","","Accept a connection on a socket",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"accept4","","Accept a connection on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockflag"}],"output":{"name":"result"}}],[5,"connect","","Initiate a connection on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockaddr"}],"output":{"name":"result"}}],[5,"recv","","Receive data from a connection-oriented socket. Returns the number of\nbytes read",null,null],[5,"recvfrom","","Receive data from a connectionless or connection-oriented socket. Returns\nthe number of bytes read and the socket address of the sender.",null,null],[5,"sendto","","",null,null],[5,"send","","Send data to a connection-oriented socket. Returns the number of bytes read",null,null],[5,"getsockopt","","Get the current value for the requested socket option",null,{"inputs":[{"name":"rawfd"},{"name":"o"}],"output":{"name":"result"}}],[5,"setsockopt","","Sets the value for the requested socket option",null,{"inputs":[{"name":"rawfd"},{"name":"o"},{"name":"val"}],"output":{"name":"result"}}],[5,"getpeername","","Get the address of the peer connected to the socket `fd`.",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"getsockname","","Get the current address to which the socket `fd` is bound.",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"sockaddr_storage_to_addr","","",null,{"inputs":[{"name":"sockaddr_storage"},{"name":"usize"}],"output":{"name":"result"}}],[5,"shutdown","","Shut down part of a full-duplex connection.",null,{"inputs":[{"name":"rawfd"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"clone","","",99,null],[11,"eq","","",99,null],[11,"hash","","",99,null],[11,"new","","",99,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"netlinkaddr"}}],[11,"pid","","",99,null],[11,"groups","","",99,null],[11,"fmt","","",99,null],[11,"hash","","",104,null],[11,"fmt","","",104,null],[11,"eq","","",104,null],[11,"clone","","",104,null],[11,"from_std","","",106,{"inputs":[{"name":"socketaddr"}],"output":{"name":"inetaddr"}}],[11,"new","","",106,{"inputs":[{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"inetaddr"}}],[11,"ip","","Gets the IP address associated with this socket address.",106,null],[11,"port","","Gets the port number associated with this socket address",106,null],[11,"to_std","","",106,null],[11,"to_str","","",106,null],[11,"eq","","",106,null],[11,"hash","","",106,null],[11,"clone","","",106,null],[11,"fmt","","",106,null],[11,"new_v4","","Create a new IpAddr that contains an IPv4 address.",107,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipaddr"}}],[11,"new_v6","","Create a new IpAddr that contains an IPv6 address.",107,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipaddr"}}],[11,"fmt","","",107,null],[11,"new","","",97,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"from_std","","",97,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"any","","",97,{"inputs":[],"output":{"name":"ipv4addr"}}],[11,"octets","","",97,null],[11,"to_std","","",97,null],[11,"eq","","",97,null],[11,"hash","","",97,null],[11,"clone","","",97,null],[11,"fmt","","",97,null],[11,"clone","","",98,null],[11,"new","","",98,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"from_std","","",98,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Return the eight 16-bit segments that make up this address",98,null],[11,"to_std","","",98,null],[11,"fmt","","",98,null],[11,"new","","Create a new sockaddr_un representing a filesystem path.",96,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"new_abstract","","Create a new sockaddr_un representing an address in the\n&quot;abstract namespace&quot;. This is a Linux-specific extension,\nprimarily used to allow chrooted processes to communicate with\nspecific daemons.",96,null],[11,"path","","If this address represents a filesystem path, return that path.",96,null],[11,"eq","","",96,null],[11,"hash","","",96,null],[11,"clone","","",96,null],[11,"fmt","","",96,null],[11,"new_inet","","",105,{"inputs":[{"name":"inetaddr"}],"output":{"name":"sockaddr"}}],[11,"new_unix","","",105,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"new_netlink","","",105,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"sockaddr"}}],[11,"family","","",105,null],[11,"to_str","","",105,null],[11,"as_ffi_pair","","",105,null],[11,"eq","","",105,null],[11,"hash","","",105,null],[11,"clone","","",105,null],[11,"fmt","","",105,null],[11,"hash","","",112,null],[11,"cmp","","",112,null],[11,"partial_cmp","","",112,null],[11,"lt","","",112,null],[11,"le","","",112,null],[11,"gt","","",112,null],[11,"ge","","",112,null],[11,"clone","","",112,null],[11,"eq","","",112,null],[11,"ne","","",112,null],[11,"fmt","","",112,null],[11,"empty","","Returns an empty set of flags.",112,{"inputs":[],"output":{"name":"msgflags"}}],[11,"all","","Returns the set containing all flags.",112,{"inputs":[],"output":{"name":"msgflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",112,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",112,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",112,{"inputs":[{"name":"c_int"}],"output":{"name":"msgflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",112,null],[11,"is_all","","Returns `true` if all flags are currently set.",112,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",112,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",112,null],[11,"insert","","Inserts the specified flags in-place.",112,null],[11,"remove","","Removes the specified flags in-place.",112,null],[11,"toggle","","Toggles the specified flags in-place.",112,null],[11,"bitor","","Returns the union of the two sets of flags.",112,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",112,null],[11,"bitand","","Returns the intersection between the two sets of flags.",112,null],[11,"sub","","Returns the set difference of the two sets of flags.",112,null],[11,"not","","Returns the complement of this set of flags.",112,null],[11,"from_iter","","",112,{"inputs":[{"name":"t"}],"output":{"name":"msgflags"}}],[11,"clone","","",100,null],[11,"fmt","","",100,null],[11,"new","","",100,{"inputs":[{"name":"ipv4addr"},{"name":"option"}],"output":{"name":"ip_mreq"}}],[11,"new","","",101,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6_mreq"}}],[0,"sockopt","","",null,null],[3,"ReuseAddr","nix::sys::socket::sockopt","",null,null],[3,"ReusePort","","",null,null],[3,"TcpNoDelay","","",null,null],[3,"Linger","","",null,null],[3,"IpAddMembership","","",null,null],[3,"IpDropMembership","","",null,null],[3,"Ipv6AddMembership","","",null,null],[3,"Ipv6DropMembership","","",null,null],[3,"IpMulticastTtl","","",null,null],[3,"IpMulticastLoop","","",null,null],[3,"ReceiveTimeout","","",null,null],[3,"SendTimeout","","",null,null],[3,"Broadcast","","",null,null],[3,"OobInline","","",null,null],[3,"SocketError","","",null,null],[3,"KeepAlive","","",null,null],[3,"PeerCredentials","","",null,null],[3,"TcpKeepIdle","","",null,null],[3,"RcvBuf","","",null,null],[3,"SndBuf","","",null,null],[3,"RcvBufForce","","",null,null],[3,"SndBufForce","","",null,null],[3,"SockType","","",null,null],[3,"AcceptConn","","",null,null],[11,"fmt","","",113,null],[11,"clone","","",113,null],[11,"set","","",113,null],[11,"get","","",113,null],[11,"fmt","","",114,null],[11,"clone","","",114,null],[11,"set","","",114,null],[11,"get","","",114,null],[11,"fmt","","",115,null],[11,"clone","","",115,null],[11,"set","","",115,null],[11,"get","","",115,null],[11,"fmt","","",116,null],[11,"clone","","",116,null],[11,"set","","",116,null],[11,"get","","",116,null],[11,"fmt","","",117,null],[11,"clone","","",117,null],[11,"set","","",117,null],[11,"fmt","","",118,null],[11,"clone","","",118,null],[11,"set","","",118,null],[11,"fmt","","",119,null],[11,"clone","","",119,null],[11,"set","","",119,null],[11,"fmt","","",120,null],[11,"clone","","",120,null],[11,"set","","",120,null],[11,"fmt","","",121,null],[11,"clone","","",121,null],[11,"set","","",121,null],[11,"get","","",121,null],[11,"fmt","","",122,null],[11,"clone","","",122,null],[11,"set","","",122,null],[11,"get","","",122,null],[11,"fmt","","",123,null],[11,"clone","","",123,null],[11,"set","","",123,null],[11,"get","","",123,null],[11,"fmt","","",124,null],[11,"clone","","",124,null],[11,"set","","",124,null],[11,"get","","",124,null],[11,"fmt","","",125,null],[11,"clone","","",125,null],[11,"set","","",125,null],[11,"get","","",125,null],[11,"fmt","","",126,null],[11,"clone","","",126,null],[11,"set","","",126,null],[11,"get","","",126,null],[11,"fmt","","",127,null],[11,"clone","","",127,null],[11,"get","","",127,null],[11,"fmt","","",128,null],[11,"clone","","",128,null],[11,"set","","",128,null],[11,"get","","",128,null],[11,"fmt","","",129,null],[11,"clone","","",129,null],[11,"get","","",129,null],[11,"fmt","","",130,null],[11,"clone","","",130,null],[11,"set","","",130,null],[11,"get","","",130,null],[11,"fmt","","",131,null],[11,"clone","","",131,null],[11,"set","","",131,null],[11,"get","","",131,null],[11,"fmt","","",132,null],[11,"clone","","",132,null],[11,"set","","",132,null],[11,"get","","",132,null],[11,"fmt","","",133,null],[11,"clone","","",133,null],[11,"set","","",133,null],[11,"fmt","","",134,null],[11,"clone","","",134,null],[11,"set","","",134,null],[11,"fmt","","",135,null],[11,"clone","","",135,null],[11,"get","","",135,null],[11,"fmt","","",136,null],[11,"clone","","",136,null],[11,"get","","",136,null],[6,"IpMulticastTtl","nix::sys::socket","",null,null],[6,"InAddrT","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_PACKET","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_UDP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[8,"GetSockOpt","","Represents a socket option that can be accessed or set. Used as an argument\nto `getsockopt`",null,null],[16,"Val","","",137,null],[8,"SetSockOpt","","Represents a socket option that can be accessed or set. Used as an argument\nto `setsockopt`",null,null],[16,"Val","","",138,null],[11,"fmt","","",108,null],[11,"eq","","",108,null],[11,"clone","","",108,null],[11,"hash","","",139,null],[11,"cmp","","",139,null],[11,"partial_cmp","","",139,null],[11,"lt","","",139,null],[11,"le","","",139,null],[11,"gt","","",139,null],[11,"ge","","",139,null],[11,"clone","","",139,null],[11,"eq","","",139,null],[11,"ne","","",139,null],[11,"fmt","","",139,null],[11,"empty","","Returns an empty set of flags.",139,{"inputs":[],"output":{"name":"sockflag"}}],[11,"all","","Returns the set containing all flags.",139,{"inputs":[],"output":{"name":"sockflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",139,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",139,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",139,{"inputs":[{"name":"c_int"}],"output":{"name":"sockflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",139,null],[11,"is_all","","Returns `true` if all flags are currently set.",139,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",139,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",139,null],[11,"insert","","Inserts the specified flags in-place.",139,null],[11,"remove","","Removes the specified flags in-place.",139,null],[11,"toggle","","Toggles the specified flags in-place.",139,null],[11,"bitor","","Returns the union of the two sets of flags.",139,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",139,null],[11,"bitand","","Returns the intersection between the two sets of flags.",139,null],[11,"sub","","Returns the set difference of the two sets of flags.",139,null],[11,"not","","Returns the complement of this set of flags.",139,null],[11,"from_iter","","",139,{"inputs":[{"name":"t"}],"output":{"name":"sockflag"}}],[11,"new","","Create a CmsgSpace&lt;T&gt;. The structure is used only for space, so\nthe fields are uninitialized.",140,{"inputs":[],"output":{"name":"self"}}],[11,"cmsgs","","Iterate over the valid control messages pointed to by this\nmsghdr.",102,null],[11,"next","","",141,null],[11,"fmt","","",103,null],[11,"clone","","",103,null],[11,"fmt","","",142,null],[11,"eq","","",142,null],[11,"ne","","",142,null],[11,"clone","","",142,null],[11,"fmt","","",111,null],[11,"eq","","",111,null],[11,"clone","","",111,null],[0,"stat","nix::sys","",null,null],[6,"dev_t","nix::sys::stat","",null,null],[3,"FileStat","","",null,null],[12,"st_dev","","",59,null],[12,"st_ino","","",59,null],[12,"st_nlink","","",59,null],[12,"st_mode","","",59,null],[12,"st_uid","","",59,null],[12,"st_gid","","",59,null],[12,"st_rdev","","",59,null],[12,"st_size","","",59,null],[12,"st_blksize","","",59,null],[12,"st_blocks","","",59,null],[12,"st_atime","","",59,null],[12,"st_atime_nsec","","",59,null],[12,"st_mtime","","",59,null],[12,"st_mtime_nsec","","",59,null],[12,"st_ctime","","",59,null],[12,"st_ctime_nsec","","",59,null],[3,"SFlag","","",null,null],[3,"Mode","","",null,null],[5,"mknod","","",null,{"inputs":[{"name":"p"},{"name":"sflag"},{"name":"mode"},{"name":"dev_t"}],"output":{"name":"result"}}],[5,"mkdev","","",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"dev_t"}}],[5,"umask","","",null,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[5,"stat","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"lstat","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"fstat","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[17,"S_IFREG","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IROTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[11,"hash","","",143,null],[11,"cmp","","",143,null],[11,"partial_cmp","","",143,null],[11,"lt","","",143,null],[11,"le","","",143,null],[11,"gt","","",143,null],[11,"ge","","",143,null],[11,"clone","","",143,null],[11,"eq","","",143,null],[11,"ne","","",143,null],[11,"fmt","","",143,null],[11,"empty","","Returns an empty set of flags.",143,{"inputs":[],"output":{"name":"sflag"}}],[11,"all","","Returns the set containing all flags.",143,{"inputs":[],"output":{"name":"sflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",143,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",143,{"inputs":[{"name":"mode_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",143,{"inputs":[{"name":"mode_t"}],"output":{"name":"sflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",143,null],[11,"is_all","","Returns `true` if all flags are currently set.",143,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",143,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",143,null],[11,"insert","","Inserts the specified flags in-place.",143,null],[11,"remove","","Removes the specified flags in-place.",143,null],[11,"toggle","","Toggles the specified flags in-place.",143,null],[11,"bitor","","Returns the union of the two sets of flags.",143,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",143,null],[11,"bitand","","Returns the intersection between the two sets of flags.",143,null],[11,"sub","","Returns the set difference of the two sets of flags.",143,null],[11,"not","","Returns the complement of this set of flags.",143,null],[11,"from_iter","","",143,{"inputs":[{"name":"t"}],"output":{"name":"sflag"}}],[11,"hash","","",144,null],[11,"cmp","","",144,null],[11,"partial_cmp","","",144,null],[11,"lt","","",144,null],[11,"le","","",144,null],[11,"gt","","",144,null],[11,"ge","","",144,null],[11,"clone","","",144,null],[11,"eq","","",144,null],[11,"ne","","",144,null],[11,"fmt","","",144,null],[11,"empty","","Returns an empty set of flags.",144,{"inputs":[],"output":{"name":"mode"}}],[11,"all","","Returns the set containing all flags.",144,{"inputs":[],"output":{"name":"mode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",144,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",144,{"inputs":[{"name":"mode_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",144,{"inputs":[{"name":"mode_t"}],"output":{"name":"mode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",144,null],[11,"is_all","","Returns `true` if all flags are currently set.",144,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",144,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",144,null],[11,"insert","","Inserts the specified flags in-place.",144,null],[11,"remove","","Removes the specified flags in-place.",144,null],[11,"toggle","","Toggles the specified flags in-place.",144,null],[11,"bitor","","Returns the union of the two sets of flags.",144,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",144,null],[11,"bitand","","Returns the intersection between the two sets of flags.",144,null],[11,"sub","","Returns the set difference of the two sets of flags.",144,null],[11,"not","","Returns the complement of this set of flags.",144,null],[11,"from_iter","","",144,{"inputs":[{"name":"t"}],"output":{"name":"mode"}}],[0,"syscall","nix::sys","Indirect system call",null,null],[5,"syscall","nix::sys::syscall","",null,null],[6,"Syscall","","",null,null],[7,"SYSPIVOTROOT","","",null,null],[7,"MEMFD_CREATE","","",null,null],[0,"termios","nix::sys","",null,null],[3,"Termios","nix::sys::termios","",null,null],[12,"c_iflag","","",145,null],[12,"c_oflag","","",145,null],[12,"c_cflag","","",145,null],[12,"c_lflag","","",145,null],[12,"c_line","","",145,null],[12,"c_cc","","",145,null],[12,"c_ispeed","","",145,null],[12,"c_ospeed","","",145,null],[3,"InputFlags","","",null,null],[3,"OutputFlags","","",null,null],[3,"ControlFlags","","",null,null],[3,"LocalFlags","","",null,null],[4,"SetArg","","",null,null],[13,"TCSANOW","","",146,null],[13,"TCSADRAIN","","",146,null],[13,"TCSAFLUSH","","",146,null],[4,"FlushArg","","",null,null],[13,"TCIFLUSH","","",147,null],[13,"TCOFLUSH","","",147,null],[13,"TCIOFLUSH","","",147,null],[4,"FlowArg","","",null,null],[13,"TCOOFF","","",148,null],[13,"TCOON","","",148,null],[13,"TCIOFF","","",148,null],[13,"TCION","","",148,null],[5,"cfgetispeed","","",null,{"inputs":[{"name":"termios"}],"output":{"name":"speed_t"}}],[5,"cfgetospeed","","",null,{"inputs":[{"name":"termios"}],"output":{"name":"speed_t"}}],[5,"cfsetispeed","","",null,{"inputs":[{"name":"termios"},{"name":"speed_t"}],"output":{"name":"result"}}],[5,"cfsetospeed","","",null,{"inputs":[{"name":"termios"},{"name":"speed_t"}],"output":{"name":"result"}}],[5,"tcgetattr","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"tcsetattr","","",null,{"inputs":[{"name":"rawfd"},{"name":"setarg"},{"name":"termios"}],"output":{"name":"result"}}],[5,"tcdrain","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"tcflow","","",null,{"inputs":[{"name":"rawfd"},{"name":"flowarg"}],"output":{"name":"result"}}],[5,"tcflush","","",null,{"inputs":[{"name":"rawfd"},{"name":"flusharg"}],"output":{"name":"result"}}],[5,"tcsendbreak","","",null,{"inputs":[{"name":"rawfd"},{"name":"c_int"}],"output":{"name":"result"}}],[11,"clone","","",145,null],[11,"hash","","",149,null],[11,"cmp","","",149,null],[11,"partial_cmp","","",149,null],[11,"lt","","",149,null],[11,"le","","",149,null],[11,"gt","","",149,null],[11,"ge","","",149,null],[11,"clone","","",149,null],[11,"eq","","",149,null],[11,"ne","","",149,null],[11,"fmt","","",149,null],[11,"empty","","Returns an empty set of flags.",149,{"inputs":[],"output":{"name":"inputflags"}}],[11,"all","","Returns the set containing all flags.",149,{"inputs":[],"output":{"name":"inputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",149,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",149,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",149,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"inputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",149,null],[11,"is_all","","Returns `true` if all flags are currently set.",149,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",149,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",149,null],[11,"insert","","Inserts the specified flags in-place.",149,null],[11,"remove","","Removes the specified flags in-place.",149,null],[11,"toggle","","Toggles the specified flags in-place.",149,null],[11,"bitor","","Returns the union of the two sets of flags.",149,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",149,null],[11,"bitand","","Returns the intersection between the two sets of flags.",149,null],[11,"sub","","Returns the set difference of the two sets of flags.",149,null],[11,"not","","Returns the complement of this set of flags.",149,null],[11,"from_iter","","",149,{"inputs":[{"name":"t"}],"output":{"name":"inputflags"}}],[11,"hash","","",150,null],[11,"cmp","","",150,null],[11,"partial_cmp","","",150,null],[11,"lt","","",150,null],[11,"le","","",150,null],[11,"gt","","",150,null],[11,"ge","","",150,null],[11,"clone","","",150,null],[11,"eq","","",150,null],[11,"ne","","",150,null],[11,"fmt","","",150,null],[11,"empty","","Returns an empty set of flags.",150,{"inputs":[],"output":{"name":"outputflags"}}],[11,"all","","Returns the set containing all flags.",150,{"inputs":[],"output":{"name":"outputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",150,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",150,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",150,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"outputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",150,null],[11,"is_all","","Returns `true` if all flags are currently set.",150,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",150,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",150,null],[11,"insert","","Inserts the specified flags in-place.",150,null],[11,"remove","","Removes the specified flags in-place.",150,null],[11,"toggle","","Toggles the specified flags in-place.",150,null],[11,"bitor","","Returns the union of the two sets of flags.",150,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",150,null],[11,"bitand","","Returns the intersection between the two sets of flags.",150,null],[11,"sub","","Returns the set difference of the two sets of flags.",150,null],[11,"not","","Returns the complement of this set of flags.",150,null],[11,"from_iter","","",150,{"inputs":[{"name":"t"}],"output":{"name":"outputflags"}}],[11,"hash","","",151,null],[11,"cmp","","",151,null],[11,"partial_cmp","","",151,null],[11,"lt","","",151,null],[11,"le","","",151,null],[11,"gt","","",151,null],[11,"ge","","",151,null],[11,"clone","","",151,null],[11,"eq","","",151,null],[11,"ne","","",151,null],[11,"fmt","","",151,null],[11,"empty","","Returns an empty set of flags.",151,{"inputs":[],"output":{"name":"controlflags"}}],[11,"all","","Returns the set containing all flags.",151,{"inputs":[],"output":{"name":"controlflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",151,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",151,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",151,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"controlflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",151,null],[11,"is_all","","Returns `true` if all flags are currently set.",151,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",151,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",151,null],[11,"insert","","Inserts the specified flags in-place.",151,null],[11,"remove","","Removes the specified flags in-place.",151,null],[11,"toggle","","Toggles the specified flags in-place.",151,null],[11,"bitor","","Returns the union of the two sets of flags.",151,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",151,null],[11,"bitand","","Returns the intersection between the two sets of flags.",151,null],[11,"sub","","Returns the set difference of the two sets of flags.",151,null],[11,"not","","Returns the complement of this set of flags.",151,null],[11,"from_iter","","",151,{"inputs":[{"name":"t"}],"output":{"name":"controlflags"}}],[11,"hash","","",152,null],[11,"cmp","","",152,null],[11,"partial_cmp","","",152,null],[11,"lt","","",152,null],[11,"le","","",152,null],[11,"gt","","",152,null],[11,"ge","","",152,null],[11,"clone","","",152,null],[11,"eq","","",152,null],[11,"ne","","",152,null],[11,"fmt","","",152,null],[11,"empty","","Returns an empty set of flags.",152,{"inputs":[],"output":{"name":"localflags"}}],[11,"all","","Returns the set containing all flags.",152,{"inputs":[],"output":{"name":"localflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",152,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",152,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",152,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"localflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",152,null],[11,"is_all","","Returns `true` if all flags are currently set.",152,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",152,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",152,null],[11,"insert","","Inserts the specified flags in-place.",152,null],[11,"remove","","Removes the specified flags in-place.",152,null],[11,"toggle","","Toggles the specified flags in-place.",152,null],[11,"bitor","","Returns the union of the two sets of flags.",152,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",152,null],[11,"bitand","","Returns the intersection between the two sets of flags.",152,null],[11,"sub","","Returns the set difference of the two sets of flags.",152,null],[11,"not","","Returns the complement of this set of flags.",152,null],[11,"from_iter","","",152,{"inputs":[{"name":"t"}],"output":{"name":"localflags"}}],[11,"clone","","",146,null],[11,"clone","","",147,null],[11,"clone","","",148,null],[6,"tcflag_t","","",null,null],[6,"cc_t","","",null,null],[6,"speed_t","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VMIN","","",null,null],[17,"VTIME","","",null,null],[17,"NCCS","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"IUTF8","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"IEXTEN","","",null,null],[17,"EXTPROC","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[0,"utsname","nix::sys","",null,null],[3,"UtsName","nix::sys::utsname","",null,null],[5,"uname","","",null,{"inputs":[],"output":{"name":"utsname"}}],[11,"clone","","",153,null],[11,"sysname","","",153,null],[11,"nodename","","",153,null],[11,"release","","",153,null],[11,"version","","",153,null],[11,"machine","","",153,null],[0,"wait","nix::sys","",null,null],[3,"WaitPidFlag","nix::sys::wait","",null,null],[4,"WaitStatus","","",null,null],[13,"Exited","","",154,null],[13,"Signaled","","",154,null],[13,"Stopped","","",154,null],[13,"Continued","","",154,null],[13,"StillAlive","","",154,null],[5,"waitpid","","",null,{"inputs":[{"name":"pid_t"},{"name":"option"}],"output":{"name":"result"}}],[5,"wait","","",null,{"inputs":[],"output":{"name":"result"}}],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[11,"hash","","",155,null],[11,"cmp","","",155,null],[11,"partial_cmp","","",155,null],[11,"lt","","",155,null],[11,"le","","",155,null],[11,"gt","","",155,null],[11,"ge","","",155,null],[11,"clone","","",155,null],[11,"eq","","",155,null],[11,"ne","","",155,null],[11,"fmt","","",155,null],[11,"empty","","Returns an empty set of flags.",155,{"inputs":[],"output":{"name":"waitpidflag"}}],[11,"all","","Returns the set containing all flags.",155,{"inputs":[],"output":{"name":"waitpidflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",155,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",155,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",155,{"inputs":[{"name":"c_int"}],"output":{"name":"waitpidflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",155,null],[11,"is_all","","Returns `true` if all flags are currently set.",155,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",155,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",155,null],[11,"insert","","Inserts the specified flags in-place.",155,null],[11,"remove","","Removes the specified flags in-place.",155,null],[11,"toggle","","Toggles the specified flags in-place.",155,null],[11,"bitor","","Returns the union of the two sets of flags.",155,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",155,null],[11,"bitand","","Returns the intersection between the two sets of flags.",155,null],[11,"sub","","Returns the set difference of the two sets of flags.",155,null],[11,"not","","Returns the complement of this set of flags.",155,null],[11,"from_iter","","",155,{"inputs":[{"name":"t"}],"output":{"name":"waitpidflag"}}],[11,"fmt","","",154,null],[11,"clone","","",154,null],[11,"eq","","",154,null],[11,"ne","","",154,null],[0,"mman","nix::sys","",null,null],[3,"MapFlags","nix::sys::mman","",null,null],[3,"MsFlags","","",null,null],[3,"ProtFlags","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mmap","","Calls to mmap are inherently unsafe, so they must be made in an unsafe block. Typically\na higher-level abstraction will hide the unsafe interactions with the mmap&#39;d region.",null,null],[5,"munmap","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"shm_open","","",null,{"inputs":[{"name":"p"},{"name":"oflag"},{"name":"mode"}],"output":{"name":"result"}}],[5,"shm_unlink","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"hash","","",156,null],[11,"cmp","","",156,null],[11,"partial_cmp","","",156,null],[11,"lt","","",156,null],[11,"le","","",156,null],[11,"gt","","",156,null],[11,"ge","","",156,null],[11,"clone","","",156,null],[11,"eq","","",156,null],[11,"ne","","",156,null],[11,"fmt","","",156,null],[11,"empty","","Returns an empty set of flags.",156,{"inputs":[],"output":{"name":"mapflags"}}],[11,"all","","Returns the set containing all flags.",156,{"inputs":[],"output":{"name":"mapflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",156,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",156,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",156,{"inputs":[{"name":"c_int"}],"output":{"name":"mapflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",156,null],[11,"is_all","","Returns `true` if all flags are currently set.",156,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",156,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",156,null],[11,"insert","","Inserts the specified flags in-place.",156,null],[11,"remove","","Removes the specified flags in-place.",156,null],[11,"toggle","","Toggles the specified flags in-place.",156,null],[11,"bitor","","Returns the union of the two sets of flags.",156,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",156,null],[11,"bitand","","Returns the intersection between the two sets of flags.",156,null],[11,"sub","","Returns the set difference of the two sets of flags.",156,null],[11,"not","","Returns the complement of this set of flags.",156,null],[11,"from_iter","","",156,{"inputs":[{"name":"t"}],"output":{"name":"mapflags"}}],[11,"hash","","",157,null],[11,"cmp","","",157,null],[11,"partial_cmp","","",157,null],[11,"lt","","",157,null],[11,"le","","",157,null],[11,"gt","","",157,null],[11,"ge","","",157,null],[11,"clone","","",157,null],[11,"eq","","",157,null],[11,"ne","","",157,null],[11,"fmt","","",157,null],[11,"empty","","Returns an empty set of flags.",157,{"inputs":[],"output":{"name":"msflags"}}],[11,"all","","Returns the set containing all flags.",157,{"inputs":[],"output":{"name":"msflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",157,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",157,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",157,{"inputs":[{"name":"c_int"}],"output":{"name":"msflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",157,null],[11,"is_all","","Returns `true` if all flags are currently set.",157,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",157,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",157,null],[11,"insert","","Inserts the specified flags in-place.",157,null],[11,"remove","","Removes the specified flags in-place.",157,null],[11,"toggle","","Toggles the specified flags in-place.",157,null],[11,"bitor","","Returns the union of the two sets of flags.",157,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",157,null],[11,"bitand","","Returns the intersection between the two sets of flags.",157,null],[11,"sub","","Returns the set difference of the two sets of flags.",157,null],[11,"not","","Returns the complement of this set of flags.",157,null],[11,"from_iter","","",157,{"inputs":[{"name":"t"}],"output":{"name":"msflags"}}],[6,"MmapAdvise","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[11,"hash","","",158,null],[11,"cmp","","",158,null],[11,"partial_cmp","","",158,null],[11,"lt","","",158,null],[11,"le","","",158,null],[11,"gt","","",158,null],[11,"ge","","",158,null],[11,"clone","","",158,null],[11,"eq","","",158,null],[11,"ne","","",158,null],[11,"fmt","","",158,null],[11,"empty","","Returns an empty set of flags.",158,{"inputs":[],"output":{"name":"protflags"}}],[11,"all","","Returns the set containing all flags.",158,{"inputs":[],"output":{"name":"protflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",158,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",158,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",158,{"inputs":[{"name":"c_int"}],"output":{"name":"protflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",158,null],[11,"is_all","","Returns `true` if all flags are currently set.",158,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",158,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",158,null],[11,"insert","","Inserts the specified flags in-place.",158,null],[11,"remove","","Removes the specified flags in-place.",158,null],[11,"toggle","","Toggles the specified flags in-place.",158,null],[11,"bitor","","Returns the union of the two sets of flags.",158,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",158,null],[11,"bitand","","Returns the intersection between the two sets of flags.",158,null],[11,"sub","","Returns the set difference of the two sets of flags.",158,null],[11,"not","","Returns the complement of this set of flags.",158,null],[11,"from_iter","","",158,{"inputs":[{"name":"t"}],"output":{"name":"protflags"}}],[0,"uio","nix::sys","",null,null],[3,"IoVec","nix::sys::uio","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"pwrite","","",null,null],[5,"pread","","",null,null],[11,"as_slice","","",159,null],[11,"from_slice","","",159,null],[11,"from_mut_slice","","",159,null],[0,"time","nix::sys","",null,null],[3,"TimeVal","nix::sys::time","",null,null],[12,"tv_sec","","",160,null],[12,"tv_usec","","",160,null],[11,"fmt","","",160,null],[11,"cmp","","",160,null],[11,"partial_cmp","","",160,null],[11,"lt","","",160,null],[11,"le","","",160,null],[11,"gt","","",160,null],[11,"ge","","",160,null],[11,"eq","","",160,null],[11,"ne","","",160,null],[11,"clone","","",160,null],[11,"zero","","",160,{"inputs":[],"output":{"name":"timeval"}}],[11,"hours","","",160,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"minutes","","",160,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"seconds","","",160,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"milliseconds","","",160,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"microseconds","","Makes a new `TimeVal` with given number of microseconds.",160,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"num_hours","","",160,null],[11,"num_minutes","","",160,null],[11,"num_seconds","","",160,null],[11,"num_milliseconds","","",160,null],[11,"num_microseconds","","",160,null],[11,"neg","","",160,null],[11,"add","","",160,null],[11,"sub","","",160,null],[11,"mul","","",160,null],[11,"div","","",160,null],[11,"fmt","","",160,null],[0,"ptrace","nix::sys","",null,null],[5,"ptrace","nix::sys::ptrace","",null,null],[5,"ptrace_setoptions","","Set options, as with ptrace(PTRACE_SETOPTIONS,...).",null,{"inputs":[{"name":"pid_t"},{"name":"ptraceoptions"}],"output":{"name":"result"}}],[0,"ptrace","","",null,null],[6,"PtraceRequest","nix::sys::ptrace::ptrace","",null,null],[6,"PtraceEvent","","",null,null],[6,"PtraceOptions","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"PTRACE_EVENT_FORK","","",null,null],[17,"PTRACE_EVENT_VFORK","","",null,null],[17,"PTRACE_EVENT_CLONE","","",null,null],[17,"PTRACE_EVENT_EXEC","","",null,null],[17,"PTRACE_EVENT_VFORK_DONE","","",null,null],[17,"PTRACE_EVENT_EXIT","","",null,null],[17,"PTRACE_EVENT_SECCOMP","","",null,null],[17,"PTRACE_EVENT_STOP","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[0,"select","nix::sys","",null,null],[3,"FdSet","nix::sys::select","",null,null],[5,"select","","",null,{"inputs":[{"name":"c_int"},{"name":"option"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[17,"FD_SETSIZE","","",null,null],[11,"clone","","",161,null],[11,"new","","",161,{"inputs":[],"output":{"name":"fdset"}}],[11,"insert","","",161,null],[11,"remove","","",161,null],[11,"contains","","",161,null],[11,"clear","","",161,null],[0,"quota","nix::sys","",null,null],[5,"quotactl_on","nix::sys::quota","",null,{"inputs":[{"name":"quotatype"},{"name":"p"},{"name":"quotafmt"},{"name":"p"}],"output":{"name":"result"}}],[5,"quotactl_off","","",null,{"inputs":[{"name":"quotatype"},{"name":"p"}],"output":{"name":"result"}}],[5,"quotactl_sync","","",null,{"inputs":[{"name":"quotatype"},{"name":"option"}],"output":{"name":"result"}}],[5,"quotactl_get","","",null,{"inputs":[{"name":"quotatype"},{"name":"p"},{"name":"c_int"},{"name":"dqblk"}],"output":{"name":"result"}}],[5,"quotactl_set","","",null,{"inputs":[{"name":"quotatype"},{"name":"p"},{"name":"c_int"},{"name":"dqblk"}],"output":{"name":"result"}}],[0,"quota","","",null,null],[3,"QuotaCmd","nix::sys::quota::quota","",null,null],[12,"0","","",162,null],[12,"1","","",162,null],[3,"QuotaValidFlags","","",null,null],[3,"Dqblk","","",null,null],[12,"bhardlimit","","",163,null],[12,"bsoftlimit","","",163,null],[12,"curspace","","",163,null],[12,"ihardlimit","","",163,null],[12,"isoftlimit","","",163,null],[12,"curinodes","","",163,null],[12,"btime","","",163,null],[12,"itime","","",163,null],[12,"valid","","",163,null],[6,"QuotaSubCmd","","",null,null],[6,"QuotaType","","",null,null],[6,"QuotaFmt","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[11,"as_int","","",162,null],[11,"hash","","",164,null],[11,"cmp","","",164,null],[11,"partial_cmp","","",164,null],[11,"lt","","",164,null],[11,"le","","",164,null],[11,"gt","","",164,null],[11,"ge","","",164,null],[11,"clone","","",164,null],[11,"eq","","",164,null],[11,"ne","","",164,null],[11,"default","","",164,{"inputs":[],"output":{"name":"quotavalidflags"}}],[11,"fmt","","",164,null],[11,"empty","","Returns an empty set of flags.",164,{"inputs":[],"output":{"name":"quotavalidflags"}}],[11,"all","","Returns the set containing all flags.",164,{"inputs":[],"output":{"name":"quotavalidflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",164,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",164,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",164,{"inputs":[{"name":"u32"}],"output":{"name":"quotavalidflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",164,null],[11,"is_all","","Returns `true` if all flags are currently set.",164,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",164,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",164,null],[11,"insert","","Inserts the specified flags in-place.",164,null],[11,"remove","","Removes the specified flags in-place.",164,null],[11,"toggle","","Toggles the specified flags in-place.",164,null],[11,"bitor","","Returns the union of the two sets of flags.",164,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",164,null],[11,"bitand","","Returns the intersection between the two sets of flags.",164,null],[11,"sub","","Returns the set difference of the two sets of flags.",164,null],[11,"not","","Returns the complement of this set of flags.",164,null],[11,"from_iter","","",164,{"inputs":[{"name":"t"}],"output":{"name":"quotavalidflags"}}],[11,"clone","","",163,null],[11,"fmt","","",163,null],[11,"default","","",163,{"inputs":[],"output":{"name":"dqblk"}}],[0,"statfs","nix::sys","",null,null],[5,"statfs","nix::sys::statfs","",null,{"inputs":[{"name":"p"},{"name":"statfs"}],"output":{"name":"result"}}],[5,"fstatfs","","",null,{"inputs":[{"name":"t"},{"name":"statfs"}],"output":{"name":"result"}}],[0,"vfs","","",null,null],[3,"Statfs","nix::sys::statfs::vfs","",null,null],[12,"f_type","","",165,null],[12,"f_bsize","","",165,null],[12,"f_blocks","","",165,null],[12,"f_bfree","","",165,null],[12,"f_bavail","","",165,null],[12,"f_files","","",165,null],[12,"f_ffree","","",165,null],[12,"f_fsid","","",165,null],[12,"f_namelen","","",165,null],[12,"f_frsize","","",165,null],[12,"f_spare","","",165,null],[0,"hwdep","","",null,null],[6,"FsType","nix::sys::statfs::vfs::hwdep","",null,null],[6,"BlockSize","","",null,null],[6,"NameLen","","",null,null],[6,"FragmentSize","","",null,null],[6,"SwordType","","",null,null],[17,"ADFS_SUPER_MAGIC","nix::sys::statfs::vfs","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"BEFS_SUPER_MAGIC","","",null,null],[17,"BFS_MAGIC","","",null,null],[17,"CIFS_MAGIC_NUMBER","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"COH_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"DEVFS_SUPER_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT_SUPER_MAGIC","","",null,null],[17,"EXT2_OLD_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HFS_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"JFS_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"NTFS_SB_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"ROMFS_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"SYSV2_SUPER_MAGIC","","",null,null],[17,"SYSV4_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"UDF_SUPER_MAGIC","","",null,null],[17,"UFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VXFS_SUPER_MAGIC","","",null,null],[17,"XENIX_SUPER_MAGIC","","",null,null],[17,"XFS_SUPER_MAGIC","","",null,null],[17,"_XIAFS_SUPER_MAGIC","","",null,null],[11,"clone","","",165,null],[11,"fmt","","",165,null],[0,"statvfs","nix::sys","FFI for statvfs functions",null,null],[5,"statvfs","nix::sys::statvfs","Fill an existing `Statvfs` object with information about the `path`",null,{"inputs":[{"name":"p"},{"name":"statvfs"}],"output":{"name":"result"}}],[5,"fstatvfs","","Fill an existing `Statvfs` object with information about `fd`",null,{"inputs":[{"name":"t"},{"name":"statvfs"}],"output":{"name":"result"}}],[0,"vfs","","Structs related to the `statvfs` and `fstatvfs` functions",null,null],[3,"FsFlags","nix::sys::statvfs::vfs","Mount Flags",null,null],[3,"Statvfs","","The posix statvfs struct",null,null],[12,"f_bsize","","Filesystem block size. This is the value that will lead to\nmost efficient use of the filesystem",166,null],[12,"f_frsize","","Fragment Size -- actual minimum unit of allocation on this\nfilesystem",166,null],[12,"f_blocks","","Total number of blocks on the filesystem",166,null],[12,"f_bfree","","Number of unused blocks on the filesystem, including those\nreserved for root",166,null],[12,"f_bavail","","Number of blocks available to non-root users",166,null],[12,"f_files","","Total number of inodes available on the filesystem",166,null],[12,"f_ffree","","Number of inodes available on the filesystem",166,null],[12,"f_favail","","Number of inodes available to non-root users",166,null],[12,"f_fsid","","File System ID",166,null],[12,"f_flag","","Mount Flags",166,null],[12,"f_namemax","","Maximum filename length",166,null],[17,"RDONLY","","Read Only",null,null],[17,"NOSUID","","Do not allow the set-uid bits to have an effect",null,null],[17,"NODEV","","Do not interpret character or block-special devices",null,null],[17,"NOEXEC","","Do not allow execution of binaries on the filesystem",null,null],[17,"SYNCHRONOUS","","All IO should be done synchronously",null,null],[17,"MANDLOCK","","Allow mandatory locks on the filesystem",null,null],[17,"WRITE","","",null,null],[17,"APPEND","","",null,null],[17,"IMMUTABLE","","",null,null],[17,"NOATIME","","Do not update access times on files",null,null],[17,"NODIRATIME","","Do not update access times on files",null,null],[17,"RELATIME","","Update access time relative to modify/change time",null,null],[11,"hash","","",167,null],[11,"cmp","","",167,null],[11,"partial_cmp","","",167,null],[11,"lt","","",167,null],[11,"le","","",167,null],[11,"gt","","",167,null],[11,"ge","","",167,null],[11,"clone","","",167,null],[11,"eq","","",167,null],[11,"ne","","",167,null],[11,"default","","",167,{"inputs":[],"output":{"name":"fsflags"}}],[11,"fmt","","",167,null],[11,"empty","","Returns an empty set of flags.",167,{"inputs":[],"output":{"name":"fsflags"}}],[11,"all","","Returns the set containing all flags.",167,{"inputs":[],"output":{"name":"fsflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",167,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",167,{"inputs":[{"name":"c_ulong"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",167,{"inputs":[{"name":"c_ulong"}],"output":{"name":"fsflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",167,null],[11,"is_all","","Returns `true` if all flags are currently set.",167,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",167,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",167,null],[11,"insert","","Inserts the specified flags in-place.",167,null],[11,"remove","","Removes the specified flags in-place.",167,null],[11,"toggle","","Toggles the specified flags in-place.",167,null],[11,"bitor","","Returns the union of the two sets of flags.",167,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",167,null],[11,"bitand","","Returns the intersection between the two sets of flags.",167,null],[11,"sub","","Returns the set difference of the two sets of flags.",167,null],[11,"not","","Returns the complement of this set of flags.",167,null],[11,"from_iter","","",167,{"inputs":[{"name":"t"}],"output":{"name":"fsflags"}}],[11,"clone","","",166,null],[11,"fmt","","",166,null],[11,"for_path","","Create a new `Statvfs` object and fill it with information about\nthe mount that contains `path`",166,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"update_with_path","","Replace information in this struct with information about `path`",166,null],[11,"for_fd","","Create a new `Statvfs` object and fill it with information from fd",166,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"update_with_fd","","Replace information in this struct with information about `fd`",166,null],[11,"default","","Create a statvfs object initialized to all zeros",166,{"inputs":[],"output":{"name":"self"}}],[0,"unistd","nix","Standard symbolic constants and types",null,null],[4,"Fork","nix::unistd","",null,null],[13,"Parent","","",168,null],[13,"Child","","",168,null],[5,"pivot_root","","",null,{"inputs":[{"name":"p1"},{"name":"p2"}],"output":{"name":"result"}}],[5,"fork","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"getpid","","",null,{"inputs":[],"output":{"name":"pid_t"}}],[5,"getppid","","",null,{"inputs":[],"output":{"name":"pid_t"}}],[5,"setpgid","","",null,{"inputs":[{"name":"pid_t"},{"name":"pid_t"}],"output":{"name":"result"}}],[5,"dup","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"dup2","","",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"}],"output":{"name":"result"}}],[5,"dup3","","",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"},{"name":"oflag"}],"output":{"name":"result"}}],[5,"chdir","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"chown","","",null,{"inputs":[{"name":"p"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"daemon","","",null,{"inputs":[{"name":"bool"},{"name":"bool"}],"output":{"name":"result"}}],[5,"sethostname","","",null,null],[5,"gethostname","","",null,null],[5,"close","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"read","","",null,null],[5,"write","","",null,null],[5,"pipe","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"pipe2","","",null,{"inputs":[{"name":"oflag"}],"output":{"name":"result"}}],[5,"ftruncate","","",null,{"inputs":[{"name":"rawfd"},{"name":"off_t"}],"output":{"name":"result"}}],[5,"isatty","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"unlink","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"chroot","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"fsync","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"fdatasync","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"getuid","","",null,{"inputs":[],"output":{"name":"uid_t"}}],[5,"geteuid","","",null,{"inputs":[],"output":{"name":"uid_t"}}],[5,"getgid","","",null,{"inputs":[],"output":{"name":"gid_t"}}],[5,"getegid","","",null,{"inputs":[],"output":{"name":"gid_t"}}],[5,"setuid","","",null,{"inputs":[{"name":"uid_t"}],"output":{"name":"result"}}],[5,"setgid","","",null,{"inputs":[{"name":"gid_t"}],"output":{"name":"result"}}],[11,"clone","","",168,null],[11,"is_child","","",168,null],[11,"is_parent","","",168,null],[6,"Result","nix","",null,null],[8,"NixPath","","",null,null],[10,"len","","",169,null],[10,"with_nix_path","","",169,null],[11,"eq","","",68,null],[11,"ne","","",68,null],[11,"fmt","","",68,null],[11,"clone","","",68,null],[11,"from_errno","","",68,{"inputs":[{"name":"errno"}],"output":{"name":"error"}}],[11,"last","","",68,{"inputs":[],"output":{"name":"error"}}],[11,"invalid_argument","","",68,{"inputs":[],"output":{"name":"error"}}],[11,"errno","","",68,null],[11,"from","","",68,{"inputs":[{"name":"errno"}],"output":{"name":"error"}}],[11,"description","","",68,null],[11,"fmt","","",68,null],[11,"from","std::io::error","",70,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"len","std::ffi::os_str","",170,null],[11,"with_nix_path","","",170,null],[11,"len","std::ffi::c_str","",171,null],[11,"with_nix_path","","",171,null],[11,"len","std::path","",172,null],[11,"with_nix_path","","",172,null],[11,"len","","",173,null],[11,"with_nix_path","","",173,null],[11,"len","core::option","",174,null],[11,"with_nix_path","","",174,null],[14,"ioc!","nix","Encode an ioctl command.",null,null],[14,"io!","","Encode an ioctl command that has no associated data.",null,null],[14,"ior!","","Encode an ioctl command that reads.",null,null],[14,"iow!","","Encode an ioctl command that writes.",null,null],[14,"iorw!","","Encode an ioctl command that both reads and writes.",null,null],[14,"convert_ioctl_res!","","Convert raw ioctl return value to a Nix result",null,null],[14,"ioctl!","","Declare a wrapper function around an ioctl.",null,null]],"paths":[[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"fd_set"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"passwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"fsid_t"],[3,"mq_attr"],[3,"cpu_set_t"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"sem_t"],[3,"sigset_t"],[3,"sysinfo"],[3,"FileStat"],[3,"stat64"],[3,"pthread_attr_t"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"mcontext_t"],[3,"ucontext_t"],[4,"Errno"],[4,"Error"],[8,"ErrnoSentinel"],[3,"Error"],[3,"flock"],[4,"FcntlArg"],[4,"FlockArg"],[3,"SpliceFFlags"],[3,"OFlag"],[3,"FdFlag"],[3,"SealFlag"],[3,"MsFlags"],[3,"MntFlags"],[3,"MqAttr"],[3,"MQ_OFlag"],[3,"FdFlag"],[3,"PollFd"],[3,"EventFlags"],[3,"CloneFlags"],[3,"CpuSet"],[3,"EpollEvent"],[4,"EpollOp"],[3,"EpollEventKind"],[3,"MemFdCreateFlag"],[4,"SigHandler"],[3,"SaFlag"],[3,"SigFlag"],[3,"SigSet"],[3,"SigAction"],[3,"UnixAddr"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[3,"NetlinkAddr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"RecvMsg"],[3,"linger"],[4,"AddressFamily"],[4,"SockAddr"],[4,"InetAddr"],[4,"IpAddr"],[4,"SockType"],[4,"ControlMessage"],[4,"SockLevel"],[4,"Shutdown"],[3,"MsgFlags"],[3,"ReuseAddr"],[3,"ReusePort"],[3,"TcpNoDelay"],[3,"Linger"],[3,"IpAddMembership"],[3,"IpDropMembership"],[3,"Ipv6AddMembership"],[3,"Ipv6DropMembership"],[3,"IpMulticastTtl"],[3,"IpMulticastLoop"],[3,"ReceiveTimeout"],[3,"SendTimeout"],[3,"Broadcast"],[3,"OobInline"],[3,"SocketError"],[3,"KeepAlive"],[3,"PeerCredentials"],[3,"TcpKeepIdle"],[3,"RcvBuf"],[3,"SndBuf"],[3,"RcvBufForce"],[3,"SndBufForce"],[3,"SockType"],[3,"AcceptConn"],[8,"GetSockOpt"],[8,"SetSockOpt"],[3,"SockFlag"],[3,"CmsgSpace"],[3,"CmsgIterator"],[3,"ucred"],[3,"SFlag"],[3,"Mode"],[3,"Termios"],[4,"SetArg"],[4,"FlushArg"],[4,"FlowArg"],[3,"InputFlags"],[3,"OutputFlags"],[3,"ControlFlags"],[3,"LocalFlags"],[3,"UtsName"],[4,"WaitStatus"],[3,"WaitPidFlag"],[3,"MapFlags"],[3,"MsFlags"],[3,"ProtFlags"],[3,"IoVec"],[3,"TimeVal"],[3,"FdSet"],[3,"QuotaCmd"],[3,"Dqblk"],[3,"QuotaValidFlags"],[3,"Statfs"],[3,"Statvfs"],[3,"FsFlags"],[4,"Fork"],[8,"NixPath"],[3,"OsStr"],[3,"CStr"],[3,"Path"],[3,"PathBuf"],[4,"Option"]]};
searchIndex["serde"] = {"doc":"Serde Serialization Framework","items":[[11,"hash","core::num","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"wrapping"}}],[11,"clone","","",0,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"eq","core::num::dec2flt","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"fmt","core::num","",2,null],[11,"eq","","",2,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"fmt","","",4,null],[11,"hash","core::nonzero","",5,null],[11,"fmt","","",5,null],[11,"partial_cmp","","",5,null],[11,"lt","","",5,null],[11,"le","","",5,null],[11,"gt","","",5,null],[11,"ge","","",5,null],[11,"cmp","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",5,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",5,null],[11,"new","core::ptr","Creates a new `Unique`.",6,null],[11,"get","","Dereferences the content.",6,null],[11,"get_mut","","Mutably dereferences the content.",6,null],[11,"deref","","",6,null],[11,"fmt","","",6,null],[11,"new","","Creates a new `Shared`.",7,null],[11,"clone","","",7,null],[11,"deref","","",7,null],[11,"fmt","","",7,null],[11,"hash","core::marker","",8,null],[11,"eq","","",8,null],[11,"partial_cmp","","",8,null],[11,"cmp","","",8,null],[11,"clone","","",8,null],[11,"default","","",8,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",9,null],[11,"clone","","",9,null],[11,"fmt","","",9,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"contains","","# Examples",10,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"clone","","",11,null],[11,"fmt","","",11,null],[11,"contains","","# Examples",11,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"clone","","",12,null],[11,"fmt","","",12,null],[11,"contains","","# Examples",12,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"clone","","",13,null],[11,"fmt","","",13,null],[11,"from","","",13,{"inputs":[{"name":"range"}],"output":{"name":"rangeinclusive"}}],[11,"contains","","# Examples",13,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"clone","","",14,null],[11,"fmt","","",14,null],[11,"contains","","# Examples",14,null],[11,"hash","core::cmp","",15,null],[11,"fmt","","",15,null],[11,"eq","","",15,null],[11,"clone","","",15,null],[11,"reverse","","Reverse the `Ordering`.",15,null],[11,"cmp","","",15,null],[11,"partial_cmp","","",15,null],[11,"fmt","serde::core","",16,null],[11,"fmt","","",16,null],[11,"is","","Returns true if the boxed type is the same as `T`",16,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",16,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",16,null],[11,"is","","Forwards to the method defined on the type `Any`.",16,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",16,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",16,null],[11,"hash","core::any","",17,null],[11,"fmt","","",17,null],[11,"eq","","",17,null],[11,"ne","","",17,null],[11,"clone","","",17,null],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",17,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",18,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",20,null],[11,"clone","","",20,null],[11,"new","","Creates a new `AtomicBool`.",18,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",18,null],[11,"store","","Stores a value into the bool.",18,null],[11,"swap","","Stores a value into the bool, returning the old value.",18,null],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",18,null],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",18,null],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",18,null],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",18,null],[11,"new","","Creates a new `AtomicPtr`.",19,null],[11,"load","","Loads a value from the pointer.",19,null],[11,"store","","Stores a value into the pointer.",19,null],[11,"swap","","Stores a value into the pointer, returning the old value.",19,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"default","","",21,{"inputs":[],"output":{"name":"atomici8"}}],[11,"fmt","","",21,null],[11,"new","","Creates a new atomic integer.",21,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"load","","Loads a value from the atomic integer.",21,null],[11,"store","","Stores a value into the atomic integer.",21,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",21,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"fetch_add","","Add to the current value, returning the previous value.",21,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",21,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",21,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",21,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",21,null],[11,"default","","",22,{"inputs":[],"output":{"name":"atomicu8"}}],[11,"fmt","","",22,null],[11,"new","","Creates a new atomic integer.",22,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"load","","Loads a value from the atomic integer.",22,null],[11,"store","","Stores a value into the atomic integer.",22,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",22,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"fetch_add","","Add to the current value, returning the previous value.",22,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",22,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",22,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",22,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",22,null],[11,"default","","",23,{"inputs":[],"output":{"name":"atomici16"}}],[11,"fmt","","",23,null],[11,"new","","Creates a new atomic integer.",23,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"load","","Loads a value from the atomic integer.",23,null],[11,"store","","Stores a value into the atomic integer.",23,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",23,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"fetch_add","","Add to the current value, returning the previous value.",23,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",23,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",23,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",23,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",23,null],[11,"default","","",24,{"inputs":[],"output":{"name":"atomicu16"}}],[11,"fmt","","",24,null],[11,"new","","Creates a new atomic integer.",24,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"load","","Loads a value from the atomic integer.",24,null],[11,"store","","Stores a value into the atomic integer.",24,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",24,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"fetch_add","","Add to the current value, returning the previous value.",24,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",24,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",24,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",24,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",24,null],[11,"default","","",25,{"inputs":[],"output":{"name":"atomici32"}}],[11,"fmt","","",25,null],[11,"new","","Creates a new atomic integer.",25,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"load","","Loads a value from the atomic integer.",25,null],[11,"store","","Stores a value into the atomic integer.",25,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",25,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"fetch_add","","Add to the current value, returning the previous value.",25,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",25,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",25,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",25,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",25,null],[11,"default","","",26,{"inputs":[],"output":{"name":"atomicu32"}}],[11,"fmt","","",26,null],[11,"new","","Creates a new atomic integer.",26,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"load","","Loads a value from the atomic integer.",26,null],[11,"store","","Stores a value into the atomic integer.",26,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",26,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"fetch_add","","Add to the current value, returning the previous value.",26,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",26,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",26,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",26,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",26,null],[11,"default","","",27,{"inputs":[],"output":{"name":"atomici64"}}],[11,"fmt","","",27,null],[11,"new","","Creates a new atomic integer.",27,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"load","","Loads a value from the atomic integer.",27,null],[11,"store","","Stores a value into the atomic integer.",27,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",27,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"fetch_add","","Add to the current value, returning the previous value.",27,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",27,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",27,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",27,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",27,null],[11,"default","","",28,{"inputs":[],"output":{"name":"atomicu64"}}],[11,"fmt","","",28,null],[11,"new","","Creates a new atomic integer.",28,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"load","","Loads a value from the atomic integer.",28,null],[11,"store","","Stores a value into the atomic integer.",28,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",28,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"fetch_add","","Add to the current value, returning the previous value.",28,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",28,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",28,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",28,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",28,null],[11,"default","","",29,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"fmt","","",29,null],[11,"new","","Creates a new atomic integer.",29,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the atomic integer.",29,null],[11,"store","","Stores a value into the atomic integer.",29,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",29,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"fetch_add","","Add to the current value, returning the previous value.",29,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",29,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",29,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",29,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",29,null],[11,"default","","",30,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"fmt","","",30,null],[11,"new","","Creates a new atomic integer.",30,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the atomic integer.",30,null],[11,"store","","Stores a value into the atomic integer.",30,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",30,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"fetch_add","","Add to the current value, returning the previous value.",30,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",30,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",30,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",30,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",30,null],[11,"fmt","","",18,null],[11,"fmt","","",19,null],[11,"new","core::cell","Creates a new `Cell` containing the given value.",31,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",31,null],[11,"set","","Sets the contained value.",31,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",31,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",31,null],[11,"clone","","",31,null],[11,"default","","",31,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",31,null],[11,"partial_cmp","","",31,null],[11,"lt","","",31,null],[11,"le","","",31,null],[11,"gt","","",31,null],[11,"ge","","",31,null],[11,"cmp","","",31,null],[11,"fmt","","",32,null],[11,"eq","","",32,null],[11,"clone","","",32,null],[11,"new","","Creates a new `RefCell` containing `value`.",33,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",33,null],[11,"borrow_state","","Query the current state of this `RefCell`",33,null],[11,"borrow","","Immutably borrows the wrapped value.",33,null],[11,"borrow_mut","","Mutably borrows the wrapped value.",33,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",33,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",33,null],[11,"clone","","",33,null],[11,"default","","",33,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",33,null],[11,"partial_cmp","","",33,null],[11,"lt","","",33,null],[11,"le","","",33,null],[11,"gt","","",33,null],[11,"ge","","",33,null],[11,"cmp","","",33,null],[11,"deref","","",34,null],[11,"clone","","Copies a `Ref`.",34,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",34,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",34,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",35,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",35,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"deref","","",35,null],[11,"deref_mut","","",35,null],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",36,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",36,null],[11,"get","","Gets a mutable pointer to the wrapped value.",36,null],[11,"default","","",36,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"fmt","core::char","",37,null],[11,"clone","","",37,null],[11,"next","","",37,null],[11,"size_hint","","",37,null],[11,"last","","",37,null],[11,"fmt","","",38,null],[11,"clone","","",38,null],[11,"next","","",38,null],[11,"size_hint","","",38,null],[11,"count","","",38,null],[11,"nth","","",38,null],[11,"last","","",38,null],[11,"fmt","","",39,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",39,null],[11,"next","","",39,null],[11,"size_hint","","",39,null],[11,"fmt","","",40,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",40,null],[11,"next","","",40,null],[11,"size_hint","","",40,null],[11,"fmt","core::iter::range","",41,null],[11,"clone","","",41,null],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",11,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",10,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",13,null],[11,"next","core::iter::range","",41,null],[11,"size_hint","","",41,null],[11,"next","","",41,null],[11,"size_hint","","",41,null],[11,"next","","",41,null],[11,"size_hint","","",41,null],[11,"next","core::ops","",10,null],[11,"size_hint","","",10,null],[11,"next_back","","",10,null],[11,"next","","",11,null],[11,"next","","",13,null],[11,"size_hint","","",13,null],[11,"next_back","","",13,null],[11,"fmt","core::iter::sources","",42,null],[11,"clone","","",42,null],[11,"next","","",42,null],[11,"size_hint","","",42,null],[11,"next_back","","",42,null],[11,"fmt","","",43,null],[11,"next","","",43,null],[11,"size_hint","","",43,null],[11,"next_back","","",43,null],[11,"len","","",43,null],[11,"clone","","",43,null],[11,"default","","",43,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",44,null],[11,"clone","","",44,null],[11,"next","","",44,null],[11,"size_hint","","",44,null],[11,"next_back","","",44,null],[11,"len","","",44,null],[11,"fmt","core::iter","",45,null],[11,"clone","","",45,null],[11,"next","","",45,null],[11,"size_hint","","",45,null],[11,"next_back","","",45,null],[11,"fmt","","",46,null],[11,"clone","","",46,null],[11,"next","","",46,null],[11,"size_hint","","",46,null],[11,"next_back","","",46,null],[11,"fmt","","",47,null],[11,"clone","","",47,null],[11,"next","","",47,null],[11,"size_hint","","",47,null],[11,"fmt","","",48,null],[11,"clone","","",48,null],[11,"next","","",48,null],[11,"count","","",48,null],[11,"nth","","",48,null],[11,"find","","",48,null],[11,"last","","",48,null],[11,"size_hint","","",48,null],[11,"next_back","","",48,null],[11,"fmt","","",49,null],[11,"clone","","",49,null],[11,"next","","",49,null],[11,"size_hint","","",49,null],[11,"next_back","","",49,null],[11,"clone","","",50,null],[11,"fmt","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next_back","","",50,null],[11,"clone","","",51,null],[11,"fmt","","",51,null],[11,"next","","",51,null],[11,"size_hint","","",51,null],[11,"next_back","","",51,null],[11,"clone","","",52,null],[11,"fmt","","",52,null],[11,"next","","",52,null],[11,"size_hint","","",52,null],[11,"next_back","","",52,null],[11,"fmt","","",53,null],[11,"clone","","",53,null],[11,"next","","# Overflow Behavior",53,null],[11,"size_hint","","",53,null],[11,"nth","","",53,null],[11,"count","","",53,null],[11,"next_back","","",53,null],[11,"fmt","","",54,null],[11,"clone","","",54,null],[11,"next","","",54,null],[11,"count","","",54,null],[11,"nth","","",54,null],[11,"last","","",54,null],[11,"size_hint","","",54,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",54,null],[11,"is_empty","","Checks if the iterator has finished iterating.",54,null],[11,"clone","","",55,null],[11,"fmt","","",55,null],[11,"next","","",55,null],[11,"size_hint","","",55,null],[11,"clone","","",56,null],[11,"fmt","","",56,null],[11,"next","","",56,null],[11,"size_hint","","",56,null],[11,"fmt","","",57,null],[11,"clone","","",57,null],[11,"next","","",57,null],[11,"nth","","",57,null],[11,"count","","",57,null],[11,"last","","",57,null],[11,"size_hint","","",57,null],[11,"next_back","","",57,null],[11,"fmt","","",58,null],[11,"clone","","",58,null],[11,"next","","",58,null],[11,"nth","","",58,null],[11,"size_hint","","",58,null],[11,"clone","","",59,null],[11,"fmt","","",59,null],[11,"next","","",59,null],[11,"size_hint","","",59,null],[11,"clone","","",60,null],[11,"fmt","","",60,null],[11,"next","","",60,null],[11,"size_hint","","",60,null],[11,"next_back","","",60,null],[11,"fmt","","",61,null],[11,"clone","","",61,null],[11,"next","","",61,null],[11,"nth","","",61,null],[11,"last","","",61,null],[11,"count","","",61,null],[11,"size_hint","","",61,null],[11,"next_back","","",61,null],[11,"clone","","",62,null],[11,"fmt","","",62,null],[11,"next","","",62,null],[11,"size_hint","","",62,null],[11,"next_back","","",62,null],[11,"hash","core::option","",63,null],[11,"fmt","","",63,null],[11,"cmp","","",63,null],[11,"partial_cmp","","",63,null],[11,"lt","","",63,null],[11,"le","","",63,null],[11,"gt","","",63,null],[11,"ge","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"clone","","",63,null],[11,"is_some","","Returns `true` if the option is a `Some` value",63,null],[11,"is_none","","Returns `true` if the option is a `None` value",63,null],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",63,null],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",63,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",63,null],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",63,null],[11,"unwrap_or","","Returns the contained value or a default.",63,null],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",63,null],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",63,null],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",63,null],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",63,null],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",63,null],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",63,null],[11,"iter","","Returns an iterator over the possibly contained value.",63,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",63,null],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",63,null],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",63,null],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",63,null],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",63,null],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",63,null],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",63,null],[11,"unwrap_or_default","","Returns the contained value or a default",63,null],[11,"default","","",63,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",63,null],[11,"fmt","","",64,null],[11,"next","","",64,null],[11,"size_hint","","",64,null],[11,"next_back","","",64,null],[11,"clone","","",64,null],[11,"fmt","","",65,null],[11,"next","","",65,null],[11,"size_hint","","",65,null],[11,"next_back","","",65,null],[11,"fmt","","",66,null],[11,"clone","","",66,null],[11,"next","","",66,null],[11,"size_hint","","",66,null],[11,"next_back","","",66,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",63,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",67,null],[11,"clone","","",68,null],[11,"hash","core::result","",69,null],[11,"fmt","","",69,null],[11,"cmp","","",69,null],[11,"partial_cmp","","",69,null],[11,"lt","","",69,null],[11,"le","","",69,null],[11,"gt","","",69,null],[11,"ge","","",69,null],[11,"eq","","",69,null],[11,"ne","","",69,null],[11,"clone","","",69,null],[11,"is_ok","","Returns true if the result is `Ok`",69,null],[11,"is_err","","Returns true if the result is `Err`",69,null],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",69,null],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",69,null],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",69,null],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",69,null],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",69,null],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",69,null],[11,"iter","","Returns an iterator over the possibly contained value.",69,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",69,null],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",69,null],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",69,null],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",69,null],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",69,null],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",69,null],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",69,null],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",69,null],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",69,null],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",69,null],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",69,null],[11,"fmt","","",70,null],[11,"next","","",70,null],[11,"size_hint","","",70,null],[11,"next_back","","",70,null],[11,"clone","","",70,null],[11,"fmt","","",71,null],[11,"next","","",71,null],[11,"size_hint","","",71,null],[11,"next_back","","",71,null],[11,"fmt","","",72,null],[11,"next","","",72,null],[11,"size_hint","","",72,null],[11,"next_back","","",72,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",69,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::slice","",73,null],[11,"as_slice","","View the underlying data as a subslice of the original data.",73,null],[11,"next","","",73,null],[11,"size_hint","","",73,null],[11,"count","","",73,null],[11,"nth","","",73,null],[11,"last","","",73,null],[11,"next_back","","",73,null],[11,"clone","","",73,null],[11,"fmt","","",74,null],[11,"into_slice","","View the underlying data as a subslice of the original data.",74,null],[11,"next","","",74,null],[11,"size_hint","","",74,null],[11,"count","","",74,null],[11,"nth","","",74,null],[11,"last","","",74,null],[11,"next_back","","",74,null],[11,"fmt","","",75,null],[11,"clone","","",75,null],[11,"next","","",75,null],[11,"size_hint","","",75,null],[11,"next_back","","",75,null],[11,"fmt","","",76,null],[11,"next","","",76,null],[11,"size_hint","","",76,null],[11,"next_back","","",76,null],[11,"fmt","","",77,null],[11,"fmt","","",78,null],[11,"fmt","","",79,null],[11,"fmt","","",80,null],[11,"next","","",77,null],[11,"size_hint","","",77,null],[11,"next","","",78,null],[11,"size_hint","","",78,null],[11,"next","","",79,null],[11,"size_hint","","",79,null],[11,"next","","",80,null],[11,"size_hint","","",80,null],[11,"fmt","","",81,null],[11,"clone","","",81,null],[11,"next","","",81,null],[11,"size_hint","","",81,null],[11,"count","","",81,null],[11,"nth","","",81,null],[11,"last","","",81,null],[11,"next_back","","",81,null],[11,"fmt","","",82,null],[11,"clone","","",82,null],[11,"next","","",82,null],[11,"size_hint","","",82,null],[11,"count","","",82,null],[11,"nth","","",82,null],[11,"last","","",82,null],[11,"next_back","","",82,null],[11,"fmt","","",83,null],[11,"next","","",83,null],[11,"size_hint","","",83,null],[11,"count","","",83,null],[11,"nth","","",83,null],[11,"last","","",83,null],[11,"next_back","","",83,null],[11,"fmt","core::str::pattern","",84,null],[11,"eq","","",84,null],[11,"ne","","",84,null],[11,"clone","","",84,null],[11,"fmt","","",85,null],[11,"clone","","",85,null],[11,"haystack","","",85,null],[11,"next","","",85,null],[11,"next_match","","",85,null],[11,"next_reject","","",85,null],[11,"next_back","","",85,null],[11,"next_match_back","","",85,null],[11,"next_reject_back","","",85,null],[11,"fmt","","",86,null],[11,"clone","","",86,null],[11,"haystack","","",86,null],[11,"next","","",86,null],[11,"next_match","","",86,null],[11,"next_reject","","",86,null],[11,"next_back","","",86,null],[11,"next_match_back","","",86,null],[11,"next_reject_back","","",86,null],[11,"clone","","",87,null],[11,"fmt","","",87,null],[11,"haystack","","",87,null],[11,"next","","",87,null],[11,"next_match","","",87,null],[11,"next_reject","","",87,null],[11,"next_back","","",87,null],[11,"next_match_back","","",87,null],[11,"next_reject_back","","",87,null],[11,"fmt","","",88,null],[11,"clone","","",88,null],[11,"haystack","","",88,null],[11,"next","","",88,null],[11,"next_match","","",88,null],[11,"next_back","","",88,null],[11,"next_match_back","","",88,null],[11,"eq","core::str","",89,null],[11,"ne","","",89,null],[11,"clone","","",89,null],[11,"fmt","","",89,null],[11,"fmt","","",89,null],[11,"fmt","","",90,null],[11,"clone","","",90,null],[11,"eq","","",90,null],[11,"ne","","",90,null],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",90,null],[11,"fmt","","",90,null],[11,"fmt","","",91,null],[11,"clone","","",91,null],[11,"next","","",91,null],[11,"size_hint","","",91,null],[11,"next_back","","",91,null],[11,"as_str","","View the underlying data as a subslice of the original data.",91,null],[11,"fmt","","",92,null],[11,"clone","","",92,null],[11,"next","","",92,null],[11,"size_hint","","",92,null],[11,"next_back","","",92,null],[11,"as_str","","View the underlying data as a subslice of the original data.",92,null],[11,"fmt","","",93,null],[11,"clone","","",93,null],[11,"next","","",93,null],[11,"size_hint","","",93,null],[11,"count","","",93,null],[11,"last","","",93,null],[11,"nth","","",93,null],[11,"next_back","","",93,null],[11,"len","","",93,null],[11,"fmt","","",94,null],[11,"next","","",94,null],[11,"clone","","",94,null],[11,"fmt","","",95,null],[11,"next","","",95,null],[11,"clone","","",95,null],[11,"next_back","","",94,null],[11,"next_back","","",95,null],[11,"fmt","","",96,null],[11,"next","","",96,null],[11,"clone","","",96,null],[11,"fmt","","",97,null],[11,"next","","",97,null],[11,"clone","","",97,null],[11,"next_back","","",96,null],[11,"next_back","","",97,null],[11,"fmt","","",98,null],[11,"next","","",98,null],[11,"clone","","",98,null],[11,"fmt","","",99,null],[11,"next","","",99,null],[11,"clone","","",99,null],[11,"fmt","","",100,null],[11,"next","","",100,null],[11,"clone","","",100,null],[11,"fmt","","",101,null],[11,"next","","",101,null],[11,"clone","","",101,null],[11,"next_back","","",100,null],[11,"next_back","","",101,null],[11,"fmt","","",102,null],[11,"next","","",102,null],[11,"clone","","",102,null],[11,"fmt","","",103,null],[11,"next","","",103,null],[11,"clone","","",103,null],[11,"next_back","","",102,null],[11,"next_back","","",103,null],[11,"fmt","","",104,null],[11,"clone","","",104,null],[11,"next","","",104,null],[11,"size_hint","","",104,null],[11,"next_back","","",104,null],[11,"fmt","","",105,null],[11,"clone","","",105,null],[11,"next","","",105,null],[11,"size_hint","","",105,null],[11,"next_back","","",105,null],[11,"fmt","","",106,null],[11,"clone","","",106,null],[11,"fmt","core::hash::sip","",107,null],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",107,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",107,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",107,null],[11,"finish","","",107,null],[11,"clone","","",107,null],[11,"default","","",107,{"inputs":[],"output":{"name":"siphasher"}}],[11,"fmt","core::hash","",108,null],[11,"build_hasher","","",108,null],[11,"clone","","",108,null],[11,"default","","",108,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"fmt","core::fmt","",109,null],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",110,null],[11,"finish","","Finishes output and returns any error encountered.",110,null],[11,"field","","Adds a new field to the generated tuple struct output.",111,null],[11,"finish","","Finishes output and returns any error encountered.",111,null],[11,"entry","","Adds a new entry to the set output.",112,null],[11,"entries","","Adds the contents of an iterator of entries to the set output.",112,null],[11,"finish","","Finishes output and returns any error encountered.",112,null],[11,"entry","","Adds a new entry to the list output.",113,null],[11,"entries","","Adds the contents of an iterator of entries to the list output.",113,null],[11,"finish","","Finishes output and returns any error encountered.",113,null],[11,"entry","","Adds a new entry to the map output.",114,null],[11,"entries","","Adds the contents of an iterator of entries to the map output.",114,null],[11,"finish","","Finishes output and returns any error encountered.",114,null],[11,"partial_cmp","core::fmt","",115,null],[11,"eq","","",115,null],[11,"cmp","","",115,null],[11,"hash","","",115,null],[11,"default","","",115,{"inputs":[],"output":{"name":"error"}}],[11,"fmt","","",115,null],[11,"clone","","",115,null],[11,"clone","","",116,null],[11,"fmt","","",116,null],[11,"fmt","","",116,null],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",117,null],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",117,null],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",117,null],[11,"write_fmt","","Writes some formatted information into this instance",117,null],[11,"flags","","Flags for formatting (packed version of rt::Flag)",117,null],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",117,null],[11,"align","","Flag indicating what form of alignment was requested",117,null],[11,"width","","Optionally specified integer width that the output should be",117,null],[11,"precision","","Optionally specified precision for numeric types",117,null],[11,"sign_plus","","Determines if the `+` flag was specified.",117,null],[11,"sign_minus","","Determines if the `-` flag was specified.",117,null],[11,"alternate","","Determines if the `#` flag was specified.",117,null],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",117,null],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",117,null],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",117,null],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",117,null],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",117,null],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",117,null],[11,"write_str","","",117,null],[11,"write_char","","",117,null],[11,"write_fmt","","",117,null],[11,"fmt","","",115,null],[11,"fmt","core::marker","",8,null],[11,"fmt","core::cell","",31,null],[11,"fmt","","",33,null],[11,"fmt","","",34,null],[11,"fmt","","",35,null],[11,"fmt","","",36,null],[11,"hash_slice","serde::core::hash","Feeds a slice of this type into the state provided.",118,null],[11,"write_u8","","Write a single `u8` into this hasher",119,null],[11,"write_u16","","Write a single `u16` into this hasher.",119,null],[11,"write_u32","","Write a single `u32` into this hasher.",119,null],[11,"write_u64","","Write a single `u64` into this hasher.",119,null],[11,"write_usize","","Write a single `usize` into this hasher.",119,null],[11,"write_i8","","Write a single `i8` into this hasher.",119,null],[11,"write_i16","","Write a single `i16` into this hasher.",119,null],[11,"write_i32","","Write a single `i32` into this hasher.",119,null],[11,"write_i64","","Write a single `i64` into this hasher.",119,null],[11,"write_isize","","Write a single `isize` into this hasher.",119,null],[11,"write_char","serde::core::fmt","Writes a `char` into this writer, returning whether the write succeeded.",120,null],[11,"write_fmt","","Glue for usage of the `write!` macro with implementors of this trait.",120,null],[11,"ne","serde::core::cmp","This method tests for `!=`.",121,null],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `&lt;` operator.",122,null],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `&lt;=`\noperator.",122,null],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `&gt;` operator.",122,null],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `&gt;=`\noperator.",122,null],[11,"clone","rustc_unicode::u_str","",123,null],[11,"new","","Create a UTF-16 encoder from any `char` iterator.",123,{"inputs":[{"name":"i"}],"output":{"name":"utf16encoder"}}],[11,"next","","",123,null],[11,"size_hint","","",123,null],[11,"next","","",124,null],[11,"next_back","","",124,null],[11,"next","rustc_unicode::char","",125,null],[11,"next","","",126,null],[11,"clone","","",127,null],[11,"eq","","",128,null],[11,"ne","","",128,null],[11,"clone","","",128,null],[11,"fmt","","",128,null],[11,"next","","",127,null],[11,"size_hint","","",127,null],[11,"unpaired_surrogate","","Returns the unpaired surrogate which caused this error.",128,null],[11,"fmt","","",128,null],[11,"clone","collections::binary_heap","",129,null],[11,"clone_from","","",129,null],[11,"default","","",129,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"fmt","","",129,null],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",129,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",129,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",129,null],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",129,null],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",129,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",129,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",129,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",129,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",129,null],[11,"push","","Pushes an item onto the binary heap.",129,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",129,null],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",129,null],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",129,null],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",129,null],[11,"len","","Returns the length of the binary heap.",129,null],[11,"is_empty","","Checks if the binary heap is empty.",129,null],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",129,null],[11,"clear","","Drops all items from the binary heap.",129,null],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",129,null],[11,"clone","","",130,null],[11,"next","","",130,null],[11,"size_hint","","",130,null],[11,"next_back","","",130,null],[11,"clone","","",131,null],[11,"next","","",131,null],[11,"size_hint","","",131,null],[11,"next_back","","",131,null],[11,"next","","",132,null],[11,"size_hint","","",132,null],[11,"next_back","","",132,null],[11,"from","","",129,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",133,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",129,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",129,null],[11,"extend","","",129,null],[11,"extend","","",129,null],[11,"drop","collections::btree::map","",134,null],[11,"clone","","",134,null],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",134,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",134,null],[11,"get","","Returns a reference to the value corresponding to the key.",134,null],[11,"contains_key","","Returns true if the map contains a value for the specified key.",134,null],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",134,null],[11,"insert","","Inserts a key-value pair into the map.",134,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",134,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",134,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",134,null],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",134,null],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",134,null],[11,"next","","",135,null],[11,"size_hint","","",135,null],[11,"next_back","","",135,null],[11,"len","","",135,null],[11,"clone","","",135,null],[11,"next","","",136,null],[11,"size_hint","","",136,null],[11,"next_back","","",136,null],[11,"len","","",136,null],[11,"into_iter","","",134,null],[11,"drop","","",137,null],[11,"next","","",137,null],[11,"size_hint","","",137,null],[11,"next_back","","",137,null],[11,"len","","",137,null],[11,"next","","",138,null],[11,"size_hint","","",138,null],[11,"next_back","","",138,null],[11,"len","","",138,null],[11,"clone","","",138,null],[11,"next","","",139,null],[11,"size_hint","","",139,null],[11,"next_back","","",139,null],[11,"len","","",139,null],[11,"clone","","",139,null],[11,"next","","",140,null],[11,"next","","",141,null],[11,"size_hint","","",141,null],[11,"next_back","","",141,null],[11,"len","","",141,null],[11,"next_back","","",140,null],[11,"clone","","",140,null],[11,"next","","",142,null],[11,"next_back","","",142,null],[11,"from_iter","","",134,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",134,null],[11,"extend","","",134,null],[11,"hash","","",134,null],[11,"default","","",134,{"inputs":[],"output":{"name":"btreemap"}}],[11,"eq","","",134,null],[11,"partial_cmp","","",134,null],[11,"cmp","","",134,null],[11,"fmt","","",134,null],[11,"index","","",134,null],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",134,null],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",134,null],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",134,null],[11,"values","","Gets an iterator over the values of the map, in order by key.",134,null],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",134,null],[11,"len","","Returns the number of elements in the map.",134,null],[11,"is_empty","","Returns true if the map contains no elements.",134,null],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",143,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",143,null],[11,"key","","Returns a reference to this entry&#39;s key.",143,null],[11,"key","","Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.",144,null],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it.",144,null],[11,"key","","Gets a reference to the key in the entry.",145,null],[11,"get","","Gets a reference to the value in the entry.",145,null],[11,"get_mut","","Gets a mutable reference to the value in the entry.",145,null],[11,"into_mut","","Converts the entry into a mutable reference to its value.",145,null],[11,"insert","","Sets the value of the entry with the OccupiedEntry&#39;s key,\nand returns the entry&#39;s old value.",145,null],[11,"remove","","Takes the value of the entry out of the map, and returns it.",145,null],[11,"partial_cmp","collections::btree::set","",146,null],[11,"lt","","",146,null],[11,"le","","",146,null],[11,"gt","","",146,null],[11,"ge","","",146,null],[11,"cmp","","",146,null],[11,"eq","","",146,null],[11,"ne","","",146,null],[11,"hash","","",146,null],[11,"clone","","",146,null],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",146,{"inputs":[],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet&#39;s contents.",146,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",146,null],[11,"difference","","Visits the values representing the difference, in ascending order.",146,null],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",146,null],[11,"intersection","","Visits the values representing the intersection, in ascending order.",146,null],[11,"union","","Visits the values representing the union, in ascending order.",146,null],[11,"len","","Returns the number of elements in the set.",146,null],[11,"is_empty","","Returns true if the set contains no elements.",146,null],[11,"clear","","Clears the set, removing all values.",146,null],[11,"contains","","Returns `true` if the set contains a value.",146,null],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",146,null],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",146,null],[11,"is_subset","","Returns `true` if the set is a subset of another.",146,null],[11,"is_superset","","Returns `true` if the set is a superset of another.",146,null],[11,"insert","","Adds a value to the set.",146,null],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",146,null],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",146,null],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",146,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",146,null],[11,"from_iter","","",146,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet&#39;s contents.",146,null],[11,"extend","","",146,null],[11,"extend","","",146,null],[11,"default","","",146,{"inputs":[],"output":{"name":"btreeset"}}],[11,"fmt","","",146,null],[11,"clone","","",147,null],[11,"next","","",147,null],[11,"size_hint","","",147,null],[11,"next_back","","",147,null],[11,"len","","",147,null],[11,"next","","",148,null],[11,"size_hint","","",148,null],[11,"next_back","","",148,null],[11,"len","","",148,null],[11,"clone","","",149,null],[11,"next","","",149,null],[11,"next_back","","",149,null],[11,"clone","","",150,null],[11,"next","","",150,null],[11,"size_hint","","",150,null],[11,"clone","","",151,null],[11,"next","","",151,null],[11,"size_hint","","",151,null],[11,"clone","","",152,null],[11,"next","","",152,null],[11,"size_hint","","",152,null],[11,"clone","","",153,null],[11,"next","","",153,null],[11,"size_hint","","",153,null],[11,"borrow","collections::borrow","",154,null],[11,"clone","","",154,null],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",154,null],[11,"into_owned","","Extracts the owned data.",154,null],[11,"deref","","",154,null],[11,"cmp","","",154,null],[11,"eq","","",154,null],[11,"partial_cmp","","",154,null],[11,"fmt","","",154,null],[11,"fmt","","",154,null],[11,"hash","","",154,null],[11,"as_ref","","",154,null],[11,"hash","collections::enum_set","",155,null],[11,"cmp","","",155,null],[11,"partial_cmp","","",155,null],[11,"lt","","",155,null],[11,"le","","",155,null],[11,"gt","","",155,null],[11,"ge","","",155,null],[11,"eq","","",155,null],[11,"ne","","",155,null],[11,"clone","","",155,null],[11,"fmt","","",155,null],[11,"new","","Returns an empty `EnumSet`.",155,{"inputs":[],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",155,null],[11,"is_empty","","Returns true if the `EnumSet` is empty.",155,null],[11,"clear","","",155,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",155,null],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",155,null],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",155,null],[11,"union","","Returns the union of both `EnumSets`.",155,null],[11,"intersection","","Returns the intersection of both `EnumSets`.",155,null],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn&#39;t there before",155,null],[11,"remove","","Removes an enum from the EnumSet",155,null],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",155,null],[11,"iter","","Returns an iterator over an `EnumSet`.",155,null],[11,"sub","","",155,null],[11,"bitor","","",155,null],[11,"bitand","","",155,null],[11,"bitxor","","",155,null],[11,"clone","","",156,null],[11,"next","","",156,null],[11,"size_hint","","",156,null],[11,"from_iter","","",155,{"inputs":[{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",155,null],[11,"extend","","",155,null],[11,"clone","collections::linked_list","",157,null],[11,"clone","","",158,null],[11,"default","","",159,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",159,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",159,null],[11,"iter","","Provides a forward iterator.",159,null],[11,"iter_mut","","Provides a forward iterator with mutable references.",159,null],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",159,null],[11,"len","","Returns the length of the `LinkedList`.",159,null],[11,"clear","","Removes all elements from the `LinkedList`.",159,null],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the\ngiven value.",159,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",159,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",159,null],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",159,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",159,null],[11,"push_front","","Adds an element first in the list.",159,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",159,null],[11,"push_back","","Appends an element to the back of a list",159,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",159,null],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",159,null],[11,"front_place","","Returns a place for insertion at the front of the list.",159,null],[11,"back_place","","Returns a place for insertion at the back of the list.",159,null],[11,"drop","","",159,null],[11,"next","","",157,null],[11,"size_hint","","",157,null],[11,"next_back","","",157,null],[11,"next","","",160,null],[11,"size_hint","","",160,null],[11,"next_back","","",160,null],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",160,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",160,null],[11,"next","","",158,null],[11,"size_hint","","",158,null],[11,"next_back","","",158,null],[11,"from_iter","","",159,{"inputs":[{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",159,null],[11,"extend","","",159,null],[11,"extend","","",159,null],[11,"eq","","",159,null],[11,"ne","","",159,null],[11,"partial_cmp","","",159,null],[11,"cmp","","",159,null],[11,"clone","","",159,null],[11,"fmt","","",159,null],[11,"hash","","",159,null],[11,"make_place","","",161,null],[11,"pointer","","",161,null],[11,"finalize","","",161,null],[11,"make_place","","",162,null],[11,"pointer","","",162,null],[11,"finalize","","",162,null],[11,"start","core::ops","",11,null],[11,"end","","",12,null],[11,"start","","",10,null],[11,"end","","",10,null],[11,"borrow","collections::vec","",133,null],[11,"borrow_mut","","",133,null],[11,"clone","collections::str","",163,null],[11,"next","","",163,null],[11,"size_hint","","",163,null],[11,"borrow","collections::string","",164,null],[11,"cmp","","",164,null],[11,"partial_cmp","","",164,null],[11,"lt","","",164,null],[11,"le","","",164,null],[11,"gt","","",164,null],[11,"ge","","",164,null],[11,"fmt","","",165,null],[11,"fmt","","",166,null],[11,"new","","Creates a new empty `String`.",164,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",164,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",164,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",164,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\nif `v` contains any invalid data.",164,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",164,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",164,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",164,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",164,null],[11,"as_str","","Extracts a string slice containing the entire string.",164,null],[11,"as_mut_str","","Extracts a string slice containing the entire string.",164,null],[11,"push_str","","Appends a given string slice onto the end of this `String`.",164,null],[11,"capacity","","Returns this `String`&#39;s capacity, in bytes.",164,null],[11,"reserve","","Ensures that this `String`&#39;s capacity is at least `additional` bytes\nlarger than its length.",164,null],[11,"reserve_exact","","Ensures that this `String`&#39;s capacity is `additional` bytes\nlarger than its length.",164,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",164,null],[11,"push","","Appends the given `char` to the end of this `String`.",164,null],[11,"as_bytes","","Returns a byte slice of this `String`&#39;s contents.",164,null],[11,"truncate","","Shortens this `String` to the specified length.",164,null],[11,"pop","","Removes the last character from the string buffer and returns it.",164,null],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",164,null],[11,"insert","","Inserts a character into this `String` at a byte position.",164,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",164,null],[11,"len","","Returns the length of this `String`, in bytes.",164,null],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",164,null],[11,"clear","","Truncates this `String`, removing all contents.",164,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",164,null],[11,"into_boxed_str","","Converts this `String` into a `Box&lt;str&gt;`.",164,null],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",165,null],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",165,null],[11,"fmt","","",165,null],[11,"fmt","","",166,null],[11,"clone","","",164,null],[11,"clone_from","","",164,null],[11,"from_iter","","",164,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",164,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",164,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",164,null],[11,"extend","","",164,null],[11,"extend","","",164,null],[11,"extend","","",164,null],[11,"eq","","",164,null],[11,"ne","","",164,null],[11,"eq","","",164,null],[11,"ne","","",164,null],[11,"eq","","",164,null],[11,"ne","","",164,null],[11,"eq","collections::borrow","",154,null],[11,"ne","","",154,null],[11,"eq","","",154,null],[11,"ne","","",154,null],[11,"eq","","",154,null],[11,"ne","","",154,null],[11,"eq","collections::string","",164,null],[11,"ne","","",164,null],[11,"default","","",164,{"inputs":[],"output":{"name":"string"}}],[11,"fmt","","",164,null],[11,"fmt","","",164,null],[11,"hash","","",164,null],[11,"add","","",164,null],[11,"index","","",164,null],[11,"index","","",164,null],[11,"index","","",164,null],[11,"index","","",164,null],[11,"index","","",164,null],[11,"index","","",164,null],[11,"index_mut","","",164,null],[11,"index_mut","","",164,null],[11,"index_mut","","",164,null],[11,"index_mut","","",164,null],[11,"index_mut","","",164,null],[11,"index_mut","","",164,null],[11,"deref","","",164,null],[11,"deref_mut","","",164,null],[11,"from_str","","",164,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",167,null],[11,"fmt","","",167,null],[11,"fmt","","",167,null],[11,"eq","","",167,null],[11,"as_ref","","",164,null],[11,"as_ref","","",164,null],[11,"from","","",164,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",154,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",154,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",164,null],[11,"write_str","","",164,null],[11,"write_char","","",164,null],[11,"drop","","",168,null],[11,"next","","",168,null],[11,"size_hint","","",168,null],[11,"next_back","","",168,null],[11,"new","collections::vec","Constructs a new, empty `Vec&lt;T&gt;`.",133,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",133,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",133,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",133,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",133,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",133,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",133,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",133,null],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",133,null],[11,"as_slice","","Extracts a slice containing the entire vector.",133,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",133,null],[11,"set_len","","Sets the length of a vector.",133,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",133,null],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",133,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",133,null],[11,"retain","","Retains only the elements specified by the predicate.",133,null],[11,"push","","Appends an element to the back of a collection.",133,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",133,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",133,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",133,null],[11,"clear","","Clears the vector, removing all values.",133,null],[11,"len","","Returns the number of elements in the vector.",133,null],[11,"is_empty","","Returns `true` if the vector contains no elements.",133,null],[11,"split_off","","Splits the collection into two at the given index.",133,null],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",133,null],[11,"extend_from_slice","","Appends all elements in a slice to the `Vec`.",133,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",133,null],[11,"clone","","",133,null],[11,"clone_from","","",133,null],[11,"hash","","",133,null],[11,"index","","",133,null],[11,"index_mut","","",133,null],[11,"index","","",133,null],[11,"index","","",133,null],[11,"index","","",133,null],[11,"index","","",133,null],[11,"index","","",133,null],[11,"index","","",133,null],[11,"index_mut","","",133,null],[11,"index_mut","","",133,null],[11,"index_mut","","",133,null],[11,"index_mut","","",133,null],[11,"index_mut","","",133,null],[11,"index_mut","","",133,null],[11,"deref","","",133,null],[11,"deref_mut","","",133,null],[11,"from_iter","","",133,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",133,null],[11,"extend","","",133,null],[11,"extend","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","collections::borrow","",154,null],[11,"ne","","",154,null],[11,"eq","","",154,null],[11,"ne","","",154,null],[11,"eq","","",154,null],[11,"ne","","",154,null],[11,"eq","collections::vec","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"partial_cmp","","",133,null],[11,"cmp","","",133,null],[11,"drop","","",133,null],[11,"default","","",133,{"inputs":[],"output":{"name":"vec"}}],[11,"fmt","","",133,null],[11,"as_ref","","",133,null],[11,"as_mut","","",133,null],[11,"as_ref","","",133,null],[11,"as_mut","","",133,null],[11,"from","","",133,null],[11,"from","","",133,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","collections::borrow","",154,null],[11,"from","","",154,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from_iter","","",154,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"next","collections::vec","",169,null],[11,"size_hint","","",169,null],[11,"count","","",169,null],[11,"next_back","","",169,null],[11,"clone","","",169,null],[11,"drop","","",169,null],[11,"next","","",170,null],[11,"size_hint","","",170,null],[11,"next_back","","",170,null],[11,"drop","","",170,null],[11,"clone","collections::vec_deque","",171,null],[11,"drop","","",171,null],[11,"default","","",171,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",171,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",171,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",171,null],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",171,null],[11,"swap","","Swaps elements at indices `i` and `j`.",171,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",171,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",171,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",171,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",171,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",171,null],[11,"iter","","Returns a front-to-back iterator.",171,null],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",171,null],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",171,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",171,null],[11,"len","","Returns the number of elements in the `VecDeque`.",171,null],[11,"is_empty","","Returns true if the buffer contains no elements",171,null],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",171,null],[11,"clear","","Clears the buffer, removing all values.",171,null],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the\ngiven value.",171,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",171,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",171,null],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",171,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",171,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",171,null],[11,"push_front","","Inserts an element first in the sequence.",171,null],[11,"push_back","","Appends an element to the back of a buffer",171,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",171,null],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",171,null],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",171,null],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",171,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",171,null],[11,"split_off","","Splits the collection into two at the given index.",171,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",171,null],[11,"retain","","Retains only the elements specified by the predicate.",171,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",171,null],[11,"clone","","",172,null],[11,"next","","",172,null],[11,"size_hint","","",172,null],[11,"next_back","","",172,null],[11,"next","","",173,null],[11,"size_hint","","",173,null],[11,"next_back","","",173,null],[11,"clone","","",174,null],[11,"next","","",174,null],[11,"size_hint","","",174,null],[11,"next_back","","",174,null],[11,"drop","","",175,null],[11,"next","","",175,null],[11,"size_hint","","",175,null],[11,"next_back","","",175,null],[11,"eq","","",171,null],[11,"partial_cmp","","",171,null],[11,"cmp","","",171,null],[11,"hash","","",171,null],[11,"index","","",171,null],[11,"index_mut","","",171,null],[11,"from_iter","","",171,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",171,null],[11,"extend","","",171,null],[11,"extend","","",171,null],[11,"fmt","","",171,null],[11,"from","","",171,{"inputs":[{"name":"vec"}],"output":{"name":"vecdeque"}}],[11,"from","collections::vec","",133,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"eq","collections","",176,null],[11,"ne","","",176,null],[11,"hash","","",176,null],[11,"fmt","","",176,null],[11,"clone","","",176,null],[11,"clone","alloc::boxed","",177,null],[11,"pointer","","",178,null],[11,"make_place","","",178,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"finalize","","",178,null],[11,"finalize","","",179,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",177,null],[11,"drop","","",178,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",179,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",179,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",179,null],[11,"default","","",179,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",179,{"inputs":[],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box&#39;s contents.",179,null],[11,"clone_from","","Copies `source`&#39;s contents into `self` without creating a new allocation.",179,null],[11,"clone","","",179,null],[11,"eq","","",179,null],[11,"ne","","",179,null],[11,"partial_cmp","","",179,null],[11,"lt","","",179,null],[11,"le","","",179,null],[11,"ge","","",179,null],[11,"gt","","",179,null],[11,"cmp","","",179,null],[11,"hash","","",179,null],[11,"from","","",179,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",179,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",179,null],[11,"fmt","","",179,null],[11,"fmt","","",179,null],[11,"fmt","","",179,null],[11,"deref","","",179,null],[11,"deref_mut","","",179,null],[11,"next","","",179,null],[11,"size_hint","","",179,null],[11,"next_back","","",179,null],[11,"call_once","","",179,null],[11,"call_once","","",179,null],[11,"clone","","",179,null],[11,"borrow","","",179,null],[11,"borrow_mut","","",179,null],[11,"as_ref","","",179,null],[11,"as_mut","","",179,null],[11,"is_contained_in","serde::core::str::pattern","Checks whether the pattern matches anywhere in the haystack",180,null],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",180,null],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",180,null],[11,"next_match","","Find the next `Match` result. See `next()`",181,null],[11,"next_reject","","Find the next `Reject` result. See `next()`",181,null],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",182,null],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",182,null],[11,"size_hint","serde::core::iter","Returns the bounds on the remaining length of the iterator.",183,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",183,null],[11,"last","","Consumes the iterator, returning the last element.",183,null],[11,"nth","","Consumes the `n` first elements of the iterator, then returns the\n`next()` one.",183,null],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",183,null],[11,"zip","","&#39;Zips up&#39; two iterators into a single iterator of pairs.",183,null],[11,"map","","Takes a closure and creates an iterator which calls that closure on each\nelement.",183,null],[11,"filter","","Creates an iterator which uses a closure to determine if an element\nshould be yielded.",183,null],[11,"filter_map","","Creates an iterator that both filters and maps.",183,null],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as\nthe next value.",183,null],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of\nthe iterator without consuming it.",183,null],[11,"skip_while","","Creates an iterator that [`skip()`]s elements based on a predicate.",183,null],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",183,null],[11,"skip","","Creates an iterator that skips the first `n` elements.",183,null],[11,"take","","Creates an iterator that yields its first `n` elements.",183,null],[11,"scan","","An iterator adaptor similar to [`fold()`] that holds internal state and\nproduces a new iterator.",183,null],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",183,null],[11,"fuse","","Creates an iterator which ends after the first `None`.",183,null],[11,"inspect","","Do something with each element of an iterator, passing the value on.",183,null],[11,"by_ref","","Borrows an iterator, rather than consuming it.",183,null],[11,"collect","","Transforms an iterator into a collection.",183,null],[11,"partition","","Consumes an iterator, creating two collections from it.",183,null],[11,"fold","","An iterator adaptor that applies a function, producing a single, final value.",183,null],[11,"all","","Tests if every element of the iterator matches a predicate.",183,null],[11,"any","","Tests if any element of the iterator matches a predicate.",183,null],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",183,null],[11,"position","","Searches for an element in an iterator, returning its index.",183,null],[11,"rposition","","Searches for an element in an iterator from the right, returning its\nindex.",183,null],[11,"max","","Returns the maximum element of an iterator.",183,null],[11,"min","","Returns the minimum element of an iterator.",183,null],[11,"max_by_key","","Returns the element that gives the maximum value from the\nspecified function.",183,null],[11,"min_by_key","","Returns the element that gives the minimum value from the\nspecified function.",183,null],[11,"rev","","Reverses an iterator&#39;s direction.",183,null],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",183,null],[11,"cloned","","Creates an iterator which `clone()`s all of its elements.",183,null],[11,"cycle","","Repeats an iterator endlessly.",183,null],[11,"sum","","Sums the elements of an iterator.",183,null],[11,"product","","Iterates over the entire iterator, multiplying all the elements",183,null],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",183,null],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",183,null],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of\nanother.",183,null],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of\nanother.",183,null],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically\nless than those of another.",183,null],[11,"le","","Determines if the elements of this `Iterator` are lexicographically\nless or equal to those of another.",183,null],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically\ngreater than those of another.",183,null],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically\ngreater than or equal to those of another.",183,null],[11,"len","","Returns the exact number of times the iterator will iterate.",184,null],[0,"bytes","serde","Helper module to enable serializing bytes more efficiently",null,null],[3,"ByteBuf","serde::bytes","`ByteBuf` wraps a `Vec&lt;u8&gt;` and serializes as a byte array.",null,null],[3,"ByteBufVisitor","","This type implements the `serde::de::Visitor` trait for a `ByteBuf`.",null,null],[3,"Bytes","","`Bytes` wraps a `&amp;[u8]` in order to serialize into a byte array.",null,null],[11,"cmp","","",185,null],[11,"partial_cmp","","",185,null],[11,"lt","","",185,null],[11,"le","","",185,null],[11,"gt","","",185,null],[11,"ge","","",185,null],[11,"eq","","",185,null],[11,"ne","","",185,null],[11,"hash","","",185,null],[11,"default","","",185,{"inputs":[],"output":{"name":"bytebuf"}}],[11,"clone","","",185,null],[11,"new","","Construct a new, empty `ByteBuf`.",185,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Construct a new, empty `ByteBuf` with the specified capacity.",185,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"fmt","","",185,null],[11,"into","","",185,null],[11,"from","","",185,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"as_ref","","",185,null],[11,"as_ref","","",185,null],[11,"as_mut","","",185,null],[11,"as_mut","","",185,null],[11,"deref","","",185,null],[11,"deref_mut","","",185,null],[11,"serialize","","",185,null],[11,"visit_unit","","",186,null],[11,"visit_seq","","",186,null],[11,"visit_bytes","","",186,null],[11,"visit_byte_buf","","",186,null],[11,"deserialize","","",185,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"cmp","","",187,null],[11,"partial_cmp","","",187,null],[11,"lt","","",187,null],[11,"le","","",187,null],[11,"gt","","",187,null],[11,"ge","","",187,null],[11,"eq","","",187,null],[11,"ne","","",187,null],[11,"hash","","",187,null],[11,"clone","","",187,null],[11,"fmt","","",187,null],[11,"from","","",187,null],[11,"from","","",187,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",187,null],[11,"deref","","",187,null],[11,"serialize","","",187,null],[0,"de","serde","Generic deserialization framework.",null,null],[4,"Type","serde::de","`Type` represents all the primitive types that can be deserialized. This is used by\n`Error::invalid_type`.",null,null],[13,"Bool","","Represents a `bool` type.",188,null],[13,"Usize","","Represents a `usize` type.",188,null],[13,"U8","","Represents a `u8` type.",188,null],[13,"U16","","Represents a `u16` type.",188,null],[13,"U32","","Represents a `u32` type.",188,null],[13,"U64","","Represents a `u64` type.",188,null],[13,"Isize","","Represents a `isize` type.",188,null],[13,"I8","","Represents a `i8` type.",188,null],[13,"I16","","Represents a `i16` type.",188,null],[13,"I32","","Represents a `i32` type.",188,null],[13,"I64","","Represents a `i64` type.",188,null],[13,"F32","","Represents a `f32` type.",188,null],[13,"F64","","Represents a `f64` type.",188,null],[13,"Char","","Represents a `char` type.",188,null],[13,"Str","","Represents a `&amp;str` type.",188,null],[13,"String","","Represents a `String` type.",188,null],[13,"Unit","","Represents a `()` type.",188,null],[13,"Option","","Represents an `Option&lt;T&gt;` type.",188,null],[13,"Seq","","Represents a sequence type.",188,null],[13,"Map","","Represents a map type.",188,null],[13,"UnitStruct","","Represents a unit struct type.",188,null],[13,"NewtypeStruct","","Represents a newtype type.",188,null],[13,"TupleStruct","","Represents a tuple struct type.",188,null],[13,"Struct","","Represents a struct type.",188,null],[13,"FieldName","","Represents a struct field name.",188,null],[13,"Tuple","","Represents a tuple type.",188,null],[13,"Enum","","Represents an `enum` type.",188,null],[13,"VariantName","","Represents an enum variant name.",188,null],[13,"StructVariant","","Represents a struct variant.",188,null],[13,"TupleVariant","","Represents a tuple variant.",188,null],[13,"UnitVariant","","Represents a unit variant.",188,null],[13,"Bytes","","Represents a `&amp;[u8]` type.",188,null],[0,"impls","","This module contains `Deserialize` and `Visitor` implementations.",null,null],[3,"UnitVisitor","serde::de::impls","A visitor that produces a `()`.",null,null],[3,"BoolVisitor","","A visitor that produces a `bool`.",null,null],[3,"PhantomDataVisitor","","A visitor that produces a `PhantomData`.",null,null],[3,"BinaryHeapVisitor","","A visitor that produces a sequence.",null,null],[3,"BTreeSetVisitor","","A visitor that produces a sequence.",null,null],[3,"LinkedListVisitor","","A visitor that produces a sequence.",null,null],[3,"HashSetVisitor","","A visitor that produces a sequence.",null,null],[3,"VecVisitor","","A visitor that produces a sequence.",null,null],[3,"VecDequeVisitor","","A visitor that produces a sequence.",null,null],[3,"TupleVisitor1","","Construct a tuple visitor.",null,null],[3,"TupleVisitor2","","Construct a tuple visitor.",null,null],[3,"TupleVisitor3","","Construct a tuple visitor.",null,null],[3,"TupleVisitor4","","Construct a tuple visitor.",null,null],[3,"TupleVisitor5","","Construct a tuple visitor.",null,null],[3,"TupleVisitor6","","Construct a tuple visitor.",null,null],[3,"TupleVisitor7","","Construct a tuple visitor.",null,null],[3,"TupleVisitor8","","Construct a tuple visitor.",null,null],[3,"TupleVisitor9","","Construct a tuple visitor.",null,null],[3,"TupleVisitor10","","Construct a tuple visitor.",null,null],[3,"TupleVisitor11","","Construct a tuple visitor.",null,null],[3,"TupleVisitor12","","Construct a tuple visitor.",null,null],[3,"TupleVisitor13","","Construct a tuple visitor.",null,null],[3,"TupleVisitor14","","Construct a tuple visitor.",null,null],[3,"TupleVisitor15","","Construct a tuple visitor.",null,null],[3,"TupleVisitor16","","Construct a tuple visitor.",null,null],[3,"BTreeMapVisitor","","A visitor that produces a map.",null,null],[3,"HashMapVisitor","","A visitor that produces a map.",null,null],[3,"IgnoredAny","","A target for deserializers that want to ignore data. Implements\nDeserialize and silently eats data given to it.",null,null],[11,"visit_unit","","",189,null],[11,"visit_seq","","",189,null],[11,"visit_bool","","",190,null],[11,"visit_str","","",190,null],[11,"deserialize","collections::string","",164,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","core::option","",63,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"visit_unit","serde::de::impls","",191,null],[11,"deserialize","core::marker","",8,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",192,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",192,null],[11,"visit_seq","","",192,null],[11,"deserialize","collections::binary_heap","",129,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",193,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",193,null],[11,"visit_seq","","",193,null],[11,"deserialize","collections::btree::set","",146,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",194,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",194,null],[11,"visit_seq","","",194,null],[11,"deserialize","collections::linked_list","",159,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",195,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",195,null],[11,"visit_seq","","",195,null],[11,"deserialize","std::collections::hash::set","",196,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",197,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",197,null],[11,"visit_seq","","",197,null],[11,"deserialize","collections::vec","",133,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",198,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",198,null],[11,"visit_seq","","",198,null],[11,"deserialize","collections::vec_deque","",171,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a `TupleVisitor*&lt;T&gt;`.",199,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",199,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",200,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",200,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",201,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",201,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",202,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",202,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",203,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",203,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",204,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",204,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",205,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",205,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",206,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",206,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",207,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",207,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",208,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",208,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",209,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",209,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",210,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",210,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",211,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",211,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",212,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",212,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",213,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",213,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",214,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",214,null],[11,"new","","Construct a `MapVisitor*&lt;T&gt;`.",215,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",215,null],[11,"visit_map","","",215,null],[11,"deserialize","collections::btree::map","",134,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a `MapVisitor*&lt;T&gt;`.",216,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",216,null],[11,"visit_map","","",216,null],[11,"deserialize","std::collections::hash::map","",217,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","std::net::ip","",218,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",219,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","std::net::addr","",220,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",221,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",222,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","std::path","",223,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","alloc::boxed","",179,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",179,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",179,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","alloc::arc","",224,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","alloc::rc","",225,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","collections::borrow","",154,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","core::result","",69,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","serde::de::impls","",226,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"value","serde::de","This module supports deserializing from primitives with the `ValueDeserializer` trait.",null,null],[3,"UnitDeserializer","serde::de::value","A helper deserializer that deserializes a `()`.",null,null],[3,"BoolDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"IsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"UsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"CharDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"StrDeserializer","","A helper deserializer that deserializes a `&amp;str`.",null,null],[3,"StringDeserializer","","A helper deserializer that deserializes a `String`.",null,null],[3,"SeqDeserializer","","A helper deserializer that deserializes a sequence.",null,null],[3,"SeqVisitorDeserializer","","A helper deserializer that deserializes a sequence using a `SeqVisitor`.",null,null],[3,"MapDeserializer","","A helper deserializer that deserializes a map.",null,null],[3,"MapVisitorDeserializer","","A helper deserializer that deserializes a map using a `MapVisitor`.",null,null],[3,"BytesDeserializer","","A helper deserializer that deserializes a `&amp;[u8]`.",null,null],[3,"ByteBufDeserializer","","A helper deserializer that deserializes a `Vec&lt;u8&gt;`.",null,null],[4,"Error","","This represents all the possible errors that can occur using the `ValueDeserializer`.",null,null],[13,"Custom","","The value had some custom error.",227,null],[13,"InvalidType","","The value had an incorrect type.",227,null],[13,"InvalidLength","","The value had an invalid length.",227,null],[13,"InvalidValue","","The value is invalid and cannot be deserialized.",227,null],[13,"EndOfStream","","EOF while deserializing a value.",227,null],[13,"UnknownVariant","","Unknown variant in enum.",227,null],[13,"UnknownField","","Unknown field in struct.",227,null],[13,"MissingField","","Struct is missing a field.",227,null],[8,"ValueDeserializer","","This trait converts primitive types into a deserializer.",null,null],[16,"Deserializer","","The actual deserializer type.",228,null],[10,"into_deserializer","","Convert this value into a deserializer.",228,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"fmt","","",227,null],[11,"clone","","",227,null],[11,"custom","","",227,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"end_of_stream","","",227,{"inputs":[],"output":{"name":"self"}}],[11,"invalid_type","","",227,{"inputs":[{"name":"type"}],"output":{"name":"self"}}],[11,"invalid_value","","",227,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"invalid_length","","",227,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"unknown_variant","","",227,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"unknown_field","","",227,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"missing_field","","",227,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"fmt","","",227,null],[11,"description","","",227,null],[11,"cause","","",227,null],[11,"deserialize_bool","","",229,null],[11,"deserialize_f64","","",229,null],[11,"deserialize_f32","","",229,null],[11,"deserialize_u8","","",229,null],[11,"deserialize_u16","","",229,null],[11,"deserialize_u32","","",229,null],[11,"deserialize_u64","","",229,null],[11,"deserialize_usize","","",229,null],[11,"deserialize_i8","","",229,null],[11,"deserialize_i16","","",229,null],[11,"deserialize_i32","","",229,null],[11,"deserialize_i64","","",229,null],[11,"deserialize_isize","","",229,null],[11,"deserialize_char","","",229,null],[11,"deserialize_str","","",229,null],[11,"deserialize_string","","",229,null],[11,"deserialize_ignored_any","","",229,null],[11,"deserialize_bytes","","",229,null],[11,"deserialize_unit_struct","","",229,null],[11,"deserialize_unit","","",229,null],[11,"deserialize_seq","","",229,null],[11,"deserialize_seq_fixed_size","","",229,null],[11,"deserialize_map","","",229,null],[11,"deserialize_newtype_struct","","",229,null],[11,"deserialize_struct_field","","",229,null],[11,"deserialize_tuple","","",229,null],[11,"deserialize_enum","","",229,null],[11,"deserialize_struct","","",229,null],[11,"deserialize_tuple_struct","","",229,null],[11,"deserialize","","",229,null],[11,"deserialize_option","","",229,null],[11,"deserialize_bool","","",230,null],[11,"deserialize_f64","","",230,null],[11,"deserialize_f32","","",230,null],[11,"deserialize_u8","","",230,null],[11,"deserialize_u16","","",230,null],[11,"deserialize_u32","","",230,null],[11,"deserialize_u64","","",230,null],[11,"deserialize_usize","","",230,null],[11,"deserialize_i8","","",230,null],[11,"deserialize_i16","","",230,null],[11,"deserialize_i32","","",230,null],[11,"deserialize_i64","","",230,null],[11,"deserialize_isize","","",230,null],[11,"deserialize_char","","",230,null],[11,"deserialize_str","","",230,null],[11,"deserialize_string","","",230,null],[11,"deserialize_ignored_any","","",230,null],[11,"deserialize_bytes","","",230,null],[11,"deserialize_unit_struct","","",230,null],[11,"deserialize_unit","","",230,null],[11,"deserialize_seq","","",230,null],[11,"deserialize_seq_fixed_size","","",230,null],[11,"deserialize_map","","",230,null],[11,"deserialize_newtype_struct","","",230,null],[11,"deserialize_struct_field","","",230,null],[11,"deserialize_tuple","","",230,null],[11,"deserialize_enum","","",230,null],[11,"deserialize_struct","","",230,null],[11,"deserialize_tuple_struct","","",230,null],[11,"deserialize_option","","",230,null],[11,"deserialize","","",230,null],[11,"deserialize_bool","","",231,null],[11,"deserialize_f64","","",231,null],[11,"deserialize_f32","","",231,null],[11,"deserialize_u8","","",231,null],[11,"deserialize_u16","","",231,null],[11,"deserialize_u32","","",231,null],[11,"deserialize_u64","","",231,null],[11,"deserialize_usize","","",231,null],[11,"deserialize_i8","","",231,null],[11,"deserialize_i16","","",231,null],[11,"deserialize_i32","","",231,null],[11,"deserialize_i64","","",231,null],[11,"deserialize_isize","","",231,null],[11,"deserialize_char","","",231,null],[11,"deserialize_str","","",231,null],[11,"deserialize_string","","",231,null],[11,"deserialize_ignored_any","","",231,null],[11,"deserialize_bytes","","",231,null],[11,"deserialize_unit_struct","","",231,null],[11,"deserialize_unit","","",231,null],[11,"deserialize_seq","","",231,null],[11,"deserialize_seq_fixed_size","","",231,null],[11,"deserialize_map","","",231,null],[11,"deserialize_newtype_struct","","",231,null],[11,"deserialize_struct_field","","",231,null],[11,"deserialize_tuple","","",231,null],[11,"deserialize_enum","","",231,null],[11,"deserialize_struct","","",231,null],[11,"deserialize_tuple_struct","","",231,null],[11,"deserialize_option","","",231,null],[11,"deserialize","","",231,null],[11,"deserialize_bool","","",232,null],[11,"deserialize_f64","","",232,null],[11,"deserialize_f32","","",232,null],[11,"deserialize_u8","","",232,null],[11,"deserialize_u16","","",232,null],[11,"deserialize_u32","","",232,null],[11,"deserialize_u64","","",232,null],[11,"deserialize_usize","","",232,null],[11,"deserialize_i8","","",232,null],[11,"deserialize_i16","","",232,null],[11,"deserialize_i32","","",232,null],[11,"deserialize_i64","","",232,null],[11,"deserialize_isize","","",232,null],[11,"deserialize_char","","",232,null],[11,"deserialize_str","","",232,null],[11,"deserialize_string","","",232,null],[11,"deserialize_ignored_any","","",232,null],[11,"deserialize_bytes","","",232,null],[11,"deserialize_unit_struct","","",232,null],[11,"deserialize_unit","","",232,null],[11,"deserialize_seq","","",232,null],[11,"deserialize_seq_fixed_size","","",232,null],[11,"deserialize_map","","",232,null],[11,"deserialize_newtype_struct","","",232,null],[11,"deserialize_struct_field","","",232,null],[11,"deserialize_tuple","","",232,null],[11,"deserialize_enum","","",232,null],[11,"deserialize_struct","","",232,null],[11,"deserialize_tuple_struct","","",232,null],[11,"deserialize_option","","",232,null],[11,"deserialize","","",232,null],[11,"deserialize_bool","","",233,null],[11,"deserialize_f64","","",233,null],[11,"deserialize_f32","","",233,null],[11,"deserialize_u8","","",233,null],[11,"deserialize_u16","","",233,null],[11,"deserialize_u32","","",233,null],[11,"deserialize_u64","","",233,null],[11,"deserialize_usize","","",233,null],[11,"deserialize_i8","","",233,null],[11,"deserialize_i16","","",233,null],[11,"deserialize_i32","","",233,null],[11,"deserialize_i64","","",233,null],[11,"deserialize_isize","","",233,null],[11,"deserialize_char","","",233,null],[11,"deserialize_str","","",233,null],[11,"deserialize_string","","",233,null],[11,"deserialize_ignored_any","","",233,null],[11,"deserialize_bytes","","",233,null],[11,"deserialize_unit_struct","","",233,null],[11,"deserialize_unit","","",233,null],[11,"deserialize_seq","","",233,null],[11,"deserialize_seq_fixed_size","","",233,null],[11,"deserialize_map","","",233,null],[11,"deserialize_newtype_struct","","",233,null],[11,"deserialize_struct_field","","",233,null],[11,"deserialize_tuple","","",233,null],[11,"deserialize_enum","","",233,null],[11,"deserialize_struct","","",233,null],[11,"deserialize_tuple_struct","","",233,null],[11,"deserialize_option","","",233,null],[11,"deserialize","","",233,null],[11,"deserialize_bool","","",234,null],[11,"deserialize_f64","","",234,null],[11,"deserialize_f32","","",234,null],[11,"deserialize_u8","","",234,null],[11,"deserialize_u16","","",234,null],[11,"deserialize_u32","","",234,null],[11,"deserialize_u64","","",234,null],[11,"deserialize_usize","","",234,null],[11,"deserialize_i8","","",234,null],[11,"deserialize_i16","","",234,null],[11,"deserialize_i32","","",234,null],[11,"deserialize_i64","","",234,null],[11,"deserialize_isize","","",234,null],[11,"deserialize_char","","",234,null],[11,"deserialize_str","","",234,null],[11,"deserialize_string","","",234,null],[11,"deserialize_ignored_any","","",234,null],[11,"deserialize_bytes","","",234,null],[11,"deserialize_unit_struct","","",234,null],[11,"deserialize_unit","","",234,null],[11,"deserialize_seq","","",234,null],[11,"deserialize_seq_fixed_size","","",234,null],[11,"deserialize_map","","",234,null],[11,"deserialize_newtype_struct","","",234,null],[11,"deserialize_struct_field","","",234,null],[11,"deserialize_tuple","","",234,null],[11,"deserialize_enum","","",234,null],[11,"deserialize_struct","","",234,null],[11,"deserialize_tuple_struct","","",234,null],[11,"deserialize_option","","",234,null],[11,"deserialize","","",234,null],[11,"deserialize_bool","","",235,null],[11,"deserialize_f64","","",235,null],[11,"deserialize_f32","","",235,null],[11,"deserialize_u8","","",235,null],[11,"deserialize_u16","","",235,null],[11,"deserialize_u32","","",235,null],[11,"deserialize_u64","","",235,null],[11,"deserialize_usize","","",235,null],[11,"deserialize_i8","","",235,null],[11,"deserialize_i16","","",235,null],[11,"deserialize_i32","","",235,null],[11,"deserialize_i64","","",235,null],[11,"deserialize_isize","","",235,null],[11,"deserialize_char","","",235,null],[11,"deserialize_str","","",235,null],[11,"deserialize_string","","",235,null],[11,"deserialize_ignored_any","","",235,null],[11,"deserialize_bytes","","",235,null],[11,"deserialize_unit_struct","","",235,null],[11,"deserialize_unit","","",235,null],[11,"deserialize_seq","","",235,null],[11,"deserialize_seq_fixed_size","","",235,null],[11,"deserialize_map","","",235,null],[11,"deserialize_newtype_struct","","",235,null],[11,"deserialize_struct_field","","",235,null],[11,"deserialize_tuple","","",235,null],[11,"deserialize_enum","","",235,null],[11,"deserialize_struct","","",235,null],[11,"deserialize_tuple_struct","","",235,null],[11,"deserialize_option","","",235,null],[11,"deserialize","","",235,null],[11,"deserialize_bool","","",236,null],[11,"deserialize_f64","","",236,null],[11,"deserialize_f32","","",236,null],[11,"deserialize_u8","","",236,null],[11,"deserialize_u16","","",236,null],[11,"deserialize_u32","","",236,null],[11,"deserialize_u64","","",236,null],[11,"deserialize_usize","","",236,null],[11,"deserialize_i8","","",236,null],[11,"deserialize_i16","","",236,null],[11,"deserialize_i32","","",236,null],[11,"deserialize_i64","","",236,null],[11,"deserialize_isize","","",236,null],[11,"deserialize_char","","",236,null],[11,"deserialize_str","","",236,null],[11,"deserialize_string","","",236,null],[11,"deserialize_ignored_any","","",236,null],[11,"deserialize_bytes","","",236,null],[11,"deserialize_unit_struct","","",236,null],[11,"deserialize_unit","","",236,null],[11,"deserialize_seq","","",236,null],[11,"deserialize_seq_fixed_size","","",236,null],[11,"deserialize_map","","",236,null],[11,"deserialize_newtype_struct","","",236,null],[11,"deserialize_struct_field","","",236,null],[11,"deserialize_tuple","","",236,null],[11,"deserialize_enum","","",236,null],[11,"deserialize_struct","","",236,null],[11,"deserialize_tuple_struct","","",236,null],[11,"deserialize_option","","",236,null],[11,"deserialize","","",236,null],[11,"deserialize_bool","","",237,null],[11,"deserialize_f64","","",237,null],[11,"deserialize_f32","","",237,null],[11,"deserialize_u8","","",237,null],[11,"deserialize_u16","","",237,null],[11,"deserialize_u32","","",237,null],[11,"deserialize_u64","","",237,null],[11,"deserialize_usize","","",237,null],[11,"deserialize_i8","","",237,null],[11,"deserialize_i16","","",237,null],[11,"deserialize_i32","","",237,null],[11,"deserialize_i64","","",237,null],[11,"deserialize_isize","","",237,null],[11,"deserialize_char","","",237,null],[11,"deserialize_str","","",237,null],[11,"deserialize_string","","",237,null],[11,"deserialize_ignored_any","","",237,null],[11,"deserialize_bytes","","",237,null],[11,"deserialize_unit_struct","","",237,null],[11,"deserialize_unit","","",237,null],[11,"deserialize_seq","","",237,null],[11,"deserialize_seq_fixed_size","","",237,null],[11,"deserialize_map","","",237,null],[11,"deserialize_newtype_struct","","",237,null],[11,"deserialize_struct_field","","",237,null],[11,"deserialize_tuple","","",237,null],[11,"deserialize_enum","","",237,null],[11,"deserialize_struct","","",237,null],[11,"deserialize_tuple_struct","","",237,null],[11,"deserialize_option","","",237,null],[11,"deserialize","","",237,null],[11,"deserialize_bool","","",238,null],[11,"deserialize_f64","","",238,null],[11,"deserialize_f32","","",238,null],[11,"deserialize_u8","","",238,null],[11,"deserialize_u16","","",238,null],[11,"deserialize_u32","","",238,null],[11,"deserialize_u64","","",238,null],[11,"deserialize_usize","","",238,null],[11,"deserialize_i8","","",238,null],[11,"deserialize_i16","","",238,null],[11,"deserialize_i32","","",238,null],[11,"deserialize_i64","","",238,null],[11,"deserialize_isize","","",238,null],[11,"deserialize_char","","",238,null],[11,"deserialize_str","","",238,null],[11,"deserialize_string","","",238,null],[11,"deserialize_ignored_any","","",238,null],[11,"deserialize_bytes","","",238,null],[11,"deserialize_unit_struct","","",238,null],[11,"deserialize_unit","","",238,null],[11,"deserialize_seq","","",238,null],[11,"deserialize_seq_fixed_size","","",238,null],[11,"deserialize_map","","",238,null],[11,"deserialize_newtype_struct","","",238,null],[11,"deserialize_struct_field","","",238,null],[11,"deserialize_tuple","","",238,null],[11,"deserialize_enum","","",238,null],[11,"deserialize_struct","","",238,null],[11,"deserialize_tuple_struct","","",238,null],[11,"deserialize_option","","",238,null],[11,"deserialize","","",238,null],[11,"deserialize_bool","","",239,null],[11,"deserialize_f64","","",239,null],[11,"deserialize_f32","","",239,null],[11,"deserialize_u8","","",239,null],[11,"deserialize_u16","","",239,null],[11,"deserialize_u32","","",239,null],[11,"deserialize_u64","","",239,null],[11,"deserialize_usize","","",239,null],[11,"deserialize_i8","","",239,null],[11,"deserialize_i16","","",239,null],[11,"deserialize_i32","","",239,null],[11,"deserialize_i64","","",239,null],[11,"deserialize_isize","","",239,null],[11,"deserialize_char","","",239,null],[11,"deserialize_str","","",239,null],[11,"deserialize_string","","",239,null],[11,"deserialize_ignored_any","","",239,null],[11,"deserialize_bytes","","",239,null],[11,"deserialize_unit_struct","","",239,null],[11,"deserialize_unit","","",239,null],[11,"deserialize_seq","","",239,null],[11,"deserialize_seq_fixed_size","","",239,null],[11,"deserialize_map","","",239,null],[11,"deserialize_newtype_struct","","",239,null],[11,"deserialize_struct_field","","",239,null],[11,"deserialize_tuple","","",239,null],[11,"deserialize_enum","","",239,null],[11,"deserialize_struct","","",239,null],[11,"deserialize_tuple_struct","","",239,null],[11,"deserialize_option","","",239,null],[11,"deserialize","","",239,null],[11,"deserialize_bool","","",240,null],[11,"deserialize_f64","","",240,null],[11,"deserialize_f32","","",240,null],[11,"deserialize_u8","","",240,null],[11,"deserialize_u16","","",240,null],[11,"deserialize_u32","","",240,null],[11,"deserialize_u64","","",240,null],[11,"deserialize_usize","","",240,null],[11,"deserialize_i8","","",240,null],[11,"deserialize_i16","","",240,null],[11,"deserialize_i32","","",240,null],[11,"deserialize_i64","","",240,null],[11,"deserialize_isize","","",240,null],[11,"deserialize_char","","",240,null],[11,"deserialize_str","","",240,null],[11,"deserialize_string","","",240,null],[11,"deserialize_ignored_any","","",240,null],[11,"deserialize_bytes","","",240,null],[11,"deserialize_unit_struct","","",240,null],[11,"deserialize_unit","","",240,null],[11,"deserialize_seq","","",240,null],[11,"deserialize_seq_fixed_size","","",240,null],[11,"deserialize_map","","",240,null],[11,"deserialize_newtype_struct","","",240,null],[11,"deserialize_struct_field","","",240,null],[11,"deserialize_tuple","","",240,null],[11,"deserialize_enum","","",240,null],[11,"deserialize_struct","","",240,null],[11,"deserialize_tuple_struct","","",240,null],[11,"deserialize_option","","",240,null],[11,"deserialize","","",240,null],[11,"deserialize_bool","","",241,null],[11,"deserialize_f64","","",241,null],[11,"deserialize_f32","","",241,null],[11,"deserialize_u8","","",241,null],[11,"deserialize_u16","","",241,null],[11,"deserialize_u32","","",241,null],[11,"deserialize_u64","","",241,null],[11,"deserialize_usize","","",241,null],[11,"deserialize_i8","","",241,null],[11,"deserialize_i16","","",241,null],[11,"deserialize_i32","","",241,null],[11,"deserialize_i64","","",241,null],[11,"deserialize_isize","","",241,null],[11,"deserialize_char","","",241,null],[11,"deserialize_str","","",241,null],[11,"deserialize_string","","",241,null],[11,"deserialize_ignored_any","","",241,null],[11,"deserialize_bytes","","",241,null],[11,"deserialize_unit_struct","","",241,null],[11,"deserialize_unit","","",241,null],[11,"deserialize_seq","","",241,null],[11,"deserialize_seq_fixed_size","","",241,null],[11,"deserialize_map","","",241,null],[11,"deserialize_newtype_struct","","",241,null],[11,"deserialize_struct_field","","",241,null],[11,"deserialize_tuple","","",241,null],[11,"deserialize_enum","","",241,null],[11,"deserialize_struct","","",241,null],[11,"deserialize_tuple_struct","","",241,null],[11,"deserialize_option","","",241,null],[11,"deserialize","","",241,null],[11,"deserialize_bool","","",242,null],[11,"deserialize_f64","","",242,null],[11,"deserialize_f32","","",242,null],[11,"deserialize_u8","","",242,null],[11,"deserialize_u16","","",242,null],[11,"deserialize_u32","","",242,null],[11,"deserialize_u64","","",242,null],[11,"deserialize_usize","","",242,null],[11,"deserialize_i8","","",242,null],[11,"deserialize_i16","","",242,null],[11,"deserialize_i32","","",242,null],[11,"deserialize_i64","","",242,null],[11,"deserialize_isize","","",242,null],[11,"deserialize_char","","",242,null],[11,"deserialize_str","","",242,null],[11,"deserialize_string","","",242,null],[11,"deserialize_ignored_any","","",242,null],[11,"deserialize_bytes","","",242,null],[11,"deserialize_unit_struct","","",242,null],[11,"deserialize_unit","","",242,null],[11,"deserialize_seq","","",242,null],[11,"deserialize_seq_fixed_size","","",242,null],[11,"deserialize_map","","",242,null],[11,"deserialize_newtype_struct","","",242,null],[11,"deserialize_struct_field","","",242,null],[11,"deserialize_tuple","","",242,null],[11,"deserialize_enum","","",242,null],[11,"deserialize_struct","","",242,null],[11,"deserialize_tuple_struct","","",242,null],[11,"deserialize_option","","",242,null],[11,"deserialize","","",242,null],[11,"deserialize_bool","","",243,null],[11,"deserialize_f64","","",243,null],[11,"deserialize_f32","","",243,null],[11,"deserialize_u8","","",243,null],[11,"deserialize_u16","","",243,null],[11,"deserialize_u32","","",243,null],[11,"deserialize_u64","","",243,null],[11,"deserialize_usize","","",243,null],[11,"deserialize_i8","","",243,null],[11,"deserialize_i16","","",243,null],[11,"deserialize_i32","","",243,null],[11,"deserialize_i64","","",243,null],[11,"deserialize_isize","","",243,null],[11,"deserialize_char","","",243,null],[11,"deserialize_str","","",243,null],[11,"deserialize_string","","",243,null],[11,"deserialize_ignored_any","","",243,null],[11,"deserialize_bytes","","",243,null],[11,"deserialize_unit_struct","","",243,null],[11,"deserialize_unit","","",243,null],[11,"deserialize_seq","","",243,null],[11,"deserialize_seq_fixed_size","","",243,null],[11,"deserialize_map","","",243,null],[11,"deserialize_newtype_struct","","",243,null],[11,"deserialize_struct_field","","",243,null],[11,"deserialize_tuple","","",243,null],[11,"deserialize_enum","","",243,null],[11,"deserialize_struct","","",243,null],[11,"deserialize_tuple_struct","","",243,null],[11,"deserialize_option","","",243,null],[11,"deserialize","","",243,null],[11,"deserialize","","",244,null],[11,"deserialize_enum","","",244,null],[11,"deserialize_bool","","",244,null],[11,"deserialize_f64","","",244,null],[11,"deserialize_f32","","",244,null],[11,"deserialize_u8","","",244,null],[11,"deserialize_u16","","",244,null],[11,"deserialize_u32","","",244,null],[11,"deserialize_u64","","",244,null],[11,"deserialize_usize","","",244,null],[11,"deserialize_i8","","",244,null],[11,"deserialize_i16","","",244,null],[11,"deserialize_i32","","",244,null],[11,"deserialize_i64","","",244,null],[11,"deserialize_isize","","",244,null],[11,"deserialize_char","","",244,null],[11,"deserialize_str","","",244,null],[11,"deserialize_string","","",244,null],[11,"deserialize_ignored_any","","",244,null],[11,"deserialize_bytes","","",244,null],[11,"deserialize_unit_struct","","",244,null],[11,"deserialize_unit","","",244,null],[11,"deserialize_seq","","",244,null],[11,"deserialize_seq_fixed_size","","",244,null],[11,"deserialize_map","","",244,null],[11,"deserialize_newtype_struct","","",244,null],[11,"deserialize_struct_field","","",244,null],[11,"deserialize_tuple","","",244,null],[11,"deserialize_struct","","",244,null],[11,"deserialize_tuple_struct","","",244,null],[11,"deserialize_option","","",244,null],[11,"visit_variant","","",244,null],[11,"visit_unit","","",244,null],[11,"visit_newtype","","",244,null],[11,"visit_tuple","","",244,null],[11,"visit_struct","","",244,null],[11,"into_deserializer","collections::string","",164,null],[11,"deserialize","serde::de::value","",245,null],[11,"deserialize_enum","","",245,null],[11,"deserialize_bool","","",245,null],[11,"deserialize_f64","","",245,null],[11,"deserialize_f32","","",245,null],[11,"deserialize_u8","","",245,null],[11,"deserialize_u16","","",245,null],[11,"deserialize_u32","","",245,null],[11,"deserialize_u64","","",245,null],[11,"deserialize_usize","","",245,null],[11,"deserialize_i8","","",245,null],[11,"deserialize_i16","","",245,null],[11,"deserialize_i32","","",245,null],[11,"deserialize_i64","","",245,null],[11,"deserialize_isize","","",245,null],[11,"deserialize_char","","",245,null],[11,"deserialize_str","","",245,null],[11,"deserialize_string","","",245,null],[11,"deserialize_ignored_any","","",245,null],[11,"deserialize_bytes","","",245,null],[11,"deserialize_unit_struct","","",245,null],[11,"deserialize_unit","","",245,null],[11,"deserialize_seq","","",245,null],[11,"deserialize_seq_fixed_size","","",245,null],[11,"deserialize_map","","",245,null],[11,"deserialize_newtype_struct","","",245,null],[11,"deserialize_struct_field","","",245,null],[11,"deserialize_tuple","","",245,null],[11,"deserialize_struct","","",245,null],[11,"deserialize_tuple_struct","","",245,null],[11,"deserialize_option","","",245,null],[11,"visit_variant","","",245,null],[11,"visit_unit","","",245,null],[11,"visit_newtype","","",245,null],[11,"visit_tuple","","",245,null],[11,"visit_struct","","",245,null],[11,"new","","Construct a new `SeqDeserializer&lt;I&gt;`.",246,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"deserialize","","",246,null],[11,"deserialize_bool","","",246,null],[11,"deserialize_f64","","",246,null],[11,"deserialize_f32","","",246,null],[11,"deserialize_u8","","",246,null],[11,"deserialize_u16","","",246,null],[11,"deserialize_u32","","",246,null],[11,"deserialize_u64","","",246,null],[11,"deserialize_usize","","",246,null],[11,"deserialize_i8","","",246,null],[11,"deserialize_i16","","",246,null],[11,"deserialize_i32","","",246,null],[11,"deserialize_i64","","",246,null],[11,"deserialize_isize","","",246,null],[11,"deserialize_char","","",246,null],[11,"deserialize_str","","",246,null],[11,"deserialize_string","","",246,null],[11,"deserialize_ignored_any","","",246,null],[11,"deserialize_bytes","","",246,null],[11,"deserialize_unit_struct","","",246,null],[11,"deserialize_unit","","",246,null],[11,"deserialize_seq","","",246,null],[11,"deserialize_seq_fixed_size","","",246,null],[11,"deserialize_map","","",246,null],[11,"deserialize_newtype_struct","","",246,null],[11,"deserialize_struct_field","","",246,null],[11,"deserialize_tuple","","",246,null],[11,"deserialize_enum","","",246,null],[11,"deserialize_struct","","",246,null],[11,"deserialize_tuple_struct","","",246,null],[11,"deserialize_option","","",246,null],[11,"visit","","",246,null],[11,"end","","",246,null],[11,"size_hint","","",246,null],[11,"into_deserializer","collections::vec","",133,null],[11,"into_deserializer","collections::btree::set","",146,null],[11,"into_deserializer","std::collections::hash::set","",196,null],[11,"new","serde::de::value","Construct a new `SeqVisitorDeserializer&lt;V_, E&gt;`.",247,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",247,null],[11,"deserialize_bool","","",247,null],[11,"deserialize_f64","","",247,null],[11,"deserialize_f32","","",247,null],[11,"deserialize_u8","","",247,null],[11,"deserialize_u16","","",247,null],[11,"deserialize_u32","","",247,null],[11,"deserialize_u64","","",247,null],[11,"deserialize_usize","","",247,null],[11,"deserialize_i8","","",247,null],[11,"deserialize_i16","","",247,null],[11,"deserialize_i32","","",247,null],[11,"deserialize_i64","","",247,null],[11,"deserialize_isize","","",247,null],[11,"deserialize_char","","",247,null],[11,"deserialize_str","","",247,null],[11,"deserialize_string","","",247,null],[11,"deserialize_ignored_any","","",247,null],[11,"deserialize_bytes","","",247,null],[11,"deserialize_unit_struct","","",247,null],[11,"deserialize_unit","","",247,null],[11,"deserialize_seq","","",247,null],[11,"deserialize_seq_fixed_size","","",247,null],[11,"deserialize_map","","",247,null],[11,"deserialize_newtype_struct","","",247,null],[11,"deserialize_struct_field","","",247,null],[11,"deserialize_tuple","","",247,null],[11,"deserialize_enum","","",247,null],[11,"deserialize_struct","","",247,null],[11,"deserialize_tuple_struct","","",247,null],[11,"deserialize_option","","",247,null],[11,"new","","Construct a new `MapDeserializer&lt;I, K, V&gt;`.",248,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"deserialize","","",248,null],[11,"deserialize_bool","","",248,null],[11,"deserialize_f64","","",248,null],[11,"deserialize_f32","","",248,null],[11,"deserialize_u8","","",248,null],[11,"deserialize_u16","","",248,null],[11,"deserialize_u32","","",248,null],[11,"deserialize_u64","","",248,null],[11,"deserialize_usize","","",248,null],[11,"deserialize_i8","","",248,null],[11,"deserialize_i16","","",248,null],[11,"deserialize_i32","","",248,null],[11,"deserialize_i64","","",248,null],[11,"deserialize_isize","","",248,null],[11,"deserialize_char","","",248,null],[11,"deserialize_str","","",248,null],[11,"deserialize_string","","",248,null],[11,"deserialize_ignored_any","","",248,null],[11,"deserialize_bytes","","",248,null],[11,"deserialize_unit_struct","","",248,null],[11,"deserialize_unit","","",248,null],[11,"deserialize_seq","","",248,null],[11,"deserialize_seq_fixed_size","","",248,null],[11,"deserialize_map","","",248,null],[11,"deserialize_newtype_struct","","",248,null],[11,"deserialize_struct_field","","",248,null],[11,"deserialize_tuple","","",248,null],[11,"deserialize_enum","","",248,null],[11,"deserialize_struct","","",248,null],[11,"deserialize_tuple_struct","","",248,null],[11,"deserialize_option","","",248,null],[11,"visit_key","","",248,null],[11,"visit_value","","",248,null],[11,"end","","",248,null],[11,"size_hint","","",248,null],[11,"into_deserializer","collections::btree::map","",134,null],[11,"into_deserializer","std::collections::hash::map","",217,null],[11,"new","serde::de::value","Construct a new `MapVisitorDeserializer&lt;V_, E&gt;`.",249,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",249,null],[11,"deserialize_bool","","",249,null],[11,"deserialize_f64","","",249,null],[11,"deserialize_f32","","",249,null],[11,"deserialize_u8","","",249,null],[11,"deserialize_u16","","",249,null],[11,"deserialize_u32","","",249,null],[11,"deserialize_u64","","",249,null],[11,"deserialize_usize","","",249,null],[11,"deserialize_i8","","",249,null],[11,"deserialize_i16","","",249,null],[11,"deserialize_i32","","",249,null],[11,"deserialize_i64","","",249,null],[11,"deserialize_isize","","",249,null],[11,"deserialize_char","","",249,null],[11,"deserialize_str","","",249,null],[11,"deserialize_string","","",249,null],[11,"deserialize_ignored_any","","",249,null],[11,"deserialize_bytes","","",249,null],[11,"deserialize_unit_struct","","",249,null],[11,"deserialize_unit","","",249,null],[11,"deserialize_seq","","",249,null],[11,"deserialize_seq_fixed_size","","",249,null],[11,"deserialize_map","","",249,null],[11,"deserialize_newtype_struct","","",249,null],[11,"deserialize_struct_field","","",249,null],[11,"deserialize_tuple","","",249,null],[11,"deserialize_enum","","",249,null],[11,"deserialize_struct","","",249,null],[11,"deserialize_tuple_struct","","",249,null],[11,"deserialize_option","","",249,null],[11,"into_deserializer","serde::bytes","",187,null],[11,"deserialize","serde::de::value","",250,null],[11,"deserialize_bool","","",250,null],[11,"deserialize_f64","","",250,null],[11,"deserialize_f32","","",250,null],[11,"deserialize_u8","","",250,null],[11,"deserialize_u16","","",250,null],[11,"deserialize_u32","","",250,null],[11,"deserialize_u64","","",250,null],[11,"deserialize_usize","","",250,null],[11,"deserialize_i8","","",250,null],[11,"deserialize_i16","","",250,null],[11,"deserialize_i32","","",250,null],[11,"deserialize_i64","","",250,null],[11,"deserialize_isize","","",250,null],[11,"deserialize_char","","",250,null],[11,"deserialize_str","","",250,null],[11,"deserialize_string","","",250,null],[11,"deserialize_ignored_any","","",250,null],[11,"deserialize_bytes","","",250,null],[11,"deserialize_unit_struct","","",250,null],[11,"deserialize_unit","","",250,null],[11,"deserialize_seq","","",250,null],[11,"deserialize_seq_fixed_size","","",250,null],[11,"deserialize_map","","",250,null],[11,"deserialize_newtype_struct","","",250,null],[11,"deserialize_struct_field","","",250,null],[11,"deserialize_tuple","","",250,null],[11,"deserialize_enum","","",250,null],[11,"deserialize_struct","","",250,null],[11,"deserialize_tuple_struct","","",250,null],[11,"deserialize_option","","",250,null],[11,"into_deserializer","serde::bytes","",185,null],[11,"deserialize","serde::de::value","",251,null],[11,"deserialize_bool","","",251,null],[11,"deserialize_f64","","",251,null],[11,"deserialize_f32","","",251,null],[11,"deserialize_u8","","",251,null],[11,"deserialize_u16","","",251,null],[11,"deserialize_u32","","",251,null],[11,"deserialize_u64","","",251,null],[11,"deserialize_usize","","",251,null],[11,"deserialize_i8","","",251,null],[11,"deserialize_i16","","",251,null],[11,"deserialize_i32","","",251,null],[11,"deserialize_i64","","",251,null],[11,"deserialize_isize","","",251,null],[11,"deserialize_char","","",251,null],[11,"deserialize_str","","",251,null],[11,"deserialize_string","","",251,null],[11,"deserialize_ignored_any","","",251,null],[11,"deserialize_bytes","","",251,null],[11,"deserialize_unit_struct","","",251,null],[11,"deserialize_unit","","",251,null],[11,"deserialize_seq","","",251,null],[11,"deserialize_seq_fixed_size","","",251,null],[11,"deserialize_map","","",251,null],[11,"deserialize_newtype_struct","","",251,null],[11,"deserialize_struct_field","","",251,null],[11,"deserialize_tuple","","",251,null],[11,"deserialize_enum","","",251,null],[11,"deserialize_struct","","",251,null],[11,"deserialize_tuple_struct","","",251,null],[11,"deserialize_option","","",251,null],[8,"Error","serde::de","`Error` is a trait that allows a `Deserialize` to generically create a\n`Deserializer` error.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",252,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[10,"end_of_stream","","Raised when a `Deserialize` type unexpectedly hit the end of the stream.",252,{"inputs":[],"output":{"name":"self"}}],[11,"invalid_type","","Raised when a `Deserialize` was passed an incorrect type.",252,{"inputs":[{"name":"type"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` was passed an incorrect value.",252,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"invalid_length","","Raised when a fixed sized sequence or map was passed in the wrong amount of arguments.",252,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"unknown_variant","","Raised when a `Deserialize` enum type received an unexpected variant.",252,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"unknown_field","","Raised when a `Deserialize` struct type received an unexpected struct field.",252,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"missing_field","","raised when a `deserialize` struct type did not receive a field.",252,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the\nsame struct field.",252,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Deserialize","","`Deserialize` represents a type that can be deserialized.",null,null],[10,"deserialize","","Deserialize this value given this `Deserializer`.",253,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","`Deserializer` is a trait that can deserialize values by threading a `Visitor` trait through a\nvalue. It supports two entry point styles which enables different kinds of deserialization.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",254,null],[10,"deserialize","","This method walks a visitor through a value as it is being deserialized.",254,null],[10,"deserialize_bool","","This method hints that the `Deserialize` type is expecting a `bool` value.",254,null],[10,"deserialize_usize","","This method hints that the `Deserialize` type is expecting an `usize` value.\nA reasonable default is to forward to `deserialize_u64`.",254,null],[10,"deserialize_u8","","This method hints that the `Deserialize` type is expecting an `u8` value.\nA reasonable default is to forward to `deserialize_u64`.",254,null],[10,"deserialize_u16","","This method hints that the `Deserialize` type is expecting an `u16` value.\nA reasonable default is to forward to `deserialize_u64`.",254,null],[10,"deserialize_u32","","This method hints that the `Deserialize` type is expecting an `u32` value.\nA reasonable default is to forward to `deserialize_u64`.",254,null],[10,"deserialize_u64","","This method hints that the `Deserialize` type is expecting an `u64` value.",254,null],[10,"deserialize_isize","","This method hints that the `Deserialize` type is expecting an `isize` value.\nA reasonable default is to forward to `deserialize_i64`.",254,null],[10,"deserialize_i8","","This method hints that the `Deserialize` type is expecting an `i8` value.\nA reasonable default is to forward to `deserialize_i64`.",254,null],[10,"deserialize_i16","","This method hints that the `Deserialize` type is expecting an `i16` value.\nA reasonable default is to forward to `deserialize_i64`.",254,null],[10,"deserialize_i32","","This method hints that the `Deserialize` type is expecting an `i32` value.\nA reasonable default is to forward to `deserialize_i64`.",254,null],[10,"deserialize_i64","","This method hints that the `Deserialize` type is expecting an `i64` value.",254,null],[10,"deserialize_f32","","This method hints that the `Deserialize` type is expecting a `f32` value.\nA reasonable default is to forward to `deserialize_f64`.",254,null],[10,"deserialize_f64","","This method hints that the `Deserialize` type is expecting a `f64` value.",254,null],[10,"deserialize_char","","This method hints that the `Deserialize` type is expecting a `char` value.",254,null],[10,"deserialize_str","","This method hints that the `Deserialize` type is expecting a `&amp;str` value.",254,null],[10,"deserialize_string","","This method hints that the `Deserialize` type is expecting a `String` value.",254,null],[10,"deserialize_unit","","This method hints that the `Deserialize` type is expecting an `unit` value.",254,null],[10,"deserialize_option","","This method hints that the `Deserialize` type is expecting an `Option` value. This allows\ndeserializers that encode an optional value as a nullable value to convert the null value\ninto a `None`, and a regular value as `Some(value)`.",254,null],[10,"deserialize_seq","","This method hints that the `Deserialize` type is expecting a sequence value. This allows\ndeserializers to parse sequences that aren&#39;t tagged as sequences.",254,null],[10,"deserialize_seq_fixed_size","","This method hints that the `Deserialize` type is expecting a fixed size array. This allows\ndeserializers to parse arrays that aren&#39;t tagged as arrays.",254,null],[10,"deserialize_bytes","","This method hints that the `Deserialize` type is expecting a `Vec&lt;u8&gt;`. This allows\ndeserializers that provide a custom byte vector serialization to properly deserialize the\ntype.",254,null],[10,"deserialize_map","","This method hints that the `Deserialize` type is expecting a map of values. This allows\ndeserializers to parse sequences that aren&#39;t tagged as maps.",254,null],[10,"deserialize_unit_struct","","This method hints that the `Deserialize` type is expecting a unit struct. This allows\ndeserializers to a unit struct that aren&#39;t tagged as a unit struct.",254,null],[10,"deserialize_newtype_struct","","This method hints that the `Deserialize` type is expecting a newtype struct. This allows\ndeserializers to a newtype struct that aren&#39;t tagged as a newtype struct.\nA reasonable default is to simply deserialize the expected value directly.",254,null],[10,"deserialize_tuple_struct","","This method hints that the `Deserialize` type is expecting a tuple struct. This allows\ndeserializers to parse sequences that aren&#39;t tagged as sequences.",254,null],[10,"deserialize_struct","","This method hints that the `Deserialize` type is expecting a struct. This allows\ndeserializers to parse sequences that aren&#39;t tagged as maps.",254,null],[10,"deserialize_struct_field","","This method hints that the `Deserialize` type is expecting some sort of struct field\nname.  This allows deserializers to choose between &amp;str, usize, or &amp;[u8] to properly\ndeserialize a struct field.",254,null],[10,"deserialize_tuple","","This method hints that the `Deserialize` type is expecting a tuple value. This allows\ndeserializers that provide a custom tuple serialization to properly deserialize the type.",254,null],[10,"deserialize_enum","","This method hints that the `Deserialize` type is expecting an enum value. This allows\ndeserializers that provide a custom enumeration serialization to properly deserialize the\ntype.",254,null],[10,"deserialize_ignored_any","","This method hints that the `Deserialize` type needs to deserialize a value whose type\ndoesn&#39;t matter because it is ignored.",254,null],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",255,null],[11,"visit_bool","","`visit_bool` deserializes a `bool` into a `Value`.",255,null],[11,"visit_isize","","`visit_isize` deserializes a `isize` into a `Value`.",255,null],[11,"visit_i8","","`visit_i8` deserializes a `i8` into a `Value`.",255,null],[11,"visit_i16","","`visit_i16` deserializes a `i16` into a `Value`.",255,null],[11,"visit_i32","","`visit_i32` deserializes a `i32` into a `Value`.",255,null],[11,"visit_i64","","`visit_i64` deserializes a `i64` into a `Value`.",255,null],[11,"visit_usize","","`visit_usize` deserializes a `usize` into a `Value`.",255,null],[11,"visit_u8","","`visit_u8` deserializes a `u8` into a `Value`.",255,null],[11,"visit_u16","","`visit_u16` deserializes a `u16` into a `Value`.",255,null],[11,"visit_u32","","`visit_u32` deserializes a `u32` into a `Value`.",255,null],[11,"visit_u64","","`visit_u64` deserializes a `u64` into a `Value`.",255,null],[11,"visit_f32","","`visit_f32` deserializes a `f32` into a `Value`.",255,null],[11,"visit_f64","","`visit_f64` deserializes a `f64` into a `Value`.",255,null],[11,"visit_char","","`visit_char` deserializes a `char` into a `Value`.",255,null],[11,"visit_str","","`visit_str` deserializes a `&amp;str` into a `Value`.",255,null],[11,"visit_string","","`visit_string` deserializes a `String` into a `Value`.  This allows a deserializer to avoid\na copy if it is deserializing a string from a `String` type.  By default it passes a `&amp;str`\nto the `visit_str` method.",255,null],[11,"visit_unit","","`visit_unit` deserializes a `()` into a `Value`.",255,null],[11,"visit_unit_struct","","`visit_unit_struct` deserializes a unit struct into a `Value`.",255,null],[11,"visit_none","","`visit_none` deserializes a none value into a `Value`.",255,null],[11,"visit_some","","`visit_some` deserializes a value into a `Value`.",255,null],[11,"visit_newtype_struct","","`visit_newtype_struct` deserializes a value into a `Value`.",255,null],[11,"visit_seq","","`visit_seq` deserializes a `SeqVisitor` into a `Value`.",255,null],[11,"visit_map","","`visit_map` deserializes a `MapVisitor` into a `Value`.",255,null],[11,"visit_bytes","","`visit_bytes` deserializes a `&amp;[u8]` into a `Value`.",255,null],[11,"visit_byte_buf","","`visit_byte_buf` deserializes a `Vec&lt;u8&gt;` into a `Value`.",255,null],[8,"SeqVisitor","","`SeqVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",256,null],[10,"visit","","This returns a `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there\nare no more remaining items.",256,null],[10,"end","","This signals to the `SeqVisitor` that the `Visitor` does not expect any more items.",256,null],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",256,null],[8,"MapVisitor","","`MapVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",257,null],[11,"visit","","This returns a `Ok(Some((key, value)))` for the next (key-value) pair in the map, or\n`Ok(None)` if there are no more remaining items.",257,null],[10,"visit_key","","This returns a `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no\nmore remaining items.",257,null],[10,"visit_value","","This returns a `Ok(value)` for the next value in the map.",257,null],[10,"end","","This signals to the `MapVisitor` that the `Visitor` does not expect any more items.",257,null],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",257,null],[11,"missing_field","","Report that the struct has a field that wasn&#39;t deserialized",257,null],[8,"EnumVisitor","","`EnumVisitor` is a visitor that is created by the `Deserialize` and passed to the\n`Deserializer` in order to deserialize enums.",null,null],[16,"Value","","The value produced by this visitor.",258,null],[10,"visit","","Visit the specific variant with the `VariantVisitor`.",258,null],[8,"VariantVisitor","","`VariantVisitor` is a visitor that is created by the `Deserializer` and passed to the\n`Deserialize` in order to deserialize a specific enum variant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",259,null],[10,"visit_variant","","`visit_variant` is called to identify which variant to deserialize.",259,null],[11,"visit_unit","","`visit_unit` is called when deserializing a variant with no values.",259,null],[10,"visit_newtype","","`visit_newtype` is called when deserializing a variant with a single value.\nA good default is often to use the `visit_tuple` method to deserialize a `(value,)`.",259,null],[10,"visit_tuple","","`visit_tuple` is called when deserializing a tuple-like variant.\nIf no tuple variants are expected, yield a\n`Err(serde::de::Error::invalid_type(serde::de::Type::TupleVariant))`",259,null],[10,"visit_struct","","`visit_struct` is called when deserializing a struct-like variant.\nIf no struct variants are expected, yield a\n`Err(serde::de::Error::invalid_type(serde::de::Type::StructVariant))`",259,null],[11,"fmt","","",188,null],[11,"eq","","",188,null],[11,"clone","","",188,null],[11,"fmt","","",188,null],[0,"iter","serde","Module that contains helper iterators.",null,null],[3,"LineColIterator","serde::iter","Iterator over a byte stream that tracks the current position&#39;s line and column.",null,null],[11,"new","","Construct a new `LineColIterator&lt;Iter&gt;`.",260,{"inputs":[{"name":"iter"}],"output":{"name":"linecoliterator"}}],[11,"line","","Report the current line inside the iterator.",260,null],[11,"col","","Report the current column inside the iterator.",260,null],[11,"get_ref","","Gets a reference to the underlying iterator.",260,null],[11,"get_mut","","Gets a mutable reference to the underlying iterator.",260,null],[11,"into_inner","","Unwraps this `LineColIterator`, returning the underlying iterator.",260,null],[11,"peek","","peeks at the next value",260,null],[11,"next","","",260,null],[0,"ser","serde","Generic serialization framework.\n# For Developers who want to serialize objects\nImplement the `Serialize` trait for the type of objects you want to serialize. Call methods of\nthe `serializer` object. For which methods to call and how to do so, look at the documentation\nof the `Serializer` trait.",null,null],[0,"impls","serde::ser","Implementations for all of Rust&#39;s builtin types. Tuples implement the `Serialize` trait if they\nhave at most 16 fields. Arrays implement the `Serialize` trait if their length is 32 or less.\nYou can always forward array serialization to slice serialization, which works for any length.\nLong tuples are best replaced by tuple structs, for which you can use `derive(Serialize)`. In\nthat case the number of fields is irrelevant.",null,null],[11,"serialize","collections::string","",164,null],[11,"serialize","core::option","",63,null],[11,"serialize","core::marker","",8,null],[11,"serialize","collections::binary_heap","",129,null],[11,"serialize","collections::btree::set","",146,null],[11,"serialize","std::collections::hash::set","",196,null],[11,"serialize","collections::linked_list","",159,null],[11,"serialize","collections::vec","",133,null],[11,"serialize","collections::vec_deque","",171,null],[11,"serialize","collections::btree::map","",134,null],[11,"serialize","std::collections::hash::map","",217,null],[11,"serialize","alloc::boxed","",179,null],[11,"serialize","alloc::rc","",225,null],[11,"serialize","alloc::arc","",224,null],[11,"serialize","collections::borrow","",154,null],[11,"serialize","core::result","",69,null],[11,"serialize","std::net::ip","",218,null],[11,"serialize","","",219,null],[11,"serialize","std::net::addr","",220,null],[11,"serialize","","",221,null],[11,"serialize","","",222,null],[11,"serialize","std::path","",261,null],[11,"serialize","","",223,null],[8,"Error","serde::ser","`Error` is a trait that allows a `Serialize` to generically create a\n`Serializer` error.",null,null],[10,"custom","","Raised when there is a general error when serializing a type.",262,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Serialize` was passed an incorrect value.",262,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Serialize","","A trait that describes a type that can be serialized by a `Serializer`.",null,null],[10,"serialize","","Serializes this value into this serializer.",263,null],[8,"Serializer","","A trait that describes a type that can serialize a stream of values into the underlying format.",null,null],[16,"Error","","The error type that can be returned if some error occurs during serialization.",264,null],[16,"SeqState","","A state object that is initialized by `serialize_seq`, passed to\n`serialize_seq_elt`, and consumed by `serialize_seq_end`. Use `()` if no\nstate is required.",264,null],[16,"TupleState","","A state object that is initialized by `serialize_tuple`, passed to\n`serialize_tuple_elt`, and consumed by `serialize_tuple_end`. Use `()`\nif no state is required.",264,null],[16,"TupleStructState","","A state object that is initialized by `serialize_tuple_struct`, passed\nto `serialize_tuple_struct_elt`, and consumed by\n`serialize_tuple_struct_end`. Use `()` if no state is required.",264,null],[16,"TupleVariantState","","A state object that is initialized by `serialize_tuple_variant`, passed\nto `serialize_tuple_variant_elt`, and consumed by\n`serialize_tuple_variant_end`. Use `()` if no state is required.",264,null],[16,"MapState","","A state object that is initialized by `serialize_map`, passed to\n`serialize_map_elt`, and consumed by `serialize_map_end`. Use `()` if no\nstate is required.",264,null],[16,"StructState","","A state object that is initialized by `serialize_struct`, passed to\n`serialize_struct_elt`, and consumed by `serialize_struct_end`. Use `()`\nif no state is required.",264,null],[16,"StructVariantState","","A state object that is initialized by `serialize_struct_variant`, passed\nto `serialize_struct_variant_elt`, and consumed by\n`serialize_struct_variant_end`. Use `()` if no state is required.",264,null],[10,"serialize_bool","","Serializes a `bool` value.",264,null],[10,"serialize_isize","","Serializes an `isize` value. If the format does not differentiate\nbetween `isize` and `i64`, a reasonable implementation would be to cast\nthe value to `i64` and forward to `serialize_i64`.",264,null],[10,"serialize_i8","","Serializes an `i8` value. If the format does not differentiate between\n`i8` and `i64`, a reasonable implementation would be to cast the value\nto `i64` and forward to `serialize_i64`.",264,null],[10,"serialize_i16","","Serializes an `i16` value. If the format does not differentiate between\n`i16` and `i64`, a reasonable implementation would be to cast the value\nto `i64` and forward to `serialize_i64`.",264,null],[10,"serialize_i32","","Serializes an `i32` value. If the format does not differentiate between\n`i32` and `i64`, a reasonable implementation would be to cast the value\nto `i64` and forward to `serialize_i64`.",264,null],[10,"serialize_i64","","Serializes an `i64` value.",264,null],[10,"serialize_usize","","Serializes a `usize` value. If the format does not differentiate between\n`usize` and `u64`, a reasonable implementation would be to cast the\nvalue to `u64` and forward to `serialize_u64`.",264,null],[10,"serialize_u8","","Serializes a `u8` value. If the format does not differentiate between\n`u8` and `u64`, a reasonable implementation would be to cast the value\nto `u64` and forward to `serialize_u64`.",264,null],[10,"serialize_u16","","Serializes a `u16` value. If the format does not differentiate between\n`u16` and `u64`, a reasonable implementation would be to cast the value\nto `u64` and forward to `serialize_u64`.",264,null],[10,"serialize_u32","","Serializes a `u32` value. If the format does not differentiate between\n`u32` and `u64`, a reasonable implementation would be to cast the value\nto `u64` and forward to `serialize_u64`.",264,null],[10,"serialize_u64","","`Serializes a `u64` value.",264,null],[10,"serialize_f32","","Serializes an `f32` value. If the format does not differentiate between\n`f32` and `f64`, a reasonable implementation would be to cast the value\nto `f64` and forward to `serialize_f64`.",264,null],[10,"serialize_f64","","Serializes an `f64` value.",264,null],[10,"serialize_char","","Serializes a character. If the format does not support characters,\nit is reasonable to serialize it as a single element `str` or a `u32`.",264,null],[10,"serialize_str","","Serializes a `&amp;str`.",264,null],[10,"serialize_bytes","","Enables serializers to serialize byte slices more compactly or more\nefficiently than other types of slices. If no efficient implementation\nis available, a reasonable implementation would be to forward to\n`serialize_seq`. If forwarded, the implementation looks usually just like this:\n```rust\nlet mut state = try!(self.serialize_seq(value));\nfor b in value {\n    try!(self.serialize_seq_elt(&amp;mut state, b));\n}\nself.serialize_seq_end(state)\n```",264,null],[10,"serialize_unit","","Serializes a `()` value. It&#39;s reasonable to just not serialize anything.",264,null],[10,"serialize_unit_struct","","Serializes a unit struct value. A reasonable implementation would be to\nforward to `serialize_unit`.",264,null],[10,"serialize_unit_variant","","Serializes a unit variant, otherwise known as a variant with no\narguments. A reasonable implementation would be to forward to\n`serialize_unit`.",264,null],[10,"serialize_newtype_struct","","Allows a tuple struct with a single element, also known as a newtype\nstruct, to be more efficiently serialized than a tuple struct with\nmultiple items. A reasonable implementation would be to forward to\n`serialize_tuple_struct` or to just serialize the inner value without wrapping.",264,null],[10,"serialize_newtype_variant","","Allows a variant with a single item to be more efficiently serialized\nthan a variant with multiple items. A reasonable implementation would be\nto forward to `serialize_tuple_variant`.",264,null],[10,"serialize_none","","Serializes a `None` value.",264,null],[10,"serialize_some","","Serializes a `Some(...)` value.",264,null],[10,"serialize_seq","","Begins to serialize a sequence. This call must be followed by zero or\nmore calls to `serialize_seq_elt`, then a call to `serialize_seq_end`.",264,null],[10,"serialize_seq_elt","","Serializes a sequence element. Must have previously called\n`serialize_seq`.",264,null],[10,"serialize_seq_end","","Finishes serializing a sequence.",264,null],[10,"serialize_seq_fixed_size","","Begins to serialize a sequence whose length will be known at\ndeserialization time. This call must be followed by zero or more calls\nto `serialize_seq_elt`, then a call to `serialize_seq_end`. A reasonable\nimplementation would be to forward to `serialize_seq`.",264,null],[10,"serialize_tuple","","Begins to serialize a tuple. This call must be followed by zero or more\ncalls to `serialize_tuple_elt`, then a call to `serialize_tuple_end`. A\nreasonable implementation would be to forward to `serialize_seq`.",264,null],[10,"serialize_tuple_elt","","Serializes a tuple element. Must have previously called\n`serialize_tuple`.",264,null],[10,"serialize_tuple_end","","Finishes serializing a tuple.",264,null],[10,"serialize_tuple_struct","","Begins to serialize a tuple struct. This call must be followed by zero\nor more calls to `serialize_tuple_struct_elt`, then a call to\n`serialize_tuple_struct_end`. A reasonable implementation would be to\nforward to `serialize_tuple`.",264,null],[10,"serialize_tuple_struct_elt","","Serializes a tuple struct element. Must have previously called\n`serialize_tuple_struct`.",264,null],[10,"serialize_tuple_struct_end","","Finishes serializing a tuple struct.",264,null],[10,"serialize_tuple_variant","","Begins to serialize a tuple variant. This call must be followed by zero\nor more calls to `serialize_tuple_variant_elt`, then a call to\n`serialize_tuple_variant_end`. A reasonable implementation would be to\nforward to `serialize_tuple_struct`.",264,null],[10,"serialize_tuple_variant_elt","","Serializes a tuple variant element. Must have previously called\n`serialize_tuple_variant`.",264,null],[10,"serialize_tuple_variant_end","","Finishes serializing a tuple variant.",264,null],[10,"serialize_map","","Begins to serialize a map. This call must be followed by zero or more\ncalls to `serialize_map_key` and `serialize_map_value`, then a call to\n`serialize_map_end`.",264,null],[10,"serialize_map_key","","Serialize a map key. Must have previously called `serialize_map`.",264,null],[10,"serialize_map_value","","Serialize a map value. Must have previously called `serialize_map`.",264,null],[10,"serialize_map_end","","Finishes serializing a map.",264,null],[10,"serialize_struct","","Begins to serialize a struct. This call must be followed by zero or more\ncalls to `serialize_struct_elt`, then a call to `serialize_struct_end`.",264,null],[10,"serialize_struct_elt","","Serializes a struct field. Must have previously called\n`serialize_struct`.",264,null],[10,"serialize_struct_end","","Finishes serializing a struct.",264,null],[10,"serialize_struct_variant","","Begins to serialize a struct variant. This call must be followed by zero\nor more calls to `serialize_struct_variant_elt`, then a call to\n`serialize_struct_variant_end`.",264,null],[10,"serialize_struct_variant_elt","","Serialize a struct variant element. Must have previously called\n`serialize_struct_variant`.",264,null],[10,"serialize_struct_variant_end","","Finishes serializing a struct variant.",264,null]],"paths":[[3,"Wrapping"],[3,"ParseFloatError"],[4,"FpCategory"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicPtr"],[4,"Ordering"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EncodeUtf8"],[3,"EncodeUtf16"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[4,"Option"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"CharRange"],[3,"SipHasher"],[3,"BuildHasherDefault"],[4,"Alignment"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"Hash"],[8,"Hasher"],[8,"Write"],[8,"PartialEq"],[8,"PartialOrd"],[3,"Utf16Encoder"],[3,"SplitWhitespace"],[3,"ToLowercase"],[3,"ToUppercase"],[3,"DecodeUtf16"],[3,"DecodeUtf16Error"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Vec"],[3,"BTreeMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"ValuesMut"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[4,"Cow"],[3,"EnumSet"],[3,"Iter"],[3,"Iter"],[3,"IntoIter"],[3,"LinkedList"],[3,"IterMut"],[3,"FrontPlace"],[3,"BackPlace"],[3,"EncodeUtf16"],[3,"String"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Bound"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Box"],[8,"Pattern"],[8,"Searcher"],[8,"ReverseSearcher"],[8,"Iterator"],[8,"ExactSizeIterator"],[3,"ByteBuf"],[3,"ByteBufVisitor"],[3,"Bytes"],[4,"Type"],[3,"UnitVisitor"],[3,"BoolVisitor"],[3,"PhantomDataVisitor"],[3,"BinaryHeapVisitor"],[3,"BTreeSetVisitor"],[3,"LinkedListVisitor"],[3,"HashSetVisitor"],[3,"HashSet"],[3,"VecVisitor"],[3,"VecDequeVisitor"],[3,"TupleVisitor1"],[3,"TupleVisitor2"],[3,"TupleVisitor3"],[3,"TupleVisitor4"],[3,"TupleVisitor5"],[3,"TupleVisitor6"],[3,"TupleVisitor7"],[3,"TupleVisitor8"],[3,"TupleVisitor9"],[3,"TupleVisitor10"],[3,"TupleVisitor11"],[3,"TupleVisitor12"],[3,"TupleVisitor13"],[3,"TupleVisitor14"],[3,"TupleVisitor15"],[3,"TupleVisitor16"],[3,"BTreeMapVisitor"],[3,"HashMapVisitor"],[3,"HashMap"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[4,"SocketAddr"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"PathBuf"],[3,"Arc"],[3,"Rc"],[3,"IgnoredAny"],[4,"Error"],[8,"ValueDeserializer"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U32Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"StrDeserializer"],[3,"StringDeserializer"],[3,"SeqDeserializer"],[3,"SeqVisitorDeserializer"],[3,"MapDeserializer"],[3,"MapVisitorDeserializer"],[3,"BytesDeserializer"],[3,"ByteBufDeserializer"],[8,"Error"],[8,"Deserialize"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqVisitor"],[8,"MapVisitor"],[8,"EnumVisitor"],[8,"VariantVisitor"],[3,"LineColIterator"],[3,"Path"],[8,"Error"],[8,"Serialize"],[8,"Serializer"]]};
searchIndex["rayon"] = {"doc":"","items":[[3,"Configuration","rayon","Contains the rayon thread pool configuration.",null,null],[3,"ThreadPool","","",null,null],[4,"InitError","","Custom error type for the rayon thread pool configuration.",null,null],[13,"NumberOfThreadsZero","","Error if number of threads is set to zero.",0,null],[13,"GlobalPoolAlreadyInitialized","","Error if the gloal thread pool is initialized multiple times\nand the configuration is not equal for all configurations.",0,null],[5,"dump_stats","","This is a debugging API not really intended for end users. It will\ndump some performance statistics out using `println`.",null,{"inputs":[],"output":null}],[5,"initialize","","Initializes the global thread pool. This initialization is\n**optional**.  If you do not call this function, the thread pool\nwill be automatically initialized with the default\nconfiguration. In fact, calling `initialize` is not recommended,\nexcept for in two scenarios:",null,{"inputs":[{"name":"configuration"}],"output":{"name":"result"}}],[5,"join","","",null,null],[11,"eq","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"description","","",0,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"new","","Creates and return a valid rayon thread pool configuration, but does not initialize it.",1,{"inputs":[],"output":{"name":"configuration"}}],[11,"num_threads","","Get the number of threads that will be used for the thread\npool. See `set_num_threads` for more information.",1,null],[11,"set_num_threads","","Set the number of threads to be used in the rayon threadpool.\nThe argument `num_threads` must not be zero. If you do not\ncall this function, rayon will select a suitable default\n(currently, the default is one thread per CPU core).",1,null],[11,"new","","Constructs a new thread pool with the given configuration. If\nthe configuration is not valid, returns a suitable `Err`\nresult.  See `InitError` for more details.",2,{"inputs":[{"name":"configuration"}],"output":{"name":"result"}}],[11,"install","","Executes `op` within the threadpool. Any attempts to `join`\nwhich occur there will then operate within that threadpool.",2,null],[11,"drop","","",2,null],[0,"par_iter","","The `ParallelIterator` module makes it easy to write parallel\nprograms using an iterator-style interface. To get access to all\nthe methods you want, the easiest is to write `use\nrayon::prelude::*;` at the top of your module, which will import\nthe various traits and methods you need.",null,null],[0,"collect","rayon::par_iter","",null,null],[5,"collect_into","rayon::par_iter::collect","",null,{"inputs":[{"name":"par_iter"},{"name":"vec"}],"output":null}],[0,"enumerate","rayon::par_iter","",null,null],[3,"Enumerate","rayon::par_iter::enumerate","",null,null],[3,"EnumerateProducer","","",null,null],[11,"new","","",3,{"inputs":[{"name":"m"}],"output":{"name":"enumerate"}}],[11,"drive_unindexed","","",3,null],[11,"upper_bound","","",3,null],[11,"drive","","",3,null],[11,"len","","",3,null],[11,"with_producer","","",3,null],[11,"cost","","",4,null],[11,"split_at","","",4,null],[11,"into_iter","","",4,null],[0,"filter","rayon::par_iter","",null,null],[3,"Filter","rayon::par_iter::filter","",null,null],[11,"new","","",5,{"inputs":[{"name":"m"},{"name":"filter_op"}],"output":{"name":"filter"}}],[11,"drive_unindexed","","",5,null],[11,"upper_bound","","",5,null],[11,"drive","","",5,null],[0,"filter_map","rayon::par_iter","",null,null],[3,"FilterMap","rayon::par_iter::filter_map","",null,null],[11,"new","","",6,{"inputs":[{"name":"m"},{"name":"filter_op"}],"output":{"name":"filtermap"}}],[11,"drive_unindexed","","",6,null],[11,"upper_bound","","",6,null],[11,"drive","","",6,null],[0,"flat_map","rayon::par_iter","",null,null],[3,"FlatMap","rayon::par_iter::flat_map","",null,null],[11,"new","","",7,{"inputs":[{"name":"m"},{"name":"map_op"}],"output":{"name":"flatmap"}}],[11,"drive_unindexed","","",7,null],[0,"internal","rayon::par_iter","Internal traits and functions used to implement parallel\niteration. These should be considered highly unstable: users of\nparallel iterators should not need to interact with them directly.\nSee `README.md` for a high-level overview.",null,null],[3,"NoopReducer","rayon::par_iter::internal","Utility type for consumers that don&#39;t need a &quot;reduce&quot; step. Just\nreduces unit to unit.",null,null],[5,"bridge","","",null,{"inputs":[{"name":"par_iter"},{"name":"c"}],"output":{"name":"result"}}],[8,"ProducerCallback","","",null,null],[16,"Output","","",8,null],[10,"callback","","",8,null],[8,"Producer","","A producer which will produce a fixed number of items N. This is\nnot queryable through the API; the consumer is expected to track\nit.",null,null],[10,"cost","","Cost to produce `len` items, where `len` must be `N`.",9,null],[10,"split_at","","Split into two producers; one produces items `0..index`, the\nother `index..N`. Index must be less than `N`.",9,null],[8,"Consumer","","A consumer which consumes items that are fed to it.",null,null],[16,"Folder","","",10,null],[16,"Reducer","","",10,null],[16,"Result","","",10,null],[10,"cost","","If it costs `producer_cost` to produce the items we will\nconsume, returns cost adjusted to account for consuming them.",10,null],[10,"split_at","","Divide the consumer into two consumers, one processing items\n`0..index` and one processing items from `index..`. Also\nproduces a reducer that can be used to reduce the results at\nthe end.",10,null],[10,"into_folder","","Convert the consumer into a folder that can consume items\nsequentially, eventually producing a final result.",10,null],[8,"Folder","","",null,null],[16,"Result","","",11,null],[10,"consume","","Consume next item and return new sequential state.",11,null],[10,"complete","","Finish consuming items, produce final result.",11,null],[8,"Reducer","","",null,null],[10,"reduce","","Reduce two final results into one; this is executed after a\nsplit.",12,null],[8,"UnindexedConsumer","","A stateless consumer can be freely copied.",null,null],[10,"split_off","","",13,null],[10,"to_reducer","","",13,null],[11,"reduce","","",14,null],[0,"len","rayon::par_iter","",null,null],[3,"ParallelLen","rayon::par_iter::len","",null,null],[12,"maximal_len","","Maximal number of elements that we will write",15,null],[12,"cost","","An estimate of the &quot;cost&quot; of this operation. This is a kind of\nabstract concept you can use to influence how fine-grained the\nthreads are.",15,null],[12,"sparse","","If true, all elements will be written. If false, some may not.\nFor example, `sparse` will be false if there is a filter.\nWhen doing a collect, sparse iterators require a compression\nstep.",15,null],[17,"THRESHOLD","","",null,null],[17,"FUNC_ADJUSTMENT","","",null,null],[11,"clone","","",15,null],[11,"left_cost","","",15,null],[11,"right_cost","","",15,null],[0,"for_each","rayon::par_iter","",null,null],[5,"for_each","rayon::par_iter::for_each","",null,{"inputs":[{"name":"par_iter"},{"name":"op"}],"output":null}],[0,"reduce","rayon::par_iter","",null,null],[3,"ReduceFolder","rayon::par_iter::reduce","",null,null],[3,"SumOp","","",null,null],[3,"MulOp","","",null,null],[3,"MinOp","","",null,null],[3,"MaxOp","","",null,null],[3,"ReduceWithOp","","",null,null],[3,"ReduceWithIdentityOp","","",null,null],[5,"reduce","","",null,{"inputs":[{"name":"par_iter"},{"name":"reduce_op"}],"output":{"name":"t"}}],[17,"SUM","","",null,null],[17,"MUL","","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[8,"ReduceOp","","Specifies a &quot;reduce operator&quot;. This is the combination of a start\nvalue and a reduce function. The reduce function takes two items\nand computes a reduced version. The start value `S` is a kind of\n&quot;zero&quot; or &quot;identity&quot; value that may be intermingled as needed;\nidealy, `reduce(S, X)` for any item `X` yields `X`.",null,null],[10,"start_value","","",16,null],[10,"reduce","","",16,null],[11,"consume","","",17,null],[11,"complete","","",17,null],[11,"start_value","","",18,null],[11,"reduce","","",18,null],[11,"start_value","","",18,null],[11,"reduce","","",18,null],[11,"start_value","","",18,null],[11,"reduce","","",18,null],[11,"start_value","","",18,null],[11,"reduce","","",18,null],[11,"start_value","","",18,null],[11,"reduce","","",18,null],[11,"start_value","","",18,null],[11,"reduce","","",18,null],[11,"start_value","","",18,null],[11,"reduce","","",18,null],[11,"start_value","","",18,null],[11,"reduce","","",18,null],[11,"start_value","","",18,null],[11,"reduce","","",18,null],[11,"start_value","","",18,null],[11,"reduce","","",18,null],[11,"start_value","","",18,null],[11,"reduce","","",18,null],[11,"start_value","","",18,null],[11,"reduce","","",18,null],[11,"start_value","","",19,null],[11,"reduce","","",19,null],[11,"start_value","","",19,null],[11,"reduce","","",19,null],[11,"start_value","","",19,null],[11,"reduce","","",19,null],[11,"start_value","","",19,null],[11,"reduce","","",19,null],[11,"start_value","","",19,null],[11,"reduce","","",19,null],[11,"start_value","","",19,null],[11,"reduce","","",19,null],[11,"start_value","","",19,null],[11,"reduce","","",19,null],[11,"start_value","","",19,null],[11,"reduce","","",19,null],[11,"start_value","","",19,null],[11,"reduce","","",19,null],[11,"start_value","","",19,null],[11,"reduce","","",19,null],[11,"start_value","","",19,null],[11,"reduce","","",19,null],[11,"start_value","","",19,null],[11,"reduce","","",19,null],[11,"start_value","","",20,null],[11,"reduce","","",20,null],[11,"start_value","","",20,null],[11,"reduce","","",20,null],[11,"start_value","","",20,null],[11,"reduce","","",20,null],[11,"start_value","","",20,null],[11,"reduce","","",20,null],[11,"start_value","","",20,null],[11,"reduce","","",20,null],[11,"start_value","","",20,null],[11,"reduce","","",20,null],[11,"start_value","","",20,null],[11,"reduce","","",20,null],[11,"start_value","","",20,null],[11,"reduce","","",20,null],[11,"start_value","","",20,null],[11,"reduce","","",20,null],[11,"start_value","","",20,null],[11,"reduce","","",20,null],[11,"start_value","","",20,null],[11,"reduce","","",20,null],[11,"start_value","","",20,null],[11,"reduce","","",20,null],[11,"start_value","","",21,null],[11,"reduce","","",21,null],[11,"start_value","","",21,null],[11,"reduce","","",21,null],[11,"start_value","","",21,null],[11,"reduce","","",21,null],[11,"start_value","","",21,null],[11,"reduce","","",21,null],[11,"start_value","","",21,null],[11,"reduce","","",21,null],[11,"start_value","","",21,null],[11,"reduce","","",21,null],[11,"start_value","","",21,null],[11,"reduce","","",21,null],[11,"start_value","","",21,null],[11,"reduce","","",21,null],[11,"start_value","","",21,null],[11,"reduce","","",21,null],[11,"start_value","","",21,null],[11,"reduce","","",21,null],[11,"start_value","","",21,null],[11,"reduce","","",21,null],[11,"start_value","","",21,null],[11,"reduce","","",21,null],[11,"new","","",22,{"inputs":[{"name":"op"}],"output":{"name":"reducewithop"}}],[11,"start_value","","",22,null],[11,"reduce","","",22,null],[11,"new","","",23,{"inputs":[{"name":"item"},{"name":"op"}],"output":{"name":"reducewithidentityop"}}],[11,"start_value","","",23,null],[11,"reduce","","",23,null],[0,"slice","rayon::par_iter","",null,null],[3,"SliceIter","rayon::par_iter::slice","",null,null],[3,"ChunksIter","","",null,null],[3,"SliceProducer","","",null,null],[3,"SliceChunksProducer","","",null,null],[11,"drive_unindexed","","",24,null],[11,"upper_bound","","",24,null],[11,"drive","","",24,null],[11,"len","","",24,null],[11,"with_producer","","",24,null],[11,"drive_unindexed","","",25,null],[11,"upper_bound","","",25,null],[11,"drive","","",25,null],[11,"len","","",25,null],[11,"with_producer","","",25,null],[11,"cost","","",26,null],[11,"split_at","","",26,null],[11,"into_iter","","",26,null],[11,"cost","","",27,null],[11,"split_at","","",27,null],[11,"into_iter","","",27,null],[0,"slice_mut","rayon::par_iter","",null,null],[3,"SliceIterMut","rayon::par_iter::slice_mut","",null,null],[3,"ChunksMutIter","","",null,null],[3,"SliceMutProducer","","",null,null],[3,"SliceChunksMutProducer","","",null,null],[11,"drive_unindexed","","",28,null],[11,"upper_bound","","",28,null],[11,"drive","","",28,null],[11,"len","","",28,null],[11,"with_producer","","",28,null],[11,"drive_unindexed","","",29,null],[11,"upper_bound","","",29,null],[11,"drive","","",29,null],[11,"len","","",29,null],[11,"with_producer","","",29,null],[11,"cost","","",30,null],[11,"split_at","","",30,null],[11,"into_iter","","",30,null],[11,"cost","","",31,null],[11,"split_at","","",31,null],[11,"into_iter","","",31,null],[0,"map","rayon::par_iter","",null,null],[3,"MapFn","rayon::par_iter::map","",null,null],[12,"0","","",32,null],[3,"MapCloned","","",null,null],[3,"MapInspect","","",null,null],[12,"0","","",33,null],[3,"Map","","",null,null],[3,"MapProducer","","",null,null],[3,"MapIter","","",null,null],[8,"MapOp","","",null,null],[16,"Output","","",34,null],[10,"map","","",34,null],[11,"map","","",32,null],[11,"map","","",35,null],[11,"map","","",33,null],[11,"new","","",36,{"inputs":[{"name":"m"},{"name":"map_op"}],"output":{"name":"map"}}],[11,"drive_unindexed","","",36,null],[11,"upper_bound","","",36,null],[11,"drive","","",36,null],[11,"len","","",36,null],[11,"with_producer","","",36,null],[11,"cost","","",37,null],[11,"split_at","","",37,null],[11,"into_iter","","",37,null],[11,"next","","",38,null],[0,"weight","rayon::par_iter","",null,null],[3,"Weight","rayon::par_iter::weight","",null,null],[3,"WeightProducer","","",null,null],[11,"new","","",39,{"inputs":[{"name":"m"},{"name":"f64"}],"output":{"name":"weight"}}],[11,"drive_unindexed","","",39,null],[11,"upper_bound","","",39,null],[11,"drive","","",39,null],[11,"len","","",39,null],[11,"with_producer","","",39,null],[11,"cost","","",40,null],[11,"split_at","","",40,null],[11,"into_iter","","",40,null],[0,"zip","rayon::par_iter","",null,null],[3,"ZipIter","rayon::par_iter::zip","",null,null],[3,"ZipProducer","","",null,null],[11,"new","","",41,{"inputs":[{"name":"a"},{"name":"b"}],"output":{"name":"zipiter"}}],[11,"drive_unindexed","","",41,null],[11,"upper_bound","","",41,null],[11,"drive","","",41,null],[11,"len","","",41,null],[11,"with_producer","","",41,null],[11,"cost","","",42,null],[11,"split_at","","",42,null],[11,"into_iter","","",42,null],[0,"range","rayon::par_iter","",null,null],[3,"RangeIter","rayon::par_iter::range","",null,null],[11,"into_par_iter","core::ops","",43,null],[11,"drive_unindexed","rayon::par_iter::range","",44,null],[11,"upper_bound","","",44,null],[11,"drive","","",44,null],[11,"len","","",44,null],[11,"with_producer","","",44,null],[11,"cost","","",44,null],[11,"split_at","","",44,null],[11,"into_iter","","",44,null],[11,"into_par_iter","core::ops","",43,null],[11,"drive_unindexed","rayon::par_iter::range","",44,null],[11,"upper_bound","","",44,null],[11,"drive","","",44,null],[11,"len","","",44,null],[11,"with_producer","","",44,null],[11,"cost","","",44,null],[11,"split_at","","",44,null],[11,"into_iter","","",44,null],[11,"into_par_iter","core::ops","",43,null],[11,"drive_unindexed","rayon::par_iter::range","",44,null],[11,"upper_bound","","",44,null],[11,"drive","","",44,null],[11,"len","","",44,null],[11,"with_producer","","",44,null],[11,"cost","","",44,null],[11,"split_at","","",44,null],[11,"into_iter","","",44,null],[11,"into_par_iter","core::ops","",43,null],[11,"drive_unindexed","rayon::par_iter::range","",44,null],[11,"upper_bound","","",44,null],[11,"drive","","",44,null],[11,"len","","",44,null],[11,"with_producer","","",44,null],[11,"cost","","",44,null],[11,"split_at","","",44,null],[11,"into_iter","","",44,null],[11,"into_par_iter","core::ops","",43,null],[11,"drive_unindexed","rayon::par_iter::range","",44,null],[11,"upper_bound","","",44,null],[11,"drive","","",44,null],[11,"len","","",44,null],[11,"with_producer","","",44,null],[11,"cost","","",44,null],[11,"split_at","","",44,null],[11,"into_iter","","",44,null],[11,"into_par_iter","core::ops","",43,null],[11,"drive_unindexed","rayon::par_iter::range","",44,null],[11,"upper_bound","","",44,null],[11,"drive","","",44,null],[11,"len","","",44,null],[11,"with_producer","","",44,null],[11,"cost","","",44,null],[11,"split_at","","",44,null],[11,"into_iter","","",44,null],[11,"into_par_iter","core::ops","",43,null],[11,"drive_unindexed","rayon::par_iter::range","",44,null],[11,"upper_bound","","",44,null],[11,"drive","","",44,null],[11,"len","","",44,null],[11,"with_producer","","",44,null],[11,"cost","","",44,null],[11,"split_at","","",44,null],[11,"into_iter","","",44,null],[11,"into_par_iter","core::ops","",43,null],[11,"drive_unindexed","rayon::par_iter::range","",44,null],[11,"upper_bound","","",44,null],[11,"drive","","",44,null],[11,"len","","",44,null],[11,"with_producer","","",44,null],[11,"cost","","",44,null],[11,"split_at","","",44,null],[11,"into_iter","","",44,null],[0,"vec","rayon::par_iter","",null,null],[3,"VecIter","rayon::par_iter::vec","",null,null],[3,"VecProducer","","",null,null],[3,"SliceDrain","","",null,null],[11,"into_par_iter","collections::vec","",45,null],[11,"drive_unindexed","rayon::par_iter::vec","",46,null],[11,"upper_bound","","",46,null],[11,"drive","","",46,null],[11,"len","","",46,null],[11,"with_producer","","",46,null],[11,"drop","","",46,null],[11,"cost","","",47,null],[11,"split_at","","",47,null],[11,"into_iter","","",47,null],[11,"drop","","",47,null],[11,"next","","",48,null],[11,"drop","","",48,null],[8,"IntoParallelIterator","rayon::par_iter","",null,null],[16,"Iter","","",49,null],[16,"Item","","",49,null],[10,"into_par_iter","","",49,null],[8,"IntoParallelRefIterator","","",null,null],[16,"Iter","","",50,null],[16,"Item","","",50,null],[10,"par_iter","","",50,null],[8,"IntoParallelRefMutIterator","","",null,null],[16,"Iter","","",51,null],[16,"Item","","",51,null],[10,"par_iter_mut","","",51,null],[8,"ToParallelChunks","","",null,null],[16,"Iter","","",52,null],[16,"Item","","",52,null],[10,"par_chunks","","Returns a parallel iterator over at most `size` elements of\n`self` at a time. The chunks do not overlap.",52,null],[8,"ToParallelChunksMut","","",null,null],[16,"Iter","","",53,null],[16,"Item","","",53,null],[10,"par_chunks_mut","","Returns a parallel iterator over at most `size` elements of\n`self` at a time. The chunks are mutable and do not overlap.",53,null],[8,"ParallelIterator","","The `ParallelIterator` interface.",null,null],[16,"Item","","",54,null],[11,"weight","","Indicates the relative &quot;weight&quot; of producing each item in this\nparallel iterator. A higher weight will cause finer-grained\nparallel subtasks. 1.0 indicates something very cheap and\nuniform, like copying a value out of an array, or computing `x\n+ 1`. If your tasks are either very expensive, or very\nunpredictable, you are better off with higher values. See also\n`weight_max`, which is a convenient shorthand to force the\nfinest grained parallel execution posible. Tuning this value\nshould not affect correctness but can improve (or hurt)\nperformance.",54,null],[11,"weight_max","","Shorthand for `self.weight(f64::INFINITY)`. This forces the\nsmallest granularity of parallel execution, which makes sense\nwhen your parallel tasks are (potentially) very expensive to\nexecute.",54,null],[11,"for_each","","Executes `OP` on each item produced by the iterator, in parallel.",54,null],[11,"map","","Applies `map_op` to each item of this iterator, producing a new\niterator with the results.",54,null],[11,"cloned","","Creates an iterator which clones all of its elements.  This may be\nuseful when you have an iterator over `&amp;T`, but you need `T`.",54,null],[11,"inspect","","Applies `inspect_op` to a reference to each item of this iterator,\nproducing a new iterator passing through the original items.  This is\noften useful for debugging to see what&#39;s happening in iterator stages.",54,null],[11,"filter","","Applies `filter_op` to each item of this iterator, producing a new\niterator with only the items that gave `true` results.",54,null],[11,"filter_map","","Applies `filter_op` to each item of this iterator to get an `Option`,\nproducing a new iterator with only the items from `Some` results.",54,null],[11,"flat_map","","Applies `map_op` to each item of this iterator to get nested iterators,\nproducing a new iterator that flattens these back into one.",54,null],[11,"reduce_with","","Reduces the items in the iterator into one item using `op`.\nSee also `sum`, `mul`, `min`, etc, which are slightly more\nefficient. Returns `None` if the iterator is empty.",54,null],[11,"reduce_with_identity","","Reduces the items in the iterator into one item using `op`.\nThe argument `identity` represents an &quot;identity&quot; value which\nmay be inserted into the sequence as needed to create\nopportunities for parallel execution. So, for example, if you\nare doing a summation, then `identity` ought to be something\nthat represents the zero for your type (but consider just\ncalling `sum()` in that case).",54,null],[11,"sum","","Sums up the items in the iterator.",54,null],[11,"mul","","Multiplies all the items in the iterator.",54,null],[11,"min","","Computes the minimum of all the items in the iterator.",54,null],[11,"max","","Computes the maximum of all the items in the iterator.",54,null],[11,"reduce","","Reduces the items using the given &quot;reduce operator&quot;. You may\nprefer `reduce_with` for a simpler interface.",54,null],[8,"BoundedParallelIterator","","A trait for parallel iterators items where the precise number of\nitems is not known, but we can at least give an upper-bound. These\nsorts of iterators result from filtering.",null,null],[10,"upper_bound","","",55,null],[8,"ExactParallelIterator","","A trait for parallel iterators items where the precise number of\nitems is known. This occurs when e.g. iterating over a\nvector. Knowing precisely how many items will be produced is very\nuseful.",null,null],[10,"len","","Produces an exact count of how many items this iterator will\nproduce, presuming no panic occurs.",56,null],[11,"collect_into","","Collects the results of the iterator into the specified\nvector. The vector is always truncated before execution\nbegins. If possible, reusing the vector across calls can lead\nto better performance since it reuses the same backing buffer.",56,null],[8,"IndexedParallelIterator","","An iterator that supports &quot;random access&quot; to its data, meaning\nthat you can split it at arbitrary indices and draw data from\nthose points.",null,null],[11,"zip","","Iterate over tuples `(A, B)`, where the items `A` are from\nthis iterator and `B` are from the iterator given as argument.\nLike the `zip` method on ordinary iterators, if the two\niterators are of unequal length, you only get the items they\nhave in common.",57,null],[11,"enumerate","","Yields an index along with each item.",57,null],[0,"prelude","rayon","The rayon prelude imports the various `ParallelIterator` traits.\nThe intention is that one can include `use rayon::prelude::*` and\nhave easy access to the various traits and methods you will need.",null,null]],"paths":[[4,"InitError"],[3,"Configuration"],[3,"ThreadPool"],[3,"Enumerate"],[3,"EnumerateProducer"],[3,"Filter"],[3,"FilterMap"],[3,"FlatMap"],[8,"ProducerCallback"],[8,"Producer"],[8,"Consumer"],[8,"Folder"],[8,"Reducer"],[8,"UnindexedConsumer"],[3,"NoopReducer"],[3,"ParallelLen"],[8,"ReduceOp"],[3,"ReduceFolder"],[3,"SumOp"],[3,"MulOp"],[3,"MinOp"],[3,"MaxOp"],[3,"ReduceWithOp"],[3,"ReduceWithIdentityOp"],[3,"SliceIter"],[3,"ChunksIter"],[3,"SliceProducer"],[3,"SliceChunksProducer"],[3,"SliceIterMut"],[3,"ChunksMutIter"],[3,"SliceMutProducer"],[3,"SliceChunksMutProducer"],[3,"MapFn"],[3,"MapInspect"],[8,"MapOp"],[3,"MapCloned"],[3,"Map"],[3,"MapProducer"],[3,"MapIter"],[3,"Weight"],[3,"WeightProducer"],[3,"ZipIter"],[3,"ZipProducer"],[3,"Range"],[3,"RangeIter"],[3,"Vec"],[3,"VecIter"],[3,"VecProducer"],[3,"SliceDrain"],[8,"IntoParallelIterator"],[8,"IntoParallelRefIterator"],[8,"IntoParallelRefMutIterator"],[8,"ToParallelChunks"],[8,"ToParallelChunksMut"],[8,"ParallelIterator"],[8,"BoundedParallelIterator"],[8,"ExactParallelIterator"],[8,"IndexedParallelIterator"]]};
searchIndex["regex"] = {"doc":"This crate provides a native implementation of regular expressions that is\nheavily based on RE2 both in syntax and in implementation. Notably,\nbackreferences and arbitrary lookahead/lookbehind assertions are not\nprovided. In return, regular expression searching provided by this package\nhas excellent worst-case performance. The specific syntax supported is\ndocumented further down.","items":[[3,"RegexBuilder","regex","A configurable builder for a regular expression.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching Unicode strings.",null,null],[3,"Captures","","Captures represents a group of captured strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular\nexpression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a\nregular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group\nname and the value.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a\nparticular regular expression.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"NoExpand","","NoExpand indicates literal string replacement.",null,null],[12,"0","","",0,null],[3,"RegexSplits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"RegexSplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",null,null],[13,"Syntax","","A syntax error.",1,null],[13,"CompiledTooBig","","The compiled program exceeded the set size limit.\nThe argument is the size limit imposed.",1,null],[13,"InvalidSet","","**DEPRECATED:** Will be removed on next major version bump.",1,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"is_match","","Tests if the given regular expression matches somewhere in the text given.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[0,"bytes","","Match regular expressions on arbitrary bytes.",null,null],[3,"RegexBuilder","regex::bytes","A configurable builder for a regular expression.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching arbitrary bytes.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a\nparticular regular expression.",null,null],[3,"Splits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"SplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"Captures","","Captures represents a group of captured byte strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular\nexpression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a\nregular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group name and\nthe value.",null,null],[3,"NoExpand","","NoExpand indicates literal byte string replacement.",null,null],[12,"0","","",2,null],[8,"Replacer","","Replacer describes types that can be used to replace matches in a byte\nstring.",null,null],[10,"replace_append","","Appends text to `dst` to replace the current match.",3,null],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",3,null],[11,"fmt","regex","",1,null],[11,"description","","",1,null],[11,"cause","","",1,null],[11,"fmt","","",1,null],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",4,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"compile","","Consume the builder and compile the regular expression.",4,null],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",4,null],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",4,null],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches\nanything when `s` is set and matches anything except for new line when\nit is not set (the default).",4,null],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",4,null],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",4,null],[11,"unicode","","Set the value for the Unicode (`u`) flag.",4,null],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",4,null],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",4,null],[11,"new","regex","Create a new regular expression builder with the given pattern.",5,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"compile","","Consume the builder and compile the regular expression.",5,null],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",5,null],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",5,null],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches\nanything when `s` is set and matches anything except for new line when\nit is not set (the default).",5,null],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",5,null],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",5,null],[11,"unicode","","Set the value for the Unicode (`u`) flag.",5,null],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",5,null],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",5,null],[11,"no_expansion","regex::re_bytes","Return a fixed unchanging replacement byte string.",3,null],[11,"clone","regex::bytes","",6,null],[11,"fmt","","Shows the original regular expression.",6,null],[11,"fmt","","Shows the original regular expression.",6,null],[11,"from_str","","Attempts to parse a string into a regular expression",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly\nto search, split or replace text in a string.",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",6,{"inputs":[{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",6,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",6,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",6,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",6,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter`, except it\nyields information about submatches.",6,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the\nregular expression. Namely, each element of the iterator corresponds to\ntext that *isn&#39;t* matched by the regular expression.",6,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.) Namely, each element of the iterator corresponds to text\nthat *isn&#39;t* matched by the regular expression. The remainder of the\nstring that is not split will be the last element in the iterator.",6,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The\nreplacement can be a regular byte string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches&#39;\n`Captures` and returns the replaced byte string.",6,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement\nprovided. This is the same as calling `replacen` with `limit` set to\n`0`.",6,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",6,null],[11,"shortest_match","","Returns the end location of a match in the text given.",6,null],[11,"as_str","","Returns the original string of this regex.",6,null],[11,"capture_names","","Returns an iterator over the capture names.",6,null],[11,"captures_len","","Returns the number of captures.",6,null],[11,"next","","",7,null],[11,"next","","",8,null],[11,"next","","",9,null],[11,"next","","",10,null],[11,"next","","",11,null],[11,"size_hint","","",11,null],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns\n`None` if `i` is not a valid capture group or if the capture group did\nnot match anything. The positions returned are *always* byte indices\nwith respect to the original byte string matched.",12,null],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn&#39;t\na valid capture group or didn&#39;t match anything, then `None` is\nreturned.",12,null],[11,"name","","Returns the matched string for the capture group named `name`.  If\n`name` isn&#39;t a valid capture group or didn&#39;t match anything, then\n`None` is returned.",12,null],[11,"iter","","Creates an iterator of all the capture groups in order of appearance\nin the regular expression.",12,null],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices\nin terms of the original string matched.",12,null],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group\nname and the value. The iterator returns these values in arbitrary\norder.",12,null],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`, and writes them to the `dst` buffer given.",12,null],[11,"len","","Returns the number of captured groups.",12,null],[11,"is_empty","","Returns true if and only if there are no captured groups.",12,null],[11,"fmt","","",12,null],[11,"index","","",12,null],[11,"index","","",12,null],[11,"next","","",13,null],[11,"next","","",14,null],[11,"next","","",15,null],[11,"replace_append","","",2,null],[11,"no_expansion","","",2,null],[11,"clone","regex","",16,null],[11,"new","","Create a new regex set with the given regular expressions.",16,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches\nthe text given.",16,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",16,null],[11,"len","","Returns the total number of regular expressions in this set.",16,null],[11,"fmt","","",17,null],[11,"clone","","",17,null],[11,"matched_any","","Whether this set contains any matches.",17,null],[11,"matched","","Whether the regex at the given index matched.",17,null],[11,"len","","The total number of regexes in the set that created these matches.",17,null],[11,"iter","","Returns an iterator over indexes in the regex that matched.",17,null],[11,"into_iter","","",17,null],[11,"next","","",18,null],[11,"clone","","",19,null],[11,"next","","",19,null],[11,"fmt","","",16,null],[11,"clone","regex::bytes","",20,null],[11,"new","","Create a new regex set with the given regular expressions.",20,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches\nthe text given.",20,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",20,null],[11,"len","","Returns the total number of regular expressions in this set.",20,null],[11,"fmt","","",21,null],[11,"clone","","",21,null],[11,"matched_any","","Whether this set contains any matches.",21,null],[11,"matched","","Whether the regex at the given index matched.",21,null],[11,"len","","The total number of regexes in the set that created these matches.",21,null],[11,"iter","","Returns an iterator over indexes in the regex that matched.",21,null],[11,"into_iter","","",21,null],[11,"next","","",22,null],[11,"clone","","",23,null],[11,"next","","",23,null],[11,"fmt","","",20,null],[11,"clone","regex","",24,null],[11,"fmt","","Shows the original regular expression.",24,null],[11,"fmt","","Shows the original regular expression.",24,null],[11,"eq","","",24,null],[11,"from_str","","Attempts to parse a string into a regular expression",24,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly\nto search, split or replace text in a string.",24,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",24,{"inputs":[{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",24,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",24,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",24,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",24,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter`, except it\nyields information about submatches.",24,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the\nregular expression. Namely, each element of the iterator corresponds to\ntext that *isn&#39;t* matched by the regular expression.",24,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.) Namely, each element of the iterator corresponds to text\nthat *isn&#39;t* matched by the regular expression. The remainder of the\nstring that is not split will be the last element in the iterator.",24,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided.\nThe replacement can be a regular string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches&#39;\n`Captures` and returns the replaced string.",24,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement\nprovided. This is the same as calling `replacen` with `limit` set to\n`0`.",24,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",24,null],[11,"shortest_match","","Returns the end location of a match in the text given.",24,null],[11,"as_str","","Returns the original string of this regex.",24,null],[11,"capture_names","","Returns an iterator over the capture names.",24,null],[11,"captures_len","","Returns the number of captures.",24,null],[11,"next","","",25,null],[11,"size_hint","","",25,null],[11,"reg_replace","","",0,null],[11,"no_expand","","",0,null],[11,"next","","",26,null],[11,"next","","",27,null],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns\n`None` if `i` is not a valid capture group or if the capture group did\nnot match anything. The positions returned are *always* byte indices\nwith respect to the original string matched.",28,null],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn&#39;t\na valid capture group or didn&#39;t match anything, then `None` is\nreturned.",28,null],[11,"name","","Returns the matched string for the capture group named `name`.  If\n`name` isn&#39;t a valid capture group or didn&#39;t match anything, then\n`None` is returned.",28,null],[11,"iter","","Creates an iterator of all the capture groups in order of appearance\nin the regular expression.",28,null],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices\nin terms of the original string matched.",28,null],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group\nname and the value. The iterator returns these values in arbitrary\norder.",28,null],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`.",28,null],[11,"len","","Returns the number of captured groups.",28,null],[11,"is_empty","","Returns true if and only if there are no captured groups.",28,null],[11,"fmt","","",28,null],[11,"index","","",28,null],[11,"index","","",28,null],[11,"next","","",29,null],[11,"next","","",30,null],[11,"next","","",31,null],[11,"next","","",32,null],[11,"next","","",33,null],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string.",null,null],[10,"reg_replace","","Returns a possibly owned string that is used to replace the match\ncorresponding to the `caps` capture group.",34,null],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",34,null],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",34,null]],"paths":[[3,"NoExpand"],[4,"Error"],[3,"NoExpand"],[8,"Replacer"],[3,"RegexBuilder"],[3,"RegexBuilder"],[3,"Regex"],[3,"FindMatches"],[3,"FindCaptures"],[3,"Splits"],[3,"SplitsN"],[3,"CaptureNames"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"Regex"],[3,"CaptureNames"],[3,"RegexSplits"],[3,"RegexSplitsN"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"FindCaptures"],[3,"FindMatches"],[8,"Replacer"]]};
searchIndex["inflate"] = {"doc":"","items":[[3,"InflateStream","inflate","",null,null],[11,"new","","",0,{"inputs":[],"output":{"name":"inflatestream"}}],[11,"from_zlib","","",0,{"inputs":[],"output":{"name":"inflatestream"}}],[11,"update","","",0,null]],"paths":[[3,"InflateStream"]]};
searchIndex["deque"] = {"doc":"A (mostly) lock-free concurrent work-stealing deque","items":[[3,"Worker","deque","Worker half of the work-stealing deque. This worker has exclusive access to\none side of the deque, and uses `push` and `pop` method to manipulate it.",null,null],[3,"Stealer","","The stealing half of the work-stealing deque. Stealers have access to the\nopposite end of the deque from the worker, and they only have access to the\n`steal` method.",null,null],[4,"Stolen","","When stealing some data, this is an enumeration of the possible outcomes.",null,null],[13,"Empty","","The deque was empty at the time of stealing",0,null],[13,"Abort","","The stealer lost the race for stealing data, and a retry may return more\ndata.",0,null],[13,"Data","","The stealer has successfully stolen some data.",0,null],[5,"new","","Allocates a new work-stealing deque.",null,null],[11,"clone","","",1,null],[11,"fmt","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"push","","Pushes data onto the front of this work queue.",2,null],[11,"pop","","Pops data off the front of the work queue, returning `None` on an empty\nqueue.",2,null],[11,"steal","","Steals work off the end of the queue (opposite of the worker&#39;s end)",1,null]],"paths":[[4,"Stolen"],[3,"Stealer"],[3,"Worker"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number\ngenerator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",0,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",1,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current\nplatform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number\ngenerator, seeded by the system. Intended to be used in method\nchaining style, e.g. `thread_rng().gen::&lt;i32&gt;()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from an iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the\n`Sample` &amp; `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",2,null],[12,"item","","The actual item which is being weighted",2,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low &lt; high`, so this\nfunction doesn&#39;t have to repeat the check.",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",3,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",4,null],[11,"new","","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low &gt;= high`.",4,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",4,null],[11,"ind_sample","","",4,null],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom.",null,null],[11,"clone","","",5,null],[11,"new","","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",5,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",5,null],[11,"ind_sample","","",5,null],[11,"clone","","",6,null],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k &lt; 0`.",6,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",6,null],[11,"ind_sample","","",6,null],[11,"clone","","",7,null],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",7,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",7,null],[11,"ind_sample","","",7,null],[11,"clone","","",8,null],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n &lt;= 0`.",8,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",8,null],[11,"ind_sample","","",8,null],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",9,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",9,null],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",10,null],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",10,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",10,null],[11,"ind_sample","","",10,null],[11,"clone","","",11,null],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",11,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",11,null],[11,"ind_sample","","",11,null],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",12,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",12,null],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",13,null],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda &lt;= 0`.",13,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",13,null],[11,"ind_sample","","",13,null],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",14,null],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",15,null],[11,"clone","","",16,null],[11,"sample","","",16,null],[11,"ind_sample","","",16,null],[11,"new","","",16,{"inputs":[],"output":{"name":"randsample"}}],[11,"clone","","",2,null],[11,"new","","Create a new `WeightedChoice`.",17,null],[11,"sample","","",17,null],[11,"ind_sample","","",17,null],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default\nfixed seed.",18,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",18,null],[11,"next_u32","","",18,null],[11,"reseed","","",18,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",18,null],[11,"rand","","",18,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",19,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",19,null],[11,"next_u32","","",19,null],[11,"next_u64","","",19,null],[11,"reseed","","",19,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",19,null],[11,"rand","","",19,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",20,null],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",20,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",20,null],[11,"next_u32","","",20,null],[11,"reseed","","",20,null],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",20,null],[11,"rand","","",20,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",21,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",22,null],[11,"new","","Create a new `ReseedingRng` with the given parameters.",21,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",21,null],[11,"next_u32","","",21,null],[11,"next_u64","","",21,null],[11,"fill_bytes","","",21,null],[11,"reseed","","",21,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",21,null],[11,"clone","","",23,null],[11,"reseed","","",23,null],[11,"default","","",23,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","core::option","",24,{"inputs":[{"name":"r"}],"output":{"name":"option"}}],[0,"os","rand","Interfaces to the operating system provided random number\ngenerators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from\nthe operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",25,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",25,null],[11,"next_u64","","",25,null],[11,"fill_bytes","","",25,null],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will\nwork best with an infinite reader, but this is not required.",null,null],[11,"new","","Create a new `ReadRng` from a `Read`.",26,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",26,null],[11,"next_u64","","",26,null],[11,"fill_bytes","","",26,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of\nrandomness.",27,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",28,null],[11,"next_u64","","Return the next random u64.",28,null],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",28,null],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",28,null],[11,"fill_bytes","","Fill `dest` with random data.",28,null],[11,"gen","","Return a random value of a `Rand` type.",28,null],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",28,null],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",28,null],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",28,null],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",28,null],[11,"choose","","Return a random element from `values`.",28,null],[11,"shuffle","","Shuffle a mutable slice in place.",28,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",29,null],[10,"from_seed","","Create a new RNG with the given seed.",29,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"next_u32","alloc::boxed","",30,null],[11,"next_u64","","",30,null],[11,"next_f32","","",30,null],[11,"next_f64","","",30,null],[11,"fill_bytes","","",30,null],[11,"next","rand","",31,null],[11,"next","","",32,null],[11,"clone","","",33,null],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",33,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",33,null],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"rand","","",33,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"clone","","",34,null],[11,"new","","Create a randomly seeded instance of `StdRng`.",34,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",34,null],[11,"next_u64","","",34,null],[11,"reseed","","",34,null],[11,"from_seed","","",34,null],[11,"clone","","",35,null],[11,"next_u32","","",35,null],[11,"next_u64","","",35,null],[11,"fill_bytes","","",35,null]],"paths":[[3,"Open01"],[3,"Closed01"],[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[4,"Option"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Box"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["time"] = {"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details.",null,null],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library\nimplementation",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where\nnanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month,\nday, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time\nvalue, including any adjustment for Daylight Saving Time. This is the\nnumber of seconds east of UTC. For example, for U.S. Pacific Daylight\nTime, the value is -7*60*60 = -25200.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 10&lt;sup&gt;9&lt;/sup&gt; - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and\nnanoseconds since 1970-01-01T00:00:00Z.",null,{"inputs":[],"output":{"name":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter\nin nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter\nin seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"tzset","","",null,{"inputs":[],"output":null}],[5,"empty_tm","","",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"inputs":[],"output":{"name":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"inputs":[{"name":"str"},{"name":"tm"}],"output":{"name":"result"}}],[11,"fmt","","",3,null],[11,"fmt","","",4,null],[11,"cmp","","",4,null],[11,"partial_cmp","","",4,null],[11,"lt","","",4,null],[11,"le","","",4,null],[11,"gt","","",4,null],[11,"ge","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"weeks","","Makes a new `Duration` with given number of weeks.\nEquivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days.\nEquivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours.\nEquivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes.\nEquivalent to `Duration::seconds(minutes * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds.\nPanics when the duration is more than `i64::MAX` milliseconds\nor less than `i64::MIN` milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",4,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,null],[11,"num_days","","Returns the total number of whole days in the duration.",4,null],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,null],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,null],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,null],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,null],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration,\nor `None` on overflow (exceeding 2^63 microseconds in either direction).",4,null],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration,\nor `None` on overflow (exceeding 2^63 nanoseconds in either direction).",4,null],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,null],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,null],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,null],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,{"inputs":[{"name":"stdduration"}],"output":{"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,null],[11,"neg","","",4,null],[11,"add","","",4,null],[11,"sub","","",4,null],[11,"mul","","",4,null],[11,"div","","",4,null],[11,"fmt","","",4,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"description","","",5,null],[11,"hash","","",0,null],[11,"fmt","","",0,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",0,null],[11,"new","","",0,{"inputs":[{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",0,null],[11,"sub","","",0,null],[11,"sub","","",0,null],[11,"clone","","",6,null],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,{"inputs":[],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of\n`self` to the value of `later`.",6,null],[11,"fmt","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"cmp","","",7,null],[11,"partial_cmp","","",7,null],[11,"lt","","",7,null],[11,"le","","",7,null],[11,"gt","","",7,null],[11,"ge","","",7,null],[11,"clone","","",7,null],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,{"inputs":[],"output":{"name":"steadytime"}}],[11,"fmt","","",7,null],[11,"sub","","",7,null],[11,"sub","","",7,null],[11,"add","","",7,null],[11,"hash","","",1,null],[11,"fmt","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"add","","The resulting Tm is in UTC.",1,null],[11,"sub","","The resulting Tm is in UTC.",1,null],[11,"sub","","",1,null],[11,"partial_cmp","","",1,null],[11,"cmp","","",1,null],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,null],[11,"to_local","","Convert time to the local timezone",1,null],[11,"to_utc","","Convert time to the UTC",1,null],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC, in the local timezone.",1,null],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC.",1,null],[11,"strftime","","Formats the time according to the format string.",1,null],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,null],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,null],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is\ncompatible with ISO 8601.",1,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"fmt","","",2,null],[11,"description","","",2,null],[11,"fmt","","",3,null]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["aho_corasick"] = {"doc":"An implementation of the\n[Aho-Corasick string search algorithm](https://en.wikipedia.org/wiki/Aho%E2%80%93Corasick_string_matching_algorithm).","items":[[3,"Match","aho_corasick","Records a match in the search text.",null,null],[12,"pati","","The pattern index.",0,null],[12,"start","","The starting byte offset of the match in the search text.",0,null],[12,"end","","The ending byte offset of the match in the search text.",0,null],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",null,null],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",null,null],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",null,null],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",null,null],[3,"FullAcAutomaton","","A complete Aho-Corasick automaton.",null,null],[3,"AcAutomaton","","An Aho-Corasick finite automaton.",null,null],[3,"Dense","","State transitions that can be stored either sparsely or densely.",null,null],[3,"Sparse","","State transitions that are always sparse.",null,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"hash","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"fmt","","",1,null],[11,"next","","",1,null],[11,"fmt","","",2,null],[11,"next","","",2,null],[11,"fmt","","",3,null],[11,"next","","",3,null],[11,"fmt","","",4,null],[11,"next","","",4,null],[11,"clone","","",5,null],[11,"new","","Build a new expanded Aho-Corasick automaton from an existing\nAho-Corasick automaton.",5,{"inputs":[{"name":"acautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",5,null],[11,"get_match","","",5,null],[11,"has_match","","",5,null],[11,"start_bytes","","",5,null],[11,"patterns","","",5,null],[11,"pattern","","",5,null],[11,"fmt","","",5,null],[6,"StateIdx","","The integer type used for the state index.",null,null],[8,"Automaton","","An abstraction over automatons and their corresponding iterators.\nThe type parameter `P` is the type of the pattern that was used to\nconstruct this Automaton.",null,null],[10,"next_state","","Return the next state given the current state and next character.",6,null],[10,"has_match","","Return true if and only if the given state and current pattern index\nindicate a match.",6,null],[10,"get_match","","Build a match given the current state, pattern index and input index.",6,null],[10,"start_bytes","","Return the set of bytes that have transitions in the root state.",6,null],[10,"patterns","","Returns all of the patterns matched by this automaton.",6,null],[10,"pattern","","Returns the pattern indexed at `i`.",6,null],[11,"len","","Return the number of patterns in the automaton.",6,null],[11,"is_empty","","Returns true if the automaton has no patterns.",6,null],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,null],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,null],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,null],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,null],[8,"Transitions","","An abstraction over state transition strategies.",null,null],[10,"new","","Return a new state at the given depth.",7,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[10,"goto","","Return the next state index given the next character.",7,null],[10,"set_goto","","Set the next state index for the character given.",7,null],[10,"heap_bytes","","The memory use in bytes (on the heap) of this set of transitions.",7,null],[11,"clone","","",8,null],[11,"new","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"with_transitions","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"into_full","","Build out the entire automaton into a single matrix.",8,null],[11,"next_state","","",8,null],[11,"get_match","","",8,null],[11,"has_match","","",8,null],[11,"start_bytes","","",8,null],[11,"patterns","","",8,null],[11,"pattern","","",8,null],[11,"fmt","","",9,null],[11,"clone","","",9,null],[11,"new","","",9,{"inputs":[{"name":"u32"}],"output":{"name":"dense"}}],[11,"goto","","",9,null],[11,"set_goto","","",9,null],[11,"heap_bytes","","",9,null],[11,"fmt","","",10,null],[11,"clone","","",10,null],[11,"new","","",10,{"inputs":[{"name":"u32"}],"output":{"name":"sparse"}}],[11,"goto","","",10,null],[11,"set_goto","","",10,null],[11,"heap_bytes","","",10,null],[11,"from_iter","","Create an automaton from an iterator of strings.",8,{"inputs":[{"name":"t"}],"output":{"name":"acautomaton"}}],[11,"fmt","","",8,null],[11,"len","","Return the number of patterns in the automaton.",6,null],[11,"is_empty","","Returns true if the automaton has no patterns.",6,null],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,null],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,null],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,null],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,null]],"paths":[[3,"Match"],[3,"Matches"],[3,"StreamMatches"],[3,"MatchesOverlapping"],[3,"StreamMatchesOverlapping"],[3,"FullAcAutomaton"],[8,"Automaton"],[8,"Transitions"],[3,"AcAutomaton"],[3,"Dense"],[3,"Sparse"]]};
searchIndex["miow"] = {"doc":"","items":[],"paths":[]};
searchIndex["thread_local"] = {"doc":"Per-object thread-local storage","items":[[3,"ThreadLocal","thread_local","Thread-local variable wrapper",null,null],[3,"IterMut","","Mutable iterator over the contents of a `ThreadLocal`.",null,null],[3,"IntoIter","","An iterator that moves out of a `ThreadLocal`.",null,null],[3,"CachedThreadLocal","","Wrapper around `ThreadLocal` which adds a fast path for a single thread.",null,null],[6,"CachedIterMut","","Mutable iterator over the contents of a `CachedThreadLocal`.",null,null],[6,"CachedIntoIter","","An iterator that moves out of a `CachedThreadLocal`.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"drop","","",0,null],[11,"new","","Creates a new empty `ThreadLocal`.",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",0,null],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn&#39;t\nexist.",0,null],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",0,null],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively\nreseting it to its original state.",0,null],[11,"into_iter","","",0,null],[11,"get_default","","Returns the element for the current thread, or creates a default one if\nit doesn&#39;t exist.",0,null],[11,"fmt","","",0,null],[11,"next","","",1,null],[11,"size_hint","","",1,null],[11,"next","","",2,null],[11,"size_hint","","",2,null],[11,"default","","",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"new","","Creates a new empty `CachedThreadLocal`.",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",3,null],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn&#39;t\nexist.",3,null],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",3,null],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively\nreseting it to its original state.",3,null],[11,"into_iter","","",3,null],[11,"get_default","","Returns the element for the current thread, or creates a default one if\nit doesn&#39;t exist.",3,null],[11,"fmt","","",3,null]],"paths":[[3,"ThreadLocal"],[3,"IterMut"],[3,"IntoIter"],[3,"CachedThreadLocal"]]};
searchIndex["net2"] = {"doc":"Extensions to `std::net` networking types.","items":[[3,"TcpBuilder","net2","An &quot;in progress&quot; TCP socket which has not yet been connected or listened.",null,null],[3,"UdpBuilder","","An &quot;in progress&quot; UDP socket which has not yet been connected.",null,null],[11,"new_v4","","Constructs a new TcpBuilder with the `AF_INET` domain, the `SOCK_STREAM`\ntype, and with a protocol argument of 0.",0,{"inputs":[],"output":{"name":"result"}}],[11,"new_v6","","Constructs a new TcpBuilder with the `AF_INET6` domain, the `SOCK_STREAM`\ntype, and with a protocol argument of 0.",0,{"inputs":[],"output":{"name":"result"}}],[11,"bind","","Binds this socket to the specified address.",0,null],[11,"listen","","Mark a socket as ready to accept incoming connection requests using\naccept()",0,null],[11,"connect","","Initiate a connection on this socket to the specified address.",0,null],[11,"to_tcp_stream","","Converts this builder into a `TcpStream`",0,null],[11,"to_tcp_listener","","Converts this builder into a `TcpListener`",0,null],[11,"fmt","","",0,null],[11,"new_v4","","Constructs a new UdpBuilder with the `AF_INET` domain, the `SOCK_DGRAM`\ntype, and with a protocol argument of 0.",1,{"inputs":[],"output":{"name":"result"}}],[11,"new_v6","","Constructs a new UdpBuilder with the `AF_INET6` domain, the `SOCK_DGRAM`\ntype, and with a protocol argument of 0.",1,{"inputs":[],"output":{"name":"result"}}],[11,"bind","","Binds this socket to the specified address.",1,null],[11,"fmt","","",1,null],[11,"set_recv_buffer_size","std::net::tcp","",2,null],[11,"recv_buffer_size","","",2,null],[11,"set_send_buffer_size","","",2,null],[11,"send_buffer_size","","",2,null],[11,"set_nodelay","","",2,null],[11,"nodelay","","",2,null],[11,"set_keepalive_ms","","",2,null],[11,"keepalive_ms","","",2,null],[11,"set_read_timeout_ms","","",2,null],[11,"read_timeout_ms","","",2,null],[11,"set_write_timeout_ms","","",2,null],[11,"write_timeout_ms","","",2,null],[11,"set_ttl","","",2,null],[11,"ttl","","",2,null],[11,"set_only_v6","","",2,null],[11,"only_v6","","",2,null],[11,"connect","","",2,null],[11,"take_error","","",2,null],[11,"set_nonblocking","","",2,null],[11,"set_recv_buffer_size","std::net::udp","",3,null],[11,"recv_buffer_size","","",3,null],[11,"set_send_buffer_size","","",3,null],[11,"send_buffer_size","","",3,null],[11,"set_broadcast","","",3,null],[11,"broadcast","","",3,null],[11,"set_multicast_loop_v4","","",3,null],[11,"multicast_loop_v4","","",3,null],[11,"set_multicast_ttl_v4","","",3,null],[11,"multicast_ttl_v4","","",3,null],[11,"set_multicast_loop_v6","","",3,null],[11,"multicast_loop_v6","","",3,null],[11,"set_ttl","","",3,null],[11,"ttl","","",3,null],[11,"set_only_v6","","",3,null],[11,"only_v6","","",3,null],[11,"join_multicast_v4","","",3,null],[11,"join_multicast_v6","","",3,null],[11,"leave_multicast_v4","","",3,null],[11,"leave_multicast_v6","","",3,null],[11,"set_read_timeout_ms","","",3,null],[11,"read_timeout_ms","","",3,null],[11,"set_write_timeout_ms","","",3,null],[11,"write_timeout_ms","","",3,null],[11,"take_error","","",3,null],[11,"connect","","",3,null],[11,"send","","",3,null],[11,"recv","","",3,null],[11,"set_nonblocking","","",3,null],[11,"set_ttl","std::net::tcp","",4,null],[11,"ttl","","",4,null],[11,"set_only_v6","","",4,null],[11,"only_v6","","",4,null],[11,"take_error","","",4,null],[11,"set_nonblocking","","",4,null],[11,"ttl","net2","Sets the value for the `IP_TTL` option on this socket.",0,null],[11,"only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",0,null],[11,"reuse_address","","Set value for the `SO_REUSEADDR` option on this socket.",0,null],[11,"get_reuse_address","","Check the `SO_REUSEADDR` option on this socket.",0,null],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",0,null],[11,"ttl","","Sets the value for the `IP_TTL` option on this socket.",1,null],[11,"only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",1,null],[11,"reuse_address","","Set value for the `SO_REUSEADDR` option on this socket.",1,null],[11,"get_reuse_address","","Check the `SO_REUSEADDR` option on this socket.",1,null],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",1,null],[11,"from_raw_fd","","",0,{"inputs":[{"name":"c_int"}],"output":{"name":"tcpbuilder"}}],[11,"as_raw_fd","","",0,null],[11,"from_raw_fd","","",1,{"inputs":[{"name":"c_int"}],"output":{"name":"udpbuilder"}}],[11,"as_raw_fd","","",1,null],[0,"unix","","Unix-specific extensions to the `std::net` types.",null,null],[8,"UnixTcpBuilderExt","net2::unix","Unix-specific extensions for the `TcpBuilder` type in this library.",null,null],[10,"reuse_port","","Set value for the `SO_REUSEPORT` option on this socket.",5,null],[10,"get_reuse_port","","Check the value of the `SO_REUSEPORT` option on this socket.",5,null],[8,"UnixUdpBuilderExt","","Unix-specific extensions for the `UdpBuilder` type in this library.",null,null],[10,"reuse_port","","Set value for the `SO_REUSEPORT` option on this socket.",6,null],[10,"get_reuse_port","","Check the value of the `SO_REUSEPORT` option on this socket.",6,null],[11,"reuse_port","net2","",0,null],[11,"get_reuse_port","","",0,null],[11,"reuse_port","","",1,null],[11,"get_reuse_port","","",1,null],[8,"TcpStreamExt","","Extension methods for the standard [`TcpStream` type][link] in `std::net`.",null,null],[10,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",7,null],[10,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",7,null],[10,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",7,null],[10,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",7,null],[10,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",7,null],[10,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",7,null],[10,"set_keepalive_ms","","Sets whether keepalive messages are enabled to be sent on this socket.",7,null],[10,"keepalive_ms","","Returns whether keepalive messages are enabled on this socket, and if so\nthe amount of milliseconds between them.",7,null],[10,"set_read_timeout_ms","","Sets the `SO_RCVTIMEO` option for this socket.",7,null],[10,"read_timeout_ms","","Gets the value of the `SO_RCVTIMEO` option for this socket.",7,null],[10,"set_write_timeout_ms","","Sets the `SO_SNDTIMEO` option for this socket.",7,null],[10,"write_timeout_ms","","Gets the value of the `SO_SNDTIMEO` option for this socket.",7,null],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",7,null],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",7,null],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",7,null],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",7,null],[10,"connect","","Executes a `connect` operation on this socket, establishing a connection\nto the host specified by `addr`.",7,null],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",7,null],[10,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",7,null],[8,"TcpListenerExt","","Extension methods for the standard [`TcpListener` type][link] in `std::net`.",null,null],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",8,null],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",8,null],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",8,null],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",8,null],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",8,null],[10,"set_nonblocking","","Moves this TCP listener into or out of nonblocking mode.",8,null],[8,"UdpSocketExt","","Extension methods for the standard [`UdpSocket` type][link] in `std::net`.",null,null],[10,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",9,null],[10,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",9,null],[10,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",9,null],[10,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",9,null],[10,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",9,null],[10,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",9,null],[10,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",9,null],[10,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",9,null],[10,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",9,null],[10,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",9,null],[10,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",9,null],[10,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",9,null],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",9,null],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",9,null],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",9,null],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",9,null],[10,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",9,null],[10,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",9,null],[10,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",9,null],[10,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",9,null],[10,"set_read_timeout_ms","","Sets the `SO_RCVTIMEO` option for this socket.",9,null],[10,"read_timeout_ms","","Gets the value of the `SO_RCVTIMEO` option for this socket.",9,null],[10,"set_write_timeout_ms","","Sets the `SO_SNDTIMEO` option for this socket.",9,null],[10,"write_timeout_ms","","Gets the value of the `SO_SNDTIMEO` option for this socket.",9,null],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",9,null],[10,"connect","","Connects this UDP socket to a remote address, allowing the `send` and\n`recv` syscalls to be used to send data and also applies filters to only\nreceive data from the specified address.",9,null],[10,"send","","Sends data on the socket to the remote address to which it is connected.",9,null],[10,"recv","","Receives data on the socket from the remote address to which it is\nconnected.",9,null],[10,"set_nonblocking","","Moves this UDP socket into or out of nonblocking mode.",9,null]],"paths":[[3,"TcpBuilder"],[3,"UdpBuilder"],[3,"TcpStream"],[3,"UdpSocket"],[3,"TcpListener"],[8,"UnixTcpBuilderExt"],[8,"UnixUdpBuilderExt"],[8,"TcpStreamExt"],[8,"TcpListenerExt"],[8,"UdpSocketExt"]]};
searchIndex["flate2"] = {"doc":"A DEFLATE-based stream compression/decompression library","items":[[3,"GzBuilder","flate2","A builder structure to create a new gzip Encoder.",null,null],[3,"GzHeader","","A structure representing the header of a gzip stream.",null,null],[3,"Compress","","Raw in-memory compression stream for blocks of data.",null,null],[3,"Decompress","","Raw in-memory decompression stream for blocks of data.",null,null],[3,"DataError","","Error returned when a decompression object finds that the input stream of\nbytes was not a valid input stream of bytes.",null,null],[4,"Status","","Possible status results of compressing some data or successfully\ndecompressing a block of data.",null,null],[13,"Ok","","Indicates success.",0,null],[13,"BufError","","Indicates that forward progress is not possible due to input or output\nbuffers being empty.",0,null],[13,"StreamEnd","","Indicates that all input has been consumed and all output bytes have\nbeen written. Decompression/compression should not be called again.",0,null],[4,"Flush","","Values which indicate the form of flushing to be used when compressing or\ndecompressing in-memory data.",null,null],[13,"None","","A typical parameter for passing to compression/decompression functions,\nthis indicates that the underlying stream to decide how much data to\naccumulate before producing output in order to maximize compression.",1,null],[13,"Sync","","All pending output is flushed to the output buffer and the output is\naligned on a byte boundary so that the decompressor can get all input\ndata available so far.",1,null],[13,"Partial","","All pending output is flushed to the output buffer, but the output is\nnot aligned to a byte boundary.",1,null],[13,"Block","","A deflate block is completed and emitted, as for `Flush::Sync`, but the\noutput is not aligned on a byte boundary and up to seven vits of the\ncurrent block are held to be written as the next byte after the next\ndeflate block is completed.",1,null],[13,"Full","","All output is flushed as with `Flush::Sync` and the compression state is\nreset so decompression can restart from this point if previous\ncompressed data has been damaged or if random access is desired.",1,null],[13,"Finish","","Pending input is processed and pending output is flushed.",1,null],[4,"Compression","","When compressing data, the compression level can be specified by a value in\nthis enum.",null,null],[13,"None","","No compression is to be performed, this may actually inflate data\nslightly when encoding.",2,null],[13,"Fast","","Optimize for the best speed of encoding.",2,null],[13,"Best","","Optimize for the size of data being encoded.",2,null],[13,"Default","","Choose the default compression, a balance between speed and size.",2,null],[11,"new","","Create a new blank builder with no header by default.",3,{"inputs":[],"output":{"name":"builder"}}],[11,"mtime","","Configure the `mtime` field in the gzip header.",3,null],[11,"extra","","Configure the `extra` field in the gzip header.",3,null],[11,"filename","","Configure the `filename` field in the gzip header.",3,null],[11,"comment","","Configure the `comment` field in the gzip header.",3,null],[11,"write","","Consume this builder, creating a writer encoder in the process.",3,null],[11,"read","","Consume this builder, creating a reader encoder in the process.",3,null],[11,"buf_read","","Consume this builder, creating a reader encoder in the process.",3,null],[11,"filename","","Returns the `filename` field of this gzip stream&#39;s header, if present.",4,null],[11,"extra","","Returns the `extra` field of this gzip stream&#39;s header, if present.",4,null],[11,"comment","","Returns the `comment` field of this gzip stream&#39;s header, if present.",4,null],[11,"mtime","","Returns the `mtime` field of this gzip stream&#39;s header, if present.",4,null],[11,"fmt","","",5,null],[11,"new","","Creates a new object ready for compressing data that it&#39;s given.",6,{"inputs":[{"name":"compression"},{"name":"bool"}],"output":{"name":"compress"}}],[11,"total_in","","Returns the total number of input bytes which have been processed by\nthis compression object.",6,null],[11,"total_out","","Returns the total number of output bytes which have been produced by\nthis compression object.",6,null],[11,"reset","","Quickly resets this compressor without having to reallocate anything.",6,null],[11,"compress","","Compresses the input data into the output, consuming only as much\ninput as needed and writing as much output as possible.",6,null],[11,"compress_vec","","Compresses the input data into the extra space of the output, consuming\nonly as much input as needed and writing as much output as possible.",6,null],[11,"new","","Creates a new object ready for decompressing data that it&#39;s given.",7,{"inputs":[{"name":"bool"}],"output":{"name":"decompress"}}],[11,"total_in","","Returns the total number of input bytes which have been processed by\nthis decompression object.",7,null],[11,"total_out","","Returns the total number of output bytes which have been produced by\nthis decompression object.",7,null],[11,"decompress","","Decompresses the input data into the output, consuming only as much\ninput as needed and writing as much output as possible.",7,null],[11,"decompress_vec","","Decompresses the input data into the extra space in the output vector\nspecified by `output`.",7,null],[11,"description","","",5,null],[11,"fmt","","",5,null],[0,"read","","Types which operate over `Read` streams, both encoders and decoders for\nvarious formats.",null,null],[3,"DeflateEncoder","flate2::read","A DEFLATE encoder, or compressor.",null,null],[3,"DeflateDecoder","","A DEFLATE decoder, or decompressor.",null,null],[3,"ZlibEncoder","","A ZLIB encoder, or compressor.",null,null],[3,"ZlibDecoder","","A ZLIB decoder, or decompressor.",null,null],[3,"GzEncoder","","A gzip streaming encoder",null,null],[3,"GzDecoder","","A gzip streaming decoder",null,null],[0,"write","flate2","Types which operate over `Write` streams, both encoders and decoders for\nvarious formats.",null,null],[3,"DeflateEncoder","flate2::write","A DEFLATE encoder, or compressor.",null,null],[3,"DeflateDecoder","","A DEFLATE decoder, or decompressor.",null,null],[3,"ZlibEncoder","","A ZLIB encoder, or compressor.",null,null],[3,"ZlibDecoder","","A ZLIB decoder, or decompressor.",null,null],[3,"GzEncoder","","A gzip streaming encoder",null,null],[0,"bufread","flate2","Types which operate over `BufRead` streams, both encoders and decoders for\nvarious formats.",null,null],[3,"DeflateEncoder","flate2::bufread","A DEFLATE encoder, or compressor.",null,null],[3,"DeflateDecoder","","A DEFLATE decoder, or decompressor.",null,null],[3,"ZlibEncoder","","A ZLIB encoder, or compressor.",null,null],[3,"ZlibDecoder","","A ZLIB decoder, or decompressor.",null,null],[3,"GzEncoder","","A gzip streaming encoder",null,null],[3,"GzDecoder","","A gzip streaming decoder",null,null],[8,"FlateReadExt","flate2","A helper trait to create encoder/decoders with method syntax.",null,null],[11,"gz_encode","","Consume this reader to create a compression stream at the specified\ncompression level.",8,null],[11,"gz_decode","","Consume this reader to create a decompression stream of this stream.",8,null],[11,"zlib_encode","","Consume this reader to create a compression stream at the specified\ncompression level.",8,null],[11,"zlib_decode","","Consume this reader to create a decompression stream of this stream.",8,null],[11,"deflate_encode","","Consume this reader to create a compression stream at the specified\ncompression level.",8,null],[11,"deflate_decode","","Consume this reader to create a decompression stream of this stream.",8,null],[8,"FlateWriteExt","","A helper trait to create encoder/decoders with method syntax.",null,null],[11,"gz_encode","","Consume this writer to create a compression stream at the specified\ncompression level.",9,null],[11,"zlib_encode","","Consume this writer to create a compression stream at the specified\ncompression level.",9,null],[11,"zlib_decode","","Consume this writer to create a decompression stream of this stream.",9,null],[11,"deflate_encode","","Consume this writer to create a compression stream at the specified\ncompression level.",9,null],[11,"deflate_decode","","Consume this writer to create a decompression stream of this stream.",9,null],[11,"clone","","",2,null],[11,"new","flate2::write","Creates a new encoder which will write compressed data to the stream\ngiven at the given compression level.",10,{"inputs":[{"name":"w"},{"name":"compression"}],"output":{"name":"encoderwriter"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the output\nstream for another.",10,null],[11,"finish","","Consumes this encoder, flushing the output stream.",10,null],[11,"write","","",10,null],[11,"flush","","",10,null],[11,"new","flate2::read","Creates a new encoder which will read uncompressed data from the given\nstream and emit the compressed stream.",11,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"encoderreader"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input\nstream for another.",11,null],[11,"get_ref","","Acquires a reference to the underlying reader",11,null],[11,"get_mut","","Acquires a mutable reference to the underlying stream",11,null],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",11,null],[11,"read","","",11,null],[11,"new","flate2::bufread","Creates a new encoder which will read uncompressed data from the given\nstream and emit the compressed stream.",12,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"encoderreaderbuf"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input\nstream for another.",12,null],[11,"get_ref","","Acquires a reference to the underlying reader",12,null],[11,"get_mut","","Acquires a mutable reference to the underlying stream",12,null],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",12,null],[11,"read","","",12,null],[11,"new","flate2::read","Creates a new decoder which will decompress data read from the given\nstream.",13,{"inputs":[{"name":"r"}],"output":{"name":"decoderreader"}}],[11,"new_with_buf","","Same as `new`, but the intermediate buffer for data is specified.",13,{"inputs":[{"name":"r"},{"name":"vec"}],"output":{"name":"decoderreader"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input\nstream for another.",13,null],[11,"get_ref","","Acquires a reference to the underlying stream",13,null],[11,"get_mut","","Acquires a mutable reference to the underlying stream",13,null],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",13,null],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",13,null],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",13,null],[11,"read","","",13,null],[11,"new","flate2::bufread","Creates a new decoder which will decompress data read from the given\nstream.",14,{"inputs":[{"name":"r"}],"output":{"name":"decoderreaderbuf"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input\nstream for another.",14,null],[11,"get_ref","","Acquires a reference to the underlying stream",14,null],[11,"get_mut","","Acquires a mutable reference to the underlying stream",14,null],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",14,null],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",14,null],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",14,null],[11,"read","","",14,null],[11,"new","flate2::write","Creates a new decoder which will write uncompressed data to the stream.",15,{"inputs":[{"name":"w"}],"output":{"name":"decoderwriter"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the output\nstream for another.",15,null],[11,"finish","","Consumes this encoder, flushing the output stream.",15,null],[11,"total_in","","Returns the number of bytes that the decompressor has consumed for\ndecompression.",15,null],[11,"total_out","","Returns the number of bytes that the decompressor has written to its\noutput stream.",15,null],[11,"write","","",15,null],[11,"flush","","",15,null],[11,"new","","Creates a new encoder which will use the given compression level.",16,{"inputs":[{"name":"w"},{"name":"compression"}],"output":{"name":"encoderwriter"}}],[11,"finish","","Finish encoding this stream, returning the underlying writer once the\nencoding is done.",16,null],[11,"write","","",16,null],[11,"flush","","",16,null],[11,"drop","","",16,null],[11,"new","flate2::read","Creates a new encoder which will use the given compression level.",17,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"encoderreader"}}],[11,"into_inner","","Returns the underlying stream, consuming this encoder",17,null],[11,"read","","",17,null],[11,"new","flate2::bufread","Creates a new encoder which will use the given compression level.",18,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"encoderreaderbuf"}}],[11,"into_inner","","Returns the underlying stream, consuming this encoder",18,null],[11,"read","","",18,null],[11,"new","flate2::read","Creates a new decoder from the given reader, immediately parsing the\ngzip header.",19,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"header","","Returns the header associated with this stream.",19,null],[11,"read","","",19,null],[11,"new","flate2::bufread","Creates a new decoder from the given reader, immediately parsing the\ngzip header.",20,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"header","","Returns the header associated with this stream.",20,null],[11,"read","","",20,null],[11,"new","flate2::write","Creates a new encoder which will write compressed data to the stream\ngiven at the given compression level.",21,{"inputs":[{"name":"w"},{"name":"compression"}],"output":{"name":"encoderwriter"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the output\nstream for another.",21,null],[11,"finish","","Consumes this encoder, flushing the output stream.",21,null],[11,"write","","",21,null],[11,"flush","","",21,null],[11,"new","flate2::read","Creates a new encoder which will read uncompressed data from the given\nstream and emit the compressed stream.",22,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"encoderreader"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input\nstream for another.",22,null],[11,"get_ref","","Acquires a reference to the underlying stream",22,null],[11,"get_mut","","Acquires a mutable reference to the underlying stream",22,null],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",22,null],[11,"read","","",22,null],[11,"new","flate2::bufread","Creates a new encoder which will read uncompressed data from the given\nstream and emit the compressed stream.",23,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"encoderreaderbuf"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input\nstream for another.",23,null],[11,"get_ref","","Acquires a reference to the underlying stream",23,null],[11,"get_mut","","Acquires a mutable reference to the underlying stream",23,null],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",23,null],[11,"read","","",23,null],[11,"new","flate2::read","Creates a new decoder which will decompress data read from the given\nstream.",24,{"inputs":[{"name":"r"}],"output":{"name":"decoderreader"}}],[11,"new_with_buf","","Same as `new`, but the intermediate buffer for data is specified.",24,{"inputs":[{"name":"r"},{"name":"vec"}],"output":{"name":"decoderreader"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input\nstream for another.",24,null],[11,"get_ref","","Acquires a reference to the underlying stream",24,null],[11,"get_mut","","Acquires a mutable reference to the underlying stream",24,null],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",24,null],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",24,null],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",24,null],[11,"read","","",24,null],[11,"new","flate2::bufread","Creates a new decoder which will decompress data read from the given\nstream.",25,{"inputs":[{"name":"r"}],"output":{"name":"decoderreaderbuf"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input\nstream for another.",25,null],[11,"get_ref","","Acquires a reference to the underlying stream",25,null],[11,"get_mut","","Acquires a mutable reference to the underlying stream",25,null],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",25,null],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",25,null],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",25,null],[11,"read","","",25,null],[11,"new","flate2::write","Creates a new decoder which will write uncompressed data to the stream.",26,{"inputs":[{"name":"w"}],"output":{"name":"decoderwriter"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the output\nstream for another.",26,null],[11,"finish","","Consumes this encoder, flushing the output stream.",26,null],[11,"total_in","","Returns the number of bytes that the decompressor has consumed for\ndecompression.",26,null],[11,"total_out","","Returns the number of bytes that the decompressor has written to its\noutput stream.",26,null],[11,"write","","",26,null],[11,"flush","","",26,null]],"paths":[[4,"Status"],[4,"Flush"],[4,"Compression"],[3,"GzBuilder"],[3,"GzHeader"],[3,"DataError"],[3,"Compress"],[3,"Decompress"],[8,"FlateReadExt"],[8,"FlateWriteExt"],[3,"DeflateEncoder"],[3,"DeflateEncoder"],[3,"DeflateEncoder"],[3,"DeflateDecoder"],[3,"DeflateDecoder"],[3,"DeflateDecoder"],[3,"GzEncoder"],[3,"GzEncoder"],[3,"GzEncoder"],[3,"GzDecoder"],[3,"GzDecoder"],[3,"ZlibEncoder"],[3,"ZlibEncoder"],[3,"ZlibEncoder"],[3,"ZlibDecoder"],[3,"ZlibDecoder"],[3,"ZlibDecoder"]]};
searchIndex["memchr"] = {"doc":"This crate defines two functions, `memchr` and `memrchr`, which expose a safe interface\nto the corresponding functions in `libc`.","items":[[5,"memchr","memchr","A safe interface to `memchr`.",null,null],[5,"memrchr","","A safe interface to `memrchr`.",null,null],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",null,null],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",null,null]],"paths":[]};
searchIndex["thread_id"] = {"doc":"Thread-ID: get a unique ID for the current thread.","items":[[5,"get","thread_id","Returns a number that is unique to the calling thread.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["num_cpus"] = {"doc":"Replaces the deprecated functionality of std::os::num_cpus.","items":[[5,"get","num_cpus","Returns the number of CPUs of the current machine.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["miniz_sys"] = {"doc":"","items":[[3,"mz_stream","miniz_sys","",null,null],[12,"next_in","","",0,null],[12,"avail_in","","",0,null],[12,"total_in","","",0,null],[12,"next_out","","",0,null],[12,"avail_out","","",0,null],[12,"total_out","","",0,null],[12,"msg","","",0,null],[12,"state","","",0,null],[12,"zalloc","","",0,null],[12,"zfree","","",0,null],[12,"opaque","","",0,null],[12,"data_type","","",0,null],[12,"adler","","",0,null],[12,"reserved","","",0,null],[4,"mz_internal_state","","",null,null],[5,"mz_deflateInit2","","",null,null],[5,"mz_deflate","","",null,null],[5,"mz_deflateEnd","","",null,null],[5,"mz_deflateReset","","",null,null],[5,"mz_inflateInit2","","",null,null],[5,"mz_inflate","","",null,null],[5,"mz_inflateEnd","","",null,null],[5,"mz_crc32","","",null,null],[6,"mz_alloc_func","","",null,null],[6,"mz_free_func","","",null,null],[17,"MZ_NO_FLUSH","","",null,null],[17,"MZ_PARTIAL_FLUSH","","",null,null],[17,"MZ_SYNC_FLUSH","","",null,null],[17,"MZ_FULL_FLUSH","","",null,null],[17,"MZ_FINISH","","",null,null],[17,"MZ_BLOCK","","",null,null],[17,"MZ_OK","","",null,null],[17,"MZ_STREAM_END","","",null,null],[17,"MZ_NEED_DICT","","",null,null],[17,"MZ_ERRNO","","",null,null],[17,"MZ_STREAM_ERROR","","",null,null],[17,"MZ_DATA_ERROR","","",null,null],[17,"MZ_MEM_ERROR","","",null,null],[17,"MZ_BUF_ERROR","","",null,null],[17,"MZ_VERSION_ERROR","","",null,null],[17,"MZ_PARAM_ERROR","","",null,null],[17,"MZ_DEFLATED","","",null,null],[17,"MZ_DEFAULT_WINDOW_BITS","","",null,null],[17,"MZ_DEFAULT_STRATEGY","","",null,null]],"paths":[[3,"mz_stream"]]};
searchIndex["gif"] = {"doc":"# GIF en- and decoding library [![Build Status](https://travis-ci.org/PistonDevelopers/image-gif.svg?branch=master)](https://travis-ci.org/PistonDevelopers/image-gif)","items":[[3,"Frame","gif","A GIF frame",null,null],[12,"delay","","Frame delay in units of 10 ms.",0,null],[12,"dispose","","Disposal method.",0,null],[12,"transparent","","Transparent index (if available).",0,null],[12,"needs_user_input","","True if the frame needs user input do be displayed.",0,null],[12,"top","","Offset from the top border of the canvas.",0,null],[12,"left","","Offset from the left border of the canvas.",0,null],[12,"width","","Width of the frame.",0,null],[12,"height","","Height of the frame.",0,null],[12,"interlaced","","True if the image is interlaced.",0,null],[12,"palette","","Frame local color palette if available.",0,null],[12,"buffer","","Buffer containing the image data.\nOnly indices unless configured differently.",0,null],[3,"StreamingDecoder","","GIF decoder which supports streaming",null,null],[3,"MemoryLimit","","Memory limit in bytes. `MemoryLimit::Some(0)` means\nthat there is no memory limit set.",null,null],[12,"0","","",1,null],[3,"Reader","","GIF decoder",null,null],[3,"Decoder","","GIF decoder",null,null],[3,"Encoder","","GIF encoder.",null,null],[4,"Block","","Known GIF block types",null,null],[13,"Image","","Image block.",2,null],[13,"Extension","","Extension block.",2,null],[13,"Trailer","","Image trailer.",2,null],[4,"Extension","","Known GIF extensions",null,null],[13,"Text","","Text extension.",3,null],[13,"Control","","Control extension.",3,null],[13,"Comment","","Comment extension.",3,null],[13,"Application","","Application extension.",3,null],[4,"DisposalMethod","","Disposal method",null,null],[13,"Any","","StreamingDecoder is not required to take any action.",4,null],[13,"Keep","","Do not dispose.",4,null],[13,"Background","","Restore to background color.",4,null],[13,"Previous","","Restore to previous.",4,null],[4,"Decoded","","Indicates whether a certain object has been decoded",null,null],[13,"Nothing","","Decoded nothing.",5,null],[13,"GlobalPalette","","Global palette.",5,null],[13,"BackgroundColor","","Index of the background color in the global palette.",5,null],[13,"Trailer","","Decoded the image trailer.",5,null],[13,"BlockStart","","The start of a block.",5,null],[13,"SubBlockFinished","","Decoded a sub-block. More sub-block are available.",5,null],[13,"BlockFinished","","Decoded the last (or only) sub-block of a block.",5,null],[13,"Frame","","Decoded all information of the next frame.\nThe returned frame does **not** any image data.",5,null],[13,"Data","","Decoded some data of the current frame.",5,null],[13,"DataEnd","","No more data available the current frame.",5,null],[4,"DecodingError","","Decoding error.",null,null],[13,"Format","","Returned if the image is found to be malformed.",6,null],[13,"Internal","","Internal (logic) error.",6,null],[13,"Io","","Wraps `std::io::Error`.",6,null],[4,"ColorOutput","","Output mode for the image data",null,null],[13,"RGBA","","The decoder expands the image data to 32bit RGBA.\nThis affects:",7,null],[13,"Indexed","","The decoder returns the raw indexed data.",7,null],[4,"Extensions","","Configures how extensions should be handled",null,null],[13,"Save","","Saves all extention data",8,null],[13,"Skip","","Skips the data of unknown extensions\nand extracts the data from known ones",8,null],[4,"ExtensionData","","Extension data.",null,null],[13,"Control","","Control extension. Use `ExtensionData::new_control_ext` to construct.",9,null],[12,"flags","gif::ExtensionData","Flags.",9,null],[12,"delay","","Frame delay.",9,null],[12,"trns","","Transparent index.",9,null],[13,"Repetitions","gif","Sets the number of repetitions",9,null],[4,"Repeat","","Number of repetitions",null,null],[13,"Finite","","Finite number of repetitions",10,null],[13,"Infinite","","Infinite number of repetitions",10,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"from_u8","","Converts `u8` to `Option&lt;Self&gt;`",4,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"from_u8","","Converts `u8` to `Option&lt;Self&gt;`",2,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"from_u8","","Converts `u8` to `Option&lt;Self&gt;`",3,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"frame"}}],[11,"from_rgba","","Creates a frame from pixels in RGBA format.",0,null],[11,"from_rgb","","Creates a frame from pixels in RGB format.",0,null],[11,"fmt","","",6,null],[11,"from","","",6,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"fmt","","",8,null],[11,"eq","","",8,null],[11,"set_param","","",8,null],[11,"fmt","","",5,null],[11,"fmt","","",11,null],[11,"new","","Creates a new streaming decoder",11,{"inputs":[],"output":{"name":"streamingdecoder"}}],[11,"update","","Updates the internal state of the decoder.",11,null],[11,"last_ext","","Returns the data of the last extension that has been decoded.",11,null],[11,"current_frame_mut","","Current frame info as a mutable ref.",11,null],[11,"current_frame","","Current frame info as a ref.",11,null],[11,"width","","Width of the image",11,null],[11,"height","","Height of the image",11,null],[11,"fmt","","",7,null],[11,"eq","","",7,null],[11,"set_param","","",7,null],[11,"fmt","","",1,null],[11,"set_param","","",1,null],[11,"new","","Creates a new decoder builder",12,{"inputs":[{"name":"r"}],"output":{"name":"decoder"}}],[11,"read_info","","Reads the logical screen descriptor including the global color palette",12,null],[11,"next_frame_info","","Returns the next frame info",13,null],[11,"read_next_frame","","Reads the next frame from the image.",13,null],[11,"read_into_buffer","","Reads the data of the current frame into a pre-allocated buffer.",13,null],[11,"fill_buffer","","Reads data of the current frame into a pre-allocated buffer until the buffer has been\nfilled completely.",13,null],[11,"buffer_size","","Output buffer size",13,null],[11,"line_length","","Line length of the current frame",13,null],[11,"palette","","Returns the color palette relevant for the current (next) frame",13,null],[11,"global_palette","","The global color palette",13,null],[11,"width","","Width of the image",13,null],[11,"height","","Height of the image",13,null],[11,"bg_color","","Index of the background color in the global palette",13,null],[11,"set_param","","",10,null],[11,"new_control_ext","","Constructor for control extension data.",9,{"inputs":[{"name":"u16"},{"name":"disposalmethod"},{"name":"bool"},{"name":"option"}],"output":{"name":"extensiondata"}}],[11,"new","","Creates a new encoder.",14,null],[11,"write_global_palette","","Writes the global color palette.",14,null],[11,"write_frame","","Writes a frame to the image.",14,null],[11,"write_extension","","Writes an extension to the image.",14,null],[11,"write_raw_extension","","Writes a raw extension to the image.",14,null],[11,"drop","","",14,null],[8,"SetParameter","","Implemented for objects that have parameters.",null,null],[11,"set","","Sets `value` as a parameter of `self`.",15,null],[8,"Parameter","","Configuration parameter trait.",null,null],[16,"Result","","Result type of `set_param`.",16,null],[10,"set_param","","Sets `self` as a parameter of `Object`.",16,null],[11,"set","","Sets `value` as a parameter of `self`.",15,null]],"paths":[[3,"Frame"],[3,"MemoryLimit"],[4,"Block"],[4,"Extension"],[4,"DisposalMethod"],[4,"Decoded"],[4,"DecodingError"],[4,"ColorOutput"],[4,"Extensions"],[4,"ExtensionData"],[4,"Repeat"],[3,"StreamingDecoder"],[3,"Decoder"],[3,"Reader"],[3,"Encoder"],[8,"SetParameter"],[8,"Parameter"]]};
searchIndex["num_iter"] = {"doc":"External iterators for generic mathematics","items":[[3,"Range","num_iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",0,null],[11,"next","","",0,null],[11,"size_hint","","",0,null],[11,"next_back","","",0,null],[11,"clone","","",1,null],[11,"next","","",1,null],[11,"size_hint","","",1,null],[11,"next_back","","",1,null],[11,"clone","","",2,null],[11,"next","","",2,null],[11,"clone","","",3,null],[11,"next","","",3,null]],"paths":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["num_integer"] = {"doc":"Integer trait and functions.","items":[[5,"div_rem","num_integer","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",0,null],[10,"mod_floor","","Floored integer modulo, satisfying:",0,null],[10,"gcd","","Greatest Common Divisor (GCD).",0,null],[10,"lcm","","Lowest Common Multiple (LCM).",0,null],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,null],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,null],[10,"is_even","","Returns `true` if the number is even.",0,null],[10,"is_odd","","Returns `true` if the number is odd.",0,null],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",0,null]],"paths":[[8,"Integer"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"utimbuf","libc","",null,null],[12,"actime","","",0,null],[12,"modtime","","",0,null],[3,"timeval","","",null,null],[12,"tv_sec","","",1,null],[12,"tv_usec","","",1,null],[3,"timespec","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_nsec","","",2,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",3,null],[12,"rlim_max","","",3,null],[3,"rusage","","",null,null],[12,"ru_utime","","",4,null],[12,"ru_stime","","",4,null],[12,"ru_maxrss","","",4,null],[12,"ru_ixrss","","",4,null],[12,"ru_idrss","","",4,null],[12,"ru_isrss","","",4,null],[12,"ru_minflt","","",4,null],[12,"ru_majflt","","",4,null],[12,"ru_nswap","","",4,null],[12,"ru_inblock","","",4,null],[12,"ru_oublock","","",4,null],[12,"ru_msgsnd","","",4,null],[12,"ru_msgrcv","","",4,null],[12,"ru_nsignals","","",4,null],[12,"ru_nvcsw","","",4,null],[12,"ru_nivcsw","","",4,null],[3,"in_addr","","",null,null],[12,"s_addr","","",5,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",6,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",7,null],[12,"imr_interface","","",7,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",8,null],[12,"ipv6mr_interface","","",8,null],[3,"hostent","","",null,null],[12,"h_name","","",9,null],[12,"h_aliases","","",9,null],[12,"h_addrtype","","",9,null],[12,"h_length","","",9,null],[12,"h_addr_list","","",9,null],[3,"iovec","","",null,null],[12,"iov_base","","",10,null],[12,"iov_len","","",10,null],[3,"pollfd","","",null,null],[12,"fd","","",11,null],[12,"events","","",11,null],[12,"revents","","",11,null],[3,"winsize","","",null,null],[12,"ws_row","","",12,null],[12,"ws_col","","",12,null],[12,"ws_xpixel","","",12,null],[12,"ws_ypixel","","",12,null],[3,"linger","","",null,null],[12,"l_onoff","","",13,null],[12,"l_linger","","",13,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",14,null],[12,"sa_data","","",14,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",15,null],[12,"sin_port","","",15,null],[12,"sin_addr","","",15,null],[12,"sin_zero","","",15,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",16,null],[12,"sin6_port","","",16,null],[12,"sin6_flowinfo","","",16,null],[12,"sin6_addr","","",16,null],[12,"sin6_scope_id","","",16,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",17,null],[12,"sun_path","","",17,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",18,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",19,null],[12,"ai_family","","",19,null],[12,"ai_socktype","","",19,null],[12,"ai_protocol","","",19,null],[12,"ai_addrlen","","",19,null],[12,"ai_addr","","",19,null],[12,"ai_canonname","","",19,null],[12,"ai_next","","",19,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",20,null],[12,"nl_pid","","",20,null],[12,"nl_groups","","",20,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",21,null],[12,"sll_protocol","","",21,null],[12,"sll_ifindex","","",21,null],[12,"sll_hatype","","",21,null],[12,"sll_pkttype","","",21,null],[12,"sll_halen","","",21,null],[12,"sll_addr","","",21,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",22,null],[12,"tm_min","","",22,null],[12,"tm_hour","","",22,null],[12,"tm_mday","","",22,null],[12,"tm_mon","","",22,null],[12,"tm_year","","",22,null],[12,"tm_wday","","",22,null],[12,"tm_yday","","",22,null],[12,"tm_isdst","","",22,null],[12,"tm_gmtoff","","",22,null],[12,"tm_zone","","",22,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",23,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",24,null],[12,"dli_fbase","","",24,null],[12,"dli_sname","","",24,null],[12,"dli_saddr","","",24,null],[3,"epoll_event","","",null,null],[12,"events","","",25,null],[12,"u64","","",25,null],[3,"utsname","","",null,null],[12,"sysname","","",26,null],[12,"nodename","","",26,null],[12,"release","","",26,null],[12,"version","","",26,null],[12,"machine","","",26,null],[12,"domainname","","",26,null],[3,"lconv","","",null,null],[12,"decimal_point","","",27,null],[12,"thousands_sep","","",27,null],[12,"grouping","","",27,null],[12,"int_curr_symbol","","",27,null],[12,"currency_symbol","","",27,null],[12,"mon_decimal_point","","",27,null],[12,"mon_thousands_sep","","",27,null],[12,"mon_grouping","","",27,null],[12,"positive_sign","","",27,null],[12,"negative_sign","","",27,null],[12,"int_frac_digits","","",27,null],[12,"frac_digits","","",27,null],[12,"p_cs_precedes","","",27,null],[12,"p_sep_by_space","","",27,null],[12,"n_cs_precedes","","",27,null],[12,"n_sep_by_space","","",27,null],[12,"p_sign_posn","","",27,null],[12,"n_sign_posn","","",27,null],[12,"int_p_cs_precedes","","",27,null],[12,"int_p_sep_by_space","","",27,null],[12,"int_n_cs_precedes","","",27,null],[12,"int_n_sep_by_space","","",27,null],[12,"int_p_sign_posn","","",27,null],[12,"int_n_sign_posn","","",27,null],[3,"dirent","","",null,null],[12,"d_ino","","",28,null],[12,"d_off","","",28,null],[12,"d_reclen","","",28,null],[12,"d_type","","",28,null],[12,"d_name","","",28,null],[3,"dirent64","","",null,null],[12,"d_ino","","",29,null],[12,"d_off","","",29,null],[12,"d_reclen","","",29,null],[12,"d_type","","",29,null],[12,"d_name","","",29,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",30,null],[12,"rlim_max","","",30,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",31,null],[12,"gl_pathv","","",31,null],[12,"gl_offs","","",31,null],[12,"gl_flags","","",31,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",32,null],[12,"ifa_name","","",32,null],[12,"ifa_flags","","",32,null],[12,"ifa_addr","","",32,null],[12,"ifa_netmask","","",32,null],[12,"ifa_ifu","","",32,null],[12,"ifa_data","","",32,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",33,null],[12,"pw_passwd","","",33,null],[12,"pw_uid","","",33,null],[12,"pw_gid","","",33,null],[12,"pw_gecos","","",33,null],[12,"pw_dir","","",33,null],[12,"pw_shell","","",33,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",34,null],[12,"f_frsize","","",34,null],[12,"f_blocks","","",34,null],[12,"f_bfree","","",34,null],[12,"f_bavail","","",34,null],[12,"f_files","","",34,null],[12,"f_ffree","","",34,null],[12,"f_favail","","",34,null],[12,"f_fsid","","",34,null],[12,"f_flag","","",34,null],[12,"f_namemax","","",34,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",35,null],[12,"dqb_bsoftlimit","","",35,null],[12,"dqb_curspace","","",35,null],[12,"dqb_ihardlimit","","",35,null],[12,"dqb_isoftlimit","","",35,null],[12,"dqb_curinodes","","",35,null],[12,"dqb_btime","","",35,null],[12,"dqb_itime","","",35,null],[12,"dqb_valid","","",35,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",36,null],[12,"ssi_errno","","",36,null],[12,"ssi_code","","",36,null],[12,"ssi_pid","","",36,null],[12,"ssi_uid","","",36,null],[12,"ssi_fd","","",36,null],[12,"ssi_tid","","",36,null],[12,"ssi_band","","",36,null],[12,"ssi_overrun","","",36,null],[12,"ssi_trapno","","",36,null],[12,"ssi_status","","",36,null],[12,"ssi_int","","",36,null],[12,"ssi_ptr","","",36,null],[12,"ssi_utime","","",36,null],[12,"ssi_stime","","",36,null],[12,"ssi_addr","","",36,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",37,null],[12,"mq_maxmsg","","",37,null],[12,"mq_msgsize","","",37,null],[12,"mq_curmsgs","","",37,null],[3,"cpu_set_t","","",null,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",38,null],[12,"sa_mask","","",38,null],[12,"sa_flags","","",38,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",39,null],[12,"ss_flags","","",39,null],[12,"ss_size","","",39,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",40,null],[12,"si_errno","","",40,null],[12,"si_code","","",40,null],[12,"_pad","","",40,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",41,null],[12,"gl_pathv","","",41,null],[12,"gl_offs","","",41,null],[12,"gl_flags","","",41,null],[3,"ucred","","",null,null],[12,"pid","","",42,null],[12,"uid","","",42,null],[12,"gid","","",42,null],[3,"statfs","","",null,null],[12,"f_type","","",43,null],[12,"f_bsize","","",43,null],[12,"f_blocks","","",43,null],[12,"f_bfree","","",43,null],[12,"f_bavail","","",43,null],[12,"f_files","","",43,null],[12,"f_ffree","","",43,null],[12,"f_fsid","","",43,null],[12,"f_namelen","","",43,null],[12,"f_frsize","","",43,null],[3,"msghdr","","",null,null],[12,"msg_name","","",44,null],[12,"msg_namelen","","",44,null],[12,"msg_iov","","",44,null],[12,"msg_iovlen","","",44,null],[12,"msg_control","","",44,null],[12,"msg_controllen","","",44,null],[12,"msg_flags","","",44,null],[3,"termios","","",null,null],[12,"c_iflag","","",45,null],[12,"c_oflag","","",45,null],[12,"c_cflag","","",45,null],[12,"c_lflag","","",45,null],[12,"c_line","","",45,null],[12,"c_cc","","",45,null],[12,"c_ispeed","","",45,null],[12,"c_ospeed","","",45,null],[3,"flock","","",null,null],[12,"l_type","","",46,null],[12,"l_whence","","",46,null],[12,"l_start","","",46,null],[12,"l_len","","",46,null],[12,"l_pid","","",46,null],[3,"ipc_perm","","",null,null],[12,"__key","","",47,null],[12,"uid","","",47,null],[12,"gid","","",47,null],[12,"cuid","","",47,null],[12,"cgid","","",47,null],[12,"mode","","",47,null],[12,"__seq","","",47,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",48,null],[12,"shm_segsz","","",48,null],[12,"shm_atime","","",48,null],[12,"shm_dtime","","",48,null],[12,"shm_ctime","","",48,null],[12,"shm_cpid","","",48,null],[12,"shm_lpid","","",48,null],[12,"shm_nattch","","",48,null],[3,"sem_t","","",null,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",49,null],[12,"loads","","",49,null],[12,"totalram","","",49,null],[12,"freeram","","",49,null],[12,"sharedram","","",49,null],[12,"bufferram","","",49,null],[12,"totalswap","","",49,null],[12,"freeswap","","",49,null],[12,"procs","","",49,null],[12,"pad","","",49,null],[12,"totalhigh","","",49,null],[12,"freehigh","","",49,null],[12,"mem_unit","","",49,null],[12,"_f","","",49,null],[3,"stat","","",null,null],[12,"st_dev","","",50,null],[12,"st_ino","","",50,null],[12,"st_nlink","","",50,null],[12,"st_mode","","",50,null],[12,"st_uid","","",50,null],[12,"st_gid","","",50,null],[12,"st_rdev","","",50,null],[12,"st_size","","",50,null],[12,"st_blksize","","",50,null],[12,"st_blocks","","",50,null],[12,"st_atime","","",50,null],[12,"st_atime_nsec","","",50,null],[12,"st_mtime","","",50,null],[12,"st_mtime_nsec","","",50,null],[12,"st_ctime","","",50,null],[12,"st_ctime_nsec","","",50,null],[3,"stat64","","",null,null],[12,"st_dev","","",51,null],[12,"st_ino","","",51,null],[12,"st_nlink","","",51,null],[12,"st_mode","","",51,null],[12,"st_uid","","",51,null],[12,"st_gid","","",51,null],[12,"st_rdev","","",51,null],[12,"st_size","","",51,null],[12,"st_blksize","","",51,null],[12,"st_blocks","","",51,null],[12,"st_atime","","",51,null],[12,"st_atime_nsec","","",51,null],[12,"st_mtime","","",51,null],[12,"st_mtime_nsec","","",51,null],[12,"st_ctime","","",51,null],[12,"st_ctime_nsec","","",51,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",52,null],[12,"exponent","","",52,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",53,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",54,null],[12,"swd","","",54,null],[12,"ftw","","",54,null],[12,"fop","","",54,null],[12,"rip","","",54,null],[12,"rdp","","",54,null],[12,"mxcsr","","",54,null],[12,"mxcr_mask","","",54,null],[12,"_st","","",54,null],[12,"_xmm","","",54,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",55,null],[12,"fpregs","","",55,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",56,null],[12,"uc_link","","",56,null],[12,"uc_stack","","",56,null],[12,"uc_mcontext","","",56,null],[12,"uc_sigmask","","",56,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"mknod","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_open","","",null,null],[5,"sem_close","","",null,null],[5,"sem_unlink","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"recvfrom","","",null,null],[5,"mkfifo","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkstemps","","",null,null],[5,"mkdtemp","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"getpwuid_r","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_ctl","","",null,null],[5,"epoll_wait","","",null,null],[5,"pipe2","","",null,null],[5,"mount","","",null,null],[5,"umount","","",null,null],[5,"umount2","","",null,null],[5,"clone","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"memrchr","","",null,null],[5,"syscall","","",null,null],[5,"sendfile","","",null,null],[5,"splice","","",null,null],[5,"tee","","",null,null],[5,"vmsplice","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"eventfd","","",null,null],[5,"sysinfo","","",null,null],[5,"openat","","",null,null],[5,"faccessat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"mknodat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"unshare","","",null,null],[5,"sethostname","","",null,null],[5,"setns","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"mkfifoat","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",57,null],[11,"is_none","","Returns `true` if the option is a `None` value",57,null],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",57,null],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",57,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",57,null],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",57,null],[11,"unwrap_or","","Returns the contained value or a default.",57,null],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",57,null],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",57,null],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",57,null],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",57,null],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",57,null],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",57,null],[11,"iter","","Returns an iterator over the possibly contained value.",57,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",57,null],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",57,null],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",57,null],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",57,null],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",57,null],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",57,null],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",57,null],[11,"unwrap_or_default","","Returns the contained value or a default",57,null],[11,"hash","core::num","",58,null],[11,"default","","",58,{"inputs":[],"output":{"name":"wrapping"}}],[11,"clone","","",58,null],[11,"cmp","","",58,null],[11,"partial_cmp","","",58,null],[11,"lt","","",58,null],[11,"le","","",58,null],[11,"gt","","",58,null],[11,"ge","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"fmt","","",58,null],[11,"fmt","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"eq","core::num::dec2flt","",59,null],[11,"ne","","",59,null],[11,"clone","","",59,null],[11,"fmt","","",59,null],[11,"fmt","","",59,null],[11,"fmt","core::num","",60,null],[11,"eq","","",60,null],[11,"clone","","",60,null],[11,"clone","","",61,null],[11,"fmt","","",61,null],[11,"fmt","","",61,null],[11,"eq","","",62,null],[11,"ne","","",62,null],[11,"clone","","",62,null],[11,"fmt","","",62,null],[11,"fmt","","",62,null],[11,"hash","core::nonzero","",63,null],[11,"fmt","","",63,null],[11,"partial_cmp","","",63,null],[11,"lt","","",63,null],[11,"le","","",63,null],[11,"gt","","",63,null],[11,"ge","","",63,null],[11,"cmp","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"clone","","",63,null],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",63,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",63,null],[11,"new","core::ptr","Creates a new `Unique`.",64,null],[11,"get","","Dereferences the content.",64,null],[11,"get_mut","","Mutably dereferences the content.",64,null],[11,"deref","","",64,null],[11,"fmt","","",64,null],[11,"new","","Creates a new `Shared`.",65,null],[11,"clone","","",65,null],[11,"deref","","",65,null],[11,"fmt","","",65,null],[11,"hash","core::marker","",66,null],[11,"eq","","",66,null],[11,"partial_cmp","","",66,null],[11,"cmp","","",66,null],[11,"clone","","",66,null],[11,"default","","",66,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",67,null],[11,"clone","","",67,null],[11,"fmt","","",67,null],[11,"eq","","",68,null],[11,"ne","","",68,null],[11,"clone","","",68,null],[11,"fmt","","",68,null],[11,"contains","","# Examples",68,null],[11,"eq","","",69,null],[11,"ne","","",69,null],[11,"clone","","",69,null],[11,"fmt","","",69,null],[11,"contains","","# Examples",69,null],[11,"eq","","",70,null],[11,"ne","","",70,null],[11,"clone","","",70,null],[11,"fmt","","",70,null],[11,"contains","","# Examples",70,null],[11,"eq","","",71,null],[11,"ne","","",71,null],[11,"clone","","",71,null],[11,"fmt","","",71,null],[11,"from","","",71,{"inputs":[{"name":"range"}],"output":{"name":"rangeinclusive"}}],[11,"contains","","# Examples",71,null],[11,"eq","","",72,null],[11,"ne","","",72,null],[11,"clone","","",72,null],[11,"fmt","","",72,null],[11,"contains","","# Examples",72,null],[11,"hash","core::cmp","",73,null],[11,"fmt","","",73,null],[11,"eq","","",73,null],[11,"clone","","",73,null],[11,"reverse","","Reverse the `Ordering`.",73,null],[11,"cmp","","",73,null],[11,"partial_cmp","","",73,null],[11,"fmt","libc","",74,null],[11,"fmt","","",74,null],[11,"is","","Returns true if the boxed type is the same as `T`",74,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",74,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",74,null],[11,"is","","Forwards to the method defined on the type `Any`.",74,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",74,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",74,null],[11,"hash","core::any","",75,null],[11,"fmt","","",75,null],[11,"eq","","",75,null],[11,"ne","","",75,null],[11,"clone","","",75,null],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",75,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",76,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",77,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",78,null],[11,"clone","","",78,null],[11,"new","","Creates a new `AtomicBool`.",76,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",76,null],[11,"store","","Stores a value into the bool.",76,null],[11,"swap","","Stores a value into the bool, returning the old value.",76,null],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",76,null],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",76,null],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",76,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",76,null],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",76,null],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",76,null],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",76,null],[11,"new","","Creates a new `AtomicPtr`.",77,null],[11,"load","","Loads a value from the pointer.",77,null],[11,"store","","Stores a value into the pointer.",77,null],[11,"swap","","Stores a value into the pointer, returning the old value.",77,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",77,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",77,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",77,null],[11,"default","","",79,{"inputs":[],"output":{"name":"atomici8"}}],[11,"fmt","","",79,null],[11,"new","","Creates a new atomic integer.",79,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"load","","Loads a value from the atomic integer.",79,null],[11,"store","","Stores a value into the atomic integer.",79,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",79,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",79,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",79,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",79,null],[11,"fetch_add","","Add to the current value, returning the previous value.",79,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",79,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",79,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",79,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",79,null],[11,"default","","",80,{"inputs":[],"output":{"name":"atomicu8"}}],[11,"fmt","","",80,null],[11,"new","","Creates a new atomic integer.",80,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"load","","Loads a value from the atomic integer.",80,null],[11,"store","","Stores a value into the atomic integer.",80,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",80,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",80,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",80,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",80,null],[11,"fetch_add","","Add to the current value, returning the previous value.",80,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",80,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",80,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",80,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",80,null],[11,"default","","",81,{"inputs":[],"output":{"name":"atomici16"}}],[11,"fmt","","",81,null],[11,"new","","Creates a new atomic integer.",81,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"load","","Loads a value from the atomic integer.",81,null],[11,"store","","Stores a value into the atomic integer.",81,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",81,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",81,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",81,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",81,null],[11,"fetch_add","","Add to the current value, returning the previous value.",81,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",81,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",81,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",81,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",81,null],[11,"default","","",82,{"inputs":[],"output":{"name":"atomicu16"}}],[11,"fmt","","",82,null],[11,"new","","Creates a new atomic integer.",82,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"load","","Loads a value from the atomic integer.",82,null],[11,"store","","Stores a value into the atomic integer.",82,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",82,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",82,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",82,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",82,null],[11,"fetch_add","","Add to the current value, returning the previous value.",82,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",82,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",82,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",82,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",82,null],[11,"default","","",83,{"inputs":[],"output":{"name":"atomici32"}}],[11,"fmt","","",83,null],[11,"new","","Creates a new atomic integer.",83,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"load","","Loads a value from the atomic integer.",83,null],[11,"store","","Stores a value into the atomic integer.",83,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",83,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",83,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",83,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",83,null],[11,"fetch_add","","Add to the current value, returning the previous value.",83,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",83,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",83,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",83,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",83,null],[11,"default","","",84,{"inputs":[],"output":{"name":"atomicu32"}}],[11,"fmt","","",84,null],[11,"new","","Creates a new atomic integer.",84,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"load","","Loads a value from the atomic integer.",84,null],[11,"store","","Stores a value into the atomic integer.",84,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",84,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",84,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",84,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",84,null],[11,"fetch_add","","Add to the current value, returning the previous value.",84,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",84,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",84,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",84,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",84,null],[11,"default","","",85,{"inputs":[],"output":{"name":"atomici64"}}],[11,"fmt","","",85,null],[11,"new","","Creates a new atomic integer.",85,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"load","","Loads a value from the atomic integer.",85,null],[11,"store","","Stores a value into the atomic integer.",85,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",85,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",85,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",85,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",85,null],[11,"fetch_add","","Add to the current value, returning the previous value.",85,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",85,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",85,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",85,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",85,null],[11,"default","","",86,{"inputs":[],"output":{"name":"atomicu64"}}],[11,"fmt","","",86,null],[11,"new","","Creates a new atomic integer.",86,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"load","","Loads a value from the atomic integer.",86,null],[11,"store","","Stores a value into the atomic integer.",86,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",86,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",86,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",86,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",86,null],[11,"fetch_add","","Add to the current value, returning the previous value.",86,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",86,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",86,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",86,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",86,null],[11,"default","","",87,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"fmt","","",87,null],[11,"new","","Creates a new atomic integer.",87,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the atomic integer.",87,null],[11,"store","","Stores a value into the atomic integer.",87,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",87,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",87,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",87,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",87,null],[11,"fetch_add","","Add to the current value, returning the previous value.",87,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",87,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",87,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",87,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",87,null],[11,"default","","",88,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"fmt","","",88,null],[11,"new","","Creates a new atomic integer.",88,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the atomic integer.",88,null],[11,"store","","Stores a value into the atomic integer.",88,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",88,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",88,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",88,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",88,null],[11,"fetch_add","","Add to the current value, returning the previous value.",88,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",88,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",88,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",88,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",88,null],[11,"fmt","","",76,null],[11,"fmt","","",77,null],[11,"new","core::cell","Creates a new `Cell` containing the given value.",89,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",89,null],[11,"set","","Sets the contained value.",89,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",89,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",89,null],[11,"clone","","",89,null],[11,"default","","",89,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",89,null],[11,"partial_cmp","","",89,null],[11,"lt","","",89,null],[11,"le","","",89,null],[11,"gt","","",89,null],[11,"ge","","",89,null],[11,"cmp","","",89,null],[11,"fmt","","",90,null],[11,"eq","","",90,null],[11,"clone","","",90,null],[11,"new","","Creates a new `RefCell` containing `value`.",91,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",91,null],[11,"borrow_state","","Query the current state of this `RefCell`",91,null],[11,"borrow","","Immutably borrows the wrapped value.",91,null],[11,"borrow_mut","","Mutably borrows the wrapped value.",91,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",91,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",91,null],[11,"clone","","",91,null],[11,"default","","",91,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",91,null],[11,"partial_cmp","","",91,null],[11,"lt","","",91,null],[11,"le","","",91,null],[11,"gt","","",91,null],[11,"ge","","",91,null],[11,"cmp","","",91,null],[11,"deref","","",92,null],[11,"clone","","Copies a `Ref`.",92,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",92,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",92,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",93,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",93,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"deref","","",93,null],[11,"deref_mut","","",93,null],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",94,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",94,null],[11,"get","","Gets a mutable pointer to the wrapped value.",94,null],[11,"default","","",94,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"fmt","core::char","",95,null],[11,"clone","","",95,null],[11,"next","","",95,null],[11,"size_hint","","",95,null],[11,"last","","",95,null],[11,"fmt","","",96,null],[11,"clone","","",96,null],[11,"next","","",96,null],[11,"size_hint","","",96,null],[11,"count","","",96,null],[11,"nth","","",96,null],[11,"last","","",96,null],[11,"fmt","","",97,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",97,null],[11,"next","","",97,null],[11,"size_hint","","",97,null],[11,"fmt","","",98,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",98,null],[11,"next","","",98,null],[11,"size_hint","","",98,null],[11,"fmt","core::iter::range","",99,null],[11,"clone","","",99,null],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",69,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",68,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",71,null],[11,"next","core::iter::range","",99,null],[11,"size_hint","","",99,null],[11,"next","","",99,null],[11,"size_hint","","",99,null],[11,"next","","",99,null],[11,"size_hint","","",99,null],[11,"next","core::ops","",68,null],[11,"size_hint","","",68,null],[11,"next_back","","",68,null],[11,"next","","",69,null],[11,"next","","",71,null],[11,"size_hint","","",71,null],[11,"next_back","","",71,null],[11,"fmt","core::iter::sources","",100,null],[11,"clone","","",100,null],[11,"next","","",100,null],[11,"size_hint","","",100,null],[11,"next_back","","",100,null],[11,"fmt","","",101,null],[11,"next","","",101,null],[11,"size_hint","","",101,null],[11,"next_back","","",101,null],[11,"len","","",101,null],[11,"clone","","",101,null],[11,"default","","",101,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",102,null],[11,"clone","","",102,null],[11,"next","","",102,null],[11,"size_hint","","",102,null],[11,"next_back","","",102,null],[11,"len","","",102,null],[11,"fmt","core::iter","",103,null],[11,"clone","","",103,null],[11,"next","","",103,null],[11,"size_hint","","",103,null],[11,"next_back","","",103,null],[11,"fmt","","",104,null],[11,"clone","","",104,null],[11,"next","","",104,null],[11,"size_hint","","",104,null],[11,"next_back","","",104,null],[11,"fmt","","",105,null],[11,"clone","","",105,null],[11,"next","","",105,null],[11,"size_hint","","",105,null],[11,"fmt","","",106,null],[11,"clone","","",106,null],[11,"next","","",106,null],[11,"count","","",106,null],[11,"nth","","",106,null],[11,"find","","",106,null],[11,"last","","",106,null],[11,"size_hint","","",106,null],[11,"next_back","","",106,null],[11,"fmt","","",107,null],[11,"clone","","",107,null],[11,"next","","",107,null],[11,"size_hint","","",107,null],[11,"next_back","","",107,null],[11,"clone","","",108,null],[11,"fmt","","",108,null],[11,"next","","",108,null],[11,"size_hint","","",108,null],[11,"next_back","","",108,null],[11,"clone","","",109,null],[11,"fmt","","",109,null],[11,"next","","",109,null],[11,"size_hint","","",109,null],[11,"next_back","","",109,null],[11,"clone","","",110,null],[11,"fmt","","",110,null],[11,"next","","",110,null],[11,"size_hint","","",110,null],[11,"next_back","","",110,null],[11,"fmt","","",111,null],[11,"clone","","",111,null],[11,"next","","# Overflow Behavior",111,null],[11,"size_hint","","",111,null],[11,"nth","","",111,null],[11,"count","","",111,null],[11,"next_back","","",111,null],[11,"fmt","","",112,null],[11,"clone","","",112,null],[11,"next","","",112,null],[11,"count","","",112,null],[11,"nth","","",112,null],[11,"last","","",112,null],[11,"size_hint","","",112,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",112,null],[11,"is_empty","","Checks if the iterator has finished iterating.",112,null],[11,"clone","","",113,null],[11,"fmt","","",113,null],[11,"next","","",113,null],[11,"size_hint","","",113,null],[11,"clone","","",114,null],[11,"fmt","","",114,null],[11,"next","","",114,null],[11,"size_hint","","",114,null],[11,"fmt","","",115,null],[11,"clone","","",115,null],[11,"next","","",115,null],[11,"nth","","",115,null],[11,"count","","",115,null],[11,"last","","",115,null],[11,"size_hint","","",115,null],[11,"next_back","","",115,null],[11,"fmt","","",116,null],[11,"clone","","",116,null],[11,"next","","",116,null],[11,"nth","","",116,null],[11,"size_hint","","",116,null],[11,"clone","","",117,null],[11,"fmt","","",117,null],[11,"next","","",117,null],[11,"size_hint","","",117,null],[11,"clone","","",118,null],[11,"fmt","","",118,null],[11,"next","","",118,null],[11,"size_hint","","",118,null],[11,"next_back","","",118,null],[11,"fmt","","",119,null],[11,"clone","","",119,null],[11,"next","","",119,null],[11,"nth","","",119,null],[11,"last","","",119,null],[11,"count","","",119,null],[11,"size_hint","","",119,null],[11,"next_back","","",119,null],[11,"clone","","",120,null],[11,"fmt","","",120,null],[11,"next","","",120,null],[11,"size_hint","","",120,null],[11,"next_back","","",120,null],[11,"hash","core::option","",57,null],[11,"fmt","","",57,null],[11,"cmp","","",57,null],[11,"partial_cmp","","",57,null],[11,"lt","","",57,null],[11,"le","","",57,null],[11,"gt","","",57,null],[11,"ge","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"clone","","",57,null],[11,"default","","",57,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",57,null],[11,"fmt","","",121,null],[11,"next","","",121,null],[11,"size_hint","","",121,null],[11,"next_back","","",121,null],[11,"clone","","",121,null],[11,"fmt","","",122,null],[11,"next","","",122,null],[11,"size_hint","","",122,null],[11,"next_back","","",122,null],[11,"fmt","","",123,null],[11,"clone","","",123,null],[11,"next","","",123,null],[11,"size_hint","","",123,null],[11,"next_back","","",123,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",57,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",124,null],[11,"clone","","",125,null],[11,"hash","core::result","",126,null],[11,"fmt","","",126,null],[11,"cmp","","",126,null],[11,"partial_cmp","","",126,null],[11,"lt","","",126,null],[11,"le","","",126,null],[11,"gt","","",126,null],[11,"ge","","",126,null],[11,"eq","","",126,null],[11,"ne","","",126,null],[11,"clone","","",126,null],[11,"is_ok","","Returns true if the result is `Ok`",126,null],[11,"is_err","","Returns true if the result is `Err`",126,null],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",126,null],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",126,null],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",126,null],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",126,null],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",126,null],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",126,null],[11,"iter","","Returns an iterator over the possibly contained value.",126,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",126,null],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",126,null],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",126,null],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",126,null],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",126,null],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",126,null],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",126,null],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",126,null],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",126,null],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",126,null],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",126,null],[11,"fmt","","",127,null],[11,"next","","",127,null],[11,"size_hint","","",127,null],[11,"next_back","","",127,null],[11,"clone","","",127,null],[11,"fmt","","",128,null],[11,"next","","",128,null],[11,"size_hint","","",128,null],[11,"next_back","","",128,null],[11,"fmt","","",129,null],[11,"next","","",129,null],[11,"size_hint","","",129,null],[11,"next_back","","",129,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",126,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::slice","",130,null],[11,"as_slice","","View the underlying data as a subslice of the original data.",130,null],[11,"next","","",130,null],[11,"size_hint","","",130,null],[11,"count","","",130,null],[11,"nth","","",130,null],[11,"last","","",130,null],[11,"next_back","","",130,null],[11,"clone","","",130,null],[11,"fmt","","",131,null],[11,"into_slice","","View the underlying data as a subslice of the original data.",131,null],[11,"next","","",131,null],[11,"size_hint","","",131,null],[11,"count","","",131,null],[11,"nth","","",131,null],[11,"last","","",131,null],[11,"next_back","","",131,null],[11,"fmt","","",132,null],[11,"clone","","",132,null],[11,"next","","",132,null],[11,"size_hint","","",132,null],[11,"next_back","","",132,null],[11,"fmt","","",133,null],[11,"next","","",133,null],[11,"size_hint","","",133,null],[11,"next_back","","",133,null],[11,"fmt","","",134,null],[11,"fmt","","",135,null],[11,"fmt","","",136,null],[11,"fmt","","",137,null],[11,"next","","",134,null],[11,"size_hint","","",134,null],[11,"next","","",135,null],[11,"size_hint","","",135,null],[11,"next","","",136,null],[11,"size_hint","","",136,null],[11,"next","","",137,null],[11,"size_hint","","",137,null],[11,"fmt","","",138,null],[11,"clone","","",138,null],[11,"next","","",138,null],[11,"size_hint","","",138,null],[11,"count","","",138,null],[11,"nth","","",138,null],[11,"last","","",138,null],[11,"next_back","","",138,null],[11,"fmt","","",139,null],[11,"clone","","",139,null],[11,"next","","",139,null],[11,"size_hint","","",139,null],[11,"count","","",139,null],[11,"nth","","",139,null],[11,"last","","",139,null],[11,"next_back","","",139,null],[11,"fmt","","",140,null],[11,"next","","",140,null],[11,"size_hint","","",140,null],[11,"count","","",140,null],[11,"nth","","",140,null],[11,"last","","",140,null],[11,"next_back","","",140,null],[11,"fmt","core::str::pattern","",141,null],[11,"eq","","",141,null],[11,"ne","","",141,null],[11,"clone","","",141,null],[11,"fmt","","",142,null],[11,"clone","","",142,null],[11,"haystack","","",142,null],[11,"next","","",142,null],[11,"next_match","","",142,null],[11,"next_reject","","",142,null],[11,"next_back","","",142,null],[11,"next_match_back","","",142,null],[11,"next_reject_back","","",142,null],[11,"fmt","","",143,null],[11,"clone","","",143,null],[11,"haystack","","",143,null],[11,"next","","",143,null],[11,"next_match","","",143,null],[11,"next_reject","","",143,null],[11,"next_back","","",143,null],[11,"next_match_back","","",143,null],[11,"next_reject_back","","",143,null],[11,"clone","","",144,null],[11,"fmt","","",144,null],[11,"haystack","","",144,null],[11,"next","","",144,null],[11,"next_match","","",144,null],[11,"next_reject","","",144,null],[11,"next_back","","",144,null],[11,"next_match_back","","",144,null],[11,"next_reject_back","","",144,null],[11,"fmt","","",145,null],[11,"clone","","",145,null],[11,"haystack","","",145,null],[11,"next","","",145,null],[11,"next_match","","",145,null],[11,"next_back","","",145,null],[11,"next_match_back","","",145,null],[11,"eq","core::str","",146,null],[11,"ne","","",146,null],[11,"clone","","",146,null],[11,"fmt","","",146,null],[11,"fmt","","",146,null],[11,"fmt","","",147,null],[11,"clone","","",147,null],[11,"eq","","",147,null],[11,"ne","","",147,null],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",147,null],[11,"fmt","","",147,null],[11,"fmt","","",148,null],[11,"clone","","",148,null],[11,"next","","",148,null],[11,"size_hint","","",148,null],[11,"next_back","","",148,null],[11,"as_str","","View the underlying data as a subslice of the original data.",148,null],[11,"fmt","","",149,null],[11,"clone","","",149,null],[11,"next","","",149,null],[11,"size_hint","","",149,null],[11,"next_back","","",149,null],[11,"as_str","","View the underlying data as a subslice of the original data.",149,null],[11,"fmt","","",150,null],[11,"clone","","",150,null],[11,"next","","",150,null],[11,"size_hint","","",150,null],[11,"count","","",150,null],[11,"last","","",150,null],[11,"nth","","",150,null],[11,"next_back","","",150,null],[11,"len","","",150,null],[11,"fmt","","",151,null],[11,"next","","",151,null],[11,"clone","","",151,null],[11,"fmt","","",152,null],[11,"next","","",152,null],[11,"clone","","",152,null],[11,"next_back","","",151,null],[11,"next_back","","",152,null],[11,"fmt","","",153,null],[11,"next","","",153,null],[11,"clone","","",153,null],[11,"fmt","","",154,null],[11,"next","","",154,null],[11,"clone","","",154,null],[11,"next_back","","",153,null],[11,"next_back","","",154,null],[11,"fmt","","",155,null],[11,"next","","",155,null],[11,"clone","","",155,null],[11,"fmt","","",156,null],[11,"next","","",156,null],[11,"clone","","",156,null],[11,"fmt","","",157,null],[11,"next","","",157,null],[11,"clone","","",157,null],[11,"fmt","","",158,null],[11,"next","","",158,null],[11,"clone","","",158,null],[11,"next_back","","",157,null],[11,"next_back","","",158,null],[11,"fmt","","",159,null],[11,"next","","",159,null],[11,"clone","","",159,null],[11,"fmt","","",160,null],[11,"next","","",160,null],[11,"clone","","",160,null],[11,"next_back","","",159,null],[11,"next_back","","",160,null],[11,"fmt","","",161,null],[11,"clone","","",161,null],[11,"next","","",161,null],[11,"size_hint","","",161,null],[11,"next_back","","",161,null],[11,"fmt","","",162,null],[11,"clone","","",162,null],[11,"next","","",162,null],[11,"size_hint","","",162,null],[11,"next_back","","",162,null],[11,"fmt","","",163,null],[11,"clone","","",163,null],[11,"fmt","core::hash::sip","",164,null],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",164,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",164,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",164,null],[11,"finish","","",164,null],[11,"clone","","",164,null],[11,"default","","",164,{"inputs":[],"output":{"name":"siphasher"}}],[11,"fmt","core::hash","",165,null],[11,"build_hasher","","",165,null],[11,"clone","","",165,null],[11,"default","","",165,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"fmt","core::fmt","",166,null],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",167,null],[11,"finish","","Finishes output and returns any error encountered.",167,null],[11,"field","","Adds a new field to the generated tuple struct output.",168,null],[11,"finish","","Finishes output and returns any error encountered.",168,null],[11,"entry","","Adds a new entry to the set output.",169,null],[11,"entries","","Adds the contents of an iterator of entries to the set output.",169,null],[11,"finish","","Finishes output and returns any error encountered.",169,null],[11,"entry","","Adds a new entry to the list output.",170,null],[11,"entries","","Adds the contents of an iterator of entries to the list output.",170,null],[11,"finish","","Finishes output and returns any error encountered.",170,null],[11,"entry","","Adds a new entry to the map output.",171,null],[11,"entries","","Adds the contents of an iterator of entries to the map output.",171,null],[11,"finish","","Finishes output and returns any error encountered.",171,null],[11,"partial_cmp","core::fmt","",172,null],[11,"eq","","",172,null],[11,"cmp","","",172,null],[11,"hash","","",172,null],[11,"default","","",172,{"inputs":[],"output":{"name":"error"}}],[11,"fmt","","",172,null],[11,"clone","","",172,null],[11,"clone","","",173,null],[11,"fmt","","",173,null],[11,"fmt","","",173,null],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",174,null],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",174,null],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",174,null],[11,"write_fmt","","Writes some formatted information into this instance",174,null],[11,"flags","","Flags for formatting (packed version of rt::Flag)",174,null],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",174,null],[11,"align","","Flag indicating what form of alignment was requested",174,null],[11,"width","","Optionally specified integer width that the output should be",174,null],[11,"precision","","Optionally specified precision for numeric types",174,null],[11,"sign_plus","","Determines if the `+` flag was specified.",174,null],[11,"sign_minus","","Determines if the `-` flag was specified.",174,null],[11,"alternate","","Determines if the `#` flag was specified.",174,null],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",174,null],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",174,null],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",174,null],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",174,null],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",174,null],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",174,null],[11,"write_str","","",174,null],[11,"write_char","","",174,null],[11,"write_fmt","","",174,null],[11,"fmt","","",172,null],[11,"fmt","core::marker","",66,null],[11,"fmt","core::cell","",89,null],[11,"fmt","","",91,null],[11,"fmt","","",92,null],[11,"fmt","","",93,null],[11,"fmt","","",94,null],[11,"clone_from","libc::dox","Performs copy-assignment from `source`.",175,null],[11,"clone_from","libc::dox::imp","Performs copy-assignment from `source`.",175,null],[11,"clone","libc","",50,null],[11,"clone","","",51,null],[11,"clone","","",176,null],[11,"clone","","",52,null],[11,"clone","","",53,null],[11,"clone","","",54,null],[11,"clone","","",55,null],[11,"clone","","",56,null],[11,"clone","","",177,null],[11,"clone","","",49,null],[11,"clone","","",38,null],[11,"clone","","",39,null],[11,"clone","","",40,null],[11,"clone","","",41,null],[11,"clone","","",42,null],[11,"clone","","",43,null],[11,"clone","","",44,null],[11,"clone","","",45,null],[11,"clone","","",46,null],[11,"clone","","",47,null],[11,"clone","","",48,null],[11,"clone","","",178,null],[11,"clone","","",28,null],[11,"clone","","",29,null],[11,"clone","","",30,null],[11,"clone","","",31,null],[11,"clone","","",32,null],[11,"clone","","",179,null],[11,"clone","","",180,null],[11,"clone","","",181,null],[11,"clone","","",182,null],[11,"clone","","",33,null],[11,"clone","","",34,null],[11,"clone","","",35,null],[11,"clone","","",36,null],[11,"clone","","",183,null],[11,"clone","","",37,null],[11,"clone","","",184,null],[11,"clone","","",14,null],[11,"clone","","",15,null],[11,"clone","","",16,null],[11,"clone","","",17,null],[11,"clone","","",18,null],[11,"clone","","",19,null],[11,"clone","","",20,null],[11,"clone","","",21,null],[11,"clone","","",185,null],[11,"clone","","",22,null],[11,"clone","","",23,null],[11,"clone","","",24,null],[11,"clone","","",25,null],[11,"clone","","",26,null],[11,"clone","","",27,null],[11,"clone","","",0,null],[11,"clone","","",1,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"clone","","",4,null],[11,"clone","","",5,null],[11,"clone","","",6,null],[11,"clone","","",7,null],[11,"clone","","",8,null],[11,"clone","","",9,null],[11,"clone","","",10,null],[11,"clone","","",11,null],[11,"clone","","",12,null],[11,"clone","","",13,null],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"loff_t","","",null,null],[6,"clockid_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"key_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"__priority_which_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"AF_PACKET","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"CBAUD","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"NCCS","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"IUTF8","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"EXTPROC","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"FIONREAD","","",null,null],[17,"TIOCCONS","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_perf_event_open","","",null,null]],"paths":[[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"mq_attr"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"sysinfo"],[3,"stat"],[3,"stat64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"mcontext_t"],[3,"ucontext_t"],[4,"Option"],[3,"Wrapping"],[3,"ParseFloatError"],[4,"FpCategory"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicPtr"],[4,"Ordering"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EncodeUtf8"],[3,"EncodeUtf16"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"CharRange"],[3,"SipHasher"],[3,"BuildHasherDefault"],[4,"Alignment"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"Clone"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[0,"identities","","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,null],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,null],[10,"abs_sub","","The positive difference of two numbers.",4,null],[10,"signum","","Returns the sign of the number.",4,null],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,null],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,null],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",5,null],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",5,null],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",6,null],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",7,null],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",8,null],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",9,null],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",11,null],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",11,null],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",11,null],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",11,null],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",11,null],[10,"floor","","Returns the largest integer less than or equal to a number.",11,null],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",11,null],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",11,null],[10,"trunc","","Return the integer part of a number.",11,null],[10,"fract","","Returns the fractional part of a number.",11,null],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",11,null],[10,"signum","","Returns a number that represents the sign of `self`.",11,null],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",11,null],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",11,null],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",11,null],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",11,null],[10,"powi","","Raise a number to an integer power.",11,null],[10,"powf","","Raise a number to a floating point power.",11,null],[10,"sqrt","","Take the square root of a number.",11,null],[10,"exp","","Returns `e^(self)`, (the exponential function).",11,null],[10,"exp2","","Returns `2^(self)`.",11,null],[10,"ln","","Returns the natural logarithm of the number.",11,null],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",11,null],[10,"log2","","Returns the base 2 logarithm of the number.",11,null],[10,"log10","","Returns the base 10 logarithm of the number.",11,null],[11,"to_degrees","","Converts radians to degrees.",11,null],[11,"to_radians","","Converts degrees to radians.",11,null],[10,"max","","Returns the maximum of the two numbers.",11,null],[10,"min","","Returns the minimum of the two numbers.",11,null],[10,"abs_sub","","The positive difference of two numbers.",11,null],[10,"cbrt","","Take the cubic root of a number.",11,null],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",11,null],[10,"sin","","Computes the sine of a number (in radians).",11,null],[10,"cos","","Computes the cosine of a number (in radians).",11,null],[10,"tan","","Computes the tangent of a number (in radians).",11,null],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",11,null],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",11,null],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",11,null],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",11,null],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",11,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",11,null],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",11,null],[10,"sinh","","Hyperbolic sine function.",11,null],[10,"cosh","","Hyperbolic cosine function.",11,null],[10,"tanh","","Hyperbolic tangent function.",11,null],[10,"asinh","","Inverse hyperbolic sine function.",11,null],[10,"acosh","","Inverse hyperbolic cosine function.",11,null],[10,"atanh","","Inverse hyperbolic tangent function.",11,null],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",11,null],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",12,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",12,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",12,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",12,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",12,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",12,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",12,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",12,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",12,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",12,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",12,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",12,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",14,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",15,null],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",15,null],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",15,null],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",15,null],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",15,null],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",15,null],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",15,null],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",15,null],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",15,null],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",15,null],[10,"swap_bytes","","Reverses the byte order of the integer.",15,null],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",15,null],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",15,null],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",15,null],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Num","num_traits","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",16,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",16,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,null],[11,"fmt","","",0,null]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"Bounded"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
searchIndex["color_quant"] = {"doc":"# Color quantization library\nThis library provides a color quantizer based on the [NEUQUANT](http://members.ozemail.com.au/~dekker/NEUQUANT.HTML)\nquantization algorithm by Anthony Dekker.\n### Usage\n```\nlet data = vec![0; 40];\nlet nq = color_quant::NeuQuant::new(10, 256, &amp;data);\nlet indixes: Vec&lt;u8&gt; = data.chunks(4).map(|pix| nq.index_of(pix) as u8).collect();\nlet color_map = nq.color_map_rgba();\n```","items":[[3,"NeuQuant","color_quant","Neural network based color quantizer.",null,null],[11,"new","","Creates a new neuronal network and trains it with the supplied data.",0,null],[11,"init","","Initializes the neuronal network and trains it with the supplied data.",0,null],[11,"map_pixel","","Maps the rgba-pixel in-place to the best-matching color in the color map.",0,null],[11,"index_of","","Finds the best-matching index in the color map.",0,null],[11,"color_map_rgba","","Returns the RGBA color map calculated from the sample.",0,null],[11,"color_map_rgb","","Returns the RGBA color map calculated from the sample.",0,null]],"paths":[[3,"NeuQuant"]]};
searchIndex["enum_set"] = {"doc":"A structure for holding a set of enum variants.","items":[[3,"EnumSet","enum_set","A specialized set implementation to use enum types.",null,null],[3,"Iter","","An iterator over an EnumSet",null,null],[8,"CLike","","An interface for casting C-like enum to u32 and back. A typical\nimplementation can be seen below:",null,null],[10,"to_u32","","Converts a C-like enum to a `u32`.",0,null],[10,"from_u32","","Converts a `u32` to a C-like enum. This method only needs to be safe\nfor possible return values of `to_u32` of this trait.",0,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"cmp","","",1,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"gt","","",1,null],[11,"ge","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"hash","","",1,null],[11,"new","","Returns an empty `EnumSet`.",1,{"inputs":[],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",1,null],[11,"is_empty","","Returns true if the `EnumSet` is empty.",1,null],[11,"clear","","",1,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",1,null],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",1,null],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",1,null],[11,"union","","Returns the union of both `EnumSets`.",1,null],[11,"intersection","","Returns the intersection of both `EnumSets`.",1,null],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn&#39;t there before",1,null],[11,"remove","","Removes an enum from the EnumSet",1,null],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",1,null],[11,"iter","","Returns an iterator over an `EnumSet`.",1,null],[11,"sub","","",1,null],[11,"bitor","","",1,null],[11,"bitand","","",1,null],[11,"bitxor","","",1,null],[11,"clone","","",2,null],[11,"next","","",2,null],[11,"size_hint","","",2,null],[11,"from_iter","","",1,{"inputs":[{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",1,null]],"paths":[[8,"CLike"],[3,"EnumSet"],[3,"Iter"]]};
searchIndex["lzw"] = {"doc":"# LZW decoder and encoder","items":[[3,"Decoder","lzw","Decoder for a LZW compressed stream (this algorithm is used for GIF files).",null,null],[3,"DecoderEarlyChange","","Decoder for a LZW compressed stream using an “early change” algorithm (used in TIFF files).",null,null],[3,"Encoder","","LZW encoder using the algorithm of GIF files.",null,null],[3,"LsbReader","","Reads bits from a byte stream, LSB first.",null,null],[3,"LsbWriter","","Writes bits to a byte stream, LSB first.",null,null],[3,"MsbReader","","Reads bits from a byte stream, MSB first.",null,null],[3,"MsbWriter","","Writes bits to a byte stream, MSB first.",null,null],[4,"Bits","","Containes either the consumed bytes and reconstructed bits or\nonly the consumed bytes if the supplied buffer was not bit enough",null,null],[13,"Some","","Consumed bytes, reconstructed bits",0,null],[13,"None","","Consumed bytes",0,null],[5,"encode","","Convenience function that reads and compresses all bytes from `R`.",null,{"inputs":[{"name":"r"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[11,"fmt","","",1,null],[11,"new","","Creates a new LZW decoder.",1,{"inputs":[{"name":"r"},{"name":"u8"}],"output":{"name":"decoder"}}],[11,"decode_bytes","","Tries to obtain and decode a code word from `bytes`.",1,null],[11,"fmt","","",2,null],[11,"new","","Creates a new LZW decoder.",2,{"inputs":[{"name":"r"},{"name":"u8"}],"output":{"name":"decoderearlychange"}}],[11,"decode_bytes","","Tries to obtain and decode a code word from `bytes`.",2,null],[11,"new","","Creates a new LZW encoder.",3,{"inputs":[{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[11,"encode_bytes","","Compresses `bytes` and writes the result into the writer.",3,null],[11,"drop","","",3,null],[11,"fmt","","",4,null],[11,"new","","Creates a new bit reader",4,{"inputs":[],"output":{"name":"lsbreader"}}],[11,"fmt","","",5,null],[11,"new","","Creates a new bit reader",5,{"inputs":[],"output":{"name":"msbreader"}}],[11,"read_bits","","",4,null],[11,"read_bits","","",5,null],[11,"new","","Creates a new bit reader",6,{"inputs":[{"name":"w"}],"output":{"name":"lsbwriter"}}],[11,"write","","",6,null],[11,"flush","","",6,null],[11,"new","","Creates a new bit reader",7,{"inputs":[{"name":"w"}],"output":{"name":"msbwriter"}}],[11,"write","","",7,null],[11,"flush","","",7,null],[11,"write_bits","","",6,null],[11,"write_bits","","",7,null],[8,"BitReader","","A bit reader.",null,null],[10,"read_bits","","Returns the next `n` bits.",8,null],[8,"BitWriter","","A bit writer.",null,null],[10,"write_bits","","Writes the next `n` bits.",9,null]],"paths":[[4,"Bits"],[3,"Decoder"],[3,"DecoderEarlyChange"],[3,"Encoder"],[3,"LsbReader"],[3,"MsbReader"],[3,"LsbWriter"],[3,"MsbWriter"],[8,"BitReader"],[8,"BitWriter"]]};
searchIndex["regex_syntax"] = {"doc":"This crate provides a regular expression parser and an abstract syntax for\nregular expressions. The abstract syntax is defined by the `Expr` type. The\nconcrete syntax is enumerated in the\n[`regex`](../regex/index.html#syntax)\ncrate documentation.","items":[[3,"Literals","regex_syntax","A set of literal byte strings extracted from a regular expression.",null,null],[3,"Lit","","A single member of a set of literals extracted from a regular expression.",null,null],[3,"CharClass","","A character class.",null,null],[3,"ClassRange","","A single inclusive range in a character class.",null,null],[12,"start","","The start character of the range.",0,null],[12,"end","","The end character of the range.",0,null],[3,"ByteClass","","A byte class for byte ranges only.",null,null],[3,"ByteRange","","A single inclusive range in a byte class.",null,null],[12,"start","","The start byte of the range.",1,null],[12,"end","","The end byte of the range.",1,null],[3,"ExprBuilder","","A builder for configuring regular expression parsing.",null,null],[3,"Error","","A parse error.",null,null],[4,"Expr","","A regular expression abstract syntax tree.",null,null],[13,"Empty","","An empty regex (which never matches any text).",2,null],[13,"Literal","","A sequence of one or more literal characters to be matched.",2,null],[12,"chars","regex_syntax::Expr","The characters.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"LiteralBytes","regex_syntax","A sequence of one or more literal bytes to be matched.",2,null],[12,"bytes","regex_syntax::Expr","The bytes.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"AnyChar","regex_syntax","Match any character.",2,null],[13,"AnyCharNoNL","","Match any character, excluding new line (`0xA`).",2,null],[13,"AnyByte","","Match any byte.",2,null],[13,"AnyByteNoNL","","Match any byte, excluding new line (`0xA`).",2,null],[13,"Class","","A character class.",2,null],[13,"ClassBytes","","A character class with byte ranges only.",2,null],[13,"StartLine","","Match the start of a line or beginning of input.",2,null],[13,"EndLine","","Match the end of a line or end of input.",2,null],[13,"StartText","","Match the beginning of input.",2,null],[13,"EndText","","Match the end of input.",2,null],[13,"WordBoundary","","Match a word boundary (word character on one side and a non-word\ncharacter on the other).",2,null],[13,"NotWordBoundary","","Match a position that is not a word boundary (word or non-word\ncharacters on both sides).",2,null],[13,"WordBoundaryAscii","","Match an ASCII word boundary.",2,null],[13,"NotWordBoundaryAscii","","Match a position that is not an ASCII word boundary.",2,null],[13,"Group","","A group, possibly non-capturing.",2,null],[12,"e","regex_syntax::Expr","The expression inside the group.",2,null],[12,"i","","The capture index (starting at `1`) only for capturing groups.",2,null],[12,"name","","The capture name, only for capturing named groups.",2,null],[13,"Repeat","regex_syntax","A repeat operator (`?`, `*`, `+` or `{m,n}`).",2,null],[12,"e","regex_syntax::Expr","The expression to be repeated. Limited to literals, `.`, classes\nor grouped expressions.",2,null],[12,"r","","The type of repeat operator used.",2,null],[12,"greedy","","Whether the repeat is greedy (match the most) or not (match the\nleast).",2,null],[13,"Concat","regex_syntax","A concatenation of expressions. Must be matched one after the other.",2,null],[13,"Alternate","","An alternation of expressions. Only one must match.",2,null],[4,"Repeater","","The type of a repeat operator expression.",null,null],[13,"ZeroOrOne","","Match zero or one (`?`).",3,null],[13,"ZeroOrMore","","Match zero or more (`*`).",3,null],[13,"OneOrMore","","Match one or more (`+`).",3,null],[13,"Range","","Match for at least `min` and at most `max` (`{m,n}`).",3,null],[12,"min","regex_syntax::Repeater","Lower bound on the number of matches.",3,null],[12,"max","","Optional upper bound on the number of matches.",3,null],[4,"ErrorKind","regex_syntax","The specific type of parse error that can occur.",null,null],[13,"DoubleFlagNegation","","A negation symbol is used twice in flag settings.\ne.g., `(?-i-s)`.",4,null],[13,"DuplicateCaptureName","","The same capture name was used more than once.\ne.g., `(?P&lt;a&gt;.)(?P&lt;a&gt;.)`.",4,null],[13,"EmptyAlternate","","An alternate is empty. e.g., `(|a)`.",4,null],[13,"EmptyCaptureName","","A capture group name is empty. e.g., `(?P&lt;&gt;a)`.",4,null],[13,"EmptyFlagNegation","","A negation symbol was not proceded by any flags. e.g., `(?i-)`.",4,null],[13,"EmptyGroup","","A group is empty. e.g., `()`.",4,null],[13,"InvalidBase10","","An invalid number was used in a counted repetition. e.g., `a{b}`.",4,null],[13,"InvalidBase16","","An invalid hexadecimal number was used in an escape sequence.\ne.g., `\\xAG`.",4,null],[13,"InvalidCaptureName","","An invalid capture name was used. e.g., `(?P&lt;0a&gt;b)`.",4,null],[13,"InvalidClassRange","","An invalid class range was givien. Specifically, when the start of the\nrange is greater than the end. e.g., `[z-a]`.",4,null],[12,"start","regex_syntax::ErrorKind","The first character specified in the range.",4,null],[12,"end","","The second character specified in the range.",4,null],[13,"InvalidClassEscape","regex_syntax","An escape sequence was used in a character class where it is not\nallowed. e.g., `[a-\\pN]` or `[\\A]`.",4,null],[13,"InvalidRepeatRange","","An invalid counted repetition min/max was given. e.g., `a{2,1}`.",4,null],[12,"min","regex_syntax::ErrorKind","The first number specified in the repetition.",4,null],[12,"max","","The second number specified in the repetition.",4,null],[13,"InvalidScalarValue","regex_syntax","An invalid Unicode scalar value was used in a long hexadecimal\nsequence. e.g., `\\x{D800}`.",4,null],[13,"MissingBase10","","An empty counted repetition operator. e.g., `a{}`.",4,null],[13,"RepeaterExpectsExpr","","A repetition operator was not applied to an expression. e.g., `*`.",4,null],[13,"RepeaterUnexpectedExpr","","A repetition operator was applied to an expression that cannot be\nrepeated. e.g., `a+*` or `a|*`.",4,null],[13,"UnclosedCaptureName","","A capture group name that is never closed. e.g., `(?P&lt;a`.",4,null],[13,"UnclosedHex","","An unclosed hexadecimal literal. e.g., `\\x{a`.",4,null],[13,"UnclosedParen","","An unclosed parenthesis. e.g., `(a`.",4,null],[13,"UnclosedRepeat","","An unclosed counted repetition operator. e.g., `a{2`.",4,null],[13,"UnclosedUnicodeName","","An unclosed named Unicode class. e.g., `\\p{Yi`.",4,null],[13,"UnexpectedClassEof","","Saw end of regex before class was closed. e.g., `[a`.",4,null],[13,"UnexpectedEscapeEof","","Saw end of regex before escape sequence was closed. e.g., `\\`.",4,null],[13,"UnexpectedFlagEof","","Saw end of regex before flags were closed. e.g., `(?i`.",4,null],[13,"UnexpectedTwoDigitHexEof","","Saw end of regex before two hexadecimal digits were seen. e.g., `\\xA`.",4,null],[13,"UnopenedParen","","Unopened parenthesis. e.g., `)`.",4,null],[13,"UnrecognizedEscape","","Unrecognized escape sequence. e.g., `\\q`.",4,null],[13,"UnrecognizedFlag","","Unrecognized flag. e.g., `(?a)`.",4,null],[13,"UnrecognizedUnicodeClass","","Unrecognized named Unicode class. e.g., `\\p{Foo}`.",4,null],[13,"StackExhausted","","Indicates that the regex uses too much nesting.",4,null],[13,"FlagNotAllowed","","A disallowed flag was found (e.g., `u`).",4,null],[13,"UnicodeNotAllowed","","A Unicode class was used when the Unicode (`u`) flag was disabled.",4,null],[13,"InvalidUtf8","","InvalidUtf8 indicates that the expression may match non-UTF-8 bytes.\nThis never returned if the parser is permitted to allow expressions\nthat match arbitrary bytes.",4,null],[13,"EmptyClass","","A character class was constructed such that it is empty.\ne.g., `[^\\d\\D]`.",4,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"cmp","","",6,null],[11,"clone","","",6,null],[11,"empty","","Returns a new empty set of literals using default limits.",5,{"inputs":[],"output":{"name":"literals"}}],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",5,null],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",5,null],[11,"limit_class","","Get the character class size limit for this set.",5,null],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",5,null],[11,"literals","","Returns the set of literals as a slice. Its order is unspecified.",5,null],[11,"all_complete","","Returns true if all members in this set are complete.",5,null],[11,"any_complete","","Returns true if any member in this set is complete.",5,null],[11,"contains_empty","","Returns true if this set contains an empty literal.",5,null],[11,"is_empty","","Returns true if this set is empty or if all of its members is empty.",5,null],[11,"to_empty","","Returns a new empty set of literals using this set&#39;s limits.",5,null],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this set.",5,null],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this set.",5,null],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals that are\nguaranteed to be unambiguous.",5,null],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals that are\nguaranteed to be unambiguous.",5,null],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",5,null],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",5,null],[11,"union","","Unions this set with another set.",5,null],[11,"cross_product","","Extends this set with another set.",5,null],[11,"cross_add","","Extends each literal in this set with the bytes given.",5,null],[11,"add","","Adds the given literal to this set.",5,null],[11,"add_char_class","","Extends each literal in this set with the character class given.",5,null],[11,"add_byte_class","","Extends each literal in this set with the byte class given.",5,null],[11,"cut","","Cuts every member of this set. When a member is cut, it can never\nbe extended.",5,null],[11,"reverse","","Reverses all members in place.",5,null],[11,"clear","","Clears this set of all members.",5,null],[11,"fmt","","",5,null],[11,"new","","Returns a new complete literal with the bytes given.",6,{"inputs":[{"name":"vec"}],"output":{"name":"lit"}}],[11,"empty","","Returns a new complete empty literal.",6,{"inputs":[],"output":{"name":"lit"}}],[11,"is_cut","","Returns true if this literal was &quot;cut.&quot;",6,null],[11,"cut","","Cuts this literal.",6,null],[11,"eq","","",6,null],[11,"partial_cmp","","",6,null],[11,"fmt","","",6,null],[11,"as_ref","","",6,null],[11,"new","collections::vec","Constructs a new, empty `Vec&lt;T&gt;`.",7,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",7,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",7,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",7,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",7,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",7,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",7,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",7,null],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",7,null],[11,"as_slice","","Extracts a slice containing the entire vector.",7,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",7,null],[11,"set_len","","Sets the length of a vector.",7,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",7,null],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",7,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",7,null],[11,"retain","","Retains only the elements specified by the predicate.",7,null],[11,"push","","Appends an element to the back of a collection.",7,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",7,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",7,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",7,null],[11,"clear","","Clears the vector, removing all values.",7,null],[11,"len","","Returns the number of elements in the vector.",7,null],[11,"is_empty","","Returns `true` if the vector contains no elements.",7,null],[11,"split_off","","Splits the collection into two at the given index.",7,null],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",7,null],[11,"extend_from_slice","","Appends all elements in a slice to the `Vec`.",7,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",7,null],[11,"clone","collections::binary_heap","",8,null],[11,"clone_from","","",8,null],[11,"default","","",8,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"fmt","","",8,null],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",8,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",8,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",8,null],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",8,null],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",8,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",8,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",8,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",8,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",8,null],[11,"push","","Pushes an item onto the binary heap.",8,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",8,null],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",8,null],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",8,null],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",8,null],[11,"len","","Returns the length of the binary heap.",8,null],[11,"is_empty","","Checks if the binary heap is empty.",8,null],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",8,null],[11,"clear","","Drops all items from the binary heap.",8,null],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",8,null],[11,"clone","","",9,null],[11,"next","","",9,null],[11,"size_hint","","",9,null],[11,"next_back","","",9,null],[11,"clone","","",10,null],[11,"next","","",10,null],[11,"size_hint","","",10,null],[11,"next_back","","",10,null],[11,"next","","",11,null],[11,"size_hint","","",11,null],[11,"next_back","","",11,null],[11,"from","","",8,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",7,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",8,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",8,null],[11,"extend","","",8,null],[11,"extend","","",8,null],[11,"drop","collections::btree::map","",12,null],[11,"clone","","",12,null],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",12,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",12,null],[11,"get","","Returns a reference to the value corresponding to the key.",12,null],[11,"contains_key","","Returns true if the map contains a value for the specified key.",12,null],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",12,null],[11,"insert","","Inserts a key-value pair into the map.",12,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",12,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",12,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",12,null],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",12,null],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",12,null],[11,"next","","",13,null],[11,"size_hint","","",13,null],[11,"next_back","","",13,null],[11,"len","","",13,null],[11,"clone","","",13,null],[11,"next","","",14,null],[11,"size_hint","","",14,null],[11,"next_back","","",14,null],[11,"len","","",14,null],[11,"into_iter","","",12,null],[11,"drop","","",15,null],[11,"next","","",15,null],[11,"size_hint","","",15,null],[11,"next_back","","",15,null],[11,"len","","",15,null],[11,"next","","",16,null],[11,"size_hint","","",16,null],[11,"next_back","","",16,null],[11,"len","","",16,null],[11,"clone","","",16,null],[11,"next","","",17,null],[11,"size_hint","","",17,null],[11,"next_back","","",17,null],[11,"len","","",17,null],[11,"clone","","",17,null],[11,"next","","",18,null],[11,"next","","",19,null],[11,"size_hint","","",19,null],[11,"next_back","","",19,null],[11,"len","","",19,null],[11,"next_back","","",18,null],[11,"clone","","",18,null],[11,"next","","",20,null],[11,"next_back","","",20,null],[11,"from_iter","","",12,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",12,null],[11,"extend","","",12,null],[11,"hash","","",12,null],[11,"default","","",12,{"inputs":[],"output":{"name":"btreemap"}}],[11,"eq","","",12,null],[11,"partial_cmp","","",12,null],[11,"cmp","","",12,null],[11,"fmt","","",12,null],[11,"index","","",12,null],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",12,null],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",12,null],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",12,null],[11,"values","","Gets an iterator over the values of the map, in order by key.",12,null],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",12,null],[11,"len","","Returns the number of elements in the map.",12,null],[11,"is_empty","","Returns true if the map contains no elements.",12,null],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",21,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",21,null],[11,"key","","Returns a reference to this entry&#39;s key.",21,null],[11,"key","","Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.",22,null],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it.",22,null],[11,"key","","Gets a reference to the key in the entry.",23,null],[11,"get","","Gets a reference to the value in the entry.",23,null],[11,"get_mut","","Gets a mutable reference to the value in the entry.",23,null],[11,"into_mut","","Converts the entry into a mutable reference to its value.",23,null],[11,"insert","","Sets the value of the entry with the OccupiedEntry&#39;s key,\nand returns the entry&#39;s old value.",23,null],[11,"remove","","Takes the value of the entry out of the map, and returns it.",23,null],[11,"partial_cmp","collections::btree::set","",24,null],[11,"lt","","",24,null],[11,"le","","",24,null],[11,"gt","","",24,null],[11,"ge","","",24,null],[11,"cmp","","",24,null],[11,"eq","","",24,null],[11,"ne","","",24,null],[11,"hash","","",24,null],[11,"clone","","",24,null],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",24,{"inputs":[],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet&#39;s contents.",24,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",24,null],[11,"difference","","Visits the values representing the difference, in ascending order.",24,null],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",24,null],[11,"intersection","","Visits the values representing the intersection, in ascending order.",24,null],[11,"union","","Visits the values representing the union, in ascending order.",24,null],[11,"len","","Returns the number of elements in the set.",24,null],[11,"is_empty","","Returns true if the set contains no elements.",24,null],[11,"clear","","Clears the set, removing all values.",24,null],[11,"contains","","Returns `true` if the set contains a value.",24,null],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",24,null],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",24,null],[11,"is_subset","","Returns `true` if the set is a subset of another.",24,null],[11,"is_superset","","Returns `true` if the set is a superset of another.",24,null],[11,"insert","","Adds a value to the set.",24,null],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",24,null],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",24,null],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",24,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",24,null],[11,"from_iter","","",24,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet&#39;s contents.",24,null],[11,"extend","","",24,null],[11,"extend","","",24,null],[11,"default","","",24,{"inputs":[],"output":{"name":"btreeset"}}],[11,"fmt","","",24,null],[11,"clone","","",25,null],[11,"next","","",25,null],[11,"size_hint","","",25,null],[11,"next_back","","",25,null],[11,"len","","",25,null],[11,"next","","",26,null],[11,"size_hint","","",26,null],[11,"next_back","","",26,null],[11,"len","","",26,null],[11,"clone","","",27,null],[11,"next","","",27,null],[11,"next_back","","",27,null],[11,"clone","","",28,null],[11,"next","","",28,null],[11,"size_hint","","",28,null],[11,"clone","","",29,null],[11,"next","","",29,null],[11,"size_hint","","",29,null],[11,"clone","","",30,null],[11,"next","","",30,null],[11,"size_hint","","",30,null],[11,"clone","","",31,null],[11,"next","","",31,null],[11,"size_hint","","",31,null],[11,"borrow","collections::borrow","",32,null],[11,"clone","","",32,null],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",32,null],[11,"into_owned","","Extracts the owned data.",32,null],[11,"deref","","",32,null],[11,"cmp","","",32,null],[11,"eq","","",32,null],[11,"partial_cmp","","",32,null],[11,"fmt","","",32,null],[11,"fmt","","",32,null],[11,"hash","","",32,null],[11,"as_ref","","",32,null],[11,"hash","collections::enum_set","",33,null],[11,"cmp","","",33,null],[11,"partial_cmp","","",33,null],[11,"lt","","",33,null],[11,"le","","",33,null],[11,"gt","","",33,null],[11,"ge","","",33,null],[11,"eq","","",33,null],[11,"ne","","",33,null],[11,"clone","","",33,null],[11,"fmt","","",33,null],[11,"new","","Returns an empty `EnumSet`.",33,{"inputs":[],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",33,null],[11,"is_empty","","Returns true if the `EnumSet` is empty.",33,null],[11,"clear","","",33,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",33,null],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",33,null],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",33,null],[11,"union","","Returns the union of both `EnumSets`.",33,null],[11,"intersection","","Returns the intersection of both `EnumSets`.",33,null],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn&#39;t there before",33,null],[11,"remove","","Removes an enum from the EnumSet",33,null],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",33,null],[11,"iter","","Returns an iterator over an `EnumSet`.",33,null],[11,"sub","","",33,null],[11,"bitor","","",33,null],[11,"bitand","","",33,null],[11,"bitxor","","",33,null],[11,"clone","","",34,null],[11,"next","","",34,null],[11,"size_hint","","",34,null],[11,"from_iter","","",33,{"inputs":[{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",33,null],[11,"extend","","",33,null],[11,"clone","collections::linked_list","",35,null],[11,"clone","","",36,null],[11,"default","","",37,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",37,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",37,null],[11,"iter","","Provides a forward iterator.",37,null],[11,"iter_mut","","Provides a forward iterator with mutable references.",37,null],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",37,null],[11,"len","","Returns the length of the `LinkedList`.",37,null],[11,"clear","","Removes all elements from the `LinkedList`.",37,null],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the\ngiven value.",37,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",37,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",37,null],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",37,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",37,null],[11,"push_front","","Adds an element first in the list.",37,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",37,null],[11,"push_back","","Appends an element to the back of a list",37,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",37,null],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",37,null],[11,"front_place","","Returns a place for insertion at the front of the list.",37,null],[11,"back_place","","Returns a place for insertion at the back of the list.",37,null],[11,"drop","","",37,null],[11,"next","","",35,null],[11,"size_hint","","",35,null],[11,"next_back","","",35,null],[11,"next","","",38,null],[11,"size_hint","","",38,null],[11,"next_back","","",38,null],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",38,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",38,null],[11,"next","","",36,null],[11,"size_hint","","",36,null],[11,"next_back","","",36,null],[11,"from_iter","","",37,{"inputs":[{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",37,null],[11,"extend","","",37,null],[11,"extend","","",37,null],[11,"eq","","",37,null],[11,"ne","","",37,null],[11,"partial_cmp","","",37,null],[11,"cmp","","",37,null],[11,"clone","","",37,null],[11,"fmt","","",37,null],[11,"hash","","",37,null],[11,"make_place","","",39,null],[11,"pointer","","",39,null],[11,"finalize","","",39,null],[11,"make_place","","",40,null],[11,"pointer","","",40,null],[11,"finalize","","",40,null],[11,"start","core::ops","",41,null],[11,"end","","",42,null],[11,"start","","",43,null],[11,"end","","",43,null],[11,"borrow","collections::vec","",7,null],[11,"borrow_mut","","",7,null],[11,"clone","collections::str","",44,null],[11,"next","","",44,null],[11,"size_hint","","",44,null],[11,"borrow","collections::string","",45,null],[11,"fmt","core::str::pattern","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"clone","","",46,null],[11,"fmt","","",47,null],[11,"clone","","",47,null],[11,"haystack","","",47,null],[11,"next","","",47,null],[11,"next_match","","",47,null],[11,"next_reject","","",47,null],[11,"next_back","","",47,null],[11,"next_match_back","","",47,null],[11,"next_reject_back","","",47,null],[11,"fmt","","",48,null],[11,"clone","","",48,null],[11,"haystack","","",48,null],[11,"next","","",48,null],[11,"next_match","","",48,null],[11,"next_reject","","",48,null],[11,"next_back","","",48,null],[11,"next_match_back","","",48,null],[11,"next_reject_back","","",48,null],[11,"clone","","",49,null],[11,"fmt","","",49,null],[11,"haystack","","",49,null],[11,"next","","",49,null],[11,"next_match","","",49,null],[11,"next_reject","","",49,null],[11,"next_back","","",49,null],[11,"next_match_back","","",49,null],[11,"next_reject_back","","",49,null],[11,"fmt","","",50,null],[11,"clone","","",50,null],[11,"haystack","","",50,null],[11,"next","","",50,null],[11,"next_match","","",50,null],[11,"next_back","","",50,null],[11,"next_match_back","","",50,null],[11,"cmp","collections::string","",45,null],[11,"partial_cmp","","",45,null],[11,"lt","","",45,null],[11,"le","","",45,null],[11,"gt","","",45,null],[11,"ge","","",45,null],[11,"fmt","","",51,null],[11,"fmt","","",52,null],[11,"new","","Creates a new empty `String`.",45,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",45,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",45,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",45,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\nif `v` contains any invalid data.",45,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",45,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",45,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",45,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",45,null],[11,"as_str","","Extracts a string slice containing the entire string.",45,null],[11,"as_mut_str","","Extracts a string slice containing the entire string.",45,null],[11,"push_str","","Appends a given string slice onto the end of this `String`.",45,null],[11,"capacity","","Returns this `String`&#39;s capacity, in bytes.",45,null],[11,"reserve","","Ensures that this `String`&#39;s capacity is at least `additional` bytes\nlarger than its length.",45,null],[11,"reserve_exact","","Ensures that this `String`&#39;s capacity is `additional` bytes\nlarger than its length.",45,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",45,null],[11,"push","","Appends the given `char` to the end of this `String`.",45,null],[11,"as_bytes","","Returns a byte slice of this `String`&#39;s contents.",45,null],[11,"truncate","","Shortens this `String` to the specified length.",45,null],[11,"pop","","Removes the last character from the string buffer and returns it.",45,null],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",45,null],[11,"insert","","Inserts a character into this `String` at a byte position.",45,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",45,null],[11,"len","","Returns the length of this `String`, in bytes.",45,null],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",45,null],[11,"clear","","Truncates this `String`, removing all contents.",45,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",45,null],[11,"into_boxed_str","","Converts this `String` into a `Box&lt;str&gt;`.",45,null],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",51,null],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",51,null],[11,"fmt","","",51,null],[11,"fmt","","",52,null],[11,"clone","","",45,null],[11,"clone_from","","",45,null],[11,"from_iter","","",45,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",45,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",45,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",45,null],[11,"extend","","",45,null],[11,"extend","","",45,null],[11,"extend","","",45,null],[11,"eq","","",45,null],[11,"ne","","",45,null],[11,"eq","","",45,null],[11,"ne","","",45,null],[11,"eq","","",45,null],[11,"ne","","",45,null],[11,"eq","collections::borrow","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","collections::string","",45,null],[11,"ne","","",45,null],[11,"default","","",45,{"inputs":[],"output":{"name":"string"}}],[11,"fmt","","",45,null],[11,"fmt","","",45,null],[11,"hash","","",45,null],[11,"add","","",45,null],[11,"index","","",45,null],[11,"index","","",45,null],[11,"index","","",45,null],[11,"index","","",45,null],[11,"index","","",45,null],[11,"index","","",45,null],[11,"index_mut","","",45,null],[11,"index_mut","","",45,null],[11,"index_mut","","",45,null],[11,"index_mut","","",45,null],[11,"index_mut","","",45,null],[11,"index_mut","","",45,null],[11,"deref","","",45,null],[11,"deref_mut","","",45,null],[11,"from_str","","",45,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",53,null],[11,"fmt","","",53,null],[11,"fmt","","",53,null],[11,"eq","","",53,null],[11,"as_ref","","",45,null],[11,"as_ref","","",45,null],[11,"from","","",45,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",32,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",32,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",45,null],[11,"write_str","","",45,null],[11,"write_char","","",45,null],[11,"drop","","",54,null],[11,"next","","",54,null],[11,"size_hint","","",54,null],[11,"next_back","","",54,null],[11,"clone","collections::vec","",7,null],[11,"clone_from","","",7,null],[11,"hash","","",7,null],[11,"index","","",7,null],[11,"index_mut","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"deref","","",7,null],[11,"deref_mut","","",7,null],[11,"from_iter","","",7,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",7,null],[11,"extend","","",7,null],[11,"extend","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","collections::borrow","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","collections::vec","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"partial_cmp","","",7,null],[11,"cmp","","",7,null],[11,"drop","","",7,null],[11,"default","","",7,{"inputs":[],"output":{"name":"vec"}}],[11,"fmt","","",7,null],[11,"as_ref","","",7,null],[11,"as_mut","","",7,null],[11,"as_ref","","",7,null],[11,"as_mut","","",7,null],[11,"from","","",7,null],[11,"from","","",7,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","collections::borrow","",32,null],[11,"from","","",32,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from_iter","","",32,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"next","collections::vec","",55,null],[11,"size_hint","","",55,null],[11,"count","","",55,null],[11,"next_back","","",55,null],[11,"clone","","",55,null],[11,"drop","","",55,null],[11,"next","","",56,null],[11,"size_hint","","",56,null],[11,"next_back","","",56,null],[11,"drop","","",56,null],[11,"clone","collections::vec_deque","",57,null],[11,"drop","","",57,null],[11,"default","","",57,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",57,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",57,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",57,null],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",57,null],[11,"swap","","Swaps elements at indices `i` and `j`.",57,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",57,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",57,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",57,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",57,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",57,null],[11,"iter","","Returns a front-to-back iterator.",57,null],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",57,null],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",57,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",57,null],[11,"len","","Returns the number of elements in the `VecDeque`.",57,null],[11,"is_empty","","Returns true if the buffer contains no elements",57,null],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",57,null],[11,"clear","","Clears the buffer, removing all values.",57,null],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the\ngiven value.",57,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",57,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",57,null],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",57,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",57,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",57,null],[11,"push_front","","Inserts an element first in the sequence.",57,null],[11,"push_back","","Appends an element to the back of a buffer",57,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",57,null],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",57,null],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",57,null],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",57,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",57,null],[11,"split_off","","Splits the collection into two at the given index.",57,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",57,null],[11,"retain","","Retains only the elements specified by the predicate.",57,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",57,null],[11,"clone","","",58,null],[11,"next","","",58,null],[11,"size_hint","","",58,null],[11,"next_back","","",58,null],[11,"next","","",59,null],[11,"size_hint","","",59,null],[11,"next_back","","",59,null],[11,"clone","","",60,null],[11,"next","","",60,null],[11,"size_hint","","",60,null],[11,"next_back","","",60,null],[11,"drop","","",61,null],[11,"next","","",61,null],[11,"size_hint","","",61,null],[11,"next_back","","",61,null],[11,"eq","","",57,null],[11,"partial_cmp","","",57,null],[11,"cmp","","",57,null],[11,"hash","","",57,null],[11,"index","","",57,null],[11,"index_mut","","",57,null],[11,"from_iter","","",57,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",57,null],[11,"extend","","",57,null],[11,"extend","","",57,null],[11,"fmt","","",57,null],[11,"from","","",57,{"inputs":[{"name":"vec"}],"output":{"name":"vecdeque"}}],[11,"from","collections::vec","",7,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"eq","collections","",62,null],[11,"ne","","",62,null],[11,"hash","","",62,null],[11,"fmt","","",62,null],[11,"clone","","",62,null],[11,"clone","alloc::boxed","",63,null],[11,"pointer","","",64,null],[11,"make_place","","",64,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"finalize","","",64,null],[11,"finalize","","",65,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",63,null],[11,"drop","","",64,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",65,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",65,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",65,null],[11,"default","","",65,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",65,{"inputs":[],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box&#39;s contents.",65,null],[11,"clone_from","","Copies `source`&#39;s contents into `self` without creating a new allocation.",65,null],[11,"clone","","",65,null],[11,"eq","","",65,null],[11,"ne","","",65,null],[11,"partial_cmp","","",65,null],[11,"lt","","",65,null],[11,"le","","",65,null],[11,"ge","","",65,null],[11,"gt","","",65,null],[11,"cmp","","",65,null],[11,"hash","","",65,null],[11,"from","","",65,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",65,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",65,null],[11,"fmt","","",65,null],[11,"fmt","","",65,null],[11,"fmt","","",65,null],[11,"deref","","",65,null],[11,"deref_mut","","",65,null],[11,"next","","",65,null],[11,"size_hint","","",65,null],[11,"next_back","","",65,null],[11,"call_once","","",65,null],[11,"call_once","","",65,null],[11,"clone","","",65,null],[11,"borrow","","",65,null],[11,"borrow_mut","","",65,null],[11,"as_ref","","",65,null],[11,"as_mut","","",65,null],[11,"deref","regex_syntax","",6,null],[11,"deref_mut","","",6,null],[6,"Result","","An alias for computations that can return a `Error`.",null,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"fmt","","",3,null],[11,"clone","","",3,null],[11,"eq","","",66,null],[11,"ne","","",66,null],[11,"fmt","","",66,null],[11,"clone","","",66,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"eq","","",67,null],[11,"ne","","",67,null],[11,"fmt","","",67,null],[11,"clone","","",67,null],[11,"cmp","","",1,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"gt","","",1,null],[11,"ge","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",68,null],[11,"clone","","",68,null],[11,"new","","Create a new builder for configuring expression parsing.",68,{"inputs":[],"output":{"name":"exprbuilder"}}],[11,"case_insensitive","","Set the default value for the case insensitive (`i`) flag.",68,null],[11,"multi_line","","Set the default value for the multi-line matching (`m`) flag.",68,null],[11,"dot_matches_new_line","","Set the default value for the any character (`s`) flag.",68,null],[11,"swap_greed","","Set the default value for the greedy swap (`U`) flag.",68,null],[11,"ignore_whitespace","","Set the default value for the ignore whitespace (`x`) flag.",68,null],[11,"unicode","","Set the default value for the Unicode (`u`) flag.",68,null],[11,"allow_bytes","","Whether the parser allows matching arbitrary bytes or not.",68,null],[11,"nest_limit","","Set the nesting limit for regular expression parsing.",68,null],[11,"parse","","Parse a string as a regular expression using the current configuraiton.",68,null],[11,"parse","","Parses a string in a regular expression syntax tree.",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"prefixes","","Returns a set of literal prefixes extracted from this expression.",2,null],[11,"suffixes","","Returns a set of literal suffixes extracted from this expression.",2,null],[11,"is_anchored_start","","Returns true if and only if the expression is required to match from\nthe beginning of text.",2,null],[11,"is_anchored_end","","Returns true if and only if the expression is required to match at the\nend of the text.",2,null],[11,"has_bytes","","Returns true if and only if the expression contains sub-expressions\nthat can match arbitrary bytes.",2,null],[11,"deref","","",66,null],[11,"into_iter","","",66,null],[11,"new","","Create a new class from an existing set of ranges.",66,{"inputs":[{"name":"vec"}],"output":{"name":"charclass"}}],[11,"matches","","Returns true if `c` is matched by this character class.",66,null],[11,"remove","","Removes the given character from the class if it exists.",66,null],[11,"negate","","Negates the character class.",66,null],[11,"case_fold","","Apply case folding to this character class.",66,null],[11,"eq","","",0,null],[11,"partial_cmp","","",0,null],[11,"new","","Create a new class from an existing set of ranges.",67,{"inputs":[{"name":"vec"}],"output":{"name":"byteclass"}}],[11,"matches","","Returns true if `b` is matched by this byte class.",67,null],[11,"remove","","Removes the given byte from the class if it exists.",67,null],[11,"negate","","Negates the byte class.",67,null],[11,"case_fold","","Apply case folding to this byte class.",67,null],[11,"deref","","",67,null],[11,"into_iter","","",67,null],[11,"eq","","",1,null],[11,"partial_cmp","","",1,null],[11,"fmt","","",2,null],[11,"fmt","","",3,null],[11,"fmt","","",66,null],[11,"fmt","","",0,null],[11,"fmt","","",67,null],[11,"fmt","","",1,null],[11,"eq","","",69,null],[11,"ne","","",69,null],[11,"fmt","","",69,null],[11,"clone","","",69,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"fmt","","",4,null],[11,"clone","","",4,null],[11,"position","","Returns an approximate *character* offset at which the error occurred.",69,null],[11,"kind","","Returns the type of the regex parse error.",69,null],[11,"description","","",69,null],[11,"fmt","","",69,null],[11,"fmt","","",4,null]],"paths":[[3,"ClassRange"],[3,"ByteRange"],[4,"Expr"],[4,"Repeater"],[4,"ErrorKind"],[3,"Literals"],[3,"Lit"],[3,"Vec"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"BTreeMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"ValuesMut"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[4,"Cow"],[3,"EnumSet"],[3,"Iter"],[3,"Iter"],[3,"IntoIter"],[3,"LinkedList"],[3,"IterMut"],[3,"FrontPlace"],[3,"BackPlace"],[3,"RangeFrom"],[3,"RangeTo"],[3,"Range"],[3,"EncodeUtf16"],[3,"String"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Bound"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Box"],[3,"CharClass"],[3,"ByteClass"],[3,"ExprBuilder"],[3,"Error"]]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[11,"hash","core::num","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"wrapping"}}],[11,"clone","","",0,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"eq","core::num::dec2flt","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"fmt","core::num","",2,null],[11,"eq","","",2,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"fmt","","",4,null],[11,"hash","core::nonzero","",5,null],[11,"fmt","","",5,null],[11,"partial_cmp","","",5,null],[11,"lt","","",5,null],[11,"le","","",5,null],[11,"gt","","",5,null],[11,"ge","","",5,null],[11,"cmp","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",5,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",5,null],[11,"new","core::ptr","Creates a new `Unique`.",6,null],[11,"get","","Dereferences the content.",6,null],[11,"get_mut","","Mutably dereferences the content.",6,null],[11,"deref","","",6,null],[11,"fmt","","",6,null],[11,"new","","Creates a new `Shared`.",7,null],[11,"clone","","",7,null],[11,"deref","","",7,null],[11,"fmt","","",7,null],[11,"hash","core::marker","",8,null],[11,"eq","","",8,null],[11,"partial_cmp","","",8,null],[11,"cmp","","",8,null],[11,"clone","","",8,null],[11,"default","","",8,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",9,null],[11,"clone","","",9,null],[11,"fmt","","",9,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"contains","","# Examples",10,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"clone","","",11,null],[11,"fmt","","",11,null],[11,"contains","","# Examples",11,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"clone","","",12,null],[11,"fmt","","",12,null],[11,"contains","","# Examples",12,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"clone","","",13,null],[11,"fmt","","",13,null],[11,"from","","",13,{"inputs":[{"name":"range"}],"output":{"name":"rangeinclusive"}}],[11,"contains","","# Examples",13,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"clone","","",14,null],[11,"fmt","","",14,null],[11,"contains","","# Examples",14,null],[11,"hash","core::cmp","",15,null],[11,"fmt","","",15,null],[11,"eq","","",15,null],[11,"clone","","",15,null],[11,"reverse","","Reverse the `Ordering`.",15,null],[11,"cmp","","",15,null],[11,"partial_cmp","","",15,null],[11,"fmt","","",16,null],[11,"fmt","","",16,null],[11,"is","","Returns true if the boxed type is the same as `T`",16,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",16,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",16,null],[11,"is","","Forwards to the method defined on the type `Any`.",16,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",16,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",16,null],[11,"hash","core::any","",17,null],[11,"fmt","","",17,null],[11,"eq","","",17,null],[11,"ne","","",17,null],[11,"clone","","",17,null],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",17,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",18,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",20,null],[11,"clone","","",20,null],[11,"new","","Creates a new `AtomicBool`.",18,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",18,null],[11,"store","","Stores a value into the bool.",18,null],[11,"swap","","Stores a value into the bool, returning the old value.",18,null],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",18,null],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",18,null],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",18,null],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",18,null],[11,"new","","Creates a new `AtomicPtr`.",19,null],[11,"load","","Loads a value from the pointer.",19,null],[11,"store","","Stores a value into the pointer.",19,null],[11,"swap","","Stores a value into the pointer, returning the old value.",19,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"default","","",21,{"inputs":[],"output":{"name":"atomici8"}}],[11,"fmt","","",21,null],[11,"new","","Creates a new atomic integer.",21,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"load","","Loads a value from the atomic integer.",21,null],[11,"store","","Stores a value into the atomic integer.",21,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",21,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"fetch_add","","Add to the current value, returning the previous value.",21,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",21,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",21,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",21,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",21,null],[11,"default","","",22,{"inputs":[],"output":{"name":"atomicu8"}}],[11,"fmt","","",22,null],[11,"new","","Creates a new atomic integer.",22,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"load","","Loads a value from the atomic integer.",22,null],[11,"store","","Stores a value into the atomic integer.",22,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",22,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"fetch_add","","Add to the current value, returning the previous value.",22,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",22,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",22,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",22,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",22,null],[11,"default","","",23,{"inputs":[],"output":{"name":"atomici16"}}],[11,"fmt","","",23,null],[11,"new","","Creates a new atomic integer.",23,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"load","","Loads a value from the atomic integer.",23,null],[11,"store","","Stores a value into the atomic integer.",23,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",23,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"fetch_add","","Add to the current value, returning the previous value.",23,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",23,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",23,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",23,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",23,null],[11,"default","","",24,{"inputs":[],"output":{"name":"atomicu16"}}],[11,"fmt","","",24,null],[11,"new","","Creates a new atomic integer.",24,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"load","","Loads a value from the atomic integer.",24,null],[11,"store","","Stores a value into the atomic integer.",24,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",24,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"fetch_add","","Add to the current value, returning the previous value.",24,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",24,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",24,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",24,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",24,null],[11,"default","","",25,{"inputs":[],"output":{"name":"atomici32"}}],[11,"fmt","","",25,null],[11,"new","","Creates a new atomic integer.",25,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"load","","Loads a value from the atomic integer.",25,null],[11,"store","","Stores a value into the atomic integer.",25,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",25,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"fetch_add","","Add to the current value, returning the previous value.",25,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",25,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",25,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",25,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",25,null],[11,"default","","",26,{"inputs":[],"output":{"name":"atomicu32"}}],[11,"fmt","","",26,null],[11,"new","","Creates a new atomic integer.",26,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"load","","Loads a value from the atomic integer.",26,null],[11,"store","","Stores a value into the atomic integer.",26,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",26,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"fetch_add","","Add to the current value, returning the previous value.",26,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",26,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",26,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",26,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",26,null],[11,"default","","",27,{"inputs":[],"output":{"name":"atomici64"}}],[11,"fmt","","",27,null],[11,"new","","Creates a new atomic integer.",27,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"load","","Loads a value from the atomic integer.",27,null],[11,"store","","Stores a value into the atomic integer.",27,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",27,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"fetch_add","","Add to the current value, returning the previous value.",27,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",27,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",27,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",27,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",27,null],[11,"default","","",28,{"inputs":[],"output":{"name":"atomicu64"}}],[11,"fmt","","",28,null],[11,"new","","Creates a new atomic integer.",28,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"load","","Loads a value from the atomic integer.",28,null],[11,"store","","Stores a value into the atomic integer.",28,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",28,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"fetch_add","","Add to the current value, returning the previous value.",28,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",28,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",28,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",28,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",28,null],[11,"default","","",29,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"fmt","","",29,null],[11,"new","","Creates a new atomic integer.",29,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the atomic integer.",29,null],[11,"store","","Stores a value into the atomic integer.",29,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",29,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"fetch_add","","Add to the current value, returning the previous value.",29,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",29,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",29,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",29,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",29,null],[11,"default","","",30,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"fmt","","",30,null],[11,"new","","Creates a new atomic integer.",30,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the atomic integer.",30,null],[11,"store","","Stores a value into the atomic integer.",30,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",30,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"fetch_add","","Add to the current value, returning the previous value.",30,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",30,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",30,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",30,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",30,null],[11,"fmt","","",18,null],[11,"fmt","","",19,null],[11,"new","core::cell","Creates a new `Cell` containing the given value.",31,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",31,null],[11,"set","","Sets the contained value.",31,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",31,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",31,null],[11,"clone","","",31,null],[11,"default","","",31,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",31,null],[11,"partial_cmp","","",31,null],[11,"lt","","",31,null],[11,"le","","",31,null],[11,"gt","","",31,null],[11,"ge","","",31,null],[11,"cmp","","",31,null],[11,"fmt","","",32,null],[11,"eq","","",32,null],[11,"clone","","",32,null],[11,"new","","Creates a new `RefCell` containing `value`.",33,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",33,null],[11,"borrow_state","","Query the current state of this `RefCell`",33,null],[11,"borrow","","Immutably borrows the wrapped value.",33,null],[11,"borrow_mut","","Mutably borrows the wrapped value.",33,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",33,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",33,null],[11,"clone","","",33,null],[11,"default","","",33,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",33,null],[11,"partial_cmp","","",33,null],[11,"lt","","",33,null],[11,"le","","",33,null],[11,"gt","","",33,null],[11,"ge","","",33,null],[11,"cmp","","",33,null],[11,"deref","","",34,null],[11,"clone","","Copies a `Ref`.",34,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",34,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",34,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",35,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",35,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"deref","","",35,null],[11,"deref_mut","","",35,null],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",36,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",36,null],[11,"get","","Gets a mutable pointer to the wrapped value.",36,null],[11,"default","","",36,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"fmt","core::char","",37,null],[11,"clone","","",37,null],[11,"next","","",37,null],[11,"size_hint","","",37,null],[11,"last","","",37,null],[11,"fmt","","",38,null],[11,"clone","","",38,null],[11,"next","","",38,null],[11,"size_hint","","",38,null],[11,"count","","",38,null],[11,"nth","","",38,null],[11,"last","","",38,null],[11,"fmt","","",39,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",39,null],[11,"next","","",39,null],[11,"size_hint","","",39,null],[11,"fmt","","",40,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",40,null],[11,"next","","",40,null],[11,"size_hint","","",40,null],[11,"fmt","core::iter::range","",41,null],[11,"clone","","",41,null],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",11,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",10,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",13,null],[11,"next","core::iter::range","",41,null],[11,"size_hint","","",41,null],[11,"next","","",41,null],[11,"size_hint","","",41,null],[11,"next","","",41,null],[11,"size_hint","","",41,null],[11,"next","core::ops","",10,null],[11,"size_hint","","",10,null],[11,"next_back","","",10,null],[11,"next","","",11,null],[11,"next","","",13,null],[11,"size_hint","","",13,null],[11,"next_back","","",13,null],[11,"fmt","core::iter::sources","",42,null],[11,"clone","","",42,null],[11,"next","","",42,null],[11,"size_hint","","",42,null],[11,"next_back","","",42,null],[11,"fmt","","",43,null],[11,"next","","",43,null],[11,"size_hint","","",43,null],[11,"next_back","","",43,null],[11,"len","","",43,null],[11,"clone","","",43,null],[11,"default","","",43,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",44,null],[11,"clone","","",44,null],[11,"next","","",44,null],[11,"size_hint","","",44,null],[11,"next_back","","",44,null],[11,"len","","",44,null],[11,"fmt","core::iter","",45,null],[11,"clone","","",45,null],[11,"next","","",45,null],[11,"size_hint","","",45,null],[11,"next_back","","",45,null],[11,"fmt","","",46,null],[11,"clone","","",46,null],[11,"next","","",46,null],[11,"size_hint","","",46,null],[11,"next_back","","",46,null],[11,"fmt","","",47,null],[11,"clone","","",47,null],[11,"next","","",47,null],[11,"size_hint","","",47,null],[11,"fmt","","",48,null],[11,"clone","","",48,null],[11,"next","","",48,null],[11,"count","","",48,null],[11,"nth","","",48,null],[11,"find","","",48,null],[11,"last","","",48,null],[11,"size_hint","","",48,null],[11,"next_back","","",48,null],[11,"fmt","","",49,null],[11,"clone","","",49,null],[11,"next","","",49,null],[11,"size_hint","","",49,null],[11,"next_back","","",49,null],[11,"clone","","",50,null],[11,"fmt","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next_back","","",50,null],[11,"clone","","",51,null],[11,"fmt","","",51,null],[11,"next","","",51,null],[11,"size_hint","","",51,null],[11,"next_back","","",51,null],[11,"clone","","",52,null],[11,"fmt","","",52,null],[11,"next","","",52,null],[11,"size_hint","","",52,null],[11,"next_back","","",52,null],[11,"fmt","","",53,null],[11,"clone","","",53,null],[11,"next","","# Overflow Behavior",53,null],[11,"size_hint","","",53,null],[11,"nth","","",53,null],[11,"count","","",53,null],[11,"next_back","","",53,null],[11,"fmt","","",54,null],[11,"clone","","",54,null],[11,"next","","",54,null],[11,"count","","",54,null],[11,"nth","","",54,null],[11,"last","","",54,null],[11,"size_hint","","",54,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",54,null],[11,"is_empty","","Checks if the iterator has finished iterating.",54,null],[11,"clone","","",55,null],[11,"fmt","","",55,null],[11,"next","","",55,null],[11,"size_hint","","",55,null],[11,"clone","","",56,null],[11,"fmt","","",56,null],[11,"next","","",56,null],[11,"size_hint","","",56,null],[11,"fmt","","",57,null],[11,"clone","","",57,null],[11,"next","","",57,null],[11,"nth","","",57,null],[11,"count","","",57,null],[11,"last","","",57,null],[11,"size_hint","","",57,null],[11,"next_back","","",57,null],[11,"fmt","","",58,null],[11,"clone","","",58,null],[11,"next","","",58,null],[11,"nth","","",58,null],[11,"size_hint","","",58,null],[11,"clone","","",59,null],[11,"fmt","","",59,null],[11,"next","","",59,null],[11,"size_hint","","",59,null],[11,"clone","","",60,null],[11,"fmt","","",60,null],[11,"next","","",60,null],[11,"size_hint","","",60,null],[11,"next_back","","",60,null],[11,"fmt","","",61,null],[11,"clone","","",61,null],[11,"next","","",61,null],[11,"nth","","",61,null],[11,"last","","",61,null],[11,"count","","",61,null],[11,"size_hint","","",61,null],[11,"next_back","","",61,null],[11,"clone","","",62,null],[11,"fmt","","",62,null],[11,"next","","",62,null],[11,"size_hint","","",62,null],[11,"next_back","","",62,null],[11,"hash","core::option","",63,null],[11,"fmt","","",63,null],[11,"cmp","","",63,null],[11,"partial_cmp","","",63,null],[11,"lt","","",63,null],[11,"le","","",63,null],[11,"gt","","",63,null],[11,"ge","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"clone","","",63,null],[11,"is_some","","Returns `true` if the option is a `Some` value",63,null],[11,"is_none","","Returns `true` if the option is a `None` value",63,null],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",63,null],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",63,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",63,null],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",63,null],[11,"unwrap_or","","Returns the contained value or a default.",63,null],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",63,null],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",63,null],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",63,null],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",63,null],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",63,null],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",63,null],[11,"iter","","Returns an iterator over the possibly contained value.",63,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",63,null],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",63,null],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",63,null],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",63,null],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",63,null],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",63,null],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",63,null],[11,"unwrap_or_default","","Returns the contained value or a default",63,null],[11,"default","","",63,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",63,null],[11,"fmt","","",64,null],[11,"next","","",64,null],[11,"size_hint","","",64,null],[11,"next_back","","",64,null],[11,"clone","","",64,null],[11,"fmt","","",65,null],[11,"next","","",65,null],[11,"size_hint","","",65,null],[11,"next_back","","",65,null],[11,"fmt","","",66,null],[11,"clone","","",66,null],[11,"next","","",66,null],[11,"size_hint","","",66,null],[11,"next_back","","",66,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",63,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",67,null],[11,"clone","","",68,null],[11,"hash","core::result","",69,null],[11,"fmt","","",69,null],[11,"cmp","","",69,null],[11,"partial_cmp","","",69,null],[11,"lt","","",69,null],[11,"le","","",69,null],[11,"gt","","",69,null],[11,"ge","","",69,null],[11,"eq","","",69,null],[11,"ne","","",69,null],[11,"clone","","",69,null],[11,"is_ok","","Returns true if the result is `Ok`",69,null],[11,"is_err","","Returns true if the result is `Err`",69,null],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",69,null],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",69,null],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",69,null],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",69,null],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",69,null],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",69,null],[11,"iter","","Returns an iterator over the possibly contained value.",69,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",69,null],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",69,null],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",69,null],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",69,null],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",69,null],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",69,null],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",69,null],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",69,null],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",69,null],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",69,null],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",69,null],[11,"fmt","","",70,null],[11,"next","","",70,null],[11,"size_hint","","",70,null],[11,"next_back","","",70,null],[11,"clone","","",70,null],[11,"fmt","","",71,null],[11,"next","","",71,null],[11,"size_hint","","",71,null],[11,"next_back","","",71,null],[11,"fmt","","",72,null],[11,"next","","",72,null],[11,"size_hint","","",72,null],[11,"next_back","","",72,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",69,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::slice","",73,null],[11,"as_slice","","View the underlying data as a subslice of the original data.",73,null],[11,"next","","",73,null],[11,"size_hint","","",73,null],[11,"count","","",73,null],[11,"nth","","",73,null],[11,"last","","",73,null],[11,"next_back","","",73,null],[11,"clone","","",73,null],[11,"fmt","","",74,null],[11,"into_slice","","View the underlying data as a subslice of the original data.",74,null],[11,"next","","",74,null],[11,"size_hint","","",74,null],[11,"count","","",74,null],[11,"nth","","",74,null],[11,"last","","",74,null],[11,"next_back","","",74,null],[11,"fmt","","",75,null],[11,"clone","","",75,null],[11,"next","","",75,null],[11,"size_hint","","",75,null],[11,"next_back","","",75,null],[11,"fmt","","",76,null],[11,"next","","",76,null],[11,"size_hint","","",76,null],[11,"next_back","","",76,null],[11,"fmt","","",77,null],[11,"fmt","","",78,null],[11,"fmt","","",79,null],[11,"fmt","","",80,null],[11,"next","","",77,null],[11,"size_hint","","",77,null],[11,"next","","",78,null],[11,"size_hint","","",78,null],[11,"next","","",79,null],[11,"size_hint","","",79,null],[11,"next","","",80,null],[11,"size_hint","","",80,null],[11,"fmt","","",81,null],[11,"clone","","",81,null],[11,"next","","",81,null],[11,"size_hint","","",81,null],[11,"count","","",81,null],[11,"nth","","",81,null],[11,"last","","",81,null],[11,"next_back","","",81,null],[11,"fmt","","",82,null],[11,"clone","","",82,null],[11,"next","","",82,null],[11,"size_hint","","",82,null],[11,"count","","",82,null],[11,"nth","","",82,null],[11,"last","","",82,null],[11,"next_back","","",82,null],[11,"fmt","","",83,null],[11,"next","","",83,null],[11,"size_hint","","",83,null],[11,"count","","",83,null],[11,"nth","","",83,null],[11,"last","","",83,null],[11,"next_back","","",83,null],[11,"fmt","core::str::pattern","",84,null],[11,"eq","","",84,null],[11,"ne","","",84,null],[11,"clone","","",84,null],[11,"fmt","","",85,null],[11,"clone","","",85,null],[11,"haystack","","",85,null],[11,"next","","",85,null],[11,"next_match","","",85,null],[11,"next_reject","","",85,null],[11,"next_back","","",85,null],[11,"next_match_back","","",85,null],[11,"next_reject_back","","",85,null],[11,"fmt","","",86,null],[11,"clone","","",86,null],[11,"haystack","","",86,null],[11,"next","","",86,null],[11,"next_match","","",86,null],[11,"next_reject","","",86,null],[11,"next_back","","",86,null],[11,"next_match_back","","",86,null],[11,"next_reject_back","","",86,null],[11,"clone","","",87,null],[11,"fmt","","",87,null],[11,"haystack","","",87,null],[11,"next","","",87,null],[11,"next_match","","",87,null],[11,"next_reject","","",87,null],[11,"next_back","","",87,null],[11,"next_match_back","","",87,null],[11,"next_reject_back","","",87,null],[11,"fmt","","",88,null],[11,"clone","","",88,null],[11,"haystack","","",88,null],[11,"next","","",88,null],[11,"next_match","","",88,null],[11,"next_back","","",88,null],[11,"next_match_back","","",88,null],[11,"eq","core::str","",89,null],[11,"ne","","",89,null],[11,"clone","","",89,null],[11,"fmt","","",89,null],[11,"fmt","","",89,null],[11,"fmt","","",90,null],[11,"clone","","",90,null],[11,"eq","","",90,null],[11,"ne","","",90,null],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",90,null],[11,"fmt","","",90,null],[11,"fmt","","",91,null],[11,"clone","","",91,null],[11,"next","","",91,null],[11,"size_hint","","",91,null],[11,"next_back","","",91,null],[11,"as_str","","View the underlying data as a subslice of the original data.",91,null],[11,"fmt","","",92,null],[11,"clone","","",92,null],[11,"next","","",92,null],[11,"size_hint","","",92,null],[11,"next_back","","",92,null],[11,"as_str","","View the underlying data as a subslice of the original data.",92,null],[11,"fmt","","",93,null],[11,"clone","","",93,null],[11,"next","","",93,null],[11,"size_hint","","",93,null],[11,"count","","",93,null],[11,"last","","",93,null],[11,"nth","","",93,null],[11,"next_back","","",93,null],[11,"len","","",93,null],[11,"fmt","","",94,null],[11,"next","","",94,null],[11,"clone","","",94,null],[11,"fmt","","",95,null],[11,"next","","",95,null],[11,"clone","","",95,null],[11,"next_back","","",94,null],[11,"next_back","","",95,null],[11,"fmt","","",96,null],[11,"next","","",96,null],[11,"clone","","",96,null],[11,"fmt","","",97,null],[11,"next","","",97,null],[11,"clone","","",97,null],[11,"next_back","","",96,null],[11,"next_back","","",97,null],[11,"fmt","","",98,null],[11,"next","","",98,null],[11,"clone","","",98,null],[11,"fmt","","",99,null],[11,"next","","",99,null],[11,"clone","","",99,null],[11,"fmt","","",100,null],[11,"next","","",100,null],[11,"clone","","",100,null],[11,"fmt","","",101,null],[11,"next","","",101,null],[11,"clone","","",101,null],[11,"next_back","","",100,null],[11,"next_back","","",101,null],[11,"fmt","","",102,null],[11,"next","","",102,null],[11,"clone","","",102,null],[11,"fmt","","",103,null],[11,"next","","",103,null],[11,"clone","","",103,null],[11,"next_back","","",102,null],[11,"next_back","","",103,null],[11,"fmt","","",104,null],[11,"clone","","",104,null],[11,"next","","",104,null],[11,"size_hint","","",104,null],[11,"next_back","","",104,null],[11,"fmt","","",105,null],[11,"clone","","",105,null],[11,"next","","",105,null],[11,"size_hint","","",105,null],[11,"next_back","","",105,null],[11,"fmt","","",106,null],[11,"clone","","",106,null],[11,"fmt","core::hash::sip","",107,null],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",107,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",107,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",107,null],[11,"finish","","",107,null],[11,"clone","","",107,null],[11,"default","","",107,{"inputs":[],"output":{"name":"siphasher"}}],[11,"fmt","core::hash","",108,null],[11,"build_hasher","","",108,null],[11,"clone","","",108,null],[11,"default","","",108,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"fmt","core::fmt","",109,null],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",110,null],[11,"finish","","Finishes output and returns any error encountered.",110,null],[11,"field","","Adds a new field to the generated tuple struct output.",111,null],[11,"finish","","Finishes output and returns any error encountered.",111,null],[11,"entry","","Adds a new entry to the set output.",112,null],[11,"entries","","Adds the contents of an iterator of entries to the set output.",112,null],[11,"finish","","Finishes output and returns any error encountered.",112,null],[11,"entry","","Adds a new entry to the list output.",113,null],[11,"entries","","Adds the contents of an iterator of entries to the list output.",113,null],[11,"finish","","Finishes output and returns any error encountered.",113,null],[11,"entry","","Adds a new entry to the map output.",114,null],[11,"entries","","Adds the contents of an iterator of entries to the map output.",114,null],[11,"finish","","Finishes output and returns any error encountered.",114,null],[11,"partial_cmp","core::fmt","",115,null],[11,"eq","","",115,null],[11,"cmp","","",115,null],[11,"hash","","",115,null],[11,"default","","",115,{"inputs":[],"output":{"name":"error"}}],[11,"fmt","","",115,null],[11,"clone","","",115,null],[11,"clone","","",116,null],[11,"fmt","","",116,null],[11,"fmt","","",116,null],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",117,null],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",117,null],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",117,null],[11,"write_fmt","","Writes some formatted information into this instance",117,null],[11,"flags","","Flags for formatting (packed version of rt::Flag)",117,null],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",117,null],[11,"align","","Flag indicating what form of alignment was requested",117,null],[11,"width","","Optionally specified integer width that the output should be",117,null],[11,"precision","","Optionally specified precision for numeric types",117,null],[11,"sign_plus","","Determines if the `+` flag was specified.",117,null],[11,"sign_minus","","Determines if the `-` flag was specified.",117,null],[11,"alternate","","Determines if the `#` flag was specified.",117,null],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",117,null],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",117,null],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",117,null],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",117,null],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",117,null],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",117,null],[11,"write_str","","",117,null],[11,"write_char","","",117,null],[11,"write_fmt","","",117,null],[11,"fmt","","",115,null],[11,"fmt","core::marker","",8,null],[11,"fmt","core::cell","",31,null],[11,"fmt","","",33,null],[11,"fmt","","",34,null],[11,"fmt","","",35,null],[11,"fmt","","",36,null],[8,"__Deref","lazy_static","The `Deref` trait is used to specify the functionality of dereferencing\noperations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing",118,null],[10,"deref","","The method called to dereference a value",118,null],[0,"lazy","","",null,null],[3,"Lazy","lazy_static::lazy","",null,null],[12,"0","","",119,null],[12,"1","","",119,null],[11,"get","","",119,null],[14,"__lazy_static_create!","lazy_static","",null,null],[14,"lazy_static!","","",null,null]],"paths":[[3,"Wrapping"],[3,"ParseFloatError"],[4,"FpCategory"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicPtr"],[4,"Ordering"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EncodeUtf8"],[3,"EncodeUtf16"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[4,"Option"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"CharRange"],[3,"SipHasher"],[3,"BuildHasherDefault"],[4,"Alignment"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"__Deref"],[3,"Lazy"]]};
searchIndex["dtoa"] = {"doc":"","items":[[5,"write","dtoa","",null,{"inputs":[{"name":"w"},{"name":"v"}],"output":{"name":"result"}}],[8,"Floating","","",null,null],[10,"write","","",0,null],[14,"diyfp!","","",null,null],[14,"dtoa!","","",null,null]],"paths":[[8,"Floating"]]};
searchIndex["bytes"] = {"doc":"","items":[[3,"ByteBuf","bytes","A `Buf` backed by a contiguous region of memory.",null,null],[3,"MutByteBuf","","",null,null],[3,"RingBuf","","Buf backed by a continous chunk of memory. Maintains a read cursor and a\nwrite cursor. When reads and writes reach the end of the allocated buffer,\nwraps around to the start.",null,null],[3,"ROByteBuf","","Same as `ByteBuf` but cannot be flipped to a `MutByteBuf`.",null,null],[3,"SliceBuf","","",null,null],[3,"MutSliceBuf","","",null,null],[3,"Take","","",null,null],[3,"Bytes","","A specialized `ByteStr` box.",null,null],[3,"Rope","","An immutable sequence of bytes formed by concatenation of other `ByteStr`\nvalues, without copying the data in the pieces. The concatenation is\nrepresented as a tree whose leaf nodes are each a `Bytes` value.",null,null],[3,"RopeBuf","","",null,null],[3,"SeqByteStr","","",null,null],[3,"SmallByteStr","","",null,null],[3,"SmallByteStrBuf","","",null,null],[4,"BufError","","",null,null],[13,"Underflow","","",0,null],[13,"Overflow","","",0,null],[0,"alloc","","",null,null],[3,"Heap","bytes::alloc","",null,null],[3,"MemRef","","",null,null],[3,"Mem","","Memory allocated by an Allocator must be prefixed with Mem",null,null],[5,"heap","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"memref"}}],[11,"allocate","","",1,null],[11,"deallocate","","",1,null],[11,"allocate","","",1,null],[11,"deallocate","","",1,null],[8,"Allocator","","Allocates memory to be used by Bufs or Bytes. Allows allocating memory\nusing alternate stratgies than the default Rust heap allocator. Also does\nnot require that allocations are continuous in memory.",null,null],[10,"allocate","","Allocate memory. May or may not be contiguous.",2,null],[10,"deallocate","","Deallocate a chunk of memory",2,null],[11,"new","","",3,null],[11,"none","","",3,{"inputs":[],"output":{"name":"memref"}}],[11,"is_none","","",3,null],[11,"ptr","","",3,null],[11,"bytes","","",3,null],[11,"bytes_mut","","",3,null],[11,"clone","","",3,null],[11,"drop","","",3,null],[11,"new","","",4,null],[0,"buf","bytes","",null,null],[3,"ByteBuf","bytes::buf","A `Buf` backed by a contiguous region of memory.",null,null],[3,"MutByteBuf","","",null,null],[3,"ROByteBuf","","Same as `ByteBuf` but cannot be flipped to a `MutByteBuf`.",null,null],[3,"RingBuf","","Buf backed by a continous chunk of memory. Maintains a read cursor and a\nwrite cursor. When reads and writes reach the end of the allocated buffer,\nwraps around to the start.",null,null],[3,"SliceBuf","","",null,null],[3,"MutSliceBuf","","",null,null],[3,"Take","","",null,null],[11,"from_slice","bytes","Create a new `ByteBuf` by copying the contents of the given slice.",5,null],[11,"mut_with_capacity","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"mutbytebuf"}}],[11,"none","","",5,{"inputs":[],"output":{"name":"bytebuf"}}],[11,"from_mem_ref","","",5,{"inputs":[{"name":"memref"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bytebuf"}}],[11,"capacity","","",5,null],[11,"flip","","",5,null],[11,"resume","","Flips the buffer back to mutable, resetting the write position\nto the byte after the previous write.",5,null],[11,"read_slice","","",5,null],[11,"to_seq_byte_str","","",5,null],[11,"to_bytes","","",5,null],[11,"mark","","Marks the current read location.",5,null],[11,"reset","","Resets the read position to the previously marked position.",5,null],[11,"remaining","","",5,null],[11,"bytes","","",5,null],[11,"advance","","",5,null],[11,"read_slice","","",5,null],[11,"fmt","","",5,null],[11,"from_mem_ref","","",6,{"inputs":[{"name":"memref"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"robytebuf"}}],[11,"to_seq_byte_str","","",6,null],[11,"to_bytes","","",6,null],[11,"mark","","Marks the current read location.",6,null],[11,"reset","","Resets the read position to the previously marked position.",6,null],[11,"remaining","","",6,null],[11,"bytes","","",6,null],[11,"advance","","",6,null],[11,"read_slice","","",6,null],[11,"fmt","","",6,null],[11,"capacity","","",7,null],[11,"flip","","",7,null],[11,"clear","","",7,null],[11,"write_slice","","",7,null],[11,"bytes","","",7,null],[11,"remaining","","",7,null],[11,"advance","","",7,null],[11,"mut_bytes","","",7,null],[11,"fmt","","",7,null],[11,"new","","Allocates a new `RingBuf` with the specified capacity.",8,{"inputs":[{"name":"usize"}],"output":{"name":"ringbuf"}}],[11,"is_full","","Returns `true` if the buf cannot accept any further writes.",8,null],[11,"is_empty","","Returns `true` if the buf cannot accept any further reads.",8,null],[11,"capacity","","Returns the number of bytes that the buf can hold.",8,null],[11,"mark","","Marks the current read location.",8,null],[11,"reset","","Resets the read position to the previously marked position.",8,null],[11,"clear","","Resets all internal state to the initial state.",8,null],[11,"clone","","",8,null],[11,"fmt","","",8,null],[11,"remaining","","",8,null],[11,"bytes","","",8,null],[11,"advance","","",8,null],[11,"remaining","","",8,null],[11,"advance","","",8,null],[11,"mut_bytes","","",8,null],[11,"read","","",8,null],[11,"write","","",8,null],[11,"flush","","",8,null],[11,"wrap","","",9,null],[11,"remaining","","",9,null],[11,"bytes","","",9,null],[11,"advance","","",9,null],[11,"wrap","","",10,null],[11,"remaining","","",10,null],[11,"advance","","",10,null],[11,"mut_bytes","","",10,null],[11,"fmt","","",11,null],[11,"new","","",11,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"take"}}],[11,"into_inner","","",11,null],[11,"get_ref","","",11,null],[11,"get_mut","","",11,null],[11,"limit","","",11,null],[11,"set_limit","","",11,null],[11,"remaining","","",11,null],[11,"bytes","","",11,null],[11,"advance","","",11,null],[11,"read","","",11,null],[11,"remaining","","",11,null],[11,"mut_bytes","","",11,null],[11,"advance","","",11,null],[8,"Buf","bytes::buf","A trait for values that provide sequential read access to bytes.",null,null],[10,"remaining","","Returns the number of bytes that can be accessed from the Buf",12,null],[10,"bytes","","Returns a slice starting at the current Buf position and of length\nbetween 0 and `Buf::remaining()`.",12,null],[10,"advance","","Advance the internal cursor of the Buf",12,null],[11,"has_remaining","","Returns true if there are any more bytes to consume",12,null],[11,"read_slice","","Read bytes from the `Buf` into the given slice and advance the cursor by\nthe number of bytes read.\nReturns the number of bytes read.",12,null],[11,"read_byte","","Read a single byte from the `Buf`",12,null],[8,"BufExt","","An extension trait providing extra functions applicable to all `Buf` values.",null,null],[10,"read","","Read bytes from this Buf into the given sink and advance the cursor by\nthe number of bytes read.",13,null],[8,"MutBuf","","A trait for values that provide sequential write access to bytes.",null,null],[10,"remaining","","Returns the number of bytes that can be written to the MutBuf",14,null],[10,"advance","","Advance the internal cursor of the MutBuf",14,null],[11,"has_remaining","","Returns true iff there is any more space for bytes to be written",14,null],[10,"mut_bytes","","Returns a mutable slice starting at the current MutBuf position and of\nlength between 0 and `MutBuf::remaining()`.",14,null],[11,"write_slice","","Write bytes from the given slice into the `MutBuf` and advance the\ncursor by the number of bytes written.\nReturns the number of bytes written.",14,null],[11,"write_byte","","Write a single byte to the `MuBuf`",14,null],[8,"MutBufExt","","An extension trait providing extra functions applicable to all `MutBuf` values.",null,null],[10,"write","","Write bytes from the given source into the current `MutBuf` and advance\nthe cursor by the number of bytes written.",15,null],[8,"Sink","","A value that reads bytes from a Buf into itself",null,null],[16,"Error","","",16,null],[10,"sink","","",16,null],[8,"Source","","A value that writes bytes from itself into a `MutBuf`.",null,null],[16,"Error","","",17,null],[10,"fill","","",17,null],[11,"remaining","alloc::boxed","",18,null],[11,"bytes","","",18,null],[11,"advance","","",18,null],[11,"read_slice","","",18,null],[11,"fmt","","",18,null],[11,"remaining","std::io::cursor","",19,null],[11,"bytes","","",19,null],[11,"advance","","",19,null],[11,"remaining","collections::vec","",20,null],[11,"advance","","",20,null],[11,"mut_bytes","","",20,null],[11,"remaining","std::io::cursor","",19,null],[11,"bytes","","",19,null],[11,"advance","","",19,null],[11,"read","bytes","",5,null],[11,"read","","",6,null],[11,"read","","",21,null],[11,"read","alloc::boxed","",18,null],[11,"write","bytes","",7,null],[11,"flush","","",7,null],[0,"str","","",null,null],[3,"Bytes","bytes::str","A specialized `ByteStr` box.",null,null],[3,"Rope","","An immutable sequence of bytes formed by concatenation of other `ByteStr`\nvalues, without copying the data in the pieces. The concatenation is\nrepresented as a tree whose leaf nodes are each a `Bytes` value.",null,null],[3,"RopeBuf","","",null,null],[3,"SeqByteStr","","",null,null],[3,"SmallByteStr","","",null,null],[3,"SmallByteStrBuf","","",null,null],[11,"from_slice","bytes","",22,null],[11,"of","","",22,{"inputs":[{"name":"b"}],"output":{"name":"bytes"}}],[11,"empty","","",22,{"inputs":[],"output":{"name":"bytes"}}],[11,"downcast_ref","","If the underlying `ByteStr` is of type `B`, returns a reference to it\notherwise None.",22,null],[11,"try_unwrap","","If the underlying `ByteStr` is of type `B`, returns the unwraped value,\notherwise, returns the original `Bytes` as `Err`.",22,null],[11,"buf","","",22,null],[11,"concat","","",22,null],[11,"len","","",22,null],[11,"slice","","",22,null],[11,"split_at","","",22,null],[11,"to_bytes","","",22,null],[11,"index","","",22,null],[11,"fmt","","",22,null],[11,"clone","","",22,null],[11,"drop","","",22,null],[11,"from_slice","","",23,null],[11,"of","","Returns a Rope consisting of the supplied Bytes as a single segment.",23,{"inputs":[{"name":"b"}],"output":{"name":"rope"}}],[11,"len","","",23,null],[11,"is_empty","","",23,null],[11,"buf","","",23,null],[11,"concat","","",23,null],[11,"len","","",23,null],[11,"slice","","",23,null],[11,"to_bytes","","",23,null],[11,"index","","",23,null],[11,"clone","","",23,null],[11,"remaining","","",21,null],[11,"bytes","","",21,null],[11,"advance","","",21,null],[11,"from_slice","","Create a new `SeqByteStr` from a byte slice.",24,null],[11,"from_mem_ref","","Creates a new `SeqByteStr` from a `MemRef`, an offset, and a length.",24,{"inputs":[{"name":"memref"},{"name":"u32"},{"name":"u32"}],"output":{"name":"seqbytestr"}}],[11,"buf","","",24,null],[11,"concat","","",24,null],[11,"len","","",24,null],[11,"slice","","",24,null],[11,"to_bytes","","",24,null],[11,"index","","",24,null],[11,"clone","","",24,null],[11,"clone","","",25,null],[11,"zero","","",25,{"inputs":[],"output":{"name":"smallbytestr"}}],[11,"from_slice","","",25,null],[11,"as_slice","","",25,null],[11,"buf","","",25,null],[11,"concat","","",25,null],[11,"len","","",25,null],[11,"slice","","",25,null],[11,"to_bytes","","",25,null],[11,"index","","",25,null],[11,"clone","","",26,null],[11,"remaining","","",26,null],[11,"bytes","","",26,null],[11,"advance","","",26,null],[8,"ByteStr","bytes::str","An immutable sequence of bytes. Operations will not mutate the original\nvalue. Since only immutable access is permitted, operations do not require\ncopying (though, sometimes copying will happen as an optimization).",null,null],[16,"Buf","","",27,null],[10,"buf","","Returns a read-only `Buf` for accessing the byte contents of the\n`ByteStr`.",27,null],[10,"concat","","Returns a new `Bytes` value representing the concatenation of `self`\nwith the given `Bytes`.",27,null],[10,"len","","Returns the number of bytes in the ByteStr",27,null],[11,"is_empty","","Returns true if the length of the `ByteStr` is 0",27,null],[10,"slice","","Returns a new ByteStr value containing the byte range between `begin`\n(inclusive) and `end` (exclusive)",27,null],[11,"slice_from","","Returns a new ByteStr value containing the byte range starting from\n`begin` (inclusive) to the end of the byte str.",27,null],[11,"slice_to","","Returns a new ByteStr value containing the byte range from the start up\nto `end` (exclusive).",27,null],[11,"split_at","","Divides the value into two `Bytes` at the given index.",27,null],[8,"ToBytes","","",null,null],[10,"to_bytes","","Consumes the value and returns a `Bytes` instance containing\nidentical bytes",28,null],[11,"eq","bytes","",24,null],[11,"ne","","",24,null],[11,"eq","","",25,null],[11,"ne","","",25,null],[11,"eq","","",22,null],[11,"ne","","",22,null],[11,"eq","","",23,null],[11,"ne","","",23,null],[0,"traits","","All traits are re-exported here to allow glob imports.",null,null],[11,"fmt","","",0,null],[11,"clone","","",0,null]],"paths":[[4,"BufError"],[3,"Heap"],[8,"Allocator"],[3,"MemRef"],[3,"Mem"],[3,"ByteBuf"],[3,"ROByteBuf"],[3,"MutByteBuf"],[3,"RingBuf"],[3,"SliceBuf"],[3,"MutSliceBuf"],[3,"Take"],[8,"Buf"],[8,"BufExt"],[8,"MutBuf"],[8,"MutBufExt"],[8,"Sink"],[8,"Source"],[3,"Box"],[3,"Cursor"],[3,"Vec"],[3,"RopeBuf"],[3,"Bytes"],[3,"Rope"],[3,"SeqByteStr"],[3,"SmallByteStr"],[3,"SmallByteStrBuf"],[8,"ByteStr"],[8,"ToBytes"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator.","items":[[0,"error","bitflags::__core","Traits for working with Errors.",null,null],[11,"is","","Returns true if the boxed type is the same as `T`",0,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",0,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",0,null],[11,"is","","Forwards to the method defined on the type `Any`.",0,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",0,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",0,null],[11,"is","","Forwards to the method defined on the type `Any`.",0,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",0,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",0,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",0,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",0,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",0,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"from","alloc::boxed","",1,{"inputs":[{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",1,{"inputs":[{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",1,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",1,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",1,{"inputs":[{"name":"str"}],"output":{"name":"box"}}],[11,"from","","",1,{"inputs":[{"name":"str"}],"output":{"name":"box"}}],[11,"description","core::str","",2,null],[11,"description","","",3,null],[11,"description","core::num","",4,null],[11,"description","","",5,null],[11,"description","core::num::dec2flt","",6,null],[11,"description","collections::string","",7,null],[11,"description","","",8,null],[11,"description","","",9,null],[11,"description","rustc_unicode::char","",10,null],[11,"description","alloc::boxed","",1,null],[11,"cause","","",1,null],[11,"next","std::ascii","",11,null],[11,"size_hint","","",11,null],[11,"next_back","","",11,null],[11,"clone","std::thread::local","",12,null],[11,"eq","","",12,null],[11,"with","","Acquires a reference to the value in this TLS key.",13,null],[11,"state","","Query the current state of this key.",13,null],[11,"new","std::thread::local::elf","",14,{"inputs":[],"output":{"name":"key"}}],[11,"get","","",14,null],[11,"new","std::thread::local::os","",15,{"inputs":[],"output":{"name":"key"}}],[11,"get","","",15,null],[11,"set","std::thread::scoped_tls","Inserts a value into this scoped thread local storage slot for a\nduration of a closure.",16,null],[11,"with","","Gets a value out of this scoped variable.",16,null],[11,"is_set","","Test whether this TLS key has been `set` for the current thread.",16,null],[11,"new","std::thread::scoped_tls::imp","",17,{"inputs":[],"output":{"name":"keyinner"}}],[11,"set","","",17,null],[11,"get","","",17,null],[11,"new","std::thread","Generates the base configuration for spawning a thread, from which\nconfiguration methods can be chained.",18,{"inputs":[],"output":{"name":"builder"}}],[11,"name","","Names the thread-to-be. Currently the name is used for identification\nonly in panic messages.",18,null],[11,"stack_size","","Sets the size of the stack for the new thread.",18,null],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",18,null],[11,"clone","","",19,null],[11,"unpark","","Atomically makes the handle&#39;s token available if it is not already.",19,null],[11,"name","","Gets the thread&#39;s name.",19,null],[11,"fmt","","",19,null],[11,"thread","","Extracts a handle to the underlying thread",20,null],[11,"join","","Waits for the associated thread to finish.",20,null],[11,"clone","std::collections::hash::map","",21,null],[11,"new","","Creates an empty HashMap.",21,{"inputs":[],"output":{"name":"hashmap"}}],[11,"with_capacity","","Creates an empty hash map with the given initial capacity.",21,{"inputs":[{"name":"usize"}],"output":{"name":"hashmap"}}],[11,"with_hasher","","Creates an empty hashmap which will use the given hash builder to hash\nkeys.",21,{"inputs":[{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_capacity_and_hasher","","Creates an empty HashMap with space for at least `capacity`\nelements, using `hasher` to hash the keys.",21,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"hasher","","Returns a reference to the map&#39;s hasher.",21,null],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",21,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashMap`. The collection may reserve more space to avoid\nfrequent reallocations.",21,null],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",21,null],[11,"keys","","An iterator visiting all keys in arbitrary order.\nIterator element type is `&amp;&#39;a K`.",21,null],[11,"values","","An iterator visiting all values in arbitrary order.\nIterator element type is `&amp;&#39;a V`.",21,null],[11,"values_mut","","An iterator visiting all values mutably in arbitrary order.\nIterator element type is `&amp;&#39;a mut V`.",21,null],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order.\nIterator element type is `(&amp;&#39;a K, &amp;&#39;a V)`.",21,null],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order,\nwith mutable references to the values.\nIterator element type is `(&amp;&#39;a K, &amp;&#39;a mut V)`.",21,null],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",21,null],[11,"len","","Returns the number of elements in the map.",21,null],[11,"is_empty","","Returns true if the map contains no elements.",21,null],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the\nallocated memory for reuse.",21,null],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory\nfor reuse.",21,null],[11,"get","","Returns a reference to the value corresponding to the key.",21,null],[11,"contains_key","","Returns true if the map contains a value for the specified key.",21,null],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",21,null],[11,"insert","","Inserts a key-value pair into the map.",21,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",21,null],[11,"eq","","",21,null],[11,"fmt","","",21,null],[11,"default","","",21,{"inputs":[],"output":{"name":"hashmap"}}],[11,"index","","",21,null],[11,"clone","","",22,null],[11,"clone","","",23,null],[11,"clone","","",24,null],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each key-value\npair out of the map in arbitrary order. The map cannot be used after\ncalling this.",21,null],[11,"next","","",22,null],[11,"size_hint","","",22,null],[11,"len","","",22,null],[11,"next","","",25,null],[11,"size_hint","","",25,null],[11,"len","","",25,null],[11,"next","","",26,null],[11,"size_hint","","",26,null],[11,"len","","",26,null],[11,"next","","",23,null],[11,"size_hint","","",23,null],[11,"len","","",23,null],[11,"next","","",24,null],[11,"size_hint","","",24,null],[11,"len","","",24,null],[11,"next","","",27,null],[11,"size_hint","","",27,null],[11,"len","","",27,null],[11,"next","","",28,null],[11,"size_hint","","",28,null],[11,"len","","",28,null],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",29,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",29,null],[11,"key","","Returns a reference to this entry&#39;s key.",29,null],[11,"key","","Gets a reference to the key in the entry.",30,null],[11,"get","","Gets a reference to the value in the entry.",30,null],[11,"get_mut","","Gets a mutable reference to the value in the entry.",30,null],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the map itself",30,null],[11,"insert","","Sets the value of the entry, and returns the entry&#39;s old value",30,null],[11,"remove","","Takes the value out of the entry, and returns it",30,null],[11,"key","","Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.",31,null],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it",31,null],[11,"from_iter","","",21,{"inputs":[{"name":"t"}],"output":{"name":"hashmap"}}],[11,"extend","","",21,null],[11,"extend","","",21,null],[11,"clone","","",32,null],[11,"new","","Constructs a new `RandomState` that is initialized with random keys.",32,{"inputs":[],"output":{"name":"randomstate"}}],[11,"build_hasher","","",32,null],[11,"default","","",32,{"inputs":[],"output":{"name":"randomstate"}}],[11,"clone","std::collections::hash::set","",33,null],[11,"new","","Creates an empty HashSet.",33,{"inputs":[],"output":{"name":"hashset"}}],[11,"with_capacity","","Creates an empty HashSet with space for at least `n` elements in\nthe hash table.",33,{"inputs":[{"name":"usize"}],"output":{"name":"hashset"}}],[11,"with_hasher","","Creates a new empty hash set which will use the given hasher to hash\nkeys.",33,{"inputs":[{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hasher","","Creates an empty HashSet with space for at least `capacity`\nelements in the hash table, using `hasher` to hash the keys.",33,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"hasher","","Returns a reference to the set&#39;s hasher.",33,null],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",33,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashSet`. The collection may reserve more space to avoid\nfrequent reallocations.",33,null],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",33,null],[11,"iter","","An iterator visiting all elements in arbitrary order.\nIterator element type is &amp;&#39;a T.",33,null],[11,"difference","","Visit the values representing the difference.",33,null],[11,"symmetric_difference","","Visit the values representing the symmetric difference.",33,null],[11,"intersection","","Visit the values representing the intersection.",33,null],[11,"union","","Visit the values representing the union.",33,null],[11,"len","","Returns the number of elements in the set.",33,null],[11,"is_empty","","Returns true if the set contains no elements.",33,null],[11,"drain","","Clears the set, returning all elements in an iterator.",33,null],[11,"clear","","Clears the set, removing all values.",33,null],[11,"contains","","Returns `true` if the set contains a value.",33,null],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",33,null],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",33,null],[11,"is_subset","","Returns `true` if the set is a subset of another.",33,null],[11,"is_superset","","Returns `true` if the set is a superset of another.",33,null],[11,"insert","","Adds a value to the set.",33,null],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",33,null],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",33,null],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",33,null],[11,"eq","","",33,null],[11,"fmt","","",33,null],[11,"from_iter","","",33,{"inputs":[{"name":"i"}],"output":{"name":"hashset"}}],[11,"extend","","",33,null],[11,"extend","","",33,null],[11,"default","","",33,{"inputs":[],"output":{"name":"hashset"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out\nof the set in arbitrary order. The set cannot be used after calling\nthis.",33,null],[11,"clone","","",34,null],[11,"next","","",34,null],[11,"size_hint","","",34,null],[11,"len","","",34,null],[11,"next","","",35,null],[11,"size_hint","","",35,null],[11,"len","","",35,null],[11,"next","","",36,null],[11,"size_hint","","",36,null],[11,"len","","",36,null],[11,"clone","","",37,null],[11,"next","","",37,null],[11,"size_hint","","",37,null],[11,"clone","","",38,null],[11,"next","","",38,null],[11,"size_hint","","",38,null],[11,"clone","","",39,null],[11,"next","","",39,null],[11,"size_hint","","",39,null],[11,"clone","","",40,null],[11,"next","","",40,null],[11,"size_hint","","",40,null],[11,"clone","collections::vec_deque","",41,null],[11,"drop","","",41,null],[11,"default","","",41,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",41,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",41,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",41,null],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",41,null],[11,"swap","","Swaps elements at indices `i` and `j`.",41,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",41,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",41,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",41,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",41,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",41,null],[11,"iter","","Returns a front-to-back iterator.",41,null],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",41,null],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",41,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",41,null],[11,"len","","Returns the number of elements in the `VecDeque`.",41,null],[11,"is_empty","","Returns true if the buffer contains no elements",41,null],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",41,null],[11,"clear","","Clears the buffer, removing all values.",41,null],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the\ngiven value.",41,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",41,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",41,null],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",41,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",41,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",41,null],[11,"push_front","","Inserts an element first in the sequence.",41,null],[11,"push_back","","Appends an element to the back of a buffer",41,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",41,null],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",41,null],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",41,null],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",41,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",41,null],[11,"split_off","","Splits the collection into two at the given index.",41,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",41,null],[11,"retain","","Retains only the elements specified by the predicate.",41,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",41,null],[11,"clone","","",42,null],[11,"next","","",42,null],[11,"size_hint","","",42,null],[11,"next_back","","",42,null],[11,"next","","",43,null],[11,"size_hint","","",43,null],[11,"next_back","","",43,null],[11,"clone","","",44,null],[11,"next","","",44,null],[11,"size_hint","","",44,null],[11,"next_back","","",44,null],[11,"drop","","",45,null],[11,"next","","",45,null],[11,"size_hint","","",45,null],[11,"next_back","","",45,null],[11,"eq","","",41,null],[11,"partial_cmp","","",41,null],[11,"cmp","","",41,null],[11,"hash","","",41,null],[11,"index","","",41,null],[11,"index_mut","","",41,null],[11,"from_iter","","",41,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",41,null],[11,"extend","","",41,null],[11,"extend","","",41,null],[11,"fmt","","",41,null],[11,"from","","",41,{"inputs":[{"name":"vec"}],"output":{"name":"vecdeque"}}],[11,"from","collections::vec","",46,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"clone","collections::binary_heap","",47,null],[11,"clone_from","","",47,null],[11,"default","","",47,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"fmt","","",47,null],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",47,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",47,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",47,null],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",47,null],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",47,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",47,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",47,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",47,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",47,null],[11,"push","","Pushes an item onto the binary heap.",47,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",47,null],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",47,null],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",47,null],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",47,null],[11,"len","","Returns the length of the binary heap.",47,null],[11,"is_empty","","Checks if the binary heap is empty.",47,null],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",47,null],[11,"clear","","Drops all items from the binary heap.",47,null],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",47,null],[11,"clone","","",48,null],[11,"next","","",48,null],[11,"size_hint","","",48,null],[11,"next_back","","",48,null],[11,"clone","","",49,null],[11,"next","","",49,null],[11,"size_hint","","",49,null],[11,"next_back","","",49,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next_back","","",50,null],[11,"from","","",47,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",46,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",47,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",47,null],[11,"extend","","",47,null],[11,"extend","","",47,null],[11,"clone","collections::linked_list","",51,null],[11,"clone","","",52,null],[11,"default","","",53,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",53,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",53,null],[11,"iter","","Provides a forward iterator.",53,null],[11,"iter_mut","","Provides a forward iterator with mutable references.",53,null],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",53,null],[11,"len","","Returns the length of the `LinkedList`.",53,null],[11,"clear","","Removes all elements from the `LinkedList`.",53,null],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the\ngiven value.",53,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",53,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",53,null],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",53,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",53,null],[11,"push_front","","Adds an element first in the list.",53,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",53,null],[11,"push_back","","Appends an element to the back of a list",53,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",53,null],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",53,null],[11,"front_place","","Returns a place for insertion at the front of the list.",53,null],[11,"back_place","","Returns a place for insertion at the back of the list.",53,null],[11,"drop","","",53,null],[11,"next","","",51,null],[11,"size_hint","","",51,null],[11,"next_back","","",51,null],[11,"next","","",54,null],[11,"size_hint","","",54,null],[11,"next_back","","",54,null],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",54,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",54,null],[11,"next","","",52,null],[11,"size_hint","","",52,null],[11,"next_back","","",52,null],[11,"from_iter","","",53,{"inputs":[{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",53,null],[11,"extend","","",53,null],[11,"extend","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"partial_cmp","","",53,null],[11,"cmp","","",53,null],[11,"clone","","",53,null],[11,"fmt","","",53,null],[11,"hash","","",53,null],[11,"make_place","","",55,null],[11,"pointer","","",55,null],[11,"finalize","","",55,null],[11,"make_place","","",56,null],[11,"pointer","","",56,null],[11,"finalize","","",56,null],[11,"next","std::env","",57,null],[11,"size_hint","","",57,null],[11,"next","","",58,null],[11,"size_hint","","",58,null],[11,"clone","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"fmt","","",59,null],[11,"fmt","","",59,null],[11,"description","","",59,null],[11,"next","","",60,null],[11,"size_hint","","",60,null],[11,"fmt","","",61,null],[11,"fmt","","",61,null],[11,"description","","",61,null],[11,"next","","",62,null],[11,"size_hint","","",62,null],[11,"len","","",62,null],[11,"next","","",63,null],[11,"size_hint","","",63,null],[11,"len","","",63,null],[11,"clone","std::ffi::c_str","",64,null],[11,"hash","","",64,null],[11,"cmp","","",64,null],[11,"partial_cmp","","",64,null],[11,"lt","","",64,null],[11,"le","","",64,null],[11,"gt","","",64,null],[11,"ge","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"hash","","",65,null],[11,"fmt","","",66,null],[11,"eq","","",66,null],[11,"ne","","",66,null],[11,"clone","","",66,null],[11,"fmt","","",67,null],[11,"eq","","",67,null],[11,"ne","","",67,null],[11,"clone","","",67,null],[11,"fmt","","",68,null],[11,"eq","","",68,null],[11,"ne","","",68,null],[11,"clone","","",68,null],[11,"new","","Creates a new C-compatible string from a container of bytes.",64,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"from_vec_unchecked","","Creates a C-compatible string from a byte vector without checking for\ninterior 0 bytes.",64,{"inputs":[{"name":"vec"}],"output":{"name":"cstring"}}],[11,"from_raw","","Retakes ownership of a `CString` that was transferred to C.",64,null],[11,"into_raw","","Transfers ownership of the string to a C caller.",64,null],[11,"into_string","","Converts the `CString` into a `String` if it contains valid Unicode data.",64,null],[11,"into_bytes","","Returns the underlying byte buffer.",64,null],[11,"into_bytes_with_nul","","Equivalent to the `into_bytes` function except that the returned vector\nincludes the trailing nul byte.",64,null],[11,"as_bytes","","Returns the contents of this `CString` as a slice of bytes.",64,null],[11,"as_bytes_with_nul","","Equivalent to the `as_bytes` function except that the returned slice\nincludes the trailing nul byte.",64,null],[11,"from_ptr","","Casts a raw C string to a safe C string wrapper.",65,null],[11,"from_bytes_with_nul","","Creates a C string wrapper from a byte slice.",65,null],[11,"from_bytes_with_nul_unchecked","","Unsafely creates a C string wrapper from a byte slice.",65,null],[11,"as_ptr","","Returns the inner pointer to this C string.",65,null],[11,"to_bytes","","Converts this C string to a byte slice.",65,null],[11,"to_bytes_with_nul","","Converts this C string to a byte slice containing the trailing 0 byte.",65,null],[11,"to_str","","Yields a `&amp;str` slice if the `CStr` contains valid UTF-8.",65,null],[11,"to_string_lossy","","Converts a `CStr` into a `Cow&lt;str&gt;`.",65,null],[11,"deref","","",64,null],[11,"fmt","","",64,null],[11,"from","collections::vec","",46,{"inputs":[{"name":"cstring"}],"output":{"name":"vec"}}],[11,"fmt","std::ffi::c_str","",65,null],[11,"default","","",64,{"inputs":[],"output":{"name":"cstring"}}],[11,"borrow","","",64,null],[11,"nul_position","","Returns the position of the nul byte in the slice that was provided to\n`CString::new`.",66,null],[11,"into_vec","","Consumes this error, returning the underlying vector of bytes which\ngenerated the error in the first place.",66,null],[11,"description","","",66,null],[11,"fmt","","",66,null],[11,"from","std::io::error","",69,{"inputs":[{"name":"nulerror"}],"output":{"name":"error"}}],[11,"into_cstring","std::ffi::c_str","Consumes this error, returning original `CString` which generated the\nerror.",68,null],[11,"utf8_error","","Access the underlying UTF-8 error that was the cause of this error.",68,null],[11,"description","","",68,null],[11,"cause","","",68,null],[11,"fmt","","",68,null],[11,"eq","","",65,null],[11,"partial_cmp","","",65,null],[11,"cmp","","",65,null],[11,"to_owned","","",65,null],[11,"from","","",64,{"inputs":[{"name":"cstr"}],"output":{"name":"cstring"}}],[11,"index","","",64,null],[11,"as_ref","","",65,null],[11,"as_ref","","",64,null],[11,"clone","std::ffi::os_str","",70,null],[11,"new","","Constructs a new empty `OsString`.",70,{"inputs":[],"output":{"name":"osstring"}}],[11,"as_os_str","","Converts to an `OsStr` slice.",70,null],[11,"into_string","","Converts the `OsString` into a `String` if it contains valid Unicode data.",70,null],[11,"push","","Extends the string with the given `&amp;OsStr` slice.",70,null],[11,"with_capacity","","Creates a new `OsString` with the given capacity.",70,{"inputs":[{"name":"usize"}],"output":{"name":"osstring"}}],[11,"clear","","Truncates the `OsString` to zero length.",70,null],[11,"capacity","","Returns the capacity this `OsString` can hold without reallocating.",70,null],[11,"reserve","","Reserves capacity for at least `additional` more capacity to be inserted\nin the given `OsString`.",70,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more capacity to\nbe inserted in the given `OsString`. Does nothing if the capacity is\nalready sufficient.",70,null],[11,"from","","",70,{"inputs":[{"name":"string"}],"output":{"name":"osstring"}}],[11,"from","","",70,{"inputs":[{"name":"t"}],"output":{"name":"osstring"}}],[11,"index","","",70,null],[11,"new","","Coerces into an `OsStr` slice.",71,{"inputs":[{"name":"s"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a `&amp;str` slice if the `OsStr` is valid Unicode.",71,null],[11,"to_string_lossy","","Converts an `OsStr` to a `Cow&lt;str&gt;`.",71,null],[11,"to_os_string","","Copies the slice into an owned `OsString`.",71,null],[11,"is_empty","","Checks whether the `OsStr` is empty.",71,null],[11,"len","","Returns the length of this `OsStr`.",71,null],[11,"deref","","",70,null],[11,"default","","",70,{"inputs":[],"output":{"name":"osstring"}}],[11,"fmt","","",70,null],[11,"eq","","",70,null],[11,"eq","","",70,null],[11,"partial_cmp","","",70,null],[11,"lt","","",70,null],[11,"le","","",70,null],[11,"gt","","",70,null],[11,"ge","","",70,null],[11,"partial_cmp","","",70,null],[11,"cmp","","",70,null],[11,"hash","","",70,null],[11,"eq","","",71,null],[11,"eq","","",71,null],[11,"partial_cmp","","",71,null],[11,"lt","","",71,null],[11,"le","","",71,null],[11,"gt","","",71,null],[11,"ge","","",71,null],[11,"partial_cmp","","",71,null],[11,"cmp","","",71,null],[11,"eq","","",70,null],[11,"eq","","",71,null],[11,"partial_cmp","","",70,null],[11,"partial_cmp","","",71,null],[11,"eq","","",70,null],[11,"partial_cmp","","",70,null],[11,"eq","collections::borrow","",72,null],[11,"eq","std::ffi::os_str","",71,null],[11,"partial_cmp","collections::borrow","",72,null],[11,"partial_cmp","std::ffi::os_str","",71,null],[11,"eq","collections::borrow","",72,null],[11,"partial_cmp","","",72,null],[11,"eq","","",72,null],[11,"eq","std::ffi::os_str","",70,null],[11,"partial_cmp","collections::borrow","",72,null],[11,"partial_cmp","std::ffi::os_str","",70,null],[11,"hash","","",71,null],[11,"fmt","","",71,null],[11,"borrow","","",70,null],[11,"to_owned","","",71,null],[11,"as_ref","","",71,null],[11,"as_ref","","",70,null],[11,"as_ref","collections::string","",73,null],[11,"clone","std::fs","",74,null],[11,"clone","","",75,null],[11,"fmt","","",76,null],[11,"eq","","",76,null],[11,"ne","","",76,null],[11,"clone","","",76,null],[11,"hash","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"clone","","",77,null],[11,"open","","Attempts to open a file in read-only mode.",78,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"create","","Opens a file in write-only mode.",78,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"sync_all","","Attempts to sync all OS-internal metadata to disk.",78,null],[11,"sync_data","","This function is similar to `sync_all`, except that it may not\nsynchronize file metadata to the filesystem.",78,null],[11,"set_len","","Truncates or extends the underlying file, updating the size of\nthis file to become `size`.",78,null],[11,"metadata","","Queries metadata about the underlying file.",78,null],[11,"try_clone","","Creates a new independently owned handle to the underlying file.",78,null],[11,"fmt","","",78,null],[11,"read","","",78,null],[11,"read_to_end","","",78,null],[11,"write","","",78,null],[11,"flush","","",78,null],[11,"seek","","",78,null],[11,"new","","Creates a blank new set of options ready for configuration.",75,{"inputs":[],"output":{"name":"openoptions"}}],[11,"read","","Sets the option for read access.",75,null],[11,"write","","Sets the option for write access.",75,null],[11,"append","","Sets the option for the append mode.",75,null],[11,"truncate","","Sets the option for truncating a previous file.",75,null],[11,"create","","Sets the option for creating a new file.",75,null],[11,"create_new","","Sets the option to always create a new file.",75,null],[11,"open","","Opens a file at `path` with the options specified by `self`.",75,null],[11,"file_type","","Returns the file type for this metadata.",74,null],[11,"is_dir","","Returns whether this metadata is for a directory.",74,null],[11,"is_file","","Returns whether this metadata is for a regular file.",74,null],[11,"len","","Returns the size of the file, in bytes, this metadata is for.",74,null],[11,"permissions","","Returns the permissions of the file this metadata is for.",74,null],[11,"modified","","Returns the last modification time listed in this metadata.",74,null],[11,"accessed","","Returns the last access time of this metadata.",74,null],[11,"created","","Returns the creation time listed in the this metadata.",74,null],[11,"readonly","","Returns whether these permissions describe a readonly file.",76,null],[11,"set_readonly","","Modifies the readonly flag for this set of permissions.",76,null],[11,"is_dir","","Test whether this file type represents a directory.",77,null],[11,"is_file","","Test whether this file type represents a regular file.",77,null],[11,"is_symlink","","Test whether this file type represents a symbolic link.",77,null],[11,"next","","",79,null],[11,"path","","Returns the full path to the file that this entry represents.",80,null],[11,"metadata","","Return the metadata for the file that this entry points at.",80,null],[11,"file_type","","Return the file type for the file that this entry points at.",80,null],[11,"file_name","","Returns the bare file name of this directory entry without any other\nleading path component.",80,null],[11,"new","","Creates a new set of options with default mode/security settings for all\nplatforms and also non-recursive.",81,{"inputs":[],"output":{"name":"dirbuilder"}}],[11,"recursive","","Indicate that directories create should be created recursively, creating\nall parent directories if they do not exist with the same security and\npermissions settings.",81,null],[11,"create","","Create the specified directory with the options configured in this\nbuilder.",81,null],[11,"new","std::io::buffered","Creates a new `BufReader` with a default buffer capacity.",82,{"inputs":[{"name":"r"}],"output":{"name":"bufreader"}}],[11,"with_capacity","","Creates a new `BufReader` with the specified buffer capacity.",82,{"inputs":[{"name":"usize"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"get_ref","","Gets a reference to the underlying reader.",82,null],[11,"get_mut","","Gets a mutable reference to the underlying reader.",82,null],[11,"into_inner","","Unwraps this `BufReader`, returning the underlying reader.",82,null],[11,"read","","",82,null],[11,"fill_buf","","",82,null],[11,"consume","","",82,null],[11,"fmt","","",82,null],[11,"seek","","Seek to an offset, in bytes, in the underlying reader.",82,null],[11,"fmt","","",83,null],[11,"new","","Creates a new `BufWriter` with a default buffer capacity.",84,{"inputs":[{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"with_capacity","","Creates a new `BufWriter` with the specified buffer capacity.",84,{"inputs":[{"name":"usize"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",84,null],[11,"get_mut","","Gets a mutable reference to the underlying writer.",84,null],[11,"into_inner","","Unwraps this `BufWriter`, returning the underlying writer.",84,null],[11,"write","","",84,null],[11,"flush","","",84,null],[11,"fmt","","",84,null],[11,"seek","","Seek to the offset, in bytes, in the underlying writer.",84,null],[11,"drop","","",84,null],[11,"error","","Returns the error which caused the call to `into_inner()` to fail.",83,null],[11,"into_inner","","Returns the buffered writer instance which generated the error.",83,null],[11,"from","std::io::error","",69,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"description","std::io::buffered","",83,null],[11,"fmt","","",83,null],[11,"new","","Creates a new `LineWriter`.",85,{"inputs":[{"name":"w"}],"output":{"name":"linewriter"}}],[11,"with_capacity","","Creates a new `LineWriter` with a specified capacity for the internal\nbuffer.",85,{"inputs":[{"name":"usize"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",85,null],[11,"get_mut","","Gets a mutable reference to the underlying writer.",85,null],[11,"into_inner","","Unwraps this `LineWriter`, returning the underlying writer.",85,null],[11,"write","","",85,null],[11,"flush","","",85,null],[11,"fmt","","",85,null],[11,"fmt","std::io::cursor","",86,null],[11,"clone","","",86,null],[11,"new","","Creates a new cursor wrapping the provided underlying I/O object.",86,{"inputs":[{"name":"t"}],"output":{"name":"cursor"}}],[11,"into_inner","","Consumes this cursor, returning the underlying value.",86,null],[11,"get_ref","","Gets a reference to the underlying value in this cursor.",86,null],[11,"get_mut","","Gets a mutable reference to the underlying value in this cursor.",86,null],[11,"position","","Returns the current position of this cursor.",86,null],[11,"set_position","","Sets the position of this cursor.",86,null],[11,"seek","","",86,null],[11,"read","","",86,null],[11,"fill_buf","","",86,null],[11,"consume","","",86,null],[11,"write","","",86,null],[11,"flush","","",86,null],[11,"write","","",86,null],[11,"flush","","",86,null],[11,"write","","",86,null],[11,"flush","","",86,null],[11,"fmt","std::io::error","",69,null],[11,"fmt","","",87,null],[11,"clone","","",87,null],[11,"eq","","",87,null],[11,"new","","Creates a new I/O error from a known kind of error as well as an\narbitrary error payload.",69,{"inputs":[{"name":"errorkind"},{"name":"e"}],"output":{"name":"error"}}],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",69,{"inputs":[],"output":{"name":"error"}}],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",69,{"inputs":[{"name":"i32"}],"output":{"name":"error"}}],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",69,null],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",69,null],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error\n(if any).",69,null],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",69,null],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",69,null],[11,"fmt","","",69,null],[11,"description","","",69,null],[11,"cause","","",69,null],[11,"read","alloc::boxed","",1,null],[11,"read_to_end","","",1,null],[11,"read_to_string","","",1,null],[11,"read_exact","","",1,null],[11,"write","","",1,null],[11,"flush","","",1,null],[11,"write_all","","",1,null],[11,"write_fmt","","",1,null],[11,"seek","","",1,null],[11,"fill_buf","","",1,null],[11,"consume","","",1,null],[11,"read_until","","",1,null],[11,"read_line","","",1,null],[11,"write","collections::vec","",46,null],[11,"write_all","","",46,null],[11,"flush","","",46,null],[11,"read","std::io::util","",88,null],[11,"fill_buf","","",88,null],[11,"consume","","",88,null],[11,"read","","",89,null],[11,"write","","",90,null],[11,"flush","","",90,null],[11,"lock","std::io::stdio","Locks this handle to the standard input stream, returning a readable\nguard.",91,null],[11,"read_line","","Locks this handle and reads a line of input into the specified buffer.",91,null],[11,"read","","",91,null],[11,"read_to_end","","",91,null],[11,"read_to_string","","",91,null],[11,"read_exact","","",91,null],[11,"read","","",92,null],[11,"read_to_end","","",92,null],[11,"fill_buf","","",92,null],[11,"consume","","",92,null],[11,"lock","","Locks this handle to the standard output stream, returning a writable\nguard.",93,null],[11,"write","","",93,null],[11,"flush","","",93,null],[11,"write_all","","",93,null],[11,"write_fmt","","",93,null],[11,"write","","",94,null],[11,"flush","","",94,null],[11,"lock","","Locks this handle to the standard error stream, returning a writable\nguard.",95,null],[11,"write","","",95,null],[11,"flush","","",95,null],[11,"write_all","","",95,null],[11,"write_fmt","","",95,null],[11,"write","","",96,null],[11,"flush","","",96,null],[11,"fmt","std::io","",97,null],[11,"clone","","",97,null],[11,"eq","","",97,null],[11,"ne","","",97,null],[11,"read","","",98,null],[11,"fill_buf","","",98,null],[11,"consume","","",98,null],[11,"limit","","Returns the number of bytes that can be read before this instance will\nreturn EOF.",99,null],[11,"read","","",99,null],[11,"fill_buf","","",99,null],[11,"consume","","",99,null],[11,"next","","",100,null],[11,"fmt","","",101,null],[11,"next","","",102,null],[11,"description","","",101,null],[11,"cause","","",101,null],[11,"fmt","","",101,null],[11,"next","","",103,null],[11,"next","","",104,null],[11,"cmp","std::net::ip","",105,null],[11,"partial_cmp","","",105,null],[11,"lt","","",105,null],[11,"le","","",105,null],[11,"gt","","",105,null],[11,"ge","","",105,null],[11,"hash","","",105,null],[11,"fmt","","",105,null],[11,"eq","","",105,null],[11,"ne","","",105,null],[11,"clone","","",105,null],[11,"fmt","","",106,null],[11,"hash","","",106,null],[11,"clone","","",106,null],[11,"eq","","",106,null],[11,"new","","Creates a new IPv4 address from four eight-bit octets.",107,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"octets","","Returns the four eight-bit integers that make up this address.",107,null],[11,"is_unspecified","","Returns true for the special &#39;unspecified&#39; address 0.0.0.0.",107,null],[11,"is_loopback","","Returns true if this is a loopback address (127.0.0.0/8).",107,null],[11,"is_private","","Returns true if this is a private address.",107,null],[11,"is_link_local","","Returns true if the address is link-local (169.254.0.0/16).",107,null],[11,"is_global","","Returns true if the address appears to be globally routable.\nSee [iana-ipv4-special-registry][ipv4-sr].\n[ipv4-sr]: http://goo.gl/RaZ7lg",107,null],[11,"is_multicast","","Returns true if this is a multicast address.",107,null],[11,"is_broadcast","","Returns true if this is a broadcast address.",107,null],[11,"is_documentation","","Returns true if this address is in a range designated for documentation.",107,null],[11,"to_ipv6_compatible","","Converts this address to an IPv4-compatible IPv6 address.",107,null],[11,"to_ipv6_mapped","","Converts this address to an IPv4-mapped IPv6 address.",107,null],[11,"fmt","","",105,null],[11,"fmt","","",107,null],[11,"fmt","","",107,null],[11,"clone","","",107,null],[11,"eq","","",107,null],[11,"hash","","",107,null],[11,"partial_cmp","","",107,null],[11,"cmp","","",107,null],[11,"from","","",107,{"inputs":[{"name":"u32"}],"output":{"name":"ipv4addr"}}],[11,"from","","",107,null],[11,"new","","Creates a new IPv6 address from eight 16-bit segments.",108,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Returns the eight 16-bit segments that make up this address.",108,null],[11,"is_unspecified","","Returns true for the special &#39;unspecified&#39; address ::.",108,null],[11,"is_loopback","","Returns true if this is a loopback address (::1).",108,null],[11,"is_global","","Returns true if the address appears to be globally routable.",108,null],[11,"is_unique_local","","Returns true if this is a unique local address (IPv6).",108,null],[11,"is_unicast_link_local","","Returns true if the address is unicast and link-local (fe80::/10).",108,null],[11,"is_unicast_site_local","","Returns true if this is a deprecated unicast site-local address (IPv6\nfec0::/10).",108,null],[11,"is_documentation","","Returns true if this is an address reserved for documentation\nThis is defined to be 2001:db8::/32 in RFC 3849.",108,null],[11,"is_unicast_global","","Returns true if the address is a globally routable unicast address.",108,null],[11,"multicast_scope","","Returns the address&#39;s multicast scope if the address is multicast.",108,null],[11,"is_multicast","","Returns true if this is a multicast address.",108,null],[11,"to_ipv4","","Converts this address to an IPv4 address. Returns None if this address is\nneither IPv4-compatible or IPv4-mapped.",108,null],[11,"octets","","Returns the sixteen eight-bit integers the IPv6 address consists of.",108,null],[11,"fmt","","",108,null],[11,"fmt","","",108,null],[11,"clone","","",108,null],[11,"eq","","",108,null],[11,"hash","","",108,null],[11,"partial_cmp","","",108,null],[11,"cmp","","",108,null],[11,"from","","",108,null],[11,"fmt","std::net::addr","",109,null],[11,"hash","","",109,null],[11,"eq","","",109,null],[11,"ne","","",109,null],[11,"clone","","",109,null],[11,"new","","Creates a new socket address from the (ip, port) pair.",109,{"inputs":[{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"socketaddr"}}],[11,"ip","","Returns the IP address associated with this socket address.",109,null],[11,"set_ip","","Change the IP address associated with this socket address.",109,null],[11,"port","","Returns the port number associated with this socket address.",109,null],[11,"set_port","","Change the port number associated with this socket address.",109,null],[11,"new","","Creates a new socket address from the (ip, port) pair.",110,{"inputs":[{"name":"ipv4addr"},{"name":"u16"}],"output":{"name":"socketaddrv4"}}],[11,"ip","","Returns the IP address associated with this socket address.",110,null],[11,"set_ip","","Change the IP address associated with this socket address.",110,null],[11,"port","","Returns the port number associated with this socket address.",110,null],[11,"set_port","","Change the port number associated with this socket address.",110,null],[11,"new","","Creates a new socket address from the ip/port/flowinfo/scope_id\ncomponents.",111,{"inputs":[{"name":"ipv6addr"},{"name":"u16"},{"name":"u32"},{"name":"u32"}],"output":{"name":"socketaddrv6"}}],[11,"ip","","Returns the IP address associated with this socket address.",111,null],[11,"set_ip","","Change the IP address associated with this socket address.",111,null],[11,"port","","Returns the port number associated with this socket address.",111,null],[11,"set_port","","Change the port number associated with this socket address.",111,null],[11,"flowinfo","","Returns the flow information associated with this address,\ncorresponding to the `sin6_flowinfo` field in C.",111,null],[11,"set_flowinfo","","Change the flow information associated with this socket address.",111,null],[11,"scope_id","","Returns the scope ID associated with this address,\ncorresponding to the `sin6_scope_id` field in C.",111,null],[11,"set_scope_id","","Change the scope ID associated with this socket address.",111,null],[11,"fmt","","",109,null],[11,"fmt","","",110,null],[11,"fmt","","",110,null],[11,"fmt","","",111,null],[11,"fmt","","",111,null],[11,"clone","","",110,null],[11,"clone","","",111,null],[11,"eq","","",110,null],[11,"eq","","",111,null],[11,"hash","","",110,null],[11,"hash","","",111,null],[11,"to_socket_addrs","","",109,null],[11,"to_socket_addrs","","",110,null],[11,"to_socket_addrs","","",111,null],[11,"connect","std::net::tcp","Opens a TCP connection to a remote host.",112,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",112,null],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",112,null],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",112,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",112,null],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",112,null],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",112,null],[11,"read_timeout","","Returns the read timeout of this socket.",112,null],[11,"write_timeout","","Returns the write timeout of this socket.",112,null],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",112,null],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",112,null],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",112,null],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",112,null],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",112,null],[11,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",112,null],[11,"read","","",112,null],[11,"read_to_end","","",112,null],[11,"write","","",112,null],[11,"flush","","",112,null],[11,"fmt","","",112,null],[11,"bind","","Creates a new `TcpListener` which will be bound to the specified\naddress.",113,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the local socket address of this listener.",113,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",113,null],[11,"accept","","Accept a new incoming connection from this listener.",113,null],[11,"incoming","","Returns an iterator over the connections being received on this\nlistener.",113,null],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",113,null],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",113,null],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",113,null],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",113,null],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",113,null],[11,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",113,null],[11,"next","","",114,null],[11,"fmt","","",113,null],[11,"bind","std::net::udp","Creates a UDP socket from the given address.",115,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.",115,null],[11,"send_to","","Sends data on the socket to the given address. On success, returns the\nnumber of bytes written.",115,null],[11,"local_addr","","Returns the socket address that this socket was created from.",115,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",115,null],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",115,null],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",115,null],[11,"read_timeout","","Returns the read timeout of this socket.",115,null],[11,"write_timeout","","Returns the write timeout of this socket.",115,null],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",115,null],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",115,null],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",115,null],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",115,null],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",115,null],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",115,null],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",115,null],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",115,null],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",115,null],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",115,null],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",115,null],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",115,null],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",115,null],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",115,null],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",115,null],[11,"connect","","Connects this UDP socket to a remote address, allowing the `send` and\n`recv` syscalls to be used to send data and also applies filters to only\nreceive data from the specified address.",115,null],[11,"send","","Sends data on the socket to the remote address to which it is connected.",115,null],[11,"recv","","Receives data on the socket from the remote address to which it is\nconnected.",115,null],[11,"set_nonblocking","","Moves this UDP socket into or out of nonblocking mode.",115,null],[11,"fmt","","",115,null],[11,"from_str","std::net::ip","",105,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",107,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",108,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","std::net::addr","",110,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",111,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",109,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","std::net::parser","",116,null],[11,"ne","","",116,null],[11,"clone","","",116,null],[11,"fmt","","",116,null],[11,"fmt","","",116,null],[11,"description","","",116,null],[11,"fmt","std::net","",117,null],[11,"eq","","",117,null],[11,"clone","","",117,null],[11,"next","","",118,null],[11,"clone","std::os::linux::raw::arch","",119,null],[11,"as_raw_stat","std::fs","",74,null],[11,"st_dev","","",74,null],[11,"st_ino","","",74,null],[11,"st_mode","","",74,null],[11,"st_nlink","","",74,null],[11,"st_uid","","",74,null],[11,"st_gid","","",74,null],[11,"st_rdev","","",74,null],[11,"st_size","","",74,null],[11,"st_atime","","",74,null],[11,"st_atime_nsec","","",74,null],[11,"st_mtime","","",74,null],[11,"st_mtime_nsec","","",74,null],[11,"st_ctime","","",74,null],[11,"st_ctime_nsec","","",74,null],[11,"st_blksize","","",74,null],[11,"st_blocks","","",74,null],[11,"as_raw_fd","","",78,null],[11,"from_raw_fd","","",78,{"inputs":[{"name":"i32"}],"output":{"name":"file"}}],[11,"into_raw_fd","","",78,null],[11,"as_raw_fd","std::net::tcp","",112,null],[11,"as_raw_fd","","",113,null],[11,"as_raw_fd","std::net::udp","",115,null],[11,"from_raw_fd","std::net::tcp","",112,{"inputs":[{"name":"i32"}],"output":{"name":"tcpstream"}}],[11,"from_raw_fd","","",113,{"inputs":[{"name":"i32"}],"output":{"name":"tcplistener"}}],[11,"from_raw_fd","std::net::udp","",115,{"inputs":[{"name":"i32"}],"output":{"name":"udpsocket"}}],[11,"into_raw_fd","std::net::tcp","",112,null],[11,"into_raw_fd","","",113,null],[11,"into_raw_fd","std::net::udp","",115,null],[11,"from_vec","std::ffi::os_str","",70,{"inputs":[{"name":"vec"}],"output":{"name":"osstring"}}],[11,"into_vec","","",70,null],[11,"from_bytes","","",71,null],[11,"as_bytes","","",71,null],[11,"mode","std::fs","",76,null],[11,"set_mode","","",76,null],[11,"from_mode","","",76,{"inputs":[{"name":"u32"}],"output":{"name":"permissions"}}],[11,"mode","","",75,null],[11,"custom_flags","","",75,null],[11,"dev","","",74,null],[11,"ino","","",74,null],[11,"mode","","",74,null],[11,"nlink","","",74,null],[11,"uid","","",74,null],[11,"gid","","",74,null],[11,"rdev","","",74,null],[11,"size","","",74,null],[11,"atime","","",74,null],[11,"atime_nsec","","",74,null],[11,"mtime","","",74,null],[11,"mtime_nsec","","",74,null],[11,"ctime","","",74,null],[11,"ctime_nsec","","",74,null],[11,"blksize","","",74,null],[11,"blocks","","",74,null],[11,"is_block_device","","",77,null],[11,"is_char_device","","",77,null],[11,"is_fifo","","",77,null],[11,"is_socket","","",77,null],[11,"ino","","",80,null],[11,"mode","","",81,null],[11,"uid","std::process","",120,null],[11,"gid","","",120,null],[11,"session_leader","","",120,null],[11,"before_exec","","",120,null],[11,"exec","","",120,null],[11,"from_raw","","",121,{"inputs":[{"name":"i32"}],"output":{"name":"exitstatus"}}],[11,"signal","","",121,null],[11,"from_raw_fd","","",122,{"inputs":[{"name":"i32"}],"output":{"name":"stdio"}}],[11,"as_raw_fd","","",123,null],[11,"as_raw_fd","","",124,null],[11,"as_raw_fd","","",125,null],[11,"into_raw_fd","","",123,null],[11,"into_raw_fd","","",124,null],[11,"into_raw_fd","","",125,null],[11,"as_pthread_t","std::thread","",20,null],[11,"into_pthread_t","","",20,null],[11,"clone","std::sys::ext::net","",126,null],[11,"is_unnamed","","Returns true iff the address is unnamed.",126,null],[11,"as_pathname","","Returns the contents of this address if it is a `pathname` address.",126,null],[11,"fmt","","",126,null],[11,"fmt","","",127,null],[11,"connect","","Connects to the socket named by `path`.",127,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"pair","","Creates an unnamed pair of connected sockets.",127,{"inputs":[],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",127,null],[11,"local_addr","","Returns the socket address of the local half of this connection.",127,null],[11,"peer_addr","","Returns the socket address of the remote half of this connection.",127,null],[11,"set_read_timeout","","Sets the read timeout for the socket.",127,null],[11,"set_write_timeout","","Sets the write timeout for the socket.",127,null],[11,"read_timeout","","Returns the read timeout of this socket.",127,null],[11,"write_timeout","","Returns the write timeout of this socket.",127,null],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",127,null],[11,"take_error","","Returns the value of the `SO_ERROR` option.",127,null],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",127,null],[11,"read","","",127,null],[11,"read_to_end","","",127,null],[11,"write","","",127,null],[11,"flush","","",127,null],[11,"as_raw_fd","","",127,null],[11,"from_raw_fd","","",127,{"inputs":[{"name":"i32"}],"output":{"name":"unixstream"}}],[11,"into_raw_fd","","",127,null],[11,"fmt","","",128,null],[11,"bind","","Creates a new `UnixListener` bound to the specified socket.",128,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"accept","","Accepts a new incoming connection to this listener.",128,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",128,null],[11,"local_addr","","Returns the local socket address of this listener.",128,null],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",128,null],[11,"take_error","","Returns the value of the `SO_ERROR` option.",128,null],[11,"incoming","","Returns an iterator over incoming connections.",128,null],[11,"as_raw_fd","","",128,null],[11,"from_raw_fd","","",128,{"inputs":[{"name":"i32"}],"output":{"name":"unixlistener"}}],[11,"into_raw_fd","","",128,null],[11,"fmt","","",129,null],[11,"next","","",129,null],[11,"size_hint","","",129,null],[11,"fmt","","",130,null],[11,"bind","","Creates a Unix datagram socket bound to the given path.",130,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"unbound","","Creates a Unix Datagram socket which is not bound to any address.",130,{"inputs":[],"output":{"name":"result"}}],[11,"pair","","Create an unnamed pair of connected sockets.",130,{"inputs":[],"output":{"name":"result"}}],[11,"connect","","Connects the socket to the specified address.",130,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",130,null],[11,"local_addr","","Returns the address of this socket.",130,null],[11,"peer_addr","","Returns the address of this socket&#39;s peer.",130,null],[11,"recv_from","","Receives data from the socket.",130,null],[11,"recv","","Receives data from the socket.",130,null],[11,"send_to","","Sends data on the socket to the specified address.",130,null],[11,"send","","Sends data on the socket to the socket&#39;s peer.",130,null],[11,"set_read_timeout","","Sets the read timeout for the socket.",130,null],[11,"set_write_timeout","","Sets the write timeout for the socket.",130,null],[11,"read_timeout","","Returns the read timeout of this socket.",130,null],[11,"write_timeout","","Returns the write timeout of this socket.",130,null],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",130,null],[11,"take_error","","Returns the value of the `SO_ERROR` option.",130,null],[11,"shutdown","","Shut down the read, write, or both halves of this connection.",130,null],[11,"as_raw_fd","","",130,null],[11,"from_raw_fd","","",130,{"inputs":[{"name":"i32"}],"output":{"name":"unixdatagram"}}],[11,"into_raw_fd","","",130,null],[11,"deref","std::panic","",131,null],[11,"deref_mut","","",131,null],[11,"call_once","","",131,null],[11,"new","","Creates a new `AssertRecoverSafe` wrapper around the provided type.",132,{"inputs":[{"name":"t"}],"output":{"name":"assertrecoversafe"}}],[11,"into_inner","","Consumes the `AssertRecoverSafe`, returning the wrapped value.",132,null],[11,"deref","","",132,null],[11,"deref_mut","","",132,null],[11,"call_once","","",132,null],[11,"eq","std::path","",133,null],[11,"ne","","",133,null],[11,"cmp","","",133,null],[11,"partial_cmp","","",133,null],[11,"lt","","",133,null],[11,"le","","",133,null],[11,"gt","","",133,null],[11,"ge","","",133,null],[11,"hash","","",133,null],[11,"fmt","","",133,null],[11,"clone","","",133,null],[11,"is_verbatim","","Determines if the prefix is verbatim, i.e. begins with `\\\\?\\`.",133,null],[11,"fmt","","",134,null],[11,"clone","","",134,null],[11,"kind","","The parsed prefix data.",134,null],[11,"as_os_str","","The raw `OsStr` slice for this prefix.",134,null],[11,"eq","","",134,null],[11,"partial_cmp","","",134,null],[11,"cmp","","",134,null],[11,"hash","","",134,null],[11,"fmt","","",135,null],[11,"hash","","",135,null],[11,"cmp","","",135,null],[11,"partial_cmp","","",135,null],[11,"lt","","",135,null],[11,"le","","",135,null],[11,"gt","","",135,null],[11,"ge","","",135,null],[11,"eq","","",135,null],[11,"ne","","",135,null],[11,"clone","","",135,null],[11,"as_os_str","","Extracts the underlying `OsStr` slice",135,null],[11,"as_ref","","",135,null],[11,"clone","","",136,null],[11,"clone","","",137,null],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",136,null],[11,"as_ref","","",136,null],[11,"as_ref","","",136,null],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",137,null],[11,"as_ref","","",137,null],[11,"as_ref","","",137,null],[11,"next","","",137,null],[11,"next_back","","",137,null],[11,"next","","",136,null],[11,"next_back","","",136,null],[11,"eq","","",136,null],[11,"partial_cmp","","",136,null],[11,"cmp","","",136,null],[11,"clone","","",138,null],[11,"new","","Allocates an empty `PathBuf`.",138,{"inputs":[],"output":{"name":"pathbuf"}}],[11,"as_path","","Coerces to a `Path` slice.",138,null],[11,"push","","Extends `self` with `path`.",138,null],[11,"pop","","Truncate `self` to `self.parent()`.",138,null],[11,"set_file_name","","Updates `self.file_name()` to `file_name`.",138,null],[11,"set_extension","","Updates `self.extension()` to `extension`.",138,null],[11,"into_os_string","","Consumes the `PathBuf`, yielding its internal `OsString` storage.",138,null],[11,"from","","",138,{"inputs":[{"name":"t"}],"output":{"name":"pathbuf"}}],[11,"from","","",138,{"inputs":[{"name":"osstring"}],"output":{"name":"pathbuf"}}],[11,"from","","",138,{"inputs":[{"name":"string"}],"output":{"name":"pathbuf"}}],[11,"from_iter","","",138,{"inputs":[{"name":"i"}],"output":{"name":"pathbuf"}}],[11,"extend","","",138,null],[11,"fmt","","",138,null],[11,"new","","Directly wrap a string slice as a `Path` slice.",139,{"inputs":[{"name":"s"}],"output":{"name":"path"}}],[11,"as_os_str","","Yields the underlying `OsStr` slice.",139,null],[11,"to_str","","Yields a `&amp;str` slice if the `Path` is valid unicode.",139,null],[11,"to_string_lossy","","Converts a `Path` to a `Cow&lt;str&gt;`.",139,null],[11,"to_path_buf","","Converts a `Path` to an owned `PathBuf`.",139,null],[11,"is_absolute","","A path is *absolute* if it is independent of the current directory.",139,null],[11,"is_relative","","A path is *relative* if it is not absolute.",139,null],[11,"has_root","","A path has a root if the body of the path begins with the directory separator.",139,null],[11,"parent","","The path without its final component, if any.",139,null],[11,"file_name","","The final component of the path, if it is a normal file.",139,null],[11,"strip_prefix","","Returns a path that, when joined onto `base`, yields `self`.",139,null],[11,"starts_with","","Determines whether `base` is a prefix of `self`.",139,null],[11,"ends_with","","Determines whether `child` is a suffix of `self`.",139,null],[11,"file_stem","","Extracts the stem (non-extension) portion of `self.file_name()`.",139,null],[11,"extension","","Extracts the extension of `self.file_name()`, if possible.",139,null],[11,"join","","Creates an owned `PathBuf` with `path` adjoined to `self`.",139,null],[11,"with_file_name","","Creates an owned `PathBuf` like `self` but with the given file name.",139,null],[11,"with_extension","","Creates an owned `PathBuf` like `self` but with the given extension.",139,null],[11,"components","","Produce an iterator over the components of the path.",139,null],[11,"iter","","Produce an iterator over the path&#39;s components viewed as `OsStr` slices.",139,null],[11,"display","","Returns an object that implements `Display` for safely printing paths\nthat may contain non-Unicode data.",139,null],[11,"metadata","","Query the file system to get information about a file, directory, etc.",139,null],[11,"symlink_metadata","","Query the metadata about a file without following symlinks.",139,null],[11,"canonicalize","","Returns the canonical form of the path with all intermediate components\nnormalized and symbolic links resolved.",139,null],[11,"read_link","","Reads a symbolic link, returning the file that the link points to.",139,null],[11,"read_dir","","Returns an iterator over the entries within a directory.",139,null],[11,"exists","","Returns whether the path points at an existing entity.",139,null],[11,"is_file","","Returns whether the path is pointing at a regular file.",139,null],[11,"is_dir","","Returns whether the path is pointing at a directory.",139,null],[11,"deref","","",138,null],[11,"borrow","","",138,null],[11,"from","collections::borrow","",72,{"inputs":[{"name":"path"}],"output":{"name":"cow"}}],[11,"from","","",72,{"inputs":[{"name":"pathbuf"}],"output":{"name":"cow"}}],[11,"to_owned","std::path","",139,null],[11,"eq","","",138,null],[11,"hash","","",138,null],[11,"partial_cmp","","",138,null],[11,"cmp","","",138,null],[11,"as_ref","","",138,null],[11,"into","","",138,null],[11,"eq","","",140,null],[11,"ne","","",140,null],[11,"clone","","",140,null],[11,"fmt","","",140,null],[11,"as_ref","","",139,null],[11,"fmt","","",139,null],[11,"fmt","","",141,null],[11,"fmt","","",141,null],[11,"eq","","",139,null],[11,"hash","","",139,null],[11,"partial_cmp","","",139,null],[11,"cmp","","",139,null],[11,"as_ref","","",139,null],[11,"as_ref","std::ffi::os_str","",71,null],[11,"as_ref","collections::borrow","",72,null],[11,"as_ref","std::ffi::os_str","",70,null],[11,"as_ref","collections::string","",73,null],[11,"as_ref","std::path","",138,null],[11,"eq","","",138,null],[11,"eq","","",139,null],[11,"partial_cmp","","",138,null],[11,"partial_cmp","","",139,null],[11,"eq","","",138,null],[11,"partial_cmp","","",138,null],[11,"eq","collections::borrow","",72,null],[11,"eq","std::path","",139,null],[11,"partial_cmp","collections::borrow","",72,null],[11,"partial_cmp","std::path","",139,null],[11,"eq","collections::borrow","",72,null],[11,"partial_cmp","","",72,null],[11,"eq","","",72,null],[11,"eq","std::path","",138,null],[11,"partial_cmp","collections::borrow","",72,null],[11,"partial_cmp","std::path","",138,null],[11,"eq","","",138,null],[11,"eq","std::ffi::os_str","",71,null],[11,"partial_cmp","std::path","",138,null],[11,"partial_cmp","std::ffi::os_str","",71,null],[11,"eq","std::path","",138,null],[11,"partial_cmp","","",138,null],[11,"eq","","",138,null],[11,"eq","collections::borrow","",72,null],[11,"partial_cmp","std::path","",138,null],[11,"partial_cmp","collections::borrow","",72,null],[11,"eq","std::path","",138,null],[11,"eq","std::ffi::os_str","",70,null],[11,"partial_cmp","std::path","",138,null],[11,"partial_cmp","std::ffi::os_str","",70,null],[11,"eq","std::path","",139,null],[11,"eq","std::ffi::os_str","",71,null],[11,"partial_cmp","std::path","",139,null],[11,"partial_cmp","std::ffi::os_str","",71,null],[11,"eq","std::path","",139,null],[11,"partial_cmp","","",139,null],[11,"eq","","",139,null],[11,"eq","collections::borrow","",72,null],[11,"partial_cmp","std::path","",139,null],[11,"partial_cmp","collections::borrow","",72,null],[11,"eq","std::path","",139,null],[11,"eq","std::ffi::os_str","",70,null],[11,"partial_cmp","std::path","",139,null],[11,"partial_cmp","std::ffi::os_str","",70,null],[11,"eq","","",71,null],[11,"partial_cmp","","",71,null],[11,"eq","collections::borrow","",72,null],[11,"partial_cmp","","",72,null],[11,"eq","std::ffi::os_str","",70,null],[11,"partial_cmp","","",70,null],[11,"eq","collections::borrow","",72,null],[11,"eq","std::ffi::os_str","",71,null],[11,"partial_cmp","collections::borrow","",72,null],[11,"partial_cmp","std::ffi::os_str","",71,null],[11,"eq","collections::borrow","",72,null],[11,"partial_cmp","","",72,null],[11,"eq","","",72,null],[11,"eq","std::ffi::os_str","",70,null],[11,"partial_cmp","collections::borrow","",72,null],[11,"partial_cmp","std::ffi::os_str","",70,null],[11,"fmt","std::path","",140,null],[11,"description","","",140,null],[11,"write","std::process","",123,null],[11,"flush","","",123,null],[11,"read","","",124,null],[11,"read_to_end","","",124,null],[11,"read","","",125,null],[11,"read_to_end","","",125,null],[11,"new","","Constructs a new `Command` for launching the program at\npath `program`, with the following default configuration:",120,{"inputs":[{"name":"s"}],"output":{"name":"command"}}],[11,"arg","","Add an argument to pass to the program.",120,null],[11,"args","","Add multiple arguments to pass to the program.",120,null],[11,"env","","Inserts or updates an environment variable mapping.",120,null],[11,"env_remove","","Removes an environment variable mapping.",120,null],[11,"env_clear","","Clears the entire environment map for the child process.",120,null],[11,"current_dir","","Sets the working directory for the child process.",120,null],[11,"stdin","","Configuration for the child process&#39;s stdin handle (file descriptor 0).",120,null],[11,"stdout","","Configuration for the child process&#39;s stdout handle (file descriptor 1).",120,null],[11,"stderr","","Configuration for the child process&#39;s stderr handle (file descriptor 2).",120,null],[11,"spawn","","Executes the command as a child process, returning a handle to it.",120,null],[11,"output","","Executes the command as a child process, waiting for it to finish and\ncollecting all of its output.",120,null],[11,"status","","Executes a command as a child process, waiting for it to finish and\ncollecting its exit status.",120,null],[11,"fmt","","Format the program and arguments of a Command for display. Any\nnon-utf8 data is lossily converted using the utf8 replacement\ncharacter.",120,null],[11,"clone","","",142,null],[11,"eq","","",142,null],[11,"ne","","",142,null],[11,"fmt","","",142,null],[11,"piped","","A new pipe should be arranged to connect the parent and child processes.",122,{"inputs":[],"output":{"name":"stdio"}}],[11,"inherit","","The child inherits from the corresponding parent descriptor.",122,{"inputs":[],"output":{"name":"stdio"}}],[11,"null","","This stream will be ignored. This is the equivalent of attaching the\nstream to `/dev/null`",122,{"inputs":[],"output":{"name":"stdio"}}],[11,"fmt","","",121,null],[11,"clone","","",121,null],[11,"eq","","",121,null],[11,"ne","","",121,null],[11,"success","","Was termination successful? Signal termination not considered a success,\nand success is defined as a zero exit status.",121,null],[11,"code","","Returns the exit code of the process, if any.",121,null],[11,"fmt","","",121,null],[11,"kill","","Forces the child to exit. This is equivalent to sending a\nSIGKILL on unix platforms.",143,null],[11,"id","","Returns the OS-assigned process identifier associated with this child.",143,null],[11,"wait","","Waits for the child to exit completely, returning the status that it\nexited with. This function will continue to have the same return value\nafter it has been called at least once.",143,null],[11,"wait_with_output","","Simultaneously waits for the child to exit and collect all remaining\noutput on the stdout/stderr handles, returning an `Output`\ninstance.",143,null],[11,"new","std::sync::mpsc::select","Creates a new selection structure. This set is initially empty.",144,{"inputs":[],"output":{"name":"select"}}],[11,"handle","","Creates a new handle into this receiver set for a new receiver. Note\nthat this does *not* add the receiver to the receiver set, for that you\nmust call the `add` method on the handle itself.",144,null],[11,"wait","","Waits for an event on this receiver set. The returned value is *not* an\nindex, but rather an id. This id can be queried against any active\n`Handle` structures (each one has an `id` method). The handle with\nthe matching `id` will have some sort of event available on it. The\nevent could either be that data is available or the corresponding\nchannel has been closed.",144,null],[11,"id","","Retrieves the id of this handle.",145,null],[11,"recv","","Blocks to receive a value on the underlying receiver, returning `Some` on\nsuccess or `None` if the channel disconnects. This function has the same\nsemantics as `Receiver.recv`",145,null],[11,"add","","Adds this handle to the receiver set that the handle was created from. This\nmethod can be called multiple times, but it has no effect if `add` was\ncalled previously.",145,null],[11,"remove","","Removes this handle from the `Select` set. This method is unsafe because\nit has no guarantee that the `Handle` was not moved since `add` was\ncalled.",145,null],[11,"drop","","",144,null],[11,"drop","","",145,null],[11,"fmt","","",144,null],[11,"fmt","","",145,null],[11,"clone","std::sync::mpsc","",146,null],[11,"eq","","",146,null],[11,"ne","","",146,null],[11,"fmt","","",147,null],[11,"clone","","",147,null],[11,"eq","","",147,null],[11,"fmt","","",148,null],[11,"clone","","",148,null],[11,"eq","","",148,null],[11,"clone","","",149,null],[11,"eq","","",149,null],[11,"ne","","",149,null],[11,"send","","Attempts to send a value on this channel, returning it back if it could\nnot be sent.",150,null],[11,"clone","","",150,null],[11,"drop","","",150,null],[11,"fmt","","",150,null],[11,"send","","Sends a value on this synchronous channel.",151,null],[11,"try_send","","Attempts to send a value on this channel without blocking.",151,null],[11,"clone","","",151,null],[11,"drop","","",151,null],[11,"fmt","","",151,null],[11,"try_recv","","Attempts to return a pending value on this receiver without blocking",152,null],[11,"recv","","Attempts to wait for a value on this receiver, returning an error if the\ncorresponding channel has hung up.",152,null],[11,"iter","","Returns an iterator that will block waiting for messages, but never\n`panic!`. It will return `None` when the channel has hung up.",152,null],[11,"next","","",153,null],[11,"next","","",154,null],[11,"into_iter","","",152,null],[11,"drop","","",152,null],[11,"fmt","","",152,null],[11,"fmt","","",146,null],[11,"fmt","","",146,null],[11,"description","","",146,null],[11,"cause","","",146,null],[11,"fmt","","",149,null],[11,"fmt","","",149,null],[11,"description","","",149,null],[11,"cause","","",149,null],[11,"fmt","","",147,null],[11,"description","","",147,null],[11,"cause","","",147,null],[11,"fmt","","",148,null],[11,"description","","",148,null],[11,"cause","","",148,null],[11,"new","std::sync::barrier","Creates a new barrier that can block a given number of threads.",155,{"inputs":[{"name":"usize"}],"output":{"name":"barrier"}}],[11,"wait","","Blocks the current thread until all threads have rendezvoused here.",155,null],[11,"is_leader","","Returns whether this thread from `wait` is the &quot;leader thread&quot;.",156,null],[11,"clone","std::sync::condvar","",157,null],[11,"eq","","",157,null],[11,"ne","","",157,null],[11,"fmt","","",157,null],[11,"timed_out","","Returns whether the wait was known to have timed out.",157,null],[11,"new","","Creates a new condition variable which is ready to be waited on and\nnotified.",158,{"inputs":[],"output":{"name":"condvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",158,null],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",158,null],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",158,null],[11,"notify_one","","Wakes up one blocked thread on this condvar.",158,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",158,null],[11,"default","","",158,{"inputs":[],"output":{"name":"condvar"}}],[11,"drop","","",158,null],[11,"new","","Creates a new condition variable",159,{"inputs":[],"output":{"name":"staticcondvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",159,null],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",159,null],[11,"wait_timeout_with","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",159,null],[11,"notify_one","","Wakes up one blocked thread on this condvar.",159,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",159,null],[11,"destroy","","Deallocates all resources associated with this static condvar.",159,null],[11,"new","std::sync::mutex","Creates a new mutex in an unlocked state ready for use.",160,{"inputs":[{"name":"t"}],"output":{"name":"mutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",160,null],[11,"try_lock","","Attempts to acquire this lock.",160,null],[11,"is_poisoned","","Determines whether the lock is poisoned.",160,null],[11,"into_inner","","Consumes this mutex, returning the underlying data.",160,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",160,null],[11,"drop","","",160,null],[11,"default","","",160,{"inputs":[],"output":{"name":"mutex"}}],[11,"fmt","","",160,null],[11,"new","","Creates a new mutex in an unlocked state ready for use.",161,{"inputs":[],"output":{"name":"staticmutex"}}],[11,"lock","","Acquires this lock, see `Mutex::lock`",161,null],[11,"try_lock","","Attempts to grab this lock, see `Mutex::try_lock`",161,null],[11,"destroy","","Deallocates resources associated with this static mutex.",161,null],[11,"deref","","",162,null],[11,"deref_mut","","",162,null],[11,"drop","","",162,null],[11,"new","std::sync::once","Creates a new `Once` value.",163,{"inputs":[],"output":{"name":"once"}}],[11,"call_once","","Performs an initialization routine once and only once. The given closure\nwill be executed if this is the first time `call_once` has been called,\nand otherwise the routine will *not* be invoked.",163,null],[11,"call_once_force","","Performs the same function as `call_once` except ignores poisoning.",163,null],[11,"poisoned","","Returns whether the associated `Once` has been poisoned.",164,null],[11,"new","std::sync::rwlock","Creates a new instance of an `RwLock&lt;T&gt;` which is unlocked.",165,{"inputs":[{"name":"t"}],"output":{"name":"rwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",165,null],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",165,null],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",165,null],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",165,null],[11,"is_poisoned","","Determines whether the lock is poisoned.",165,null],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",165,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",165,null],[11,"drop","","",165,null],[11,"fmt","","",165,null],[11,"default","","",165,{"inputs":[],"output":{"name":"rwlock"}}],[11,"new","","Creates a new rwlock.",166,{"inputs":[],"output":{"name":"staticrwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",166,null],[11,"try_read","","Attempts to acquire this lock with shared read access.",166,null],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",166,null],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",166,null],[11,"destroy","","Deallocates all resources associated with this static lock.",166,null],[11,"map","","Transform this guard to hold a sub-borrow of the original data.",167,{"inputs":[{"name":"rwlockreadguard"},{"name":"f"}],"output":{"name":"rwlockreadguard"}}],[11,"map","","Transform this guard to hold a sub-borrow of the original data.",168,{"inputs":[{"name":"rwlockwriteguard"},{"name":"f"}],"output":{"name":"rwlockwriteguard"}}],[11,"deref","","",167,null],[11,"deref","","",168,null],[11,"deref_mut","","",168,null],[11,"drop","","",167,null],[11,"drop","","",168,null],[11,"default","core::sync::atomic","",169,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",170,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",171,null],[11,"clone","","",171,null],[11,"new","","Creates a new `AtomicBool`.",169,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",169,null],[11,"store","","Stores a value into the bool.",169,null],[11,"swap","","Stores a value into the bool, returning the old value.",169,null],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",169,null],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",169,null],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",169,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",169,null],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",169,null],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",169,null],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",169,null],[11,"new","","Creates a new `AtomicPtr`.",170,null],[11,"load","","Loads a value from the pointer.",170,null],[11,"store","","Stores a value into the pointer.",170,null],[11,"swap","","Stores a value into the pointer, returning the old value.",170,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",170,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",170,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",170,null],[11,"default","","",172,{"inputs":[],"output":{"name":"atomici8"}}],[11,"fmt","","",172,null],[11,"new","","Creates a new atomic integer.",172,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"load","","Loads a value from the atomic integer.",172,null],[11,"store","","Stores a value into the atomic integer.",172,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",172,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",172,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",172,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",172,null],[11,"fetch_add","","Add to the current value, returning the previous value.",172,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",172,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",172,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",172,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",172,null],[11,"default","","",173,{"inputs":[],"output":{"name":"atomicu8"}}],[11,"fmt","","",173,null],[11,"new","","Creates a new atomic integer.",173,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"load","","Loads a value from the atomic integer.",173,null],[11,"store","","Stores a value into the atomic integer.",173,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",173,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",173,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",173,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",173,null],[11,"fetch_add","","Add to the current value, returning the previous value.",173,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",173,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",173,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",173,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",173,null],[11,"default","","",174,{"inputs":[],"output":{"name":"atomici16"}}],[11,"fmt","","",174,null],[11,"new","","Creates a new atomic integer.",174,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"load","","Loads a value from the atomic integer.",174,null],[11,"store","","Stores a value into the atomic integer.",174,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",174,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",174,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",174,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",174,null],[11,"fetch_add","","Add to the current value, returning the previous value.",174,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",174,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",174,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",174,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",174,null],[11,"default","","",175,{"inputs":[],"output":{"name":"atomicu16"}}],[11,"fmt","","",175,null],[11,"new","","Creates a new atomic integer.",175,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"load","","Loads a value from the atomic integer.",175,null],[11,"store","","Stores a value into the atomic integer.",175,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",175,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",175,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",175,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",175,null],[11,"fetch_add","","Add to the current value, returning the previous value.",175,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",175,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",175,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",175,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",175,null],[11,"default","","",176,{"inputs":[],"output":{"name":"atomici32"}}],[11,"fmt","","",176,null],[11,"new","","Creates a new atomic integer.",176,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"load","","Loads a value from the atomic integer.",176,null],[11,"store","","Stores a value into the atomic integer.",176,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",176,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",176,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",176,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",176,null],[11,"fetch_add","","Add to the current value, returning the previous value.",176,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",176,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",176,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",176,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",176,null],[11,"default","","",177,{"inputs":[],"output":{"name":"atomicu32"}}],[11,"fmt","","",177,null],[11,"new","","Creates a new atomic integer.",177,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"load","","Loads a value from the atomic integer.",177,null],[11,"store","","Stores a value into the atomic integer.",177,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",177,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",177,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",177,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",177,null],[11,"fetch_add","","Add to the current value, returning the previous value.",177,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",177,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",177,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",177,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",177,null],[11,"default","","",178,{"inputs":[],"output":{"name":"atomici64"}}],[11,"fmt","","",178,null],[11,"new","","Creates a new atomic integer.",178,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"load","","Loads a value from the atomic integer.",178,null],[11,"store","","Stores a value into the atomic integer.",178,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",178,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",178,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",178,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",178,null],[11,"fetch_add","","Add to the current value, returning the previous value.",178,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",178,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",178,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",178,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",178,null],[11,"default","","",179,{"inputs":[],"output":{"name":"atomicu64"}}],[11,"fmt","","",179,null],[11,"new","","Creates a new atomic integer.",179,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"load","","Loads a value from the atomic integer.",179,null],[11,"store","","Stores a value into the atomic integer.",179,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",179,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",179,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",179,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",179,null],[11,"fetch_add","","Add to the current value, returning the previous value.",179,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",179,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",179,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",179,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",179,null],[11,"default","","",180,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"fmt","","",180,null],[11,"new","","Creates a new atomic integer.",180,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the atomic integer.",180,null],[11,"store","","Stores a value into the atomic integer.",180,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",180,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",180,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",180,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",180,null],[11,"fetch_add","","Add to the current value, returning the previous value.",180,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",180,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",180,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",180,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",180,null],[11,"default","","",181,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"fmt","","",181,null],[11,"new","","Creates a new atomic integer.",181,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the atomic integer.",181,null],[11,"store","","Stores a value into the atomic integer.",181,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",181,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",181,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",181,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",181,null],[11,"fetch_add","","Add to the current value, returning the previous value.",181,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",181,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",181,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",181,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",181,null],[11,"fmt","","",169,null],[11,"fmt","","",170,null],[11,"hash","std::time::duration","",182,null],[11,"fmt","","",182,null],[11,"cmp","","",182,null],[11,"partial_cmp","","",182,null],[11,"lt","","",182,null],[11,"le","","",182,null],[11,"gt","","",182,null],[11,"ge","","",182,null],[11,"eq","","",182,null],[11,"ne","","",182,null],[11,"clone","","",182,null],[11,"new","","Creates a new `Duration` from the specified number of seconds and\nadditional nanosecond precision.",182,{"inputs":[{"name":"u64"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"from_secs","","Creates a new `Duration` from the specified number of seconds.",182,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"from_millis","","Creates a new `Duration` from the specified number of milliseconds.",182,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"as_secs","","Returns the number of whole seconds represented by this duration.",182,null],[11,"subsec_nanos","","Returns the nanosecond precision represented by this duration.",182,null],[11,"add","","",182,null],[11,"add_assign","","",182,null],[11,"sub","","",182,null],[11,"sub_assign","","",182,null],[11,"mul","","",182,null],[11,"mul_assign","","",182,null],[11,"div","","",182,null],[11,"div_assign","","",182,null],[11,"cmp","std::time","",183,null],[11,"partial_cmp","","",183,null],[11,"lt","","",183,null],[11,"le","","",183,null],[11,"gt","","",183,null],[11,"ge","","",183,null],[11,"eq","","",183,null],[11,"ne","","",183,null],[11,"clone","","",183,null],[11,"cmp","","",184,null],[11,"partial_cmp","","",184,null],[11,"lt","","",184,null],[11,"le","","",184,null],[11,"gt","","",184,null],[11,"ge","","",184,null],[11,"eq","","",184,null],[11,"ne","","",184,null],[11,"clone","","",184,null],[11,"fmt","","",185,null],[11,"clone","","",185,null],[11,"now","","Returns an instant corresponding to &quot;now&quot;.",183,{"inputs":[],"output":{"name":"instant"}}],[11,"duration_since","","Returns the amount of time elapsed from another instant to this one.",183,null],[11,"duration_from_earlier","","Deprecated, renamed to `duration_since`",183,null],[11,"elapsed","","Returns the amount of time elapsed since this instant was created.",183,null],[11,"add","","",183,null],[11,"add_assign","","",183,null],[11,"sub","","",183,null],[11,"sub_assign","","",183,null],[11,"sub","","",183,null],[11,"fmt","","",183,null],[11,"now","","Returns the system time corresponding to &quot;now&quot;.",184,{"inputs":[],"output":{"name":"systemtime"}}],[11,"duration_since","","Returns the amount of time elapsed from an earlier point in time.",184,null],[11,"duration_from_earlier","","Deprecated, renamed to `duration_since`",184,null],[11,"elapsed","","Returns the amount of time elapsed since this system time was created.",184,null],[11,"add","","",184,null],[11,"add_assign","","",184,null],[11,"sub","","",184,null],[11,"sub_assign","","",184,null],[11,"fmt","","",184,null],[11,"duration","","Returns the positive duration which represents how far forward the\nsecond system time was from the first.",185,null],[11,"description","","",185,null],[11,"fmt","","",185,null],[11,"fmt","std::sys_common::poison","",186,null],[11,"fmt","","",186,null],[11,"description","","",186,null],[11,"new","","Creates a `PoisonError`.",186,{"inputs":[{"name":"t"}],"output":{"name":"poisonerror"}}],[11,"into_inner","","Consumes this error indicating that a lock is poisoned, returning the\nunderlying guard to allow access regardless.",186,null],[11,"get_ref","","Reaches into this error indicating that a lock is poisoned, returning a\nreference to the underlying guard to allow access regardless.",186,null],[11,"get_mut","","Reaches into this error indicating that a lock is poisoned, returning a\nmutable reference to the underlying guard to allow access regardless.",186,null],[11,"from","","",187,{"inputs":[{"name":"poisonerror"}],"output":{"name":"trylockerror"}}],[11,"fmt","","",187,null],[11,"fmt","","",187,null],[11,"description","","",187,null],[11,"cause","","",187,null],[11,"clone","libc::unix","",188,null],[11,"clone","","",189,null],[11,"clone","","",190,null],[11,"clone","","",191,null],[11,"clone","","",192,null],[11,"clone","","",193,null],[11,"clone","","",194,null],[11,"clone","","",195,null],[11,"clone","","",196,null],[11,"clone","","",197,null],[11,"clone","","",198,null],[11,"clone","","",199,null],[11,"clone","","",200,null],[11,"clone","libc::unix::notbsd","",201,null],[11,"clone","","",202,null],[11,"clone","","",203,null],[11,"clone","","",204,null],[11,"clone","","",205,null],[11,"clone","","",206,null],[11,"clone","","",207,null],[11,"clone","","",208,null],[11,"clone","","",209,null],[11,"clone","","",210,null],[11,"clone","","",211,null],[11,"clone","","",212,null],[11,"clone","","",213,null],[11,"clone","","",214,null],[11,"clone","","",215,null],[11,"clone","libc::unix::notbsd::linux","",216,null],[11,"clone","","",217,null],[11,"clone","","",218,null],[11,"clone","","",219,null],[11,"clone","","",220,null],[11,"clone","","",221,null],[11,"clone","","",222,null],[11,"clone","","",223,null],[11,"clone","","",224,null],[11,"clone","","",225,null],[11,"clone","","",226,null],[11,"clone","","",227,null],[11,"clone","","",228,null],[11,"clone","","",229,null],[11,"clone","","",230,null],[11,"clone","","",231,null],[11,"clone","libc::unix::notbsd::linux::other","",232,null],[11,"clone","","",233,null],[11,"clone","","",234,null],[11,"clone","","",235,null],[11,"clone","","",236,null],[11,"clone","","",237,null],[11,"clone","","",238,null],[11,"clone","","",239,null],[11,"clone","","",240,null],[11,"clone","","",241,null],[11,"clone","","",242,null],[11,"clone","libc::unix::notbsd::linux::other::b64","",243,null],[11,"clone","libc::unix::notbsd::linux::other::b64::x86_64","",244,null],[11,"clone","","",245,null],[11,"clone","","",246,null],[11,"clone","","",247,null],[11,"clone","","",248,null],[11,"clone","","",249,null],[11,"clone","","",250,null],[11,"clone","","",251,null],[11,"payload","std::panicking","Returns the payload associated with the panic.",252,null],[11,"location","","Returns information about the location from which the panic originated,\nif available.",252,null],[11,"file","","Returns the name of the source file from which the panic originated.",253,null],[11,"line","","Returns the line number from which the panic originated.",253,null],[11,"clone","alloc::boxed","",254,null],[11,"pointer","","",255,null],[11,"make_place","","",255,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"finalize","","",255,null],[11,"finalize","","",1,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",254,null],[11,"drop","","",255,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",1,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",1,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box&#39;s contents.",1,null],[11,"clone_from","","Copies `source`&#39;s contents into `self` without creating a new allocation.",1,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"ge","","",1,null],[11,"gt","","",1,null],[11,"cmp","","",1,null],[11,"hash","","",1,null],[11,"from","","",1,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",1,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",1,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"next","","",1,null],[11,"size_hint","","",1,null],[11,"next_back","","",1,null],[11,"call_once","","",1,null],[11,"call_once","","",1,null],[11,"clone","","",1,null],[11,"borrow","","",1,null],[11,"borrow_mut","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"borrow","collections::borrow","",72,null],[11,"clone","","",72,null],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",72,null],[11,"into_owned","","Extracts the owned data.",72,null],[11,"deref","","",72,null],[11,"cmp","","",72,null],[11,"eq","","",72,null],[11,"partial_cmp","","",72,null],[11,"fmt","","",72,null],[11,"fmt","","",72,null],[11,"hash","","",72,null],[11,"as_ref","","",72,null],[11,"cmp","collections::string","",73,null],[11,"partial_cmp","","",73,null],[11,"lt","","",73,null],[11,"le","","",73,null],[11,"gt","","",73,null],[11,"ge","","",73,null],[11,"fmt","","",7,null],[11,"fmt","","",8,null],[11,"new","","Creates a new empty `String`.",73,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",73,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",73,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",73,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\nif `v` contains any invalid data.",73,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",73,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",73,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",73,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",73,null],[11,"as_str","","Extracts a string slice containing the entire string.",73,null],[11,"as_mut_str","","Extracts a string slice containing the entire string.",73,null],[11,"push_str","","Appends a given string slice onto the end of this `String`.",73,null],[11,"capacity","","Returns this `String`&#39;s capacity, in bytes.",73,null],[11,"reserve","","Ensures that this `String`&#39;s capacity is at least `additional` bytes\nlarger than its length.",73,null],[11,"reserve_exact","","Ensures that this `String`&#39;s capacity is `additional` bytes\nlarger than its length.",73,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",73,null],[11,"push","","Appends the given `char` to the end of this `String`.",73,null],[11,"as_bytes","","Returns a byte slice of this `String`&#39;s contents.",73,null],[11,"truncate","","Shortens this `String` to the specified length.",73,null],[11,"pop","","Removes the last character from the string buffer and returns it.",73,null],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",73,null],[11,"insert","","Inserts a character into this `String` at a byte position.",73,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",73,null],[11,"len","","Returns the length of this `String`, in bytes.",73,null],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",73,null],[11,"clear","","Truncates this `String`, removing all contents.",73,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",73,null],[11,"into_boxed_str","","Converts this `String` into a `Box&lt;str&gt;`.",73,null],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",7,null],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",7,null],[11,"fmt","","",7,null],[11,"fmt","","",8,null],[11,"clone","","",73,null],[11,"clone_from","","",73,null],[11,"from_iter","","",73,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",73,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",73,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",73,null],[11,"extend","","",73,null],[11,"extend","","",73,null],[11,"extend","","",73,null],[11,"eq","","",73,null],[11,"ne","","",73,null],[11,"eq","","",73,null],[11,"ne","","",73,null],[11,"eq","","",73,null],[11,"ne","","",73,null],[11,"eq","collections::borrow","",72,null],[11,"ne","","",72,null],[11,"eq","","",72,null],[11,"ne","","",72,null],[11,"eq","","",72,null],[11,"ne","","",72,null],[11,"eq","collections::string","",73,null],[11,"ne","","",73,null],[11,"default","","",73,{"inputs":[],"output":{"name":"string"}}],[11,"fmt","","",73,null],[11,"fmt","","",73,null],[11,"hash","","",73,null],[11,"add","","",73,null],[11,"index","","",73,null],[11,"index","","",73,null],[11,"index","","",73,null],[11,"index","","",73,null],[11,"index","","",73,null],[11,"index","","",73,null],[11,"index_mut","","",73,null],[11,"index_mut","","",73,null],[11,"index_mut","","",73,null],[11,"index_mut","","",73,null],[11,"index_mut","","",73,null],[11,"index_mut","","",73,null],[11,"deref","","",73,null],[11,"deref_mut","","",73,null],[11,"from_str","","",73,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",9,null],[11,"fmt","","",9,null],[11,"fmt","","",9,null],[11,"eq","","",9,null],[11,"as_ref","","",73,null],[11,"as_ref","","",73,null],[11,"from","","",73,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",72,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",72,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",73,null],[11,"write_str","","",73,null],[11,"write_char","","",73,null],[11,"drop","","",256,null],[11,"next","","",256,null],[11,"size_hint","","",256,null],[11,"next_back","","",256,null],[11,"borrow","collections::vec","",46,null],[11,"borrow_mut","","",46,null],[11,"fmt","core::hash::sip","",257,null],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",257,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",257,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",257,null],[11,"finish","","",257,null],[11,"clone","","",257,null],[11,"default","","",257,{"inputs":[],"output":{"name":"siphasher"}}],[11,"fmt","core::hash","",258,null],[11,"build_hasher","","",258,null],[11,"clone","","",258,null],[11,"default","","",258,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"hash","core::option","",259,null],[11,"fmt","","",259,null],[11,"cmp","","",259,null],[11,"partial_cmp","","",259,null],[11,"lt","","",259,null],[11,"le","","",259,null],[11,"gt","","",259,null],[11,"ge","","",259,null],[11,"eq","","",259,null],[11,"ne","","",259,null],[11,"clone","","",259,null],[11,"is_some","","Returns `true` if the option is a `Some` value",259,null],[11,"is_none","","Returns `true` if the option is a `None` value",259,null],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",259,null],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",259,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",259,null],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",259,null],[11,"unwrap_or","","Returns the contained value or a default.",259,null],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",259,null],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",259,null],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",259,null],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",259,null],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",259,null],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",259,null],[11,"iter","","Returns an iterator over the possibly contained value.",259,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",259,null],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",259,null],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",259,null],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",259,null],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",259,null],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",259,null],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",259,null],[11,"unwrap_or_default","","Returns the contained value or a default",259,null],[11,"default","","",259,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",259,null],[11,"fmt","","",260,null],[11,"next","","",260,null],[11,"size_hint","","",260,null],[11,"next_back","","",260,null],[11,"clone","","",260,null],[11,"fmt","","",261,null],[11,"next","","",261,null],[11,"size_hint","","",261,null],[11,"next_back","","",261,null],[11,"fmt","","",262,null],[11,"clone","","",262,null],[11,"next","","",262,null],[11,"size_hint","","",262,null],[11,"next_back","","",262,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",259,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"new","alloc::rc","Constructs a new `Rc&lt;T&gt;`.",263,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Rc&lt;T&gt;` has exactly one strong reference.",263,{"inputs":[{"name":"rc"}],"output":{"name":"result"}}],[11,"would_unwrap","","Checks if `Rc::try_unwrap` would return `Ok`.",263,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"downgrade","","Downgrades the `Rc&lt;T&gt;` to a `Weak&lt;T&gt;` reference.",263,{"inputs":[{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",263,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",263,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or `Weak&lt;T&gt;` values that share\nthe same inner value.",263,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Rc&lt;T&gt;` has\none strong reference and no weak references.",263,{"inputs":[{"name":"rc"}],"output":{"name":"option"}}],[11,"make_mut","","Make a mutable reference into the given `Rc&lt;T&gt;` by cloning the inner\ndata if the `Rc&lt;T&gt;` doesn&#39;t have one strong reference and no weak\nreferences.",263,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"deref","","",263,null],[11,"drop","","Drops the `Rc&lt;T&gt;`.",263,null],[11,"clone","","Makes a clone of the `Rc&lt;T&gt;`.",263,null],[11,"default","","Creates a new `Rc&lt;T&gt;`, with the `Default` value for `T`.",263,{"inputs":[],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc&lt;T&gt;`s.",263,null],[11,"ne","","Inequality for two `Rc&lt;T&gt;`s.",263,null],[11,"partial_cmp","","Partial comparison for two `Rc&lt;T&gt;`s.",263,null],[11,"lt","","Less-than comparison for two `Rc&lt;T&gt;`s.",263,null],[11,"le","","&#39;Less-than or equal to&#39; comparison for two `Rc&lt;T&gt;`s.",263,null],[11,"gt","","Greater-than comparison for two `Rc&lt;T&gt;`s.",263,null],[11,"ge","","&#39;Greater-than or equal to&#39; comparison for two `Rc&lt;T&gt;`s.",263,null],[11,"cmp","","Comparison for two `Rc&lt;T&gt;`s.",263,null],[11,"hash","","",263,null],[11,"fmt","","",263,null],[11,"fmt","","",263,null],[11,"fmt","","",263,null],[11,"from","","",263,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"new","","Constructs a new `Weak&lt;T&gt;` without an accompanying instance of T.",264,{"inputs":[],"output":{"name":"weak"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",264,null],[11,"drop","","Drops the `Weak&lt;T&gt;`.",264,null],[11,"clone","","Makes a clone of the `Weak&lt;T&gt;`.",264,null],[11,"fmt","","",264,null],[11,"default","","",264,{"inputs":[],"output":{"name":"weak"}}],[11,"borrow","","",263,null],[11,"as_ref","","",263,null],[11,"new","core::ptr","Creates a new `Unique`.",265,null],[11,"get","","Dereferences the content.",265,null],[11,"get_mut","","Mutably dereferences the content.",265,null],[11,"deref","","",265,null],[11,"fmt","","",265,null],[11,"new","","Creates a new `Shared`.",266,null],[11,"clone","","",266,null],[11,"deref","","",266,null],[11,"fmt","","",266,null],[11,"new","collections::vec","Constructs a new, empty `Vec&lt;T&gt;`.",46,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",46,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",46,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",46,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",46,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",46,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",46,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",46,null],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",46,null],[11,"as_slice","","Extracts a slice containing the entire vector.",46,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",46,null],[11,"set_len","","Sets the length of a vector.",46,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",46,null],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",46,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",46,null],[11,"retain","","Retains only the elements specified by the predicate.",46,null],[11,"push","","Appends an element to the back of a collection.",46,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",46,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",46,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",46,null],[11,"clear","","Clears the vector, removing all values.",46,null],[11,"len","","Returns the number of elements in the vector.",46,null],[11,"is_empty","","Returns `true` if the vector contains no elements.",46,null],[11,"split_off","","Splits the collection into two at the given index.",46,null],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",46,null],[11,"extend_from_slice","","Appends all elements in a slice to the `Vec`.",46,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",46,null],[11,"clone","","",46,null],[11,"clone_from","","",46,null],[11,"hash","","",46,null],[11,"index","","",46,null],[11,"index_mut","","",46,null],[11,"index","","",46,null],[11,"index","","",46,null],[11,"index","","",46,null],[11,"index","","",46,null],[11,"index","","",46,null],[11,"index","","",46,null],[11,"index_mut","","",46,null],[11,"index_mut","","",46,null],[11,"index_mut","","",46,null],[11,"index_mut","","",46,null],[11,"index_mut","","",46,null],[11,"index_mut","","",46,null],[11,"deref","","",46,null],[11,"deref_mut","","",46,null],[11,"from_iter","","",46,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",46,null],[11,"extend","","",46,null],[11,"extend","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","collections::borrow","",72,null],[11,"ne","","",72,null],[11,"eq","","",72,null],[11,"ne","","",72,null],[11,"eq","","",72,null],[11,"ne","","",72,null],[11,"eq","collections::vec","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"partial_cmp","","",46,null],[11,"cmp","","",46,null],[11,"drop","","",46,null],[11,"default","","",46,{"inputs":[],"output":{"name":"vec"}}],[11,"fmt","","",46,null],[11,"as_ref","","",46,null],[11,"as_mut","","",46,null],[11,"as_ref","","",46,null],[11,"as_mut","","",46,null],[11,"from","","",46,null],[11,"from","","",46,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","collections::borrow","",72,null],[11,"from","","",72,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from_iter","","",72,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"next","collections::vec","",267,null],[11,"size_hint","","",267,null],[11,"count","","",267,null],[11,"next_back","","",267,null],[11,"clone","","",267,null],[11,"drop","","",267,null],[11,"next","","",268,null],[11,"size_hint","","",268,null],[11,"next_back","","",268,null],[11,"drop","","",268,null],[11,"clone","core::raw","",269,null],[11,"clone","","",270,null],[11,"eq","core::ops","",271,null],[11,"clone","","",271,null],[11,"fmt","","",271,null],[11,"eq","","",272,null],[11,"ne","","",272,null],[11,"clone","","",272,null],[11,"fmt","","",272,null],[11,"contains","","# Examples",272,null],[11,"eq","","",273,null],[11,"ne","","",273,null],[11,"clone","","",273,null],[11,"fmt","","",273,null],[11,"contains","","# Examples",273,null],[11,"eq","","",274,null],[11,"ne","","",274,null],[11,"clone","","",274,null],[11,"fmt","","",274,null],[11,"contains","","# Examples",274,null],[11,"eq","","",275,null],[11,"ne","","",275,null],[11,"clone","","",275,null],[11,"fmt","","",275,null],[11,"from","","",275,{"inputs":[{"name":"range"}],"output":{"name":"rangeinclusive"}}],[11,"contains","","# Examples",275,null],[11,"eq","","",276,null],[11,"ne","","",276,null],[11,"clone","","",276,null],[11,"fmt","","",276,null],[11,"contains","","# Examples",276,null],[11,"fmt","bitflags::__core","",277,null],[11,"fmt","","",277,null],[11,"is","","Returns true if the boxed type is the same as `T`",277,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",277,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",277,null],[11,"is","","Forwards to the method defined on the type `Any`.",277,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",277,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",277,null],[11,"hash","core::any","",278,null],[11,"fmt","","",278,null],[11,"eq","","",278,null],[11,"ne","","",278,null],[11,"clone","","",278,null],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",278,{"inputs":[],"output":{"name":"typeid"}}],[11,"hash","core::result","",279,null],[11,"fmt","","",279,null],[11,"cmp","","",279,null],[11,"partial_cmp","","",279,null],[11,"lt","","",279,null],[11,"le","","",279,null],[11,"gt","","",279,null],[11,"ge","","",279,null],[11,"eq","","",279,null],[11,"ne","","",279,null],[11,"clone","","",279,null],[11,"is_ok","","Returns true if the result is `Ok`",279,null],[11,"is_err","","Returns true if the result is `Err`",279,null],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",279,null],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",279,null],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",279,null],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",279,null],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",279,null],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",279,null],[11,"iter","","Returns an iterator over the possibly contained value.",279,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",279,null],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",279,null],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",279,null],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",279,null],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",279,null],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",279,null],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",279,null],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",279,null],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",279,null],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",279,null],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",279,null],[11,"fmt","","",280,null],[11,"next","","",280,null],[11,"size_hint","","",280,null],[11,"next_back","","",280,null],[11,"clone","","",280,null],[11,"fmt","","",281,null],[11,"next","","",281,null],[11,"size_hint","","",281,null],[11,"next_back","","",281,null],[11,"fmt","","",282,null],[11,"next","","",282,null],[11,"size_hint","","",282,null],[11,"next_back","","",282,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",279,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"next","rustc_unicode::char","",283,null],[11,"next","","",284,null],[11,"clone","","",285,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"next","","",285,null],[11,"size_hint","","",285,null],[11,"unpaired_surrogate","","Returns the unpaired surrogate which caused this error.",10,null],[11,"fmt","","",10,null],[11,"new","core::cell","Creates a new `Cell` containing the given value.",286,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",286,null],[11,"set","","Sets the contained value.",286,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",286,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",286,null],[11,"clone","","",286,null],[11,"default","","",286,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",286,null],[11,"partial_cmp","","",286,null],[11,"lt","","",286,null],[11,"le","","",286,null],[11,"gt","","",286,null],[11,"ge","","",286,null],[11,"cmp","","",286,null],[11,"fmt","","",287,null],[11,"eq","","",287,null],[11,"clone","","",287,null],[11,"new","","Creates a new `RefCell` containing `value`.",288,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",288,null],[11,"borrow_state","","Query the current state of this `RefCell`",288,null],[11,"borrow","","Immutably borrows the wrapped value.",288,null],[11,"borrow_mut","","Mutably borrows the wrapped value.",288,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",288,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",288,null],[11,"clone","","",288,null],[11,"default","","",288,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",288,null],[11,"partial_cmp","","",288,null],[11,"lt","","",288,null],[11,"le","","",288,null],[11,"gt","","",288,null],[11,"ge","","",288,null],[11,"cmp","","",288,null],[11,"deref","","",289,null],[11,"clone","","Copies a `Ref`.",289,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",289,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",289,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",290,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",290,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"deref","","",290,null],[11,"deref_mut","","",290,null],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",291,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",291,null],[11,"get","","Gets a mutable pointer to the wrapped value.",291,null],[11,"default","","",291,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"fmt","core::iter::range","",292,null],[11,"clone","","",292,null],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",273,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",272,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",275,null],[11,"next","core::iter::range","",292,null],[11,"size_hint","","",292,null],[11,"next","","",292,null],[11,"size_hint","","",292,null],[11,"next","","",292,null],[11,"size_hint","","",292,null],[11,"next","core::ops","",272,null],[11,"size_hint","","",272,null],[11,"next_back","","",272,null],[11,"next","","",273,null],[11,"next","","",275,null],[11,"size_hint","","",275,null],[11,"next_back","","",275,null],[11,"fmt","core::iter::sources","",293,null],[11,"clone","","",293,null],[11,"next","","",293,null],[11,"size_hint","","",293,null],[11,"next_back","","",293,null],[11,"fmt","","",294,null],[11,"next","","",294,null],[11,"size_hint","","",294,null],[11,"next_back","","",294,null],[11,"len","","",294,null],[11,"clone","","",294,null],[11,"default","","",294,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",295,null],[11,"clone","","",295,null],[11,"next","","",295,null],[11,"size_hint","","",295,null],[11,"next_back","","",295,null],[11,"len","","",295,null],[11,"fmt","core::iter","",296,null],[11,"clone","","",296,null],[11,"next","","",296,null],[11,"size_hint","","",296,null],[11,"next_back","","",296,null],[11,"fmt","","",297,null],[11,"clone","","",297,null],[11,"next","","",297,null],[11,"size_hint","","",297,null],[11,"next_back","","",297,null],[11,"fmt","","",298,null],[11,"clone","","",298,null],[11,"next","","",298,null],[11,"size_hint","","",298,null],[11,"fmt","","",299,null],[11,"clone","","",299,null],[11,"next","","",299,null],[11,"count","","",299,null],[11,"nth","","",299,null],[11,"find","","",299,null],[11,"last","","",299,null],[11,"size_hint","","",299,null],[11,"next_back","","",299,null],[11,"fmt","","",300,null],[11,"clone","","",300,null],[11,"next","","",300,null],[11,"size_hint","","",300,null],[11,"next_back","","",300,null],[11,"clone","","",301,null],[11,"fmt","","",301,null],[11,"next","","",301,null],[11,"size_hint","","",301,null],[11,"next_back","","",301,null],[11,"clone","","",302,null],[11,"fmt","","",302,null],[11,"next","","",302,null],[11,"size_hint","","",302,null],[11,"next_back","","",302,null],[11,"clone","","",303,null],[11,"fmt","","",303,null],[11,"next","","",303,null],[11,"size_hint","","",303,null],[11,"next_back","","",303,null],[11,"fmt","","",304,null],[11,"clone","","",304,null],[11,"next","","# Overflow Behavior",304,null],[11,"size_hint","","",304,null],[11,"nth","","",304,null],[11,"count","","",304,null],[11,"next_back","","",304,null],[11,"fmt","","",305,null],[11,"clone","","",305,null],[11,"next","","",305,null],[11,"count","","",305,null],[11,"nth","","",305,null],[11,"last","","",305,null],[11,"size_hint","","",305,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",305,null],[11,"is_empty","","Checks if the iterator has finished iterating.",305,null],[11,"clone","","",306,null],[11,"fmt","","",306,null],[11,"next","","",306,null],[11,"size_hint","","",306,null],[11,"clone","","",307,null],[11,"fmt","","",307,null],[11,"next","","",307,null],[11,"size_hint","","",307,null],[11,"fmt","","",308,null],[11,"clone","","",308,null],[11,"next","","",308,null],[11,"nth","","",308,null],[11,"count","","",308,null],[11,"last","","",308,null],[11,"size_hint","","",308,null],[11,"next_back","","",308,null],[11,"fmt","","",309,null],[11,"clone","","",309,null],[11,"next","","",309,null],[11,"nth","","",309,null],[11,"size_hint","","",309,null],[11,"clone","","",310,null],[11,"fmt","","",310,null],[11,"next","","",310,null],[11,"size_hint","","",310,null],[11,"clone","","",311,null],[11,"fmt","","",311,null],[11,"next","","",311,null],[11,"size_hint","","",311,null],[11,"next_back","","",311,null],[11,"fmt","","",312,null],[11,"clone","","",312,null],[11,"next","","",312,null],[11,"nth","","",312,null],[11,"last","","",312,null],[11,"count","","",312,null],[11,"size_hint","","",312,null],[11,"next_back","","",312,null],[11,"clone","","",313,null],[11,"fmt","","",313,null],[11,"next","","",313,null],[11,"size_hint","","",313,null],[11,"next_back","","",313,null],[11,"hash","core::marker","",314,null],[11,"eq","","",314,null],[11,"partial_cmp","","",314,null],[11,"cmp","","",314,null],[11,"clone","","",314,null],[11,"default","","",314,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"clone","collections::str","",315,null],[11,"next","","",315,null],[11,"size_hint","","",315,null],[11,"borrow","collections::string","",73,null],[11,"fmt","core::str::pattern","",316,null],[11,"eq","","",316,null],[11,"ne","","",316,null],[11,"clone","","",316,null],[11,"fmt","","",317,null],[11,"clone","","",317,null],[11,"haystack","","",317,null],[11,"next","","",317,null],[11,"next_match","","",317,null],[11,"next_reject","","",317,null],[11,"next_back","","",317,null],[11,"next_match_back","","",317,null],[11,"next_reject_back","","",317,null],[11,"fmt","","",318,null],[11,"clone","","",318,null],[11,"haystack","","",318,null],[11,"next","","",318,null],[11,"next_match","","",318,null],[11,"next_reject","","",318,null],[11,"next_back","","",318,null],[11,"next_match_back","","",318,null],[11,"next_reject_back","","",318,null],[11,"clone","","",319,null],[11,"fmt","","",319,null],[11,"haystack","","",319,null],[11,"next","","",319,null],[11,"next_match","","",319,null],[11,"next_reject","","",319,null],[11,"next_back","","",319,null],[11,"next_match_back","","",319,null],[11,"next_reject_back","","",319,null],[11,"fmt","","",320,null],[11,"clone","","",320,null],[11,"haystack","","",320,null],[11,"next","","",320,null],[11,"next_match","","",320,null],[11,"next_back","","",320,null],[11,"next_match_back","","",320,null],[11,"hash","core::cmp","",321,null],[11,"fmt","","",321,null],[11,"eq","","",321,null],[11,"clone","","",321,null],[11,"reverse","","Reverse the `Ordering`.",321,null],[11,"cmp","","",321,null],[11,"partial_cmp","","",321,null],[8,"Error","bitflags::__core::error","Base functionality for all errors in Rust.",null,null],[10,"description","","A short description of the error.",0,null],[11,"cause","","The lower-level cause of this error, if any.",0,null],[0,"prelude","bitflags::__core","The Rust Prelude.",null,null],[0,"v1","bitflags::__core::prelude","The first version of the prelude of The Rust Standard Library.",null,null],[11,"drop","collections::btree::map","",322,null],[11,"clone","","",322,null],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",322,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",322,null],[11,"get","","Returns a reference to the value corresponding to the key.",322,null],[11,"contains_key","","Returns true if the map contains a value for the specified key.",322,null],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",322,null],[11,"insert","","Inserts a key-value pair into the map.",322,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",322,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",322,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",322,null],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",322,null],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",322,null],[11,"next","","",323,null],[11,"size_hint","","",323,null],[11,"next_back","","",323,null],[11,"len","","",323,null],[11,"clone","","",323,null],[11,"next","","",324,null],[11,"size_hint","","",324,null],[11,"next_back","","",324,null],[11,"len","","",324,null],[11,"into_iter","","",322,null],[11,"drop","","",325,null],[11,"next","","",325,null],[11,"size_hint","","",325,null],[11,"next_back","","",325,null],[11,"len","","",325,null],[11,"next","","",326,null],[11,"size_hint","","",326,null],[11,"next_back","","",326,null],[11,"len","","",326,null],[11,"clone","","",326,null],[11,"next","","",327,null],[11,"size_hint","","",327,null],[11,"next_back","","",327,null],[11,"len","","",327,null],[11,"clone","","",327,null],[11,"next","","",328,null],[11,"next","","",329,null],[11,"size_hint","","",329,null],[11,"next_back","","",329,null],[11,"len","","",329,null],[11,"next_back","","",328,null],[11,"clone","","",328,null],[11,"next","","",330,null],[11,"next_back","","",330,null],[11,"from_iter","","",322,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",322,null],[11,"extend","","",322,null],[11,"hash","","",322,null],[11,"default","","",322,{"inputs":[],"output":{"name":"btreemap"}}],[11,"eq","","",322,null],[11,"partial_cmp","","",322,null],[11,"cmp","","",322,null],[11,"fmt","","",322,null],[11,"index","","",322,null],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",322,null],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",322,null],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",322,null],[11,"values","","Gets an iterator over the values of the map, in order by key.",322,null],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",322,null],[11,"len","","Returns the number of elements in the map.",322,null],[11,"is_empty","","Returns true if the map contains no elements.",322,null],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",331,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",331,null],[11,"key","","Returns a reference to this entry&#39;s key.",331,null],[11,"key","","Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.",332,null],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it.",332,null],[11,"key","","Gets a reference to the key in the entry.",333,null],[11,"get","","Gets a reference to the value in the entry.",333,null],[11,"get_mut","","Gets a mutable reference to the value in the entry.",333,null],[11,"into_mut","","Converts the entry into a mutable reference to its value.",333,null],[11,"insert","","Sets the value of the entry with the OccupiedEntry&#39;s key,\nand returns the entry&#39;s old value.",333,null],[11,"remove","","Takes the value of the entry out of the map, and returns it.",333,null],[11,"partial_cmp","collections::btree::set","",334,null],[11,"lt","","",334,null],[11,"le","","",334,null],[11,"gt","","",334,null],[11,"ge","","",334,null],[11,"cmp","","",334,null],[11,"eq","","",334,null],[11,"ne","","",334,null],[11,"hash","","",334,null],[11,"clone","","",334,null],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",334,{"inputs":[],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet&#39;s contents.",334,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",334,null],[11,"difference","","Visits the values representing the difference, in ascending order.",334,null],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",334,null],[11,"intersection","","Visits the values representing the intersection, in ascending order.",334,null],[11,"union","","Visits the values representing the union, in ascending order.",334,null],[11,"len","","Returns the number of elements in the set.",334,null],[11,"is_empty","","Returns true if the set contains no elements.",334,null],[11,"clear","","Clears the set, removing all values.",334,null],[11,"contains","","Returns `true` if the set contains a value.",334,null],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",334,null],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",334,null],[11,"is_subset","","Returns `true` if the set is a subset of another.",334,null],[11,"is_superset","","Returns `true` if the set is a superset of another.",334,null],[11,"insert","","Adds a value to the set.",334,null],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",334,null],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",334,null],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",334,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",334,null],[11,"from_iter","","",334,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet&#39;s contents.",334,null],[11,"extend","","",334,null],[11,"extend","","",334,null],[11,"default","","",334,{"inputs":[],"output":{"name":"btreeset"}}],[11,"fmt","","",334,null],[11,"clone","","",335,null],[11,"next","","",335,null],[11,"size_hint","","",335,null],[11,"next_back","","",335,null],[11,"len","","",335,null],[11,"next","","",336,null],[11,"size_hint","","",336,null],[11,"next_back","","",336,null],[11,"len","","",336,null],[11,"clone","","",337,null],[11,"next","","",337,null],[11,"next_back","","",337,null],[11,"clone","","",338,null],[11,"next","","",338,null],[11,"size_hint","","",338,null],[11,"clone","","",339,null],[11,"next","","",339,null],[11,"size_hint","","",339,null],[11,"clone","","",340,null],[11,"next","","",340,null],[11,"size_hint","","",340,null],[11,"clone","","",341,null],[11,"next","","",341,null],[11,"size_hint","","",341,null],[11,"hash","collections::enum_set","",342,null],[11,"cmp","","",342,null],[11,"partial_cmp","","",342,null],[11,"lt","","",342,null],[11,"le","","",342,null],[11,"gt","","",342,null],[11,"ge","","",342,null],[11,"eq","","",342,null],[11,"ne","","",342,null],[11,"clone","","",342,null],[11,"fmt","","",342,null],[11,"new","","Returns an empty `EnumSet`.",342,{"inputs":[],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",342,null],[11,"is_empty","","Returns true if the `EnumSet` is empty.",342,null],[11,"clear","","",342,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",342,null],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",342,null],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",342,null],[11,"union","","Returns the union of both `EnumSets`.",342,null],[11,"intersection","","Returns the intersection of both `EnumSets`.",342,null],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn&#39;t there before",342,null],[11,"remove","","Removes an enum from the EnumSet",342,null],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",342,null],[11,"iter","","Returns an iterator over an `EnumSet`.",342,null],[11,"sub","","",342,null],[11,"bitor","","",342,null],[11,"bitand","","",342,null],[11,"bitxor","","",342,null],[11,"clone","","",343,null],[11,"next","","",343,null],[11,"size_hint","","",343,null],[11,"from_iter","","",342,{"inputs":[{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",342,null],[11,"extend","","",342,null],[11,"start","core::ops","",273,null],[11,"end","","",274,null],[11,"start","","",272,null],[11,"end","","",272,null],[11,"eq","collections","",344,null],[11,"ne","","",344,null],[11,"hash","","",344,null],[11,"fmt","","",344,null],[11,"clone","","",344,null],[3,"Vec","bitflags::__core::prelude::v1","A contiguous growable array type, written `Vec&lt;T&gt;` but pronounced &#39;vector.&#39;",null,null],[11,"hash","core::num","",345,null],[11,"default","","",345,{"inputs":[],"output":{"name":"wrapping"}}],[11,"clone","","",345,null],[11,"cmp","","",345,null],[11,"partial_cmp","","",345,null],[11,"lt","","",345,null],[11,"le","","",345,null],[11,"gt","","",345,null],[11,"ge","","",345,null],[11,"eq","","",345,null],[11,"ne","","",345,null],[11,"fmt","","",345,null],[11,"fmt","","",345,null],[11,"shl","","",345,null],[11,"shl_assign","","",345,null],[11,"shr","","",345,null],[11,"shr_assign","","",345,null],[11,"shl","","",345,null],[11,"shl_assign","","",345,null],[11,"shr","","",345,null],[11,"shr_assign","","",345,null],[11,"shl","","",345,null],[11,"shl_assign","","",345,null],[11,"shr","","",345,null],[11,"shr_assign","","",345,null],[11,"shl","","",345,null],[11,"shl_assign","","",345,null],[11,"shr","","",345,null],[11,"shr_assign","","",345,null],[11,"shl","","",345,null],[11,"shl_assign","","",345,null],[11,"shr","","",345,null],[11,"shr_assign","","",345,null],[11,"shl","","",345,null],[11,"shl_assign","","",345,null],[11,"shr","","",345,null],[11,"shr_assign","","",345,null],[11,"shl","","",345,null],[11,"shl_assign","","",345,null],[11,"shr","","",345,null],[11,"shr_assign","","",345,null],[11,"shl","","",345,null],[11,"shl_assign","","",345,null],[11,"shr","","",345,null],[11,"shr_assign","","",345,null],[11,"shl","","",345,null],[11,"shl_assign","","",345,null],[11,"shr","","",345,null],[11,"shr_assign","","",345,null],[11,"shl","","",345,null],[11,"shl_assign","","",345,null],[11,"shr","","",345,null],[11,"shr_assign","","",345,null],[11,"add","","",345,null],[11,"add_assign","","",345,null],[11,"sub","","",345,null],[11,"sub_assign","","",345,null],[11,"mul","","",345,null],[11,"mul_assign","","",345,null],[11,"div","","",345,null],[11,"div_assign","","",345,null],[11,"rem","","",345,null],[11,"rem_assign","","",345,null],[11,"not","","",345,null],[11,"bitxor","","",345,null],[11,"bitxor_assign","","",345,null],[11,"bitor","","",345,null],[11,"bitor_assign","","",345,null],[11,"bitand","","",345,null],[11,"bitand_assign","","",345,null],[11,"neg","","",345,null],[11,"add","","",345,null],[11,"add_assign","","",345,null],[11,"sub","","",345,null],[11,"sub_assign","","",345,null],[11,"mul","","",345,null],[11,"mul_assign","","",345,null],[11,"div","","",345,null],[11,"div_assign","","",345,null],[11,"rem","","",345,null],[11,"rem_assign","","",345,null],[11,"not","","",345,null],[11,"bitxor","","",345,null],[11,"bitxor_assign","","",345,null],[11,"bitor","","",345,null],[11,"bitor_assign","","",345,null],[11,"bitand","","",345,null],[11,"bitand_assign","","",345,null],[11,"neg","","",345,null],[11,"add","","",345,null],[11,"add_assign","","",345,null],[11,"sub","","",345,null],[11,"sub_assign","","",345,null],[11,"mul","","",345,null],[11,"mul_assign","","",345,null],[11,"div","","",345,null],[11,"div_assign","","",345,null],[11,"rem","","",345,null],[11,"rem_assign","","",345,null],[11,"not","","",345,null],[11,"bitxor","","",345,null],[11,"bitxor_assign","","",345,null],[11,"bitor","","",345,null],[11,"bitor_assign","","",345,null],[11,"bitand","","",345,null],[11,"bitand_assign","","",345,null],[11,"neg","","",345,null],[11,"add","","",345,null],[11,"add_assign","","",345,null],[11,"sub","","",345,null],[11,"sub_assign","","",345,null],[11,"mul","","",345,null],[11,"mul_assign","","",345,null],[11,"div","","",345,null],[11,"div_assign","","",345,null],[11,"rem","","",345,null],[11,"rem_assign","","",345,null],[11,"not","","",345,null],[11,"bitxor","","",345,null],[11,"bitxor_assign","","",345,null],[11,"bitor","","",345,null],[11,"bitor_assign","","",345,null],[11,"bitand","","",345,null],[11,"bitand_assign","","",345,null],[11,"neg","","",345,null],[11,"add","","",345,null],[11,"add_assign","","",345,null],[11,"sub","","",345,null],[11,"sub_assign","","",345,null],[11,"mul","","",345,null],[11,"mul_assign","","",345,null],[11,"div","","",345,null],[11,"div_assign","","",345,null],[11,"rem","","",345,null],[11,"rem_assign","","",345,null],[11,"not","","",345,null],[11,"bitxor","","",345,null],[11,"bitxor_assign","","",345,null],[11,"bitor","","",345,null],[11,"bitor_assign","","",345,null],[11,"bitand","","",345,null],[11,"bitand_assign","","",345,null],[11,"neg","","",345,null],[11,"add","","",345,null],[11,"add_assign","","",345,null],[11,"sub","","",345,null],[11,"sub_assign","","",345,null],[11,"mul","","",345,null],[11,"mul_assign","","",345,null],[11,"div","","",345,null],[11,"div_assign","","",345,null],[11,"rem","","",345,null],[11,"rem_assign","","",345,null],[11,"not","","",345,null],[11,"bitxor","","",345,null],[11,"bitxor_assign","","",345,null],[11,"bitor","","",345,null],[11,"bitor_assign","","",345,null],[11,"bitand","","",345,null],[11,"bitand_assign","","",345,null],[11,"neg","","",345,null],[11,"add","","",345,null],[11,"add_assign","","",345,null],[11,"sub","","",345,null],[11,"sub_assign","","",345,null],[11,"mul","","",345,null],[11,"mul_assign","","",345,null],[11,"div","","",345,null],[11,"div_assign","","",345,null],[11,"rem","","",345,null],[11,"rem_assign","","",345,null],[11,"not","","",345,null],[11,"bitxor","","",345,null],[11,"bitxor_assign","","",345,null],[11,"bitor","","",345,null],[11,"bitor_assign","","",345,null],[11,"bitand","","",345,null],[11,"bitand_assign","","",345,null],[11,"neg","","",345,null],[11,"add","","",345,null],[11,"add_assign","","",345,null],[11,"sub","","",345,null],[11,"sub_assign","","",345,null],[11,"mul","","",345,null],[11,"mul_assign","","",345,null],[11,"div","","",345,null],[11,"div_assign","","",345,null],[11,"rem","","",345,null],[11,"rem_assign","","",345,null],[11,"not","","",345,null],[11,"bitxor","","",345,null],[11,"bitxor_assign","","",345,null],[11,"bitor","","",345,null],[11,"bitor_assign","","",345,null],[11,"bitand","","",345,null],[11,"bitand_assign","","",345,null],[11,"neg","","",345,null],[11,"add","","",345,null],[11,"add_assign","","",345,null],[11,"sub","","",345,null],[11,"sub_assign","","",345,null],[11,"mul","","",345,null],[11,"mul_assign","","",345,null],[11,"div","","",345,null],[11,"div_assign","","",345,null],[11,"rem","","",345,null],[11,"rem_assign","","",345,null],[11,"not","","",345,null],[11,"bitxor","","",345,null],[11,"bitxor_assign","","",345,null],[11,"bitor","","",345,null],[11,"bitor_assign","","",345,null],[11,"bitand","","",345,null],[11,"bitand_assign","","",345,null],[11,"neg","","",345,null],[11,"add","","",345,null],[11,"add_assign","","",345,null],[11,"sub","","",345,null],[11,"sub_assign","","",345,null],[11,"mul","","",345,null],[11,"mul_assign","","",345,null],[11,"div","","",345,null],[11,"div_assign","","",345,null],[11,"rem","","",345,null],[11,"rem_assign","","",345,null],[11,"not","","",345,null],[11,"bitxor","","",345,null],[11,"bitxor_assign","","",345,null],[11,"bitor","","",345,null],[11,"bitor_assign","","",345,null],[11,"bitand","","",345,null],[11,"bitand_assign","","",345,null],[11,"neg","","",345,null],[11,"eq","core::num::dec2flt","",6,null],[11,"ne","","",6,null],[11,"clone","","",6,null],[11,"fmt","","",6,null],[11,"fmt","","",6,null],[11,"fmt","core::num","",346,null],[11,"eq","","",346,null],[11,"clone","","",346,null],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"fmt","","",4,null],[11,"hash","core::nonzero","",347,null],[11,"fmt","","",347,null],[11,"partial_cmp","","",347,null],[11,"lt","","",347,null],[11,"le","","",347,null],[11,"gt","","",347,null],[11,"ge","","",347,null],[11,"cmp","","",347,null],[11,"eq","","",347,null],[11,"ne","","",347,null],[11,"clone","","",347,null],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",347,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",347,null],[11,"fmt","core::char","",348,null],[11,"clone","","",348,null],[11,"next","","",348,null],[11,"size_hint","","",348,null],[11,"last","","",348,null],[11,"fmt","","",349,null],[11,"clone","","",349,null],[11,"next","","",349,null],[11,"size_hint","","",349,null],[11,"count","","",349,null],[11,"nth","","",349,null],[11,"last","","",349,null],[11,"fmt","","",350,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",350,null],[11,"next","","",350,null],[11,"size_hint","","",350,null],[11,"fmt","","",351,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",351,null],[11,"next","","",351,null],[11,"size_hint","","",351,null],[11,"fmt","core::slice","",352,null],[11,"as_slice","","View the underlying data as a subslice of the original data.",352,null],[11,"next","","",352,null],[11,"size_hint","","",352,null],[11,"count","","",352,null],[11,"nth","","",352,null],[11,"last","","",352,null],[11,"next_back","","",352,null],[11,"clone","","",352,null],[11,"fmt","","",353,null],[11,"into_slice","","View the underlying data as a subslice of the original data.",353,null],[11,"next","","",353,null],[11,"size_hint","","",353,null],[11,"count","","",353,null],[11,"nth","","",353,null],[11,"last","","",353,null],[11,"next_back","","",353,null],[11,"fmt","","",354,null],[11,"clone","","",354,null],[11,"next","","",354,null],[11,"size_hint","","",354,null],[11,"next_back","","",354,null],[11,"fmt","","",355,null],[11,"next","","",355,null],[11,"size_hint","","",355,null],[11,"next_back","","",355,null],[11,"fmt","","",356,null],[11,"fmt","","",357,null],[11,"fmt","","",358,null],[11,"fmt","","",359,null],[11,"next","","",356,null],[11,"size_hint","","",356,null],[11,"next","","",357,null],[11,"size_hint","","",357,null],[11,"next","","",358,null],[11,"size_hint","","",358,null],[11,"next","","",359,null],[11,"size_hint","","",359,null],[11,"fmt","","",360,null],[11,"clone","","",360,null],[11,"next","","",360,null],[11,"size_hint","","",360,null],[11,"count","","",360,null],[11,"nth","","",360,null],[11,"last","","",360,null],[11,"next_back","","",360,null],[11,"fmt","","",361,null],[11,"clone","","",361,null],[11,"next","","",361,null],[11,"size_hint","","",361,null],[11,"count","","",361,null],[11,"nth","","",361,null],[11,"last","","",361,null],[11,"next_back","","",361,null],[11,"fmt","","",362,null],[11,"next","","",362,null],[11,"size_hint","","",362,null],[11,"count","","",362,null],[11,"nth","","",362,null],[11,"last","","",362,null],[11,"next_back","","",362,null],[11,"eq","core::str","",2,null],[11,"ne","","",2,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"fmt","","",2,null],[11,"fmt","","",3,null],[11,"clone","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",3,null],[11,"fmt","","",3,null],[11,"fmt","","",363,null],[11,"clone","","",363,null],[11,"next","","",363,null],[11,"size_hint","","",363,null],[11,"next_back","","",363,null],[11,"as_str","","View the underlying data as a subslice of the original data.",363,null],[11,"fmt","","",364,null],[11,"clone","","",364,null],[11,"next","","",364,null],[11,"size_hint","","",364,null],[11,"next_back","","",364,null],[11,"as_str","","View the underlying data as a subslice of the original data.",364,null],[11,"fmt","","",365,null],[11,"clone","","",365,null],[11,"next","","",365,null],[11,"size_hint","","",365,null],[11,"count","","",365,null],[11,"last","","",365,null],[11,"nth","","",365,null],[11,"next_back","","",365,null],[11,"len","","",365,null],[11,"fmt","","",366,null],[11,"next","","",366,null],[11,"clone","","",366,null],[11,"fmt","","",367,null],[11,"next","","",367,null],[11,"clone","","",367,null],[11,"next_back","","",366,null],[11,"next_back","","",367,null],[11,"fmt","","",368,null],[11,"next","","",368,null],[11,"clone","","",368,null],[11,"fmt","","",369,null],[11,"next","","",369,null],[11,"clone","","",369,null],[11,"next_back","","",368,null],[11,"next_back","","",369,null],[11,"fmt","","",370,null],[11,"next","","",370,null],[11,"clone","","",370,null],[11,"fmt","","",371,null],[11,"next","","",371,null],[11,"clone","","",371,null],[11,"fmt","","",372,null],[11,"next","","",372,null],[11,"clone","","",372,null],[11,"fmt","","",373,null],[11,"next","","",373,null],[11,"clone","","",373,null],[11,"next_back","","",372,null],[11,"next_back","","",373,null],[11,"fmt","","",374,null],[11,"next","","",374,null],[11,"clone","","",374,null],[11,"fmt","","",375,null],[11,"next","","",375,null],[11,"clone","","",375,null],[11,"next_back","","",374,null],[11,"next_back","","",375,null],[11,"fmt","","",376,null],[11,"clone","","",376,null],[11,"next","","",376,null],[11,"size_hint","","",376,null],[11,"next_back","","",376,null],[11,"fmt","","",377,null],[11,"clone","","",377,null],[11,"next","","",377,null],[11,"size_hint","","",377,null],[11,"next_back","","",377,null],[11,"fmt","","",378,null],[11,"clone","","",378,null],[11,"fmt","core::fmt","",379,null],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",380,null],[11,"finish","","Finishes output and returns any error encountered.",380,null],[11,"field","","Adds a new field to the generated tuple struct output.",381,null],[11,"finish","","Finishes output and returns any error encountered.",381,null],[11,"entry","","Adds a new entry to the set output.",382,null],[11,"entries","","Adds the contents of an iterator of entries to the set output.",382,null],[11,"finish","","Finishes output and returns any error encountered.",382,null],[11,"entry","","Adds a new entry to the list output.",383,null],[11,"entries","","Adds the contents of an iterator of entries to the list output.",383,null],[11,"finish","","Finishes output and returns any error encountered.",383,null],[11,"entry","","Adds a new entry to the map output.",384,null],[11,"entries","","Adds the contents of an iterator of entries to the map output.",384,null],[11,"finish","","Finishes output and returns any error encountered.",384,null],[11,"partial_cmp","core::fmt","",385,null],[11,"eq","","",385,null],[11,"cmp","","",385,null],[11,"hash","","",385,null],[11,"default","","",385,{"inputs":[],"output":{"name":"error"}}],[11,"fmt","","",385,null],[11,"clone","","",385,null],[11,"clone","","",386,null],[11,"fmt","","",386,null],[11,"fmt","","",386,null],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",387,null],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",387,null],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",387,null],[11,"write_fmt","","Writes some formatted information into this instance",387,null],[11,"flags","","Flags for formatting (packed version of rt::Flag)",387,null],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",387,null],[11,"align","","Flag indicating what form of alignment was requested",387,null],[11,"width","","Optionally specified integer width that the output should be",387,null],[11,"precision","","Optionally specified precision for numeric types",387,null],[11,"sign_plus","","Determines if the `+` flag was specified.",387,null],[11,"sign_minus","","Determines if the `-` flag was specified.",387,null],[11,"alternate","","Determines if the `#` flag was specified.",387,null],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",387,null],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",387,null],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",387,null],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",387,null],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",387,null],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",387,null],[11,"write_str","","",387,null],[11,"write_char","","",387,null],[11,"write_fmt","","",387,null],[11,"fmt","","",385,null],[11,"fmt","core::marker","",314,null],[11,"fmt","core::cell","",286,null],[11,"fmt","","",288,null],[11,"fmt","","",289,null],[11,"fmt","","",290,null],[11,"fmt","","",291,null],[8,"Default","bitflags::__core::prelude::v1","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the &quot;default value&quot; for a type.",388,{"inputs":[],"output":{"name":"self"}}],[8,"Iterator","","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",389,null],[10,"next","","Advances the iterator and returns the next value.",389,null],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",389,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",389,null],[11,"last","","Consumes the iterator, returning the last element.",389,null],[11,"nth","","Consumes the `n` first elements of the iterator, then returns the\n`next()` one.",389,null],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",389,null],[11,"zip","","&#39;Zips up&#39; two iterators into a single iterator of pairs.",389,null],[11,"map","","Takes a closure and creates an iterator which calls that closure on each\nelement.",389,null],[11,"filter","","Creates an iterator which uses a closure to determine if an element\nshould be yielded.",389,null],[11,"filter_map","","Creates an iterator that both filters and maps.",389,null],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as\nthe next value.",389,null],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of\nthe iterator without consuming it.",389,null],[11,"skip_while","","Creates an iterator that [`skip()`]s elements based on a predicate.",389,null],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",389,null],[11,"skip","","Creates an iterator that skips the first `n` elements.",389,null],[11,"take","","Creates an iterator that yields its first `n` elements.",389,null],[11,"scan","","An iterator adaptor similar to [`fold()`] that holds internal state and\nproduces a new iterator.",389,null],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",389,null],[11,"fuse","","Creates an iterator which ends after the first `None`.",389,null],[11,"inspect","","Do something with each element of an iterator, passing the value on.",389,null],[11,"by_ref","","Borrows an iterator, rather than consuming it.",389,null],[11,"collect","","Transforms an iterator into a collection.",389,null],[11,"partition","","Consumes an iterator, creating two collections from it.",389,null],[11,"fold","","An iterator adaptor that applies a function, producing a single, final value.",389,null],[11,"all","","Tests if every element of the iterator matches a predicate.",389,null],[11,"any","","Tests if any element of the iterator matches a predicate.",389,null],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",389,null],[11,"position","","Searches for an element in an iterator, returning its index.",389,null],[11,"rposition","","Searches for an element in an iterator from the right, returning its\nindex.",389,null],[11,"max","","Returns the maximum element of an iterator.",389,null],[11,"min","","Returns the minimum element of an iterator.",389,null],[11,"max_by_key","","Returns the element that gives the maximum value from the\nspecified function.",389,null],[11,"min_by_key","","Returns the element that gives the minimum value from the\nspecified function.",389,null],[11,"rev","","Reverses an iterator&#39;s direction.",389,null],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",389,null],[11,"cloned","","Creates an iterator which `clone()`s all of its elements.",389,null],[11,"cycle","","Repeats an iterator endlessly.",389,null],[11,"sum","","Sums the elements of an iterator.",389,null],[11,"product","","Iterates over the entire iterator, multiplying all the elements",389,null],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",389,null],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",389,null],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of\nanother.",389,null],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of\nanother.",389,null],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically\nless than those of another.",389,null],[11,"le","","Determines if the elements of this `Iterator` are lexicographically\nless or equal to those of another.",389,null],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically\ngreater than those of another.",389,null],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically\ngreater than or equal to those of another.",389,null],[8,"Copy","","Types that can be copied by simply copying bits (i.e. `memcpy`).",null,null],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive.",null,null],[10,"into","","Performs the conversion.",390,null],[8,"ToString","","A trait for converting a value to a `String`.",null,null],[10,"to_string","","Converts the given value to a `String`.",391,null],[5,"drop","","Disposes of a value.",null,null],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",392,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",392,null],[10,"into_iter","","Creates an iterator from a value.",392,null],[8,"PartialEq","","Trait for equality comparisons which are [partial equivalence\nrelations](http://en.wikipedia.org/wiki/Partial_equivalence_relation).",null,null],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used\nby `==`.",393,null],[11,"ne","","This method tests for `!=`.",393,null],[8,"Send","","Types that can be transferred across thread boundaries.",null,null],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",394,null],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `&lt;` operator.",394,null],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `&lt;=`\noperator.",394,null],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `&gt;` operator.",394,null],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `&gt;=`\noperator.",394,null],[4,"Result","","`Result` is a type that represents either success (`Ok`) or failure (`Err`).",null,null],[13,"Ok","","Contains the success value",279,null],[13,"Err","","Contains the error value",279,null],[8,"AsRef","","A cheap, reference-to-reference conversion.",null,null],[10,"as_ref","","Performs the conversion.",395,null],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact number of times the iterator will iterate.",396,null],[3,"String","","A UTF-8 encoded, growable string.",null,null],[8,"FnOnce","","A version of the call operator that takes a by-value receiver.",null,null],[16,"Output","","The returned type after the call operator is used.",397,null],[10,"call_once","","This is called when the call operator is used.",397,null],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",398,null],[8,"Sized","","Types with a constant size known at compile-time.",null,null],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","An iterator able to yield elements from both ends.",399,null],[11,"fmt","alloc::arc","",400,null],[11,"new","","Constructs a new `Arc&lt;T&gt;`.",401,{"inputs":[{"name":"t"}],"output":{"name":"arc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Arc&lt;T&gt;` has exactly one strong reference.",401,{"inputs":[{"name":"arc"}],"output":{"name":"result"}}],[11,"downgrade","","Downgrades the `Arc&lt;T&gt;` to a `Weak&lt;T&gt;` reference.",401,{"inputs":[{"name":"arc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",401,{"inputs":[{"name":"arc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",401,{"inputs":[{"name":"arc"}],"output":{"name":"usize"}}],[11,"clone","","Makes a clone of the `Arc&lt;T&gt;`.",401,null],[11,"deref","","",401,null],[11,"make_mut","","Make a mutable reference into the given `Arc&lt;T&gt;`.\nIf the `Arc&lt;T&gt;` has more than one strong reference, or any weak\nreferences, the inner data is cloned.",401,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Arc&lt;T&gt;` has\none strong reference and no weak references.",401,{"inputs":[{"name":"arc"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Arc&lt;T&gt;`.",401,null],[11,"new","","Constructs a new `Weak&lt;T&gt;` without an accompanying instance of T.",400,{"inputs":[],"output":{"name":"weak"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",400,null],[11,"clone","","Makes a clone of the `Weak&lt;T&gt;`.",400,null],[11,"default","","",400,{"inputs":[],"output":{"name":"weak"}}],[11,"drop","","Drops the `Weak&lt;T&gt;`.",400,null],[11,"eq","","Equality for two `Arc&lt;T&gt;`s.",401,null],[11,"ne","","Inequality for two `Arc&lt;T&gt;`s.",401,null],[11,"partial_cmp","","Partial comparison for two `Arc&lt;T&gt;`s.",401,null],[11,"lt","","Less-than comparison for two `Arc&lt;T&gt;`s.",401,null],[11,"le","","&#39;Less-than or equal to&#39; comparison for two `Arc&lt;T&gt;`s.",401,null],[11,"gt","","Greater-than comparison for two `Arc&lt;T&gt;`s.",401,null],[11,"ge","","&#39;Greater-than or equal to&#39; comparison for two `Arc&lt;T&gt;`s.",401,null],[11,"cmp","","",401,null],[11,"fmt","","",401,null],[11,"fmt","","",401,null],[11,"fmt","","",401,null],[11,"default","","",401,{"inputs":[],"output":{"name":"arc"}}],[11,"hash","","",401,null],[11,"from","","",401,{"inputs":[{"name":"t"}],"output":{"name":"arc"}}],[11,"borrow","","",401,null],[11,"as_ref","","",401,null],[11,"new","alloc::raw_vec","Creates the biggest possible RawVec without allocating. If T has positive\nsize, then this makes a RawVec with capacity 0. If T has 0 size, then it\nit makes a RawVec with capacity `usize::MAX`. Useful for implementing\ndelayed allocation.",402,{"inputs":[],"output":{"name":"rawvec"}}],[11,"with_capacity","","Creates a RawVec with exactly the capacity and alignment requirements\nfor a `[T; cap]`. This is equivalent to calling RawVec::new when `cap` is 0\nor T is zero-sized. Note that if `T` is zero-sized this means you will *not*\nget a RawVec with the requested capacity!",402,{"inputs":[{"name":"usize"}],"output":{"name":"rawvec"}}],[11,"from_raw_parts","","Reconstitutes a RawVec from a pointer and capacity.",402,null],[11,"from_box","","Converts a `Box&lt;[T]&gt;` into a `RawVec&lt;T&gt;`.",402,{"inputs":[{"name":"box"}],"output":{"name":"rawvec"}}],[11,"ptr","","Gets a raw pointer to the start of the allocation. Note that this is\nheap::EMPTY if `cap = 0` or T is zero-sized. In the former case, you must\nbe careful.",402,null],[11,"cap","","Gets the capacity of the allocation.",402,null],[11,"double","","Doubles the size of the type&#39;s backing allocation. This is common enough\nto want to do that it&#39;s easiest to just have a dedicated method. Slightly\nmore efficient logic can be provided for this than the general case.",402,null],[11,"double_in_place","","Attempts to double the size of the type&#39;s backing allocation in place. This is common\nenough to want to do that it&#39;s easiest to just have a dedicated method. Slightly\nmore efficient logic can be provided for this than the general case.",402,null],[11,"reserve_exact","","Ensures that the buffer contains at least enough space to hold\n`used_cap + needed_extra_cap` elements. If it doesn&#39;t already,\nwill reallocate the minimum possible amount of memory necessary.\nGenerally this will be exactly the amount of memory necessary,\nbut in principle the allocator is free to give back more than\nwe asked for.",402,null],[11,"reserve","","Ensures that the buffer contains at least enough space to hold\n`used_cap + needed_extra_cap` elements. If it doesn&#39;t already have\nenough capacity, will reallocate enough space plus comfortable slack\nspace to get amortized `O(1)` behavior. Will limit this behavior\nif it would needlessly cause itself to panic.",402,null],[11,"reserve_in_place","","Attempts to ensure that the buffer contains at least enough space to hold\n`used_cap + needed_extra_cap` elements. If it doesn&#39;t already have\nenough capacity, will reallocate in place enough space plus comfortable slack\nspace to get amortized `O(1)` behaviour. Will limit this behaviour\nif it would needlessly cause itself to panic.",402,null],[11,"shrink_to_fit","","Shrinks the allocation down to the specified amount. If the given amount\nis 0, actually completely deallocates.",402,null],[11,"into_box","","Converts the entire buffer into `Box&lt;[T]&gt;`.",402,null],[11,"unsafe_no_drop_flag_needs_drop","","This is a stupid name in the hopes that someone will find this in the\nnot too distant future and remove it with the rest of\n#[unsafe_no_drop_flag]",402,null],[11,"drop","","Frees the memory owned by the RawVec *without* trying to Drop its contents.",402,null],[3,"Box","bitflags::__core::prelude::v1","A pointer type for heap allocation.",null,null],[8,"Sync","","Types that can be safely shared between threads when aliased.",null,null],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",403,null],[8,"ToOwned","","A generalization of `Clone` to borrowed data.",null,null],[16,"Owned","","",404,null],[10,"to_owned","","Creates owned data from borrowed data, usually by cloning.",404,null],[8,"FnMut","","A version of the call operator that takes a mutable receiver.",null,null],[10,"call_mut","","This is called when the call operator is used.",405,null],[8,"SliceConcatExt","","An extension trait for concatenating slices",null,null],[16,"Output","","The resulting type after concatenation",406,null],[10,"concat","","Flattens a slice of `T` into a single value `Self::Output`.",406,null],[10,"join","","Flattens a slice of `T` into a single value `Self::Output`, placing a\ngiven separator between each.",406,null],[10,"connect","","",406,null],[8,"Ord","","Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",407,null],[8,"Fn","","A version of the call operator that takes an immutable receiver.",null,null],[10,"call","","This is called when the call operator is used.",408,null],[8,"Eq","","Trait for equality comparisons which are [equivalence relations](\nhttps://en.wikipedia.org/wiki/Equivalence_relation).",null,null],[8,"From","","Construct `Self` via a conversion.",null,null],[10,"from","","Performs the conversion.",409,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[4,"Option","","The `Option` type. See [the module level documentation](index.html) for more.",null,null],[13,"None","","No value",259,null],[13,"Some","","Some value `T`",259,null],[8,"Drop","","The `Drop` trait is used to run some code when a value goes out of scope.\nThis is sometimes called a &#39;destructor&#39;.",null,null],[10,"drop","","A method called when the value goes out of scope.",410,null],[8,"Clone","","A common trait for cloning an object.",null,null],[10,"clone","","Returns a copy of the value.",411,null],[11,"clone_from","","Performs copy-assignment from `source`.",411,null],[0,"f32","bitflags::__core","The 32-bit floating point type.",null,null],[17,"EPSILON","bitflags::__core::f32","",null,null],[17,"NAN","","",null,null],[17,"MAX_10_EXP","","",null,null],[17,"MIN_POSITIVE","","Smallest positive, normalized f32 value",null,null],[17,"MAX","","Largest finite f32 value",null,null],[17,"RADIX","","",null,null],[17,"MIN_10_EXP","","",null,null],[17,"NEG_INFINITY","","",null,null],[0,"consts","","Basic mathematical constants.",null,null],[17,"PI","bitflags::__core::f32::consts","Archimedes&#39; constant",null,null],[17,"FRAC_PI_2","","pi/2.0",null,null],[17,"FRAC_PI_3","","pi/3.0",null,null],[17,"FRAC_PI_4","","pi/4.0",null,null],[17,"FRAC_PI_6","","pi/6.0",null,null],[17,"FRAC_PI_8","","pi/8.0",null,null],[17,"FRAC_1_PI","","1.0/pi",null,null],[17,"FRAC_2_PI","","2.0/pi",null,null],[17,"FRAC_2_SQRT_PI","","2.0/sqrt(pi)",null,null],[17,"SQRT_2","","sqrt(2.0)",null,null],[17,"FRAC_1_SQRT_2","","1.0/sqrt(2.0)",null,null],[17,"E","","Euler&#39;s number",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2.0)",null,null],[17,"LN_10","","ln(10.0)",null,null],[17,"MIN_EXP","bitflags::__core::f32","",null,null],[17,"DIGITS","","",null,null],[17,"MANTISSA_DIGITS","","",null,null],[17,"MIN","","Smallest finite f32 value",null,null],[17,"INFINITY","","",null,null],[17,"MAX_EXP","","",null,null],[0,"f64","bitflags::__core","The 64-bit floating point type.",null,null],[17,"EPSILON","bitflags::__core::f64","",null,null],[17,"NAN","","",null,null],[17,"MAX_10_EXP","","",null,null],[17,"MIN_POSITIVE","","Smallest positive, normalized f64 value",null,null],[17,"MAX","","Largest finite f64 value",null,null],[17,"RADIX","","",null,null],[17,"MIN_10_EXP","","",null,null],[17,"NEG_INFINITY","","",null,null],[0,"consts","","Basic mathematical constants.",null,null],[17,"PI","bitflags::__core::f64::consts","Archimedes&#39; constant",null,null],[17,"FRAC_PI_2","","pi/2.0",null,null],[17,"FRAC_PI_3","","pi/3.0",null,null],[17,"FRAC_PI_4","","pi/4.0",null,null],[17,"FRAC_PI_6","","pi/6.0",null,null],[17,"FRAC_PI_8","","pi/8.0",null,null],[17,"FRAC_1_PI","","1.0/pi",null,null],[17,"FRAC_2_PI","","2.0/pi",null,null],[17,"FRAC_2_SQRT_PI","","2.0/sqrt(pi)",null,null],[17,"SQRT_2","","sqrt(2.0)",null,null],[17,"FRAC_1_SQRT_2","","1.0/sqrt(2.0)",null,null],[17,"E","","Euler&#39;s number",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2.0)",null,null],[17,"LN_10","","ln(10.0)",null,null],[17,"MIN_EXP","bitflags::__core::f64","",null,null],[17,"DIGITS","","",null,null],[17,"MANTISSA_DIGITS","","",null,null],[17,"MIN","","Smallest finite f64 value",null,null],[17,"INFINITY","","",null,null],[17,"MAX_EXP","","",null,null],[0,"ascii","bitflags::__core","Operations on ASCII strings and characters.",null,null],[8,"AsciiExt","bitflags::__core::ascii","Extension methods for ASCII-subset only operations on string slices.",null,null],[16,"Owned","","Container type for copied ASCII characters.",412,null],[10,"is_ascii","","Checks if the value is within the ASCII range.",412,null],[10,"to_ascii_uppercase","","Makes a copy of the string in ASCII upper case.",412,null],[10,"to_ascii_lowercase","","Makes a copy of the string in ASCII lower case.",412,null],[10,"eq_ignore_ascii_case","","Checks that two strings are an ASCII case-insensitive match.",412,null],[10,"make_ascii_uppercase","","Converts this type to its ASCII upper case equivalent in-place.",412,null],[10,"make_ascii_lowercase","","Converts this type to its ASCII lower case equivalent in-place.",412,null],[3,"EscapeDefault","","An iterator over the escaped version of a byte, constructed via\n`std::ascii::escape_default`.",null,null],[5,"escape_default","","Returns an iterator that produces an escaped version of a `u8`.",null,{"inputs":[{"name":"u8"}],"output":{"name":"escapedefault"}}],[0,"num","bitflags::__core","Additional functionality for numerics.",null,null],[8,"One","bitflags::__core::num","Types that have a &quot;one&quot; value.",null,null],[10,"one","","The &quot;one&quot; (usually, multiplicative identity) for this type.",413,{"inputs":[],"output":{"name":"self"}}],[3,"ParseIntError","","An error which can be returned when parsing an integer.",null,null],[4,"FpCategory","","A classification of floating point numbers.",null,null],[13,"Nan","","&quot;Not a Number&quot;, often obtained by dividing by zero",346,null],[13,"Infinite","","Positive or negative infinity",346,null],[13,"Zero","","Positive or negative zero",346,null],[13,"Subnormal","","De-normalized floating point representation (less precise than `Normal`)",346,null],[13,"Normal","","A regular floating point number",346,null],[3,"ParseFloatError","","An error which can be returned when parsing a float.",null,null],[3,"TryFromIntError","","The error type returned when a checked integral type conversion fails.",null,null],[8,"Zero","","Types that have a &quot;zero&quot; value.",null,null],[10,"zero","","The &quot;zero&quot; (usually, additive identity) for this type.",414,{"inputs":[],"output":{"name":"self"}}],[3,"Wrapping","","Provides intentionally-wrapped arithmetic on `T`.",null,null],[12,"0","","",345,null],[0,"thread","bitflags::__core","Native threads.",null,null],[3,"Builder","bitflags::__core::thread","Thread configuration. Provides detailed control over the properties\nand behavior of new threads.",null,null],[5,"spawn","","Spawns a new thread, returning a `JoinHandle` for it.",null,{"inputs":[{"name":"f"}],"output":{"name":"joinhandle"}}],[5,"current","","Gets a handle to the thread that invokes it.",null,{"inputs":[],"output":{"name":"thread"}}],[5,"yield_now","","Cooperatively gives up a timeslice to the OS scheduler.",null,null],[5,"panicking","","Determines whether the current thread is unwinding because of panic.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"sleep_ms","","Puts the current thread to sleep for the specified amount of time.",null,null],[5,"sleep","","Puts the current thread to sleep for the specified amount of time.",null,null],[5,"park","","Blocks unless or until the current thread&#39;s token is made available.",null,null],[5,"park_timeout_ms","","Blocks unless or until the current thread&#39;s token is made available or\nthe specified duration has been reached (may wake spuriously).",null,null],[5,"park_timeout","","Blocks unless or until the current thread&#39;s token is made available or\nthe specified duration has been reached (may wake spuriously).",null,null],[3,"Thread","","A handle to a thread.",null,null],[6,"Result","","",null,null],[3,"JoinHandle","","An owned permission to join on a thread (block on its termination).",null,null],[3,"KeyInner","","",null,null],[3,"Key","","",null,null],[3,"Key","","",null,null],[4,"LocalKeyState","","Indicator of the state of a thread local storage key.",null,null],[13,"Uninitialized","","All keys are in this state whenever a thread starts. Keys will\ntransition to the `Valid` state once the first call to `with` happens\nand the initialization expression succeeds.",12,null],[13,"Valid","","Once a key has been accessed successfully, it will enter the `Valid`\nstate. Keys in the `Valid` state will remain so until the thread exits,\nat which point the destructor will be run and the key will enter the\n`Destroyed` state.",12,null],[13,"Destroyed","","When a thread exits, the destructors for keys will be run (if\nnecessary). While a destructor is running, and possibly after a\ndestructor has run, a key is in the `Destroyed` state.",12,null],[3,"ScopedKey","","Type representing a thread local storage key corresponding to a reference\nto the type parameter `T`.",null,null],[3,"LocalKey","","A thread local storage key which owns its contents.",null,null],[0,"collections","bitflags::__core","Collection types.",null,null],[0,"hash_map","bitflags::__core::collections","A hashmap",null,null],[4,"Entry","bitflags::__core::collections::hash_map","A view into a single location in a map, which may be vacant or occupied.",null,null],[13,"Occupied","","An occupied Entry.",29,null],[13,"Vacant","","A vacant Entry.",29,null],[3,"RandomState","","`RandomState` is the default state for `HashMap` types.",null,null],[3,"Keys","","HashMap keys iterator.",null,null],[3,"Iter","","HashMap iterator.",null,null],[3,"HashMap","","A hash map implementation which uses linear probing with Robin\nHood bucket stealing.",null,null],[3,"Values","","HashMap values iterator.",null,null],[3,"ValuesMut","","Mutable HashMap values iterator.",null,null],[3,"Drain","","HashMap drain iterator.",null,null],[3,"IterMut","","HashMap mutable values iterator.",null,null],[3,"VacantEntry","","A view into a single empty location in a HashMap.",null,null],[3,"OccupiedEntry","","A view into a single occupied location in a HashMap.",null,null],[3,"IntoIter","","HashMap move iterator.",null,null],[0,"hash_set","bitflags::__core::collections","A hashset",null,null],[3,"Difference","bitflags::__core::collections::hash_set","Difference iterator",null,null],[3,"HashSet","","An implementation of a hash set using the underlying representation of a\nHashMap where the value is ().",null,null],[3,"Iter","","HashSet iterator",null,null],[3,"SymmetricDifference","","Symmetric difference iterator.",null,null],[3,"Drain","","HashSet drain iterator",null,null],[3,"IntoIter","","HashSet move iterator",null,null],[3,"Intersection","","Intersection iterator",null,null],[3,"Union","","Set union iterator.",null,null],[0,"vec_deque","bitflags::__core::collections","VecDeque is a double-ended queue, which is implemented with the help of a\ngrowing ring buffer.",null,null],[3,"VecDeque","bitflags::__core::collections::vec_deque","`VecDeque` is a growable ring buffer, which can be used as a double-ended\nqueue efficiently.",null,null],[3,"Iter","","`VecDeque` iterator.",null,null],[3,"IterMut","","`VecDeque` mutable iterator.",null,null],[3,"IntoIter","","A by-value VecDeque iterator",null,null],[3,"Drain","","A draining VecDeque iterator",null,null],[3,"LinkedList","bitflags::__core::collections","A doubly-linked list.",null,null],[3,"BinaryHeap","","A priority queue implemented with a binary heap.",null,null],[0,"btree_map","","",null,null],[3,"VacantEntry","bitflags::__core::collections::btree_map","A vacant Entry.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Vacant","","A vacant Entry",331,null],[13,"Occupied","","An occupied Entry",331,null],[3,"IterMut","","A mutable iterator over a BTreeMap&#39;s entries.",null,null],[3,"Range","","An iterator over a sub-range of BTreeMap&#39;s entries.",null,null],[3,"IntoIter","","An owning iterator over a BTreeMap&#39;s entries.",null,null],[3,"ValuesMut","","A mutable iterator over a BTreeMap&#39;s values.",null,null],[3,"Keys","","An iterator over a BTreeMap&#39;s keys.",null,null],[3,"OccupiedEntry","","An occupied Entry.",null,null],[3,"Values","","An iterator over a BTreeMap&#39;s values.",null,null],[3,"RangeMut","","A mutable iterator over a sub-range of BTreeMap&#39;s entries.",null,null],[3,"BTreeMap","","A map based on a B-Tree.",null,null],[3,"Iter","","An iterator over a BTreeMap&#39;s entries.",null,null],[0,"binary_heap","bitflags::__core::collections","A priority queue implemented with a binary heap.",null,null],[3,"BinaryHeap","bitflags::__core::collections::binary_heap","A priority queue implemented with a binary heap.",null,null],[3,"Iter","","`BinaryHeap` iterator.",null,null],[3,"IntoIter","","An iterator that moves out of a `BinaryHeap`.",null,null],[3,"Drain","","An iterator that drains a `BinaryHeap`.",null,null],[0,"linked_list","bitflags::__core::collections","A doubly-linked list with owned nodes.",null,null],[3,"LinkedList","bitflags::__core::collections::linked_list","A doubly-linked list.",null,null],[3,"Iter","","An iterator over references to the items of a `LinkedList`.",null,null],[3,"IterMut","","An iterator over mutable references to the items of a `LinkedList`.",null,null],[3,"IntoIter","","An iterator over the items of a `LinkedList`.",null,null],[3,"FrontPlace","","A place for insertion at the front of a `LinkedList`.",null,null],[3,"BackPlace","","A place for insertion at the back of a `LinkedList`.",null,null],[3,"HashSet","bitflags::__core::collections","An implementation of a hash set using the underlying representation of a\nHashMap where the value is ().",null,null],[3,"VecDeque","","`VecDeque` is a growable ring buffer, which can be used as a double-ended\nqueue efficiently.",null,null],[4,"Bound","","An endpoint of a range of keys.",null,null],[13,"Included","","An inclusive bound.",344,null],[13,"Excluded","","An exclusive bound.",344,null],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in this direction.",344,null],[3,"HashMap","","A hash map implementation which uses linear probing with Robin\nHood bucket stealing.",null,null],[3,"BTreeSet","","A set based on a B-Tree.",null,null],[0,"btree_set","","",null,null],[3,"Difference","bitflags::__core::collections::btree_set","A lazy iterator producing elements in the set difference (in-order).",null,null],[3,"Range","","An iterator over a sub-range of BTreeSet&#39;s items.",null,null],[3,"BTreeSet","","A set based on a B-Tree.",null,null],[3,"IntoIter","","An owning iterator over a BTreeSet&#39;s items.",null,null],[3,"Union","","A lazy iterator producing elements in the set union (in-order).",null,null],[3,"Intersection","","A lazy iterator producing elements in the set intersection (in-order).",null,null],[3,"SymmetricDifference","","A lazy iterator producing elements in the set symmetric difference (in-order).",null,null],[3,"Iter","","An iterator over a BTreeSet&#39;s items.",null,null],[3,"BTreeMap","bitflags::__core::collections","A map based on a B-Tree.",null,null],[0,"env","bitflags::__core","Inspection and manipulation of the process&#39;s environment.",null,null],[5,"current_dir","bitflags::__core::env","Returns the current working directory as a `PathBuf`.",null,{"inputs":[],"output":{"name":"result"}}],[5,"set_current_dir","","Changes the current working directory to the specified path, returning\nwhether the change was completed successfully or not.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[3,"Vars","","An iterator over a snapshot of the environment variables of this process.",null,null],[3,"VarsOs","","An iterator over a snapshot of the environment variables of this process.",null,null],[5,"vars","","Returns an iterator of (variable, value) pairs of strings, for all the\nenvironment variables of the current process.",null,{"inputs":[],"output":{"name":"vars"}}],[5,"vars_os","","Returns an iterator of (variable, value) pairs of OS strings, for all the\nenvironment variables of the current process.",null,{"inputs":[],"output":{"name":"varsos"}}],[5,"var","","Fetches the environment variable `key` from the current process.",null,{"inputs":[{"name":"k"}],"output":{"name":"result"}}],[5,"var_os","","Fetches the environment variable `key` from the current process, returning\n`None` if the variable isn&#39;t set.",null,{"inputs":[{"name":"k"}],"output":{"name":"option"}}],[4,"VarError","","Possible errors from the `env::var` method.",null,null],[13,"NotPresent","","The specified environment variable was not present in the current\nprocess&#39;s environment.",59,null],[13,"NotUnicode","","The specified environment variable was found, but it did not contain\nvalid unicode data. The found data is returned as a payload of this\nvariant.",59,null],[5,"set_var","","Sets the environment variable `k` to the value `v` for the currently running\nprocess.",null,null],[5,"remove_var","","Removes an environment variable from the environment of the currently running process.",null,null],[3,"SplitPaths","","An iterator over `PathBuf` instances for parsing an environment variable\naccording to platform-specific conventions.",null,null],[5,"split_paths","","Parses input according to platform conventions for the `PATH`\nenvironment variable.",null,{"inputs":[{"name":"t"}],"output":{"name":"splitpaths"}}],[3,"JoinPathsError","","Error type returned from `std::env::join_paths` when paths fail to be\njoined.",null,null],[5,"join_paths","","Joins a collection of `Path`s appropriately for the `PATH`\nenvironment variable.",null,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[5,"home_dir","","Returns the path of the current user&#39;s home directory if known.",null,{"inputs":[],"output":{"name":"option"}}],[5,"temp_dir","","Returns the path of a temporary directory.",null,{"inputs":[],"output":{"name":"pathbuf"}}],[5,"current_exe","","Returns the full filesystem path of the current running executable.",null,{"inputs":[],"output":{"name":"result"}}],[3,"Args","","An iterator over the arguments of a process, yielding a `String` value\nfor each argument.",null,null],[3,"ArgsOs","","An iterator over the arguments of a process, yielding an `OsString` value\nfor each argument.",null,null],[5,"args","","Returns the arguments which this program was started with (normally passed\nvia the command line).",null,{"inputs":[],"output":{"name":"args"}}],[5,"args_os","","Returns the arguments which this program was started with (normally passed\nvia the command line).",null,{"inputs":[],"output":{"name":"argsos"}}],[0,"consts","","Constants associated with the current target",null,null],[17,"ARCH","bitflags::__core::env::consts","A string describing the architecture of the CPU that is currently\nin use.",null,null],[17,"FAMILY","","The family of the operating system. Example value is `unix`.",null,null],[17,"OS","","A string describing the specific operating system in use.\nExample value is `linux`.",null,null],[17,"DLL_PREFIX","","Specifies the filename prefix used for shared libraries on this\nplatform. Example value is `lib`.",null,null],[17,"DLL_SUFFIX","","Specifies the filename suffix used for shared libraries on this\nplatform. Example value is `.so`.",null,null],[17,"DLL_EXTENSION","","Specifies the file extension used for shared libraries on this\nplatform that goes after the dot. Example value is `so`.",null,null],[17,"EXE_SUFFIX","","Specifies the filename suffix used for executable binaries on this\nplatform. Example value is `.exe`.",null,null],[17,"EXE_EXTENSION","","Specifies the file extension, if any, used for executable binaries\non this platform. Example value is `exe`.",null,null],[0,"ffi","bitflags::__core","Utilities related to FFI bindings.",null,null],[3,"IntoStringError","bitflags::__core::ffi","An error returned from `CString::into_string` to indicate that a UTF-8 error\nwas encountered during the conversion.",null,null],[3,"CStr","","Representation of a borrowed C string.",null,null],[3,"CString","","A type representing an owned C-compatible string",null,null],[3,"OsString","","A type that can represent owned, mutable platform-native strings, but is\ncheaply inter-convertible with Rust strings.",null,null],[3,"NulError","","An error returned from `CString::new` to indicate that a nul byte was found\nin the vector provided.",null,null],[3,"OsStr","","Slices into OS strings (see `OsString`).",null,null],[3,"FromBytesWithNulError","","An error returned from `CStr::from_bytes_with_nul` to indicate that a nul\nbyte was found too early in the slice provided or one wasn&#39;t found at all.",null,null],[0,"fs","bitflags::__core","Filesystem manipulation operations.",null,null],[3,"File","bitflags::__core::fs","A reference to an open file on the filesystem.",null,null],[3,"Metadata","","Metadata information about a file.",null,null],[3,"ReadDir","","Iterator over the entries in a directory.",null,null],[3,"DirEntry","","Entries returned by the `ReadDir` iterator.",null,null],[3,"OpenOptions","","Options and flags which can be used to configure how a file is opened.",null,null],[3,"Permissions","","Representation of the various permissions on a file.",null,null],[3,"FileType","","An structure representing a type of file with accessors for each file type.",null,null],[3,"DirBuilder","","A builder used to create directories in various manners.",null,null],[5,"remove_file","","Removes a file from the filesystem.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"metadata","","Given a path, query the file system to get information about a file,\ndirectory, etc.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"symlink_metadata","","Query the metadata about a file without following symlinks.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"rename","","Rename a file or directory to a new name, replacing the original file if\n`to` already exists.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"copy","","Copies the contents of one file to another. This function will also\ncopy the permission bits of the original file to the destination file.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"hard_link","","Creates a new hard link on the filesystem.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"soft_link","","Creates a new symbolic link on the filesystem.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"read_link","","Reads a symbolic link, returning the file that the link points to.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"canonicalize","","Returns the canonical form of a path with all intermediate components\nnormalized and symbolic links resolved.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"create_dir","","Creates a new, empty directory at the provided path",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"create_dir_all","","Recursively create a directory and all of its parent components if they\nare missing.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"remove_dir","","Removes an existing, empty directory.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"remove_dir_all","","Removes a directory at this path, after removing all its contents. Use\ncarefully!",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"read_dir","","Returns an iterator over the entries within a directory.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"set_permissions","","Changes the permissions found on a file or a directory.",null,{"inputs":[{"name":"p"},{"name":"permissions"}],"output":{"name":"result"}}],[0,"io","bitflags::__core","Traits, helpers, and type definitions for core I/O functionality.",null,null],[0,"prelude","bitflags::__core::io","The I/O Prelude",null,null],[8,"Read","bitflags::__core::io::prelude","The `Read` trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified buffer, returning\nhow many bytes were read.",415,null],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",415,null],[11,"read_to_string","","Read all bytes until EOF in this source, placing them into `buf`.",415,null],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",415,null],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of `Read`.",415,null],[11,"bytes","","Transforms this `Read` instance to an `Iterator` over its bytes.",415,null],[11,"chars","","Transforms this `Read` instance to an `Iterator` over `char`s.",415,null],[11,"chain","","Creates an adaptor which will chain this stream with another.",415,null],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",415,null],[8,"Seek","","The `Seek` trait provides a cursor which can be moved within a stream of\nbytes.",null,null],[10,"seek","","Seek to an offset, in bytes, in a stream.",416,null],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this object, returning how many bytes were written.",417,null],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination.",417,null],[11,"write_all","","Attempts to write an entire buffer into this write.",417,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error\nencountered.",417,null],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of `Write`.",417,null],[8,"BufRead","","A `BufRead` is a type of `Read`er which has an internal buffer, allowing it\nto perform extra ways of reading.",null,null],[10,"fill_buf","","Fills the internal buffer of this object, returning the buffer contents.",418,null],[10,"consume","","Tells this buffer that `amt` bytes have been consumed from the buffer,\nso they should no longer be returned in calls to `read`.",418,null],[11,"read_until","","Read all bytes into `buf` until the delimiter `byte` is reached.",418,null],[11,"read_line","","Read all bytes until a newline (the 0xA byte) is reached, and append\nthem to the provided buffer.",418,null],[11,"split","","Returns an iterator over the contents of this reader split on the byte\n`byte`.",418,null],[11,"lines","","Returns an iterator over the lines of this reader.",418,null],[8,"Read","bitflags::__core::io","The `Read` trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified buffer, returning\nhow many bytes were read.",415,null],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",415,null],[11,"read_to_string","","Read all bytes until EOF in this source, placing them into `buf`.",415,null],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",415,null],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of `Read`.",415,null],[11,"bytes","","Transforms this `Read` instance to an `Iterator` over its bytes.",415,null],[11,"chars","","Transforms this `Read` instance to an `Iterator` over `char`s.",415,null],[11,"chain","","Creates an adaptor which will chain this stream with another.",415,null],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",415,null],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this object, returning how many bytes were written.",417,null],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination.",417,null],[11,"write_all","","Attempts to write an entire buffer into this write.",417,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error\nencountered.",417,null],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of `Write`.",417,null],[8,"Seek","","The `Seek` trait provides a cursor which can be moved within a stream of\nbytes.",null,null],[10,"seek","","Seek to an offset, in bytes, in a stream.",416,null],[4,"SeekFrom","","Enumeration of possible methods to seek within an I/O object.",null,null],[13,"Start","","Set the offset to the provided number of bytes.",97,null],[13,"End","","Set the offset to the size of this object plus the specified number of\nbytes.",97,null],[13,"Current","","Set the offset to the current position plus the specified number of\nbytes.",97,null],[8,"BufRead","","A `BufRead` is a type of `Read`er which has an internal buffer, allowing it\nto perform extra ways of reading.",null,null],[10,"fill_buf","","Fills the internal buffer of this object, returning the buffer contents.",418,null],[10,"consume","","Tells this buffer that `amt` bytes have been consumed from the buffer,\nso they should no longer be returned in calls to `read`.",418,null],[11,"read_until","","Read all bytes into `buf` until the delimiter `byte` is reached.",418,null],[11,"read_line","","Read all bytes until a newline (the 0xA byte) is reached, and append\nthem to the provided buffer.",418,null],[11,"split","","Returns an iterator over the contents of this reader split on the byte\n`byte`.",418,null],[11,"lines","","Returns an iterator over the lines of this reader.",418,null],[3,"Chain","","Adaptor to chain together two readers.",null,null],[3,"Take","","Reader adaptor which limits the bytes read from an underlying reader.",null,null],[3,"Bytes","","An iterator over `u8` values of a reader.",null,null],[3,"Chars","","An iterator over the `char`s of a reader.",null,null],[4,"CharsError","","An enumeration of possible errors that can be generated from the `Chars`\nadapter.",null,null],[13,"NotUtf8","","Variant representing that the underlying stream was read successfully\nbut it did not contain valid utf8 data.",101,null],[13,"Other","","Variant representing that an I/O error occurred.",101,null],[3,"Split","","An iterator over the contents of an instance of `BufRead` split on a\nparticular byte.",null,null],[3,"Lines","","An iterator over the lines of an instance of `BufRead`.",null,null],[5,"stderr","","Constructs a new handle to the standard error of the current process.",null,{"inputs":[],"output":{"name":"stderr"}}],[3,"LineWriter","","Wraps a writer and buffers output to it, flushing whenever a newline\n(`0x0a`, `&#39;\\n&#39;`) is detected.",null,null],[5,"empty","","Constructs a new handle to an empty reader.",null,{"inputs":[],"output":{"name":"empty"}}],[3,"Empty","","A reader which is always at EOF.",null,null],[5,"stdin","","Constructs a new handle to the standard input of the current process.",null,{"inputs":[],"output":{"name":"stdin"}}],[3,"Stdin","","A handle to the standard input stream of a process.",null,null],[6,"Result","","",null,null],[5,"repeat","","Creates an instance of a reader that infinitely repeats one byte.",null,{"inputs":[{"name":"u8"}],"output":{"name":"repeat"}}],[4,"ErrorKind","","A list specifying general categories of I/O error.",null,null],[13,"NotFound","","An entity was not found, often a file.",87,null],[13,"PermissionDenied","","The operation lacked the necessary privileges to complete.",87,null],[13,"ConnectionRefused","","The connection was refused by the remote server.",87,null],[13,"ConnectionReset","","The connection was reset by the remote server.",87,null],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote server.",87,null],[13,"NotConnected","","The network operation failed because it was not connected yet.",87,null],[13,"AddrInUse","","A socket address could not be bound because the address is already in\nuse elsewhere.",87,null],[13,"AddrNotAvailable","","A nonexistent interface was requested or the requested address was not\nlocal.",87,null],[13,"BrokenPipe","","The operation failed because a pipe was closed.",87,null],[13,"AlreadyExists","","An entity already exists, often a file.",87,null],[13,"WouldBlock","","The operation needs to block to complete, but the blocking operation was\nrequested to not occur.",87,null],[13,"InvalidInput","","A parameter was incorrect.",87,null],[13,"InvalidData","","Data not valid for the operation were encountered.",87,null],[13,"TimedOut","","The I/O operation&#39;s timeout expired, causing it to be canceled.",87,null],[13,"WriteZero","","An error returned when an operation could not be completed because a\ncall to `write` returned `Ok(0)`.",87,null],[13,"Interrupted","","This operation was interrupted.",87,null],[13,"Other","","Any I/O error not part of this list.",87,null],[13,"UnexpectedEof","","An error returned when an operation could not be completed because an\n&quot;end of file&quot; was reached prematurely.",87,null],[3,"StdoutLock","","A locked reference to the `Stdout` handle.",null,null],[3,"Stderr","","A handle to the standard error stream of a process.",null,null],[5,"stdout","","Constructs a new handle to the standard output of the current process.",null,{"inputs":[],"output":{"name":"stdout"}}],[5,"copy","","Copies the entire contents of a reader into a writer.",null,{"inputs":[{"name":"r"},{"name":"w"}],"output":{"name":"result"}}],[3,"IntoInnerError","","An error returned by `into_inner` which combines an error that\nhappened while writing out the buffer, and the buffered writer object\nwhich may be used to recover from the condition.",null,null],[3,"BufWriter","","Wraps a writer and buffers its output.",null,null],[3,"Stdout","","A handle to the global standard output stream of the current process.",null,null],[3,"StderrLock","","A locked reference to the `Stderr` handle.",null,null],[3,"Error","","The error type for I/O operations of the `Read`, `Write`, `Seek`, and\nassociated traits.",null,null],[3,"Repeat","","A reader which yields one byte over and over and over and over and over and...",null,null],[3,"StdinLock","","A locked reference to the `Stdin` handle.",null,null],[3,"Sink","","A writer which will move data into the void.",null,null],[3,"BufReader","","The `BufReader` struct adds buffering to any reader.",null,null],[5,"sink","","Creates an instance of a writer which will successfully consume all data.",null,{"inputs":[],"output":{"name":"sink"}}],[3,"Cursor","","A `Cursor` wraps another type and provides it with a\n[`Seek`](trait.Seek.html) implementation.",null,null],[0,"net","bitflags::__core","Networking primitives for TCP/UDP communication.",null,null],[4,"Shutdown","bitflags::__core::net","Possible values which can be passed to the `shutdown` method of `TcpStream`.",null,null],[13,"Read","","Indicates that the reading portion of this stream/socket should be shut\ndown. All currently blocked and future reads will return `Ok(0)`.",117,null],[13,"Write","","Indicates that the writing portion of this stream/socket should be shut\ndown. All currently blocked and future writes will return an error.",117,null],[13,"Both","","Shut down both the reading and writing portions of this stream.",117,null],[3,"LookupHost","","An iterator over `SocketAddr` values returned from a host lookup operation.",null,null],[5,"lookup_host","","Resolve the host specified by `host` as a number of `SocketAddr` instances.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[4,"IpAddr","","An IP address, either an IPv4 or IPv6 address.",null,null],[13,"V4","","Representation of an IPv4 address.",105,null],[13,"V6","","Representation of an IPv6 address.",105,null],[4,"SocketAddr","","Representation of a socket address for networking applications.",null,null],[13,"V4","","An IPv4 socket address which is a (ip, port) combination.",109,null],[13,"V6","","An IPv6 socket address",109,null],[3,"TcpStream","","A structure which represents a TCP stream between a local socket and a\nremote socket.",null,null],[3,"SocketAddrV4","","An IPv4 socket address which is a (ip, port) combination.",null,null],[3,"Incoming","","An infinite iterator over the connections from a `TcpListener`.",null,null],[3,"TcpListener","","A structure representing a socket server.",null,null],[3,"Ipv6Addr","","Representation of an IPv6 address.",null,null],[3,"UdpSocket","","A User Datagram Protocol socket.",null,null],[8,"ToSocketAddrs","","A trait for objects which can be converted or resolved to one or more\n`SocketAddr` values.",null,null],[16,"Iter","","Returned iterator over socket addresses which this type may correspond\nto.",419,null],[10,"to_socket_addrs","","Converts this object to an iterator of resolved `SocketAddr`s.",419,null],[3,"Ipv4Addr","","Representation of an IPv4 address.",null,null],[3,"AddrParseError","","An error returned when parsing an IP address or a socket address.",null,null],[4,"Ipv6MulticastScope","","",null,null],[13,"InterfaceLocal","","",106,null],[13,"LinkLocal","","",106,null],[13,"RealmLocal","","",106,null],[13,"AdminLocal","","",106,null],[13,"SiteLocal","","",106,null],[13,"OrganizationLocal","","",106,null],[13,"Global","","",106,null],[3,"SocketAddrV6","","An IPv6 socket address.",null,null],[0,"os","bitflags::__core","OS-specific functionality.",null,null],[0,"linux","bitflags::__core::os","Linux-specific definitions",null,null],[0,"raw","bitflags::__core::os::linux","Linux-specific raw type definitions",null,null],[6,"dev_t","bitflags::__core::os::linux::raw","",null,null],[6,"mode_t","","",null,null],[6,"pthread_t","","",null,null],[3,"stat","","",null,null],[12,"st_dev","","",119,null],[12,"st_ino","","",119,null],[12,"st_nlink","","",119,null],[12,"st_mode","","",119,null],[12,"st_uid","","",119,null],[12,"st_gid","","",119,null],[12,"__pad0","","",119,null],[12,"st_rdev","","",119,null],[12,"st_size","","",119,null],[12,"st_blksize","","",119,null],[12,"st_blocks","","",119,null],[12,"st_atime","","",119,null],[12,"st_atime_nsec","","",119,null],[12,"st_mtime","","",119,null],[12,"st_mtime_nsec","","",119,null],[12,"st_ctime","","",119,null],[12,"st_ctime_nsec","","",119,null],[12,"__unused","","",119,null],[6,"off_t","","",null,null],[6,"blksize_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"time_t","","",null,null],[6,"nlink_t","","",null,null],[6,"ino_t","","",null,null],[0,"fs","bitflags::__core::os::linux","",null,null],[8,"MetadataExt","bitflags::__core::os::linux::fs","OS-specific extension methods for `fs::Metadata`",null,null],[10,"as_raw_stat","","Gain a reference to the underlying `stat` structure which contains\nthe raw information returned by the OS.",420,null],[10,"st_dev","","",420,null],[10,"st_ino","","",420,null],[10,"st_mode","","",420,null],[10,"st_nlink","","",420,null],[10,"st_uid","","",420,null],[10,"st_gid","","",420,null],[10,"st_rdev","","",420,null],[10,"st_size","","",420,null],[10,"st_atime","","",420,null],[10,"st_atime_nsec","","",420,null],[10,"st_mtime","","",420,null],[10,"st_mtime_nsec","","",420,null],[10,"st_ctime","","",420,null],[10,"st_ctime_nsec","","",420,null],[10,"st_blksize","","",420,null],[10,"st_blocks","","",420,null],[0,"raw","bitflags::__core::os","Raw OS-specific types for the current platform/architecture",null,null],[6,"c_char","bitflags::__core::os::raw","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[4,"c_void","","Type used to construct void pointers for use with C.",null,null],[0,"ext","bitflags::__core::os","Experimental extensions to `std` for Unix platforms.",null,null],[0,"io","bitflags::__core::os::ext","Unix-specific extensions to general I/O primitives",null,null],[6,"RawFd","bitflags::__core::os::ext::io","",null,null],[8,"AsRawFd","","A trait to extract the raw unix file descriptor from an underlying\nobject.",null,null],[10,"as_raw_fd","","Extracts the raw file descriptor.",421,null],[8,"FromRawFd","","A trait to express the ability to construct an object from a raw file\ndescriptor.",null,null],[10,"from_raw_fd","","Constructs a new instances of `Self` from the given raw file\ndescriptor.",422,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[8,"IntoRawFd","","A trait to express the ability to consume an object and acquire ownership of\nits raw file descriptor.",null,null],[10,"into_raw_fd","","Consumes this object, returning the raw underlying file descriptor.",423,null],[0,"ffi","bitflags::__core::os::ext","Unix-specific extension to the primitives in the `std::ffi` module",null,null],[8,"OsStringExt","bitflags::__core::os::ext::ffi","Unix-specific extensions to `OsString`.",null,null],[10,"from_vec","","Creates an `OsString` from a byte vector.",424,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[10,"into_vec","","Yields the underlying byte vector of this `OsString`.",424,null],[8,"OsStrExt","","Unix-specific extensions to `OsStr`.",null,null],[10,"from_bytes","","",425,null],[10,"as_bytes","","Gets the underlying byte view of the `OsStr` slice.",425,null],[0,"fs","bitflags::__core::os::ext","Unix-specific extensions to primitives in the `std::fs` module.",null,null],[8,"PermissionsExt","bitflags::__core::os::ext::fs","Unix-specific extensions to `Permissions`",null,null],[10,"mode","","Returns the underlying raw `mode_t` bits that are the standard Unix\npermissions for this file.",426,null],[10,"set_mode","","Sets the underlying raw bits for this set of permissions.",426,null],[10,"from_mode","","Creates a new instance of `Permissions` from the given set of Unix\npermission bits.",426,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[8,"OpenOptionsExt","","Unix-specific extensions to `OpenOptions`",null,null],[10,"mode","","Sets the mode bits that a new file will be created with.",427,null],[10,"custom_flags","","Pass custom flags to the `flags` agument of `open`.",427,null],[8,"MetadataExt","","",null,null],[10,"dev","","",428,null],[10,"ino","","",428,null],[10,"mode","","",428,null],[10,"nlink","","",428,null],[10,"uid","","",428,null],[10,"gid","","",428,null],[10,"rdev","","",428,null],[10,"size","","",428,null],[10,"atime","","",428,null],[10,"atime_nsec","","",428,null],[10,"mtime","","",428,null],[10,"mtime_nsec","","",428,null],[10,"ctime","","",428,null],[10,"ctime_nsec","","",428,null],[10,"blksize","","",428,null],[10,"blocks","","",428,null],[8,"FileTypeExt","","Add special unix types (block/char device, fifo and socket)",null,null],[10,"is_block_device","","Returns whether this file type is a block device.",429,null],[10,"is_char_device","","Returns whether this file type is a char device.",429,null],[10,"is_fifo","","Returns whether this file type is a fifo.",429,null],[10,"is_socket","","Returns whether this file type is a socket.",429,null],[8,"DirEntryExt","","Unix-specific extension methods for `fs::DirEntry`",null,null],[10,"ino","","Returns the underlying `d_ino` field in the contained `dirent`\nstructure.",430,null],[5,"symlink","","Creates a new symbolic link on the filesystem.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[8,"DirBuilderExt","","An extension trait for `fs::DirBuilder` for unix-specific options.",null,null],[10,"mode","","Sets the mode to create new directories with. This option defaults to\n0o777.",431,null],[0,"process","bitflags::__core::os::ext","Unix-specific extensions to primitives in the `std::process` module.",null,null],[8,"CommandExt","bitflags::__core::os::ext::process","Unix-specific extensions to the `std::process::Command` builder",null,null],[10,"uid","","Sets the child process&#39;s user id. This translates to a\n`setuid` call in the child process. Failure in the `setuid`\ncall will cause the spawn to fail.",432,null],[10,"gid","","Similar to `uid`, but sets the group id of the child process. This has\nthe same semantics as the `uid` field.",432,null],[10,"session_leader","","Create a new session (cf. `setsid(2)`) for the child process. This means\nthat the child is the leader of a new process group. The parent process\nremains the child reaper of the new process.",432,null],[10,"before_exec","","Schedules a closure to be run just before the `exec` function is\ninvoked.",432,null],[10,"exec","","Performs all the required setup by this `Command`, followed by calling\nthe `execvp` syscall.",432,null],[8,"ExitStatusExt","","Unix-specific extensions to `std::process::ExitStatus`",null,null],[10,"from_raw","","Creates a new `ExitStatus` from the raw underlying `i32` return value of\na process.",433,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[10,"signal","","If the process was terminated by a signal, returns that signal.",433,null],[0,"raw","bitflags::__core::os::ext","Unix-specific primitives available on all unix platforms",null,null],[6,"uid_t","bitflags::__core::os::ext::raw","",null,null],[6,"gid_t","","",null,null],[6,"pid_t","","",null,null],[6,"off_t","","",null,null],[6,"blksize_t","","",null,null],[6,"mode_t","","",null,null],[6,"pthread_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"time_t","","",null,null],[6,"dev_t","","",null,null],[6,"nlink_t","","",null,null],[6,"ino_t","","",null,null],[0,"thread","bitflags::__core::os::ext","Unix-specific extensions to primitives in the `std::thread` module.",null,null],[6,"RawPthread","bitflags::__core::os::ext::thread","",null,null],[8,"JoinHandleExt","","Unix-specific extensions to `std::thread::JoinHandle`",null,null],[10,"as_pthread_t","","Extracts the raw pthread_t without taking ownership",434,null],[10,"into_pthread_t","","Consumes the thread, returning the raw pthread_t",434,null],[0,"net","bitflags::__core::os::ext","Unix-specific networking functionality",null,null],[3,"SocketAddr","bitflags::__core::os::ext::net","An address associated with a Unix socket.",null,null],[3,"UnixStream","","A Unix stream socket.",null,null],[3,"UnixListener","","A structure representing a Unix domain socket server.",null,null],[3,"Incoming","","An iterator over incoming connections to a `UnixListener`.",null,null],[3,"UnixDatagram","","A Unix datagram socket.",null,null],[0,"prelude","bitflags::__core::os::ext","A prelude for conveniently writing platform-specific code.",null,null],[8,"CommandExt","bitflags::__core::os::ext::prelude","Unix-specific extensions to the `std::process::Command` builder",null,null],[10,"uid","","Sets the child process&#39;s user id. This translates to a\n`setuid` call in the child process. Failure in the `setuid`\ncall will cause the spawn to fail.",432,null],[10,"gid","","Similar to `uid`, but sets the group id of the child process. This has\nthe same semantics as the `uid` field.",432,null],[10,"session_leader","","Create a new session (cf. `setsid(2)`) for the child process. This means\nthat the child is the leader of a new process group. The parent process\nremains the child reaper of the new process.",432,null],[10,"before_exec","","Schedules a closure to be run just before the `exec` function is\ninvoked.",432,null],[10,"exec","","Performs all the required setup by this `Command`, followed by calling\nthe `execvp` syscall.",432,null],[8,"MetadataExt","","",null,null],[10,"dev","","",428,null],[10,"ino","","",428,null],[10,"mode","","",428,null],[10,"nlink","","",428,null],[10,"uid","","",428,null],[10,"gid","","",428,null],[10,"rdev","","",428,null],[10,"size","","",428,null],[10,"atime","","",428,null],[10,"atime_nsec","","",428,null],[10,"mtime","","",428,null],[10,"mtime_nsec","","",428,null],[10,"ctime","","",428,null],[10,"ctime_nsec","","",428,null],[10,"blksize","","",428,null],[10,"blocks","","",428,null],[8,"PermissionsExt","","Unix-specific extensions to `Permissions`",null,null],[10,"mode","","Returns the underlying raw `mode_t` bits that are the standard Unix\npermissions for this file.",426,null],[10,"set_mode","","Sets the underlying raw bits for this set of permissions.",426,null],[10,"from_mode","","Creates a new instance of `Permissions` from the given set of Unix\npermission bits.",426,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[8,"ExitStatusExt","","Unix-specific extensions to `std::process::ExitStatus`",null,null],[10,"from_raw","","Creates a new `ExitStatus` from the raw underlying `i32` return value of\na process.",433,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[10,"signal","","If the process was terminated by a signal, returns that signal.",433,null],[8,"IntoRawFd","","A trait to express the ability to consume an object and acquire ownership of\nits raw file descriptor.",null,null],[10,"into_raw_fd","","Consumes this object, returning the raw underlying file descriptor.",423,null],[8,"FromRawFd","","A trait to express the ability to construct an object from a raw file\ndescriptor.",null,null],[10,"from_raw_fd","","Constructs a new instances of `Self` from the given raw file\ndescriptor.",422,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[8,"OpenOptionsExt","","Unix-specific extensions to `OpenOptions`",null,null],[10,"mode","","Sets the mode bits that a new file will be created with.",427,null],[10,"custom_flags","","Pass custom flags to the `flags` agument of `open`.",427,null],[8,"FileTypeExt","","Add special unix types (block/char device, fifo and socket)",null,null],[10,"is_block_device","","Returns whether this file type is a block device.",429,null],[10,"is_char_device","","Returns whether this file type is a char device.",429,null],[10,"is_fifo","","Returns whether this file type is a fifo.",429,null],[10,"is_socket","","Returns whether this file type is a socket.",429,null],[8,"DirEntryExt","","Unix-specific extension methods for `fs::DirEntry`",null,null],[10,"ino","","Returns the underlying `d_ino` field in the contained `dirent`\nstructure.",430,null],[6,"RawFd","","",null,null],[8,"OsStrExt","","Unix-specific extensions to `OsStr`.",null,null],[10,"from_bytes","","",425,null],[10,"as_bytes","","Gets the underlying byte view of the `OsStr` slice.",425,null],[8,"JoinHandleExt","","Unix-specific extensions to `std::thread::JoinHandle`",null,null],[10,"as_pthread_t","","Extracts the raw pthread_t without taking ownership",434,null],[10,"into_pthread_t","","Consumes the thread, returning the raw pthread_t",434,null],[8,"OsStringExt","","Unix-specific extensions to `OsString`.",null,null],[10,"from_vec","","Creates an `OsString` from a byte vector.",424,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[10,"into_vec","","Yields the underlying byte vector of this `OsString`.",424,null],[8,"AsRawFd","","A trait to extract the raw unix file descriptor from an underlying\nobject.",null,null],[10,"as_raw_fd","","Extracts the raw file descriptor.",421,null],[0,"panic","bitflags::__core","Panic support in the standard library",null,null],[5,"set_handler","bitflags::__core::panic","",null,null],[5,"take_handler","","",null,{"inputs":[],"output":{"name":"box"}}],[8,"UnwindSafe","","A marker trait which represents &quot;panic safe&quot; types in Rust.",null,null],[8,"RecoverSafe","","Deprecated, renamed to UnwindSafe",null,null],[8,"RefUnwindSafe","","A marker trait representing types where a shared reference is considered\nrecover safe.",null,null],[3,"AssertUnwindSafe","","A simple wrapper around a type to assert that it is panic safe.",null,null],[12,"0","","",131,null],[3,"AssertRecoverSafe","","Deprecated, renamed to `AssertUnwindSafe`",null,null],[12,"0","","",132,null],[5,"catch_unwind","","Invokes a closure, capturing the cause of an unwinding panic if one occurs.",null,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[5,"recover","","Deprecated, renamed to `catch_unwind`",null,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[5,"resume_unwind","","Triggers a panic without invoking the panic hook.",null,null],[5,"propagate","","Deprecated, use resume_unwind instead",null,null],[5,"take_hook","","Unregisters the current panic hook, returning it.",null,{"inputs":[],"output":{"name":"box"}}],[3,"PanicInfo","","A struct providing information about a panic.",null,null],[3,"Location","","A struct containing information about the location of a panic.",null,null],[5,"set_hook","","Registers a custom panic hook, replacing any that was previously registered.",null,null],[0,"path","bitflags::__core","Cross-platform path manipulation.",null,null],[4,"Prefix","bitflags::__core::path","Path prefixes (Windows only).",null,null],[13,"Verbatim","","Prefix `\\\\?\\`, together with the given component immediately following it.",133,null],[13,"VerbatimUNC","","Prefix `\\\\?\\UNC\\`, with the &quot;server&quot; and &quot;share&quot; components following it.",133,null],[13,"VerbatimDisk","","Prefix like `\\\\?\\C:\\`, for the given drive letter",133,null],[13,"DeviceNS","","Prefix `\\\\.\\`, together with the given component immediately following it.",133,null],[13,"UNC","","Prefix `\\\\server\\share`, with the given &quot;server&quot; and &quot;share&quot; components.",133,null],[13,"Disk","","Prefix `C:` for the given disk drive.",133,null],[5,"is_separator","","Determines whether the character is one of the permitted path\nseparators for the current platform.",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[17,"MAIN_SEPARATOR","","The primary separator for the current platform",null,null],[3,"PrefixComponent","","A Windows path prefix, e.g. `C:` or `\\\\server\\share`.",null,null],[4,"Component","","A single component of a path.",null,null],[13,"Prefix","","A Windows path prefix, e.g. `C:` or `\\\\server\\share`.",135,null],[13,"RootDir","","The root directory component, appears after any prefix and before anything else",135,null],[13,"CurDir","","A reference to the current directory, i.e. `.`",135,null],[13,"ParentDir","","A reference to the parent directory, i.e. `..`",135,null],[13,"Normal","","A normal component, i.e. `a` and `b` in `a/b`",135,null],[3,"Components","","The core iterator giving the components of a path.",null,null],[3,"Iter","","An iterator over the components of a path, as `OsStr` slices.",null,null],[3,"PathBuf","","An owned, mutable path (akin to `String`).",null,null],[3,"Path","","A slice of a path (akin to `str`).",null,null],[3,"StripPrefixError","","An error returned from the `Path::strip_prefix` method indicating that the\nprefix was not found in `self`.",null,null],[3,"Display","","Helper struct for safely printing paths with `format!()` and `{}`",null,null],[0,"process","bitflags::__core","Working with processes.",null,null],[3,"Child","bitflags::__core::process","Representation of a running or exited child process.",null,null],[12,"stdin","","The handle for writing to the child&#39;s stdin, if it has been captured",143,null],[12,"stdout","","The handle for reading from the child&#39;s stdout, if it has been captured",143,null],[12,"stderr","","The handle for reading from the child&#39;s stderr, if it has been captured",143,null],[3,"ChildStdin","","A handle to a child process&#39;s stdin",null,null],[3,"ChildStdout","","A handle to a child process&#39;s stdout",null,null],[3,"ChildStderr","","A handle to a child process&#39;s stderr",null,null],[3,"Command","","The `Command` type acts as a process builder, providing fine-grained control\nover how a new process should be spawned. A default configuration can be\ngenerated using `Command::new(program)`, where `program` gives a path to the\nprogram to be executed. Additional builder methods allow the configuration\nto be changed (for example, by adding arguments) prior to spawning:",null,null],[3,"Output","","The output of a finished process.",null,null],[12,"status","","The status (exit code) of the process.",142,null],[12,"stdout","","The data that the process wrote to stdout.",142,null],[12,"stderr","","The data that the process wrote to stderr.",142,null],[3,"Stdio","","Describes what to do with a standard I/O stream for a child process.",null,null],[3,"ExitStatus","","Describes the result of a process after it has terminated.",null,null],[5,"exit","","Terminates the current process with the specified exit code.",null,null],[0,"sync","bitflags::__core","Useful synchronization primitives.",null,null],[0,"mpsc","bitflags::__core::sync","Multi-producer, single-consumer FIFO queue communication primitives.",null,null],[3,"Receiver","bitflags::__core::sync::mpsc","The receiving-half of Rust&#39;s channel type. This half can only be owned by\none thread",null,null],[3,"Iter","","An iterator over messages on a receiver, this iterator will block\nwhenever `next` is called, waiting for a new message, and `None` will be\nreturned when the corresponding channel has hung up.",null,null],[3,"IntoIter","","An owning iterator over messages on a receiver, this iterator will block\nwhenever `next` is called, waiting for a new message, and `None` will be\nreturned when the corresponding channel has hung up.",null,null],[3,"Sender","","The sending-half of Rust&#39;s asynchronous channel type. This half can only be\nowned by one thread, but it can be cloned to send to other threads.",null,null],[3,"SyncSender","","The sending-half of Rust&#39;s synchronous channel type. This half can only be\nowned by one thread, but it can be cloned to send to other threads.",null,null],[3,"SendError","","An error returned from the `send` function on channels.",null,null],[12,"0","","",146,null],[3,"RecvError","","An error returned from the `recv` function on a `Receiver`.",null,null],[4,"TryRecvError","","This enumeration is the list of the possible reasons that `try_recv` could\nnot return data when called.",null,null],[13,"Empty","","This channel is currently empty, but the sender(s) have not yet\ndisconnected, so data may yet become available.",148,null],[13,"Disconnected","","This channel&#39;s sending half has become disconnected, and there will\nnever be any more data received on this channel",148,null],[4,"TrySendError","","This enumeration is the list of the possible error outcomes for the\n`SyncSender::try_send` method.",null,null],[13,"Full","","The data could not be sent on the channel because it would require that\nthe callee block to send the data.",149,null],[13,"Disconnected","","This channel&#39;s receiving half has disconnected, so the data could not be\nsent. The data is returned back to the callee in this case.",149,null],[5,"channel","","Creates a new asynchronous channel, returning the sender/receiver halves.",null,null],[5,"sync_channel","","Creates a new synchronous, bounded channel.",null,null],[3,"Handle","","A handle to a receiver which is currently a member of a `Select` set of\nreceivers.  This handle is used to keep the receiver in the set as well as\ninteract with the underlying receiver.",null,null],[3,"Select","","The &quot;receiver set&quot; of the select interface. This structure is used to manage\na set of receivers which are being selected over.",null,null],[3,"Mutex","bitflags::__core::sync","A mutual exclusion primitive useful for protecting shared data",null,null],[0,"atomic","","Atomic types",null,null],[3,"AtomicBool","bitflags::__core::sync::atomic","A boolean type which can be safely shared between threads.",null,null],[3,"AtomicPtr","","A raw pointer type which can be safely shared between threads.",null,null],[4,"Ordering","","Atomic memory orderings",null,null],[13,"Relaxed","","No ordering constraints, only atomic operations. Corresponds to LLVM&#39;s\n`Monotonic` ordering.",171,null],[13,"Release","","When coupled with a store, all previous writes become visible\nto the other threads that perform a load with `Acquire` ordering\non the same value.",171,null],[13,"Acquire","","When coupled with a load, all subsequent loads will see data\nwritten before a store with `Release` ordering on the same value\nin other threads.",171,null],[13,"AcqRel","","When coupled with a load, uses `Acquire` ordering, and with a store\n`Release` ordering.",171,null],[13,"SeqCst","","Like `AcqRel` with the additional guarantee that all threads see all\nsequentially consistent operations in the same order.",171,null],[17,"ATOMIC_BOOL_INIT","","An `AtomicBool` initialized to `false`.",null,null],[3,"AtomicI8","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_I8_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicU8","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_U8_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicI16","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_I16_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicU16","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_U16_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicI32","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_I32_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicU32","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_U32_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicI64","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_I64_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicU64","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_U64_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicIsize","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_ISIZE_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicUsize","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_USIZE_INIT","","An atomic integer initialized to `0`.",null,null],[5,"fence","","An atomic fence.",null,null],[3,"StaticCondvar","bitflags::__core::sync","Statically allocated condition variables.",null,null],[3,"Barrier","","A barrier enables multiple threads to synchronize the beginning\nof some computation.",null,null],[3,"OnceState","","State yielded to the `call_once_force` method which can be used to query\nwhether the `Once` was previously poisoned or not.",null,null],[6,"LockResult","","",null,null],[17,"CONDVAR_INIT","","Constant initializer for a statically allocated condition variable.",null,null],[3,"RwLockWriteGuard","","RAII structure used to release the exclusive write access of a lock when\ndropped.",null,null],[3,"RwLockReadGuard","","RAII structure used to release the shared read access of a lock when\ndropped.",null,null],[3,"BarrierWaitResult","","A result returned from wait.",null,null],[3,"RwLock","","A reader-writer lock",null,null],[3,"StaticMutex","","The static mutex type is provided to allow for static allocation of mutexes.",null,null],[3,"PoisonError","","A type of error which can be returned whenever a lock is acquired.",null,null],[17,"RW_LOCK_INIT","","Constant initialization for a statically-initialized rwlock.",null,null],[3,"Arc","","An atomically reference counted wrapper for shared state.",null,null],[4,"TryLockError","","An enumeration of possible errors which can occur while calling the\n`try_lock` method.",null,null],[13,"Poisoned","","The lock could not be acquired because another thread failed while holding\nthe lock.",187,null],[13,"WouldBlock","","The lock could not be acquired at this time because the operation would\notherwise block.",187,null],[6,"TryLockResult","","",null,null],[3,"Once","","A synchronization primitive which can be used to run a one-time global\ninitialization. Useful for one-time initialization for FFI or related\nfunctionality. This type can only be constructed with the `ONCE_INIT`\nvalue.",null,null],[3,"WaitTimeoutResult","","A type indicating whether a timed wait on a condition variable returned\ndue to a time out or not.",null,null],[3,"Condvar","","A Condition Variable",null,null],[3,"Weak","","A weak pointer to an `Arc`.",null,null],[17,"MUTEX_INIT","","Static initialization of a mutex. This constant can be used to initialize\nother mutex constants.",null,null],[3,"StaticRwLock","","Structure representing a statically allocated RwLock.",null,null],[3,"MutexGuard","","An RAII implementation of a &quot;scoped lock&quot; of a mutex. When this structure is\ndropped (falls out of scope), the lock will be unlocked.",null,null],[17,"ONCE_INIT","","Initialization value for static `Once` values.",null,null],[0,"time","bitflags::__core","Temporal quantification.",null,null],[3,"Instant","bitflags::__core::time","A measurement of a monotonically increasing clock.\n Opaque and useful only with `Duration`.",null,null],[3,"SystemTime","","A measurement of the system clock, useful for talking to\nexternal entities like the file system or other processes.",null,null],[3,"SystemTimeError","","An error returned from the `duration_since` method on `SystemTime`,\nused to learn about why how far in the opposite direction a timestamp lies.",null,null],[17,"UNIX_EPOCH","","An anchor in time which can be used to create new `SystemTime` instances or\nlearn about where in time a `SystemTime` lies.",null,null],[3,"Duration","","A duration type to represent a span of time, typically used for system\ntimeouts.",null,null],[11,"new","rand::distributions::range","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low &gt;= high`.",435,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",435,null],[11,"ind_sample","","",435,null],[11,"new","rand::distributions::gamma","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",436,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",436,null],[11,"ind_sample","","",436,null],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k &lt; 0`.",437,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",437,null],[11,"ind_sample","","",437,null],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",438,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",438,null],[11,"ind_sample","","",438,null],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n &lt;= 0`.",439,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",439,null],[11,"ind_sample","","",439,null],[11,"clone","rand::distributions::normal","",440,null],[11,"clone","","",441,null],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",441,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",441,null],[11,"ind_sample","","",441,null],[11,"clone","","",442,null],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",442,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",442,null],[11,"ind_sample","","",442,null],[11,"clone","rand::distributions::exponential","",443,null],[11,"clone","","",444,null],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda &lt;= 0`.",444,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",444,null],[11,"ind_sample","","",444,null],[11,"new","rand::distributions","",445,{"inputs":[],"output":{"name":"randsample"}}],[11,"sample","","",445,null],[11,"ind_sample","","",445,null],[11,"new","","Create a new `WeightedChoice`.",446,null],[11,"sample","","",446,null],[11,"ind_sample","","",446,null],[11,"new_unseeded","rand::isaac","Create an ISAAC random number generator using the default\nfixed seed.",447,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",447,null],[11,"next_u32","","",447,null],[11,"reseed","","",447,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",447,null],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",448,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",448,null],[11,"next_u32","","",448,null],[11,"next_u64","","",448,null],[11,"reseed","","",448,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",448,null],[11,"clone","rand::chacha","",449,null],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",449,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",449,null],[11,"next_u32","","",449,null],[11,"reseed","","",449,null],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",449,null],[11,"new","rand::reseeding","Create a new `ReseedingRng` with the given parameters.",450,{"inputs":[{"name":"r"},{"name":"usize"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",450,null],[11,"next_u32","","",450,null],[11,"next_u64","","",450,null],[11,"fill_bytes","","",450,null],[11,"reseed","","",450,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",450,null],[11,"clone","","",451,null],[11,"reseed","","",451,null],[11,"default","","",451,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"next","rand","",452,null],[11,"next","","",453,null],[11,"clone","","",454,null],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",454,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",454,null],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",454,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",454,null],[11,"next_u64","bitflags::__core::__rand","Return the next random u64.",455,null],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",455,null],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",455,null],[11,"fill_bytes","","Fill `dest` with random data.",455,null],[11,"gen","","Return a random value of a `Rand` type.",455,null],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",455,null],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",455,null],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",455,null],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",455,null],[11,"choose","","Return a random element from `values`.",455,null],[11,"shuffle","","Shuffle a mutable slice in place.",455,null],[0,"boxed","bitflags::__core","A pointer type for heap allocation.",null,null],[17,"HEAP","bitflags::__core::boxed","A value that represents the heap. This is the default place that the `box`\nkeyword allocates into when no place is supplied.",null,null],[3,"ExchangeHeapSingleton","","This the singleton type used solely for `boxed::HEAP`.",null,null],[3,"Box","","A pointer type for heap allocation.",null,null],[3,"IntermediateBox","","`IntermediateBox` represents uninitialized backing storage for `Box`.",null,null],[8,"FnBox","","`FnBox` is a version of the `FnOnce` intended for use with boxed\nclosure objects. The idea is that where one would normally store a\n`Box&lt;FnOnce()&gt;` in a data structure, you should use\n`Box&lt;FnBox()&gt;`. The two traits behave essentially the same, except\nthat a `FnBox` closure can only be called if it is boxed. (Note\nthat `FnBox` may be deprecated in the future if `Box&lt;FnOnce()&gt;`\nclosures become directly usable.)",null,null],[16,"Output","","",456,null],[10,"call_box","","",456,null],[0,"u64","bitflags::__core","The 64-bit unsigned integer type.",null,null],[17,"MIN","bitflags::__core::u64","",null,null],[17,"MAX","","",null,null],[0,"borrow","bitflags::__core","A module for working with borrowed data.",null,null],[8,"ToOwned","bitflags::__core::borrow","A generalization of `Clone` to borrowed data.",null,null],[16,"Owned","","",404,null],[10,"to_owned","","Creates owned data from borrowed data, usually by cloning.",404,null],[4,"Cow","","A clone-on-write smart pointer.",null,null],[13,"Borrowed","","Borrowed data.",72,null],[13,"Owned","","Owned data.",72,null],[8,"Borrow","","A trait for borrowing data.",null,null],[10,"borrow","","Immutably borrows from an owned value.",457,null],[8,"BorrowMut","","A trait for mutably borrowing data.",null,null],[10,"borrow_mut","","Mutably borrows from an owned value.",458,null],[0,"string","bitflags::__core","A UTF-8 encoded, growable string.",null,null],[3,"String","bitflags::__core::string","A UTF-8 encoded, growable string.",null,null],[3,"FromUtf8Error","","A possible error value when converting a `String` from a UTF-8 byte vector.",null,null],[3,"FromUtf16Error","","A possible error value when converting a `String` from a UTF-16 byte slice.",null,null],[4,"ParseError","","An error when parsing a `String`.",null,null],[8,"ToString","","A trait for converting a value to a `String`.",null,null],[10,"to_string","","Converts the given value to a `String`.",391,null],[3,"Drain","","A draining iterator for `String`.",null,null],[0,"slice","bitflags::__core","A dynamically-sized view into a contiguous sequence, `[T]`.",null,null],[8,"SliceConcatExt","bitflags::__core::slice","An extension trait for concatenating slices",null,null],[16,"Output","","The resulting type after concatenation",406,null],[10,"concat","","Flattens a slice of `T` into a single value `Self::Output`.",406,null],[10,"join","","Flattens a slice of `T` into a single value `Self::Output`, placing a\ngiven separator between each.",406,null],[10,"connect","","",406,null],[3,"Windows","","An iterator over overlapping subslices of length `size`.",null,null],[5,"from_raw_parts_mut","","Performs the same functionality as `from_raw_parts`, except that a mutable\nslice is returned.",null,null],[3,"SplitN","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits.",null,null],[3,"IterMut","","Mutable slice iterator.",null,null],[3,"Split","","An iterator over subslices separated by elements that match a predicate\nfunction.",null,null],[3,"SplitNMut","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits.",null,null],[3,"Chunks","","An iterator over a slice in (non-overlapping) chunks (`size` elements at a\ntime).",null,null],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`size`\nelements at a time). When the slice len is not evenly divided by the chunk\nsize, the last slice of the iteration will be the remainder.",null,null],[3,"RSplitN","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice.",null,null],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",null,null],[3,"RSplitNMut","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice.",null,null],[3,"SplitMut","","An iterator over the subslices of the vector which are separated\nby elements that match `pred`.",null,null],[3,"Iter","","Immutable slice iterator",null,null],[0,"hash","bitflags::__core","Generic hashing support.",null,null],[8,"Hash","bitflags::__core::hash","A hashable type.",null,null],[10,"hash","","Feeds this value into the state given, updating the hasher as necessary.",459,null],[11,"hash_slice","","Feeds a slice of this type into the state provided.",459,null],[8,"Hasher","","A trait which represents the ability to hash an arbitrary stream of bytes.",null,null],[10,"finish","","Completes a round of hashing, producing the output hash generated.",460,null],[10,"write","","Writes some data into this `Hasher`",460,null],[11,"write_u8","","Write a single `u8` into this hasher",460,null],[11,"write_u16","","Write a single `u16` into this hasher.",460,null],[11,"write_u32","","Write a single `u32` into this hasher.",460,null],[11,"write_u64","","Write a single `u64` into this hasher.",460,null],[11,"write_usize","","Write a single `usize` into this hasher.",460,null],[11,"write_i8","","Write a single `i8` into this hasher.",460,null],[11,"write_i16","","Write a single `i16` into this hasher.",460,null],[11,"write_i32","","Write a single `i32` into this hasher.",460,null],[11,"write_i64","","Write a single `i64` into this hasher.",460,null],[11,"write_isize","","Write a single `isize` into this hasher.",460,null],[8,"BuildHasher","","A `BuildHasher` is typically used as a factory for instances of `Hasher`\nwhich a `HashMap` can then use to hash keys independently.",null,null],[16,"Hasher","","Type of the hasher that will be created.",461,null],[10,"build_hasher","","Creates a new hasher.",461,null],[3,"BuildHasherDefault","","A structure which implements `BuildHasher` for all `Hasher` types which also\nimplement `Default`.",null,null],[3,"SipHasher","","An implementation of SipHash 2-4.",null,null],[0,"u32","bitflags::__core","The 32-bit unsigned integer type.",null,null],[17,"MIN","bitflags::__core::u32","",null,null],[17,"MAX","","",null,null],[0,"i16","bitflags::__core","The 16-bit signed integer type.",null,null],[17,"MIN","bitflags::__core::i16","",null,null],[17,"MAX","","",null,null],[0,"option","bitflags::__core","Optional values.",null,null],[4,"Option","bitflags::__core::option","The `Option` type. See [the module level documentation](index.html) for more.",null,null],[13,"None","","No value",259,null],[13,"Some","","Some value `T`",259,null],[3,"Iter","","An iterator over a reference of the contained item in an Option.",null,null],[3,"IterMut","","An iterator over a mutable reference of the contained item in an Option.",null,null],[3,"IntoIter","","An iterator over the item contained inside an Option.",null,null],[0,"u16","bitflags::__core","The 16-bit unsigned integer type.",null,null],[17,"MIN","bitflags::__core::u16","",null,null],[17,"MAX","","",null,null],[0,"rc","bitflags::__core","Thread-local reference-counted boxes (the `Rc&lt;T&gt;` type).",null,null],[3,"Rc","bitflags::__core::rc","A reference-counted pointer type over an immutable value.",null,null],[3,"Weak","","A weak version of `Rc&lt;T&gt;`.",null,null],[0,"i8","bitflags::__core","The 8-bit signed integer type.",null,null],[17,"MIN","bitflags::__core::i8","",null,null],[17,"MAX","","",null,null],[0,"mem","bitflags::__core","Basic functions for dealing with memory.",null,null],[5,"forget","bitflags::__core::mem","Leaks a value into the void, consuming ownership and never running its\ndestructor.",null,null],[5,"size_of","","Returns the size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","Returns the size of the given value in bytes.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of","","Returns the ABI-required minimum alignment of a type",null,{"inputs":[],"output":{"name":"usize"}}],[5,"min_align_of_val","","Returns the ABI-required minimum alignment of the type of the value that `val` points to",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"align_of","","Returns the alignment in memory for a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"align_of_val","","Returns the ABI-required minimum alignment of the type of the value that `val` points to",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"zeroed","","Creates a value initialized to zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"dropped","","Creates a value initialized to an unspecified series of bytes.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninitialized","","Bypasses Rust&#39;s normal memory-initialization checks by pretending to\nproduce a value of type T, while doing nothing at all.",null,{"inputs":[],"output":{"name":"t"}}],[5,"swap","","Swap the values at two mutable locations of the same type, without deinitializing or copying\neither one.",null,null],[5,"replace","","Replaces the value at a mutable location with a new one, returning the old value, without\ndeinitializing or copying either one.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"drop","","Disposes of a value.",null,null],[17,"POST_DROP_U8","","",null,null],[17,"POST_DROP_U32","","",null,null],[17,"POST_DROP_U64","","",null,null],[17,"POST_DROP_USIZE","","",null,null],[5,"transmute_copy","","Interprets `src` as `&amp;U`, and then reads `src` without moving the contained\nvalue.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[5,"transmute","","Unsafely transforms a value of one type into a value of another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[0,"ptr","bitflags::__core","Raw, unsafe pointers, `*const T`, and `*mut T`.",null,null],[5,"null","bitflags::__core::ptr","Creates a null raw pointer.",null,null],[5,"null_mut","","Creates a null mutable raw pointer.",null,null],[5,"swap","","Swaps the values at two mutable locations of the same type, without\ndeinitializing either. They may overlap, unlike `mem::swap` which is\notherwise equivalent.",null,null],[5,"replace","","Replaces the value at `dest` with `src`, returning the old\nvalue, without dropping either.",null,null],[5,"read","","Reads the value from `src` without moving it. This leaves the\nmemory in `src` unchanged.",null,null],[5,"read_and_drop","","",null,null],[5,"write","","Overwrites a memory location with the given value without reading or\ndropping the old value.",null,null],[5,"read_volatile","","Performs a volatile read of the value from `src` without moving it. This\nleaves the memory in `src` unchanged.",null,null],[5,"write_volatile","","Performs a volatile write of a memory location with the given value without\nreading or dropping the old value.",null,null],[3,"Unique","","A wrapper around a raw non-null `*mut T` that indicates that the possessor\nof this wrapper owns the referent. This in turn implies that the\n`Unique&lt;T&gt;` is `Send`/`Sync` if `T` is `Send`/`Sync`, unlike a raw\n`*mut T` (which conveys no particular ownership semantics).  It\nalso implies that the referent of the pointer should not be\nmodified without a unique path to the `Unique` reference. Useful\nfor building abstractions like `Vec&lt;T&gt;` or `Box&lt;T&gt;`, which\ninternally use raw pointers to manage the memory that they own.",null,null],[3,"Shared","","A wrapper around a raw non-null `*mut T` that indicates that the possessor\nof this wrapper has shared ownership of the referent. Useful for\nbuilding abstractions like `Rc&lt;T&gt;` or `Arc&lt;T&gt;`, which internally\nuse raw pointers to manage the memory that they own.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::&lt;T&gt;()`\nbytes of memory starting at `dst` to `val`.",null,null],[5,"copy_nonoverlapping","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may *not* overlap.",null,null],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,null],[5,"copy","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may overlap.",null,null],[0,"i32","bitflags::__core","The 32-bit signed integer type.",null,null],[17,"MIN","bitflags::__core::i32","",null,null],[17,"MAX","","",null,null],[0,"vec","bitflags::__core","A contiguous growable array type with heap-allocated contents, written\n`Vec&lt;T&gt;` but pronounced &#39;vector.&#39;",null,null],[3,"Vec","bitflags::__core::vec","A contiguous growable array type, written `Vec&lt;T&gt;` but pronounced &#39;vector.&#39;",null,null],[3,"IntoIter","","An iterator that moves out of a vector.",null,null],[3,"Drain","","A draining iterator for `Vec&lt;T&gt;`.",null,null],[0,"i64","bitflags::__core","The 64-bit signed integer type.",null,null],[17,"MIN","bitflags::__core::i64","",null,null],[17,"MAX","","",null,null],[0,"isize","bitflags::__core","The pointer-sized signed integer type.",null,null],[17,"MIN","bitflags::__core::isize","",null,null],[17,"MAX","","",null,null],[0,"raw","bitflags::__core","Contains struct definitions for the layout of compiler built-in types.",null,null],[3,"Slice","bitflags::__core::raw","The representation of a slice like `&amp;[T]`.",null,null],[12,"data","","",269,null],[12,"len","","",269,null],[3,"TraitObject","","The representation of a trait object like `&amp;SomeTrait`.",null,null],[12,"data","","",270,null],[12,"vtable","","",270,null],[8,"Repr","","This trait is meant to map equivalences between raw structs and their\ncorresponding rust values.",null,null],[11,"repr","","This function &quot;unwraps&quot; a rust value (without consuming it) into its raw\nstruct representation. This can be used to read/write different values\nfor the struct. This is a safe method because by default it does not\nenable write-access to the fields of the return value in safe code.",462,null],[0,"ops","bitflags::__core","Overloadable operators.",null,null],[8,"Drop","bitflags::__core::ops","The `Drop` trait is used to run some code when a value goes out of scope.\nThis is sometimes called a &#39;destructor&#39;.",null,null],[10,"drop","","A method called when the value goes out of scope.",410,null],[8,"Add","","The `Add` trait is used to specify the functionality of `+`.",null,null],[16,"Output","","The resulting type after applying the `+` operator",463,null],[10,"add","","The method for the `+` operator",463,null],[8,"Sub","","The `Sub` trait is used to specify the functionality of `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",464,null],[10,"sub","","The method for the `-` operator",464,null],[8,"Mul","","The `Mul` trait is used to specify the functionality of `*`.",null,null],[16,"Output","","The resulting type after applying the `*` operator",465,null],[10,"mul","","The method for the `*` operator",465,null],[8,"Div","","The `Div` trait is used to specify the functionality of `/`.",null,null],[16,"Output","","The resulting type after applying the `/` operator",466,null],[10,"div","","The method for the `/` operator",466,null],[8,"Rem","","The `Rem` trait is used to specify the functionality of `%`.",null,null],[16,"Output","","The resulting type after applying the `%` operator",467,null],[10,"rem","","The method for the `%` operator",467,null],[8,"Neg","","The `Neg` trait is used to specify the functionality of unary `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",468,null],[10,"neg","","The method for the unary `-` operator",468,null],[8,"Not","","The `Not` trait is used to specify the functionality of unary `!`.",null,null],[16,"Output","","The resulting type after applying the `!` operator",469,null],[10,"not","","The method for the unary `!` operator",469,null],[8,"BitAnd","","The `BitAnd` trait is used to specify the functionality of `&amp;`.",null,null],[16,"Output","","The resulting type after applying the `&amp;` operator",470,null],[10,"bitand","","The method for the `&amp;` operator",470,null],[8,"BitOr","","The `BitOr` trait is used to specify the functionality of `|`.",null,null],[16,"Output","","The resulting type after applying the `|` operator",471,null],[10,"bitor","","The method for the `|` operator",471,null],[8,"BitXor","","The `BitXor` trait is used to specify the functionality of `^`.",null,null],[16,"Output","","The resulting type after applying the `^` operator",472,null],[10,"bitxor","","The method for the `^` operator",472,null],[8,"Shl","","The `Shl` trait is used to specify the functionality of `&lt;&lt;`.",null,null],[16,"Output","","The resulting type after applying the `&lt;&lt;` operator",473,null],[10,"shl","","The method for the `&lt;&lt;` operator",473,null],[8,"Shr","","The `Shr` trait is used to specify the functionality of `&gt;&gt;`.",null,null],[16,"Output","","The resulting type after applying the `&gt;&gt;` operator",474,null],[10,"shr","","The method for the `&gt;&gt;` operator",474,null],[8,"AddAssign","","The `AddAssign` trait is used to specify the functionality of `+=`.",null,null],[10,"add_assign","","The method for the `+=` operator",475,null],[8,"SubAssign","","The `SubAssign` trait is used to specify the functionality of `-=`.",null,null],[10,"sub_assign","","The method for the `-=` operator",476,null],[8,"MulAssign","","The `MulAssign` trait is used to specify the functionality of `*=`.",null,null],[10,"mul_assign","","The method for the `*=` operator",477,null],[8,"DivAssign","","The `DivAssign` trait is used to specify the functionality of `/=`.",null,null],[10,"div_assign","","The method for the `/=` operator",478,null],[8,"RemAssign","","The `RemAssign` trait is used to specify the functionality of `%=`.",null,null],[10,"rem_assign","","The method for the `%=` operator",479,null],[8,"BitAndAssign","","The `BitAndAssign` trait is used to specify the functionality of `&amp;=`.",null,null],[10,"bitand_assign","","The method for the `&amp;` operator",480,null],[8,"BitOrAssign","","The `BitOrAssign` trait is used to specify the functionality of `|=`.",null,null],[10,"bitor_assign","","The method for the `|=` operator",481,null],[8,"BitXorAssign","","The `BitXorAssign` trait is used to specify the functionality of `^=`.",null,null],[10,"bitxor_assign","","The method for the `^=` operator",482,null],[8,"ShlAssign","","The `ShlAssign` trait is used to specify the functionality of `&lt;&lt;=`.",null,null],[10,"shl_assign","","The method for the `&lt;&lt;=` operator",483,null],[8,"ShrAssign","","The `ShrAssign` trait is used to specify the functionality of `&gt;&gt;=`.",null,null],[10,"shr_assign","","The method for the `&gt;&gt;=` operator",484,null],[8,"Index","","The `Index` trait is used to specify the functionality of indexing operations\nlike `arr[idx]` when used in an immutable context.",null,null],[16,"Output","","The returned type after indexing",485,null],[10,"index","","The method for the indexing (`Foo[Bar]`) operation",485,null],[8,"IndexMut","","The `IndexMut` trait is used to specify the functionality of indexing\noperations like `arr[idx]`, when used in a mutable context.",null,null],[10,"index_mut","","The method for the indexing (`Foo[Bar]`) operation",486,null],[3,"RangeFull","","An unbounded range. Use `..` (two dots) for its shorthand.",null,null],[3,"Range","","A (half-open) range which is bounded at both ends: { x | start &lt;= x &lt; end }.\nUse `start..end` (two dots) for its shorthand.",null,null],[12,"start","","The lower bound of the range (inclusive).",272,null],[12,"end","","The upper bound of the range (exclusive).",272,null],[3,"RangeFrom","","A range which is only bounded below: { x | start &lt;= x }.\nUse `start..` for its shorthand.",null,null],[12,"start","","The lower bound of the range (inclusive).",273,null],[3,"RangeTo","","A range which is only bounded above: { x | x &lt; end }.\nUse `..end` (two dots) for its shorthand.",null,null],[12,"end","","The upper bound of the range (exclusive).",274,null],[4,"RangeInclusive","","An inclusive range which is bounded at both ends: { x | start &lt;= x &lt;= end }.\nUse `start...end` (three dots) for its shorthand.",null,null],[13,"Empty","","Empty range (iteration has finished)",275,null],[12,"at","bitflags::__core::ops::RangeInclusive","",275,null],[13,"NonEmpty","bitflags::__core::ops","Non-empty range (iteration will yield value(s))",275,null],[12,"start","bitflags::__core::ops::RangeInclusive","",275,null],[12,"end","","",275,null],[3,"RangeToInclusive","bitflags::__core::ops","An inclusive range which is only bounded above: { x | x &lt;= end }.\nUse `...end` (three dots) for its shorthand.",null,null],[12,"end","","The upper bound of the range (inclusive)",276,null],[8,"Deref","","The `Deref` trait is used to specify the functionality of dereferencing\noperations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing",487,null],[10,"deref","","The method called to dereference a value",487,null],[8,"DerefMut","","The `DerefMut` trait is used to specify the functionality of dereferencing\nmutably like `*v = 1;`",null,null],[10,"deref_mut","","The method called to mutably dereference a value",488,null],[8,"Fn","","A version of the call operator that takes an immutable receiver.",null,null],[10,"call","","This is called when the call operator is used.",408,null],[8,"FnMut","","A version of the call operator that takes a mutable receiver.",null,null],[10,"call_mut","","This is called when the call operator is used.",405,null],[8,"FnOnce","","A version of the call operator that takes a by-value receiver.",null,null],[16,"Output","","The returned type after the call operator is used.",397,null],[10,"call_once","","This is called when the call operator is used.",397,null],[8,"CoerceUnsized","","Trait that indicates that this is a pointer or a wrapper for one,\nwhere unsizing can be performed on the pointee.",null,null],[8,"Place","","Both `in (PLACE) EXPR` and `box EXPR` desugar into expressions\nthat allocate an intermediate &quot;place&quot; that holds uninitialized\nstate.  The desugaring evaluates EXPR, and writes the result at\nthe address returned by the `pointer` method of this trait.",null,null],[10,"pointer","","Returns the address where the input value will be written.\nNote that the data at this address is generally uninitialized,\nand thus one should use `ptr::write` for initializing it.",489,null],[8,"Placer","","Interface to implementations of  `in (PLACE) EXPR`.",null,null],[16,"Place","","`Place` is the intermedate agent guarding the\nuninitialized state for `Data`.",490,null],[10,"make_place","","Creates a fresh place from `self`.",490,null],[8,"InPlace","","Specialization of `Place` trait supporting `in (PLACE) EXPR`.",null,null],[16,"Owner","","`Owner` is the type of the end value of `in (PLACE) EXPR`",491,null],[10,"finalize","","Converts self into the final value, shifting\ndeallocation/cleanup responsibilities (if any remain), over to\nthe returned instance of `Owner` and forgetting self.",491,null],[8,"Boxed","","Core trait for the `box EXPR` form.",null,null],[16,"Data","","The kind of data that is stored in this kind of box.",492,null],[16,"Place","","The place that will negotiate the storage of the data.",492,null],[10,"finalize","","Converts filled place into final owning value, shifting\ndeallocation/cleanup responsibilities (if any remain), over to\nreturned instance of `Self` and forgetting `filled`.",492,null],[8,"BoxPlace","","Specialization of `Place` trait supporting `box EXPR`.",null,null],[10,"make_place","","Creates a globally fresh place.",493,{"inputs":[],"output":{"name":"self"}}],[0,"convert","bitflags::__core","Traits for conversions between types.",null,null],[8,"AsRef","bitflags::__core::convert","A cheap, reference-to-reference conversion.",null,null],[10,"as_ref","","Performs the conversion.",395,null],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",398,null],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive.",null,null],[10,"into","","Performs the conversion.",390,null],[8,"From","","Construct `Self` via a conversion.",null,null],[10,"from","","Performs the conversion.",409,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"TryInto","","An attempted conversion that consumes `self`, which may or may not be expensive.",null,null],[16,"Err","","The type returned in the event of a conversion error.",494,null],[10,"try_into","","Performs the conversion.",494,null],[8,"TryFrom","","Attempt to construct `Self` via a conversion.",null,null],[16,"Err","","The type returned in the event of a conversion error.",495,null],[10,"try_from","","Performs the conversion.",495,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[0,"any","bitflags::__core","This module implements the `Any` trait, which enables dynamic typing\nof any `&#39;static` type through runtime reflection.",null,null],[8,"Any","bitflags::__core::any","A type to emulate dynamic typing.",null,null],[10,"get_type_id","","Gets the `TypeId` of `self`.",277,null],[3,"TypeId","","A `TypeId` represents a globally unique identifier for a type.",null,null],[0,"clone","bitflags::__core","The `Clone` trait for types that cannot be &#39;implicitly copied&#39;.",null,null],[8,"Clone","bitflags::__core::clone","A common trait for cloning an object.",null,null],[10,"clone","","Returns a copy of the value.",411,null],[11,"clone_from","","Performs copy-assignment from `source`.",411,null],[0,"u8","bitflags::__core","The 8-bit unsigned integer type.",null,null],[17,"MIN","bitflags::__core::u8","",null,null],[17,"MAX","","",null,null],[0,"result","bitflags::__core","Error handling with the `Result` type.",null,null],[4,"Result","bitflags::__core::result","`Result` is a type that represents either success (`Ok`) or failure (`Err`).",null,null],[13,"Ok","","Contains the success value",279,null],[13,"Err","","Contains the error value",279,null],[3,"Iter","","An iterator over a reference to the `Ok` variant of a `Result`.",null,null],[3,"IterMut","","An iterator over a mutable reference to the `Ok` variant of a `Result`.",null,null],[3,"IntoIter","","An iterator over the value in a `Ok` variant of a `Result`.",null,null],[0,"char","bitflags::__core","A character type.",null,null],[11,"clone","rustc_unicode::u_str","",496,null],[11,"new","","Create a UTF-16 encoder from any `char` iterator.",496,{"inputs":[{"name":"i"}],"output":{"name":"utf16encoder"}}],[11,"next","","",496,null],[11,"size_hint","","",496,null],[11,"next","","",497,null],[11,"next_back","","",497,null],[3,"ToLowercase","bitflags::__core::char","Returns an iterator that yields the lowercase equivalent of a `char`.",null,null],[3,"ToUppercase","","Returns an iterator that yields the uppercase equivalent of a `char`.",null,null],[3,"DecodeUtf16","","An iterator that decodes UTF-16 encoded code points from an iterator of `u16`s.",null,null],[3,"DecodeUtf16Error","","An iterator that decodes UTF-16 encoded code points from an iterator of `u16`s.",null,null],[5,"decode_utf16","","Create an iterator over the UTF-16 encoded code points in `iter`,\nreturning unpaired surrogates as `Err`s.",null,{"inputs":[{"name":"i"}],"output":{"name":"decodeutf16"}}],[17,"REPLACEMENT_CHARACTER","","`U+FFFD REPLACEMENT CHARACTER` (�) is used in Unicode to represent a\ndecoding error.",null,null],[3,"EscapeDefault","","An iterator that yields the literal escape code of a `char`.",null,null],[3,"EscapeUnicode","","Returns an iterator that yields the hexadecimal Unicode escape of a\ncharacter, as `char`s.",null,null],[5,"from_u32","","Converts a `u32` to a `char`.",null,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[17,"UNICODE_VERSION","","The version of [Unicode](http://www.unicode.org/)\nthat the unicode parts of `CharExt` and `UnicodeStrPrelude` traits are based on.",null,null],[3,"EncodeUtf16","","An iterator over `u16` entries represending the UTF-16 encoding of a `char`\nvalue.",null,null],[3,"EncodeUtf8","","An iterator over `u8` entries represending the UTF-8 encoding of a `char`\nvalue.",null,null],[5,"from_u32_unchecked","","Converts a `u32` to a `char`, ignoring validity.",null,{"inputs":[{"name":"u32"}],"output":{"name":"char"}}],[5,"from_digit","","Converts a digit in the given radix to a `char`.",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[17,"MAX","","The highest valid code point a `char` can have.",null,null],[0,"cell","bitflags::__core","Shareable mutable containers.",null,null],[3,"Cell","bitflags::__core::cell","A mutable memory location that admits only `Copy` data.",null,null],[3,"RefCell","","A mutable memory location with dynamically checked borrow rules",null,null],[4,"BorrowState","","An enumeration of values returned from the `state` method on a `RefCell&lt;T&gt;`.",null,null],[13,"Reading","","The cell is currently being read, there is at least one active `borrow`.",287,null],[13,"Writing","","The cell is currently being written to, there is an active `borrow_mut`.",287,null],[13,"Unused","","There are no outstanding borrows on this cell.",287,null],[3,"Ref","","Wraps a borrowed reference to a value in a `RefCell` box.\nA wrapper type for an immutably borrowed value from a `RefCell&lt;T&gt;`.",null,null],[3,"RefMut","","A wrapper type for a mutably borrowed value from a `RefCell&lt;T&gt;`.",null,null],[3,"UnsafeCell","","The core primitive for interior mutability in Rust.",null,null],[0,"fmt","bitflags::__core","Utilities for formatting and printing strings",null,null],[5,"format","bitflags::__core::fmt","The format function takes a precompiled format string and a list of\narguments, to return the resulting formatted string.",null,{"inputs":[{"name":"arguments"}],"output":{"name":"string"}}],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugStruct","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",null,null],[8,"Debug","","Format trait for the `?` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",498,null],[3,"Formatter","","A struct to represent both where to emit formatting strings to and how they\nshould be formatted. A mutable version of this is passed to all formatting\ntraits.",null,null],[3,"Arguments","","This structure represents a safely precompiled version of a format string\nand its arguments. This cannot be generated at runtime because it cannot\nsafely be done so, so no constructors are given and the fields are private\nto prevent modification.",null,null],[8,"Write","","A collection of methods that are required to format a message into a stream.",null,null],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write\nsucceeded.",499,null],[11,"write_char","","Writes a `char` into this writer, returning whether the write succeeded.",499,null],[11,"write_fmt","","Glue for usage of the `write!` macro with implementors of this trait.",499,null],[8,"LowerHex","","Format trait for the `x` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",500,null],[8,"Binary","","Format trait for the `b` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",501,null],[8,"Pointer","","Format trait for the `p` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",502,null],[8,"LowerExp","","Format trait for the `e` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",503,null],[8,"UpperHex","","Format trait for the `X` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",504,null],[8,"Octal","","Format trait for the `o` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",505,null],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",null,null],[5,"write","","The `write` function takes an output stream, a precompiled format string,\nand a list of arguments. The arguments will be formatted according to the\nspecified format string into the output stream provided.",null,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[6,"Result","","",null,null],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",null,null],[8,"UpperExp","","Format trait for the `E` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",506,null],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",507,null],[3,"Error","","The error type which is returned from formatting a message into a stream.",null,null],[0,"iter","bitflags::__core","Composable external iteration.",null,null],[3,"Rev","bitflags::__core::iter","An double-ended iterator with the direction inverted.",null,null],[3,"Cloned","","An iterator that clones the elements of an underlying iterator.",null,null],[3,"Cycle","","An iterator that repeats endlessly.",null,null],[3,"Chain","","An iterator that strings two iterators together.",null,null],[3,"Zip","","An iterator that iterates two other iterators simultaneously.",null,null],[3,"Map","","An iterator that maps the values of `iter` with `f`.",null,null],[3,"Filter","","An iterator that filters the elements of `iter` with `predicate`.",null,null],[3,"FilterMap","","An iterator that uses `f` to both filter and map elements from `iter`.",null,null],[3,"Enumerate","","An iterator that yields the current count and the element during iteration.",null,null],[3,"Peekable","","An iterator with a `peek()` that returns an optional reference to the next\nelement.",null,null],[3,"SkipWhile","","An iterator that rejects elements while `predicate` is true.",null,null],[3,"TakeWhile","","An iterator that only accepts elements while `predicate` is true.",null,null],[3,"Skip","","An iterator that skips over `n` elements of `iter`.",null,null],[3,"Take","","An iterator that only iterates over the first `n` iterations of `iter`.",null,null],[3,"Scan","","An iterator to maintain state while iterating another iterator.",null,null],[3,"FlatMap","","An iterator that maps each element to an iterator, and yields the elements\nof the produced iterators.",null,null],[3,"Fuse","","An iterator that yields `None` forever after the underlying iterator\nyields `None` once.",null,null],[3,"Inspect","","An iterator that calls a function with a reference to each element before\nyielding it.",null,null],[8,"Iterator","","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",389,null],[10,"next","","Advances the iterator and returns the next value.",389,null],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",389,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",389,null],[11,"last","","Consumes the iterator, returning the last element.",389,null],[11,"nth","","Consumes the `n` first elements of the iterator, then returns the\n`next()` one.",389,null],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",389,null],[11,"zip","","&#39;Zips up&#39; two iterators into a single iterator of pairs.",389,null],[11,"map","","Takes a closure and creates an iterator which calls that closure on each\nelement.",389,null],[11,"filter","","Creates an iterator which uses a closure to determine if an element\nshould be yielded.",389,null],[11,"filter_map","","Creates an iterator that both filters and maps.",389,null],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as\nthe next value.",389,null],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of\nthe iterator without consuming it.",389,null],[11,"skip_while","","Creates an iterator that [`skip()`]s elements based on a predicate.",389,null],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",389,null],[11,"skip","","Creates an iterator that skips the first `n` elements.",389,null],[11,"take","","Creates an iterator that yields its first `n` elements.",389,null],[11,"scan","","An iterator adaptor similar to [`fold()`] that holds internal state and\nproduces a new iterator.",389,null],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",389,null],[11,"fuse","","Creates an iterator which ends after the first `None`.",389,null],[11,"inspect","","Do something with each element of an iterator, passing the value on.",389,null],[11,"by_ref","","Borrows an iterator, rather than consuming it.",389,null],[11,"collect","","Transforms an iterator into a collection.",389,null],[11,"partition","","Consumes an iterator, creating two collections from it.",389,null],[11,"fold","","An iterator adaptor that applies a function, producing a single, final value.",389,null],[11,"all","","Tests if every element of the iterator matches a predicate.",389,null],[11,"any","","Tests if any element of the iterator matches a predicate.",389,null],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",389,null],[11,"position","","Searches for an element in an iterator, returning its index.",389,null],[11,"rposition","","Searches for an element in an iterator from the right, returning its\nindex.",389,null],[11,"max","","Returns the maximum element of an iterator.",389,null],[11,"min","","Returns the minimum element of an iterator.",389,null],[11,"max_by_key","","Returns the element that gives the maximum value from the\nspecified function.",389,null],[11,"min_by_key","","Returns the element that gives the minimum value from the\nspecified function.",389,null],[11,"rev","","Reverses an iterator&#39;s direction.",389,null],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",389,null],[11,"cloned","","Creates an iterator which `clone()`s all of its elements.",389,null],[11,"cycle","","Repeats an iterator endlessly.",389,null],[11,"sum","","Sums the elements of an iterator.",389,null],[11,"product","","Iterates over the entire iterator, multiplying all the elements",389,null],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",389,null],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",389,null],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of\nanother.",389,null],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of\nanother.",389,null],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically\nless than those of another.",389,null],[11,"le","","Determines if the elements of this `Iterator` are lexicographically\nless or equal to those of another.",389,null],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically\ngreater than those of another.",389,null],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically\ngreater than or equal to those of another.",389,null],[3,"Repeat","","An iterator that repeats an element endlessly.",null,null],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact number of times the iterator will iterate.",396,null],[8,"Step","","Objects that can be stepped over in both directions.",null,null],[10,"step","","Steps `self` if possible.",508,null],[10,"steps_between","","Returns the number of steps between two step objects. The count is\ninclusive of `start` and exclusive of `end`.",508,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[3,"Once","","An iterator that yields an element exactly once.",null,null],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","An iterator able to yield elements from both ends.",399,null],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",403,null],[5,"once","","Creates an iterator that yields an element exactly once.",null,{"inputs":[{"name":"t"}],"output":{"name":"once"}}],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",392,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",392,null],[10,"into_iter","","Creates an iterator from a value.",392,null],[8,"FromIterator","","Conversion from an `Iterator`.",null,null],[10,"from_iter","","Creates a value from an iterator.",509,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[5,"repeat","","Creates a new iterator that endlessly repeats a single element.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[3,"Empty","","An iterator that yields nothing.",null,null],[3,"StepBy","","An adapter for stepping range iterators by a custom amount.",null,null],[5,"empty","","Creates an iterator that yields nothing.",null,{"inputs":[],"output":{"name":"empty"}}],[0,"usize","bitflags::__core","The pointer-sized unsigned integer type.",null,null],[17,"MIN","bitflags::__core::usize","",null,null],[17,"MAX","","",null,null],[0,"default","bitflags::__core","The `Default` trait for types which may have meaningful default values.",null,null],[8,"Default","bitflags::__core::default","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the &quot;default value&quot; for a type.",388,{"inputs":[],"output":{"name":"self"}}],[0,"marker","bitflags::__core","Primitive traits and marker types representing basic &#39;kinds&#39; of types.",null,null],[8,"Send","bitflags::__core::marker","Types that can be transferred across thread boundaries.",null,null],[8,"Sized","","Types with a constant size known at compile-time.",null,null],[8,"Unsize","","Types that can be &quot;unsized&quot; to a dynamically sized type.",null,null],[8,"Copy","","Types that can be copied by simply copying bits (i.e. `memcpy`).",null,null],[8,"Sync","","Types that can be safely shared between threads when aliased.",null,null],[3,"PhantomData","","`PhantomData&lt;T&gt;` allows you to describe that a type acts as if it stores a value of type `T`,\neven though it does not. This allows you to inform the compiler about certain safety properties\nof your code.",null,null],[8,"Reflect","","Types that can be reflected over.",null,null],[0,"str","bitflags::__core","Unicode string slices.",null,null],[6,"Utf16Units","bitflags::__core::str","",null,null],[3,"EncodeUtf16","","External iterator for a string&#39;s UTF-16 code units.",null,null],[3,"LinesAny","","Created with the method [`lines_any()`].",null,null],[3,"Chars","","Iterator for the char (representing *Unicode Scalar Values*) of a string",null,null],[3,"RSplit","","Created with the method [`rsplit()`].",null,null],[8,"FromStr","","A trait to abstract the idea of creating a new instance of a type from a\nstring.",null,null],[16,"Err","","The associated error which can be returned from parsing.",510,null],[10,"from_str","","Parses a string `s` to return a value of this type.",510,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[3,"RSplitN","","Created with the method [`rsplitn()`].",null,null],[3,"ParseBoolError","","An error returned when parsing a `bool` from a string fails.",null,null],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking\nthat the string contains valid UTF-8.",null,null],[3,"CharRange","","Struct that contains a `char` and the index of the first byte of\nthe next `char` in a string.  This can be used as a data structure\nfor iterating over the UTF-8 bytes of a string.",null,null],[12,"ch","","Current `char`",378,null],[12,"next","","Index of the first byte of the next `char`",378,null],[3,"RMatchIndices","","Created with the method [`rmatch_indices()`].",null,null],[3,"MatchIndices","","Created with the method [`match_indices()`].",null,null],[3,"Utf8Error","","Errors which can occur when attempting to interpret a sequence of `u8`\nas a string.",null,null],[3,"SplitN","","Created with the method [`splitn()`].",null,null],[3,"Lines","","Created with the method [`lines()`].",null,null],[3,"Split","","Created with the method [`split()`].",null,null],[5,"from_utf8","","Converts a slice of bytes to a string slice.",null,null],[3,"SplitTerminator","","Created with the method [`split_terminator()`].",null,null],[3,"RMatches","","Created with the method [`rmatches()`].",null,null],[3,"CharIndices","","Iterator for a string&#39;s characters and their byte offsets.",null,null],[0,"pattern","","The string Pattern API.",null,null],[8,"Pattern","bitflags::__core::str::pattern","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",511,null],[10,"into_searcher","","Constructs the associated searcher from\n`self` and the `haystack` to search in.",511,null],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",511,null],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",511,null],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",511,null],[4,"SearchStep","","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.",null,null],[13,"Match","","Expresses that a match of the pattern has been found at\n`haystack[a..b]`.",316,null],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match\nof the pattern.",316,null],[13,"Done","","Expresses that every byte of the haystack has been visted, ending\nthe iteration.",316,null],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlaying string to be searched in",512,null],[10,"next","","Performs the next search step starting from the front.",512,null],[11,"next_match","","Find the next `Match` result. See `next()`",512,null],[11,"next_reject","","Find the next `Reject` result. See `next()`",512,null],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",513,null],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",513,null],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",513,null],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher`\ncan be used for a `DoubleEndedIterator` implementation.",null,null],[3,"CharSearcher","","Associated type for `&lt;char as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[3,"CharSliceSearcher","","Associated type for `&lt;&amp;[char] as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[3,"CharPredicateSearcher","","Associated type for `&lt;F as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[3,"StrSearcher","","Associated type for `&lt;&amp;str as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[3,"RSplitTerminator","bitflags::__core::str","Created with the method [`rsplit_terminator()`].",null,null],[3,"SplitWhitespace","","An iterator over the non-whitespace substrings of a string,\nseparated by any amount of whitespace.",null,null],[3,"Matches","","Created with the method [`matches()`].",null,null],[3,"Bytes","","External iterator for a string&#39;s bytes.\nUse with the `std::iter` module.",null,null],[0,"intrinsics","bitflags::__core","rustc compiler intrinsics.",null,null],[5,"atomic_cxchg","bitflags::__core::intrinsics","",null,null],[5,"atomic_cxchg_acq","","",null,null],[5,"atomic_cxchg_rel","","",null,null],[5,"atomic_cxchg_acqrel","","",null,null],[5,"atomic_cxchg_relaxed","","",null,null],[5,"atomic_cxchg_failrelaxed","","",null,null],[5,"atomic_cxchg_failacq","","",null,null],[5,"atomic_cxchg_acq_failrelaxed","","",null,null],[5,"atomic_cxchg_acqrel_failrelaxed","","",null,null],[5,"atomic_cxchgweak","","",null,null],[5,"atomic_cxchgweak_acq","","",null,null],[5,"atomic_cxchgweak_rel","","",null,null],[5,"atomic_cxchgweak_acqrel","","",null,null],[5,"atomic_cxchgweak_relaxed","","",null,null],[5,"atomic_cxchgweak_failrelaxed","","",null,null],[5,"atomic_cxchgweak_failacq","","",null,null],[5,"atomic_cxchgweak_acq_failrelaxed","","",null,null],[5,"atomic_cxchgweak_acqrel_failrelaxed","","",null,null],[5,"atomic_load","","",null,null],[5,"atomic_load_acq","","",null,null],[5,"atomic_load_relaxed","","",null,null],[5,"atomic_load_unordered","","",null,null],[5,"atomic_store","","",null,null],[5,"atomic_store_rel","","",null,null],[5,"atomic_store_relaxed","","",null,null],[5,"atomic_store_unordered","","",null,null],[5,"atomic_xchg","","",null,null],[5,"atomic_xchg_acq","","",null,null],[5,"atomic_xchg_rel","","",null,null],[5,"atomic_xchg_acqrel","","",null,null],[5,"atomic_xchg_relaxed","","",null,null],[5,"atomic_xadd","","",null,null],[5,"atomic_xadd_acq","","",null,null],[5,"atomic_xadd_rel","","",null,null],[5,"atomic_xadd_acqrel","","",null,null],[5,"atomic_xadd_relaxed","","",null,null],[5,"atomic_xsub","","",null,null],[5,"atomic_xsub_acq","","",null,null],[5,"atomic_xsub_rel","","",null,null],[5,"atomic_xsub_acqrel","","",null,null],[5,"atomic_xsub_relaxed","","",null,null],[5,"atomic_and","","",null,null],[5,"atomic_and_acq","","",null,null],[5,"atomic_and_rel","","",null,null],[5,"atomic_and_acqrel","","",null,null],[5,"atomic_and_relaxed","","",null,null],[5,"atomic_nand","","",null,null],[5,"atomic_nand_acq","","",null,null],[5,"atomic_nand_rel","","",null,null],[5,"atomic_nand_acqrel","","",null,null],[5,"atomic_nand_relaxed","","",null,null],[5,"atomic_or","","",null,null],[5,"atomic_or_acq","","",null,null],[5,"atomic_or_rel","","",null,null],[5,"atomic_or_acqrel","","",null,null],[5,"atomic_or_relaxed","","",null,null],[5,"atomic_xor","","",null,null],[5,"atomic_xor_acq","","",null,null],[5,"atomic_xor_rel","","",null,null],[5,"atomic_xor_acqrel","","",null,null],[5,"atomic_xor_relaxed","","",null,null],[5,"atomic_max","","",null,null],[5,"atomic_max_acq","","",null,null],[5,"atomic_max_rel","","",null,null],[5,"atomic_max_acqrel","","",null,null],[5,"atomic_max_relaxed","","",null,null],[5,"atomic_min","","",null,null],[5,"atomic_min_acq","","",null,null],[5,"atomic_min_rel","","",null,null],[5,"atomic_min_acqrel","","",null,null],[5,"atomic_min_relaxed","","",null,null],[5,"atomic_umin","","",null,null],[5,"atomic_umin_acq","","",null,null],[5,"atomic_umin_rel","","",null,null],[5,"atomic_umin_acqrel","","",null,null],[5,"atomic_umin_relaxed","","",null,null],[5,"atomic_umax","","",null,null],[5,"atomic_umax_acq","","",null,null],[5,"atomic_umax_rel","","",null,null],[5,"atomic_umax_acqrel","","",null,null],[5,"atomic_umax_relaxed","","",null,null],[5,"atomic_fence","","",null,null],[5,"atomic_fence_acq","","",null,null],[5,"atomic_fence_rel","","",null,null],[5,"atomic_fence_acqrel","","",null,null],[5,"atomic_singlethreadfence","","A compiler-only memory barrier.",null,null],[5,"atomic_singlethreadfence_acq","","",null,null],[5,"atomic_singlethreadfence_rel","","",null,null],[5,"atomic_singlethreadfence_acqrel","","",null,null],[5,"abort","","Aborts the execution of the process.",null,null],[5,"unreachable","","Tells LLVM that this point in the code is not reachable,\nenabling further optimizations.",null,null],[5,"assume","","Informs the optimizer that a condition is always true.\nIf the condition is false, the behavior is undefined.",null,null],[5,"breakpoint","","Executes a breakpoint trap, for inspection by a debugger.",null,null],[5,"size_of","","The size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"move_val_init","","Moves a value to an uninitialized memory location.",null,null],[5,"min_align_of","","",null,{"inputs":[],"output":{"name":"usize"}}],[5,"pref_align_of","","",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of_val","","",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,null],[5,"type_name","","Gets a static string slice containing the name of a type.",null,{"inputs":[],"output":{"name":"str"}}],[5,"type_id","","Gets an identifier which is globally unique to the specified type. This\nfunction will return the same value for a type regardless of whichever\ncrate it is invoked in.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"init_dropped","","Creates a value initialized to so that its drop flag,\nif any, says that it has been dropped.",null,{"inputs":[],"output":{"name":"t"}}],[5,"init","","Creates a value initialized to zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninit","","Creates an uninitialized value.",null,{"inputs":[],"output":{"name":"t"}}],[5,"forget","","Moves a value out of scope without running drop glue.",null,null],[5,"transmute","","Unsafely transforms a value of one type into a value of another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[5,"return_address","","Gives the address for the return value of the enclosing function.",null,null],[5,"needs_drop","","Returns `true` if the actual type given as `T` requires drop\nglue; returns `false` if the actual type provided for `T`\nimplements `Copy`.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"offset","","Calculates the offset from a pointer.",null,null],[5,"arith_offset","","Calculates the offset from a pointer, potentially wrapping.",null,null],[5,"copy_nonoverlapping","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may *not* overlap.",null,null],[5,"copy","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may overlap.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::&lt;T&gt;()`\nbytes of memory starting at `dst` to `val`.",null,null],[5,"volatile_copy_nonoverlapping_memory","","Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::&lt;T&gt;()` and an alignment of\n`min_align_of::&lt;T&gt;()`",null,null],[5,"volatile_copy_memory","","Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::&lt;T&gt;()` and an alignment of\n`min_align_of::&lt;T&gt;()`",null,null],[5,"volatile_set_memory","","Equivalent to the appropriate `llvm.memset.p0i8.*` intrinsic, with a\nsize of `count` * `size_of::&lt;T&gt;()` and an alignment of\n`min_align_of::&lt;T&gt;()`.",null,null],[5,"volatile_load","","Perform a volatile load from the `src` pointer.",null,null],[5,"volatile_store","","Perform a volatile store to the `dst` pointer.",null,null],[5,"sqrtf32","","Returns the square root of an `f32`",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"sqrtf64","","Returns the square root of an `f64`",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"powif32","","Raises an `f32` to an integer power.",null,{"inputs":[{"name":"f32"},{"name":"i32"}],"output":{"name":"f32"}}],[5,"powif64","","Raises an `f64` to an integer power.",null,{"inputs":[{"name":"f64"},{"name":"i32"}],"output":{"name":"f64"}}],[5,"sinf32","","Returns the sine of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"sinf64","","Returns the sine of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"cosf32","","Returns the cosine of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"cosf64","","Returns the cosine of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"powf32","","Raises an `f32` to an `f32` power.",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"powf64","","Raises an `f64` to an `f64` power.",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"expf32","","Returns the exponential of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"expf64","","Returns the exponential of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"exp2f32","","Returns 2 raised to the power of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"exp2f64","","Returns 2 raised to the power of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"logf32","","Returns the natural logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"logf64","","Returns the natural logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"log10f32","","Returns the base 10 logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"log10f64","","Returns the base 10 logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"log2f32","","Returns the base 2 logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"log2f64","","Returns the base 2 logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"fmaf32","","Returns `a * b + c` for `f32` values.",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"fmaf64","","Returns `a * b + c` for `f64` values.",null,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"fabsf32","","Returns the absolute value of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"fabsf64","","Returns the absolute value of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"copysignf32","","Copies the sign from `y` to `x` for `f32` values.",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"copysignf64","","Copies the sign from `y` to `x` for `f64` values.",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"floorf32","","Returns the largest integer less than or equal to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"floorf64","","Returns the largest integer less than or equal to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"ceilf32","","Returns the smallest integer greater than or equal to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"ceilf64","","Returns the smallest integer greater than or equal to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"truncf32","","Returns the integer part of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"truncf64","","Returns the integer part of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"rintf32","","Returns the nearest integer to an `f32`. May raise an inexact floating-point exception\nif the argument is not an integer.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"rintf64","","Returns the nearest integer to an `f64`. May raise an inexact floating-point exception\nif the argument is not an integer.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"nearbyintf32","","Returns the nearest integer to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"nearbyintf64","","Returns the nearest integer to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"roundf32","","Returns the nearest integer to an `f32`. Rounds half-way cases away from zero.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"roundf64","","Returns the nearest integer to an `f64`. Rounds half-way cases away from zero.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"fadd_fast","","Float addition that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fsub_fast","","Float subtraction that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fmul_fast","","Float multiplication that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fdiv_fast","","Float division that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"frem_fast","","Float remainder that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"ctpop","","Returns the number of bits set in an integer type `T`",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"ctlz","","Returns the number of leading bits unset in an integer type `T`",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"cttz","","Returns the number of trailing bits unset in an integer type `T`",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"bswap","","Reverses the bytes in an integer type `T`.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"add_with_overflow","","Performs checked integer addition.",null,null],[5,"sub_with_overflow","","Performs checked integer subtraction",null,null],[5,"mul_with_overflow","","Performs checked integer multiplication",null,null],[5,"unchecked_div","","Performs an unchecked division, resulting in undefined behavior\nwhere y = 0 or x = `T::min_value()` and y = -1",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"unchecked_rem","","Returns the remainder of an unchecked division, resulting in\nundefined behavior where y = 0 or x = `T::min_value()` and y = -1",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_add","","Returns (a + b) mod 2^N, where N is the width of T in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_sub","","Returns (a - b) mod 2^N, where N is the width of T in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_mul","","Returns (a * b) mod 2^N, where N is the width of T in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"discriminant_value","","Returns the value of the discriminant for the variant in &#39;v&#39;,\ncast to a `u64`; if `T` has no discriminant, returns 0.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"try","","Rust&#39;s &quot;try catch&quot; construct which invokes the function pointer `f` with\nthe data pointer `data`.",null,null],[0,"cmp","bitflags::__core","Functionality for ordering and comparison.",null,null],[8,"PartialEq","bitflags::__core::cmp","Trait for equality comparisons which are [partial equivalence\nrelations](http://en.wikipedia.org/wiki/Partial_equivalence_relation).",null,null],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used\nby `==`.",393,null],[11,"ne","","This method tests for `!=`.",393,null],[8,"Eq","","Trait for equality comparisons which are [equivalence relations](\nhttps://en.wikipedia.org/wiki/Equivalence_relation).",null,null],[4,"Ordering","","An `Ordering` is the result of a comparison between two values.",null,null],[13,"Less","","An ordering where a compared value is less [than another].",321,null],[13,"Equal","","An ordering where a compared value is equal [to another].",321,null],[13,"Greater","","An ordering where a compared value is greater [than another].",321,null],[8,"Ord","","Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",407,null],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",394,null],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `&lt;` operator.",394,null],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `&lt;=`\noperator.",394,null],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `&gt;` operator.",394,null],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `&gt;=`\noperator.",394,null],[5,"min","","Compare and return the minimum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"max","","Compare and return the maximum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[14,"bitflags!","bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[[8,"Error"],[3,"Box"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"ParseIntError"],[3,"TryFromIntError"],[3,"ParseFloatError"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"DecodeUtf16Error"],[3,"EscapeDefault"],[4,"LocalKeyState"],[3,"LocalKey"],[3,"Key"],[3,"Key"],[3,"ScopedKey"],[3,"KeyInner"],[3,"Builder"],[3,"Thread"],[3,"JoinHandle"],[3,"HashMap"],[3,"Iter"],[3,"Keys"],[3,"Values"],[3,"IterMut"],[3,"IntoIter"],[3,"ValuesMut"],[3,"Drain"],[4,"Entry"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"RandomState"],[3,"HashSet"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"Vec"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Iter"],[3,"IntoIter"],[3,"LinkedList"],[3,"IterMut"],[3,"FrontPlace"],[3,"BackPlace"],[3,"Vars"],[3,"VarsOs"],[4,"VarError"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"ArgsOs"],[3,"CString"],[3,"CStr"],[3,"NulError"],[3,"FromBytesWithNulError"],[3,"IntoStringError"],[3,"Error"],[3,"OsString"],[3,"OsStr"],[4,"Cow"],[3,"String"],[3,"Metadata"],[3,"OpenOptions"],[3,"Permissions"],[3,"FileType"],[3,"File"],[3,"ReadDir"],[3,"DirEntry"],[3,"DirBuilder"],[3,"BufReader"],[3,"IntoInnerError"],[3,"BufWriter"],[3,"LineWriter"],[3,"Cursor"],[4,"ErrorKind"],[3,"Empty"],[3,"Repeat"],[3,"Sink"],[3,"Stdin"],[3,"StdinLock"],[3,"Stdout"],[3,"StdoutLock"],[3,"Stderr"],[3,"StderrLock"],[4,"SeekFrom"],[3,"Chain"],[3,"Take"],[3,"Bytes"],[4,"CharsError"],[3,"Chars"],[3,"Split"],[3,"Lines"],[4,"IpAddr"],[4,"Ipv6MulticastScope"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[4,"SocketAddr"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"TcpStream"],[3,"TcpListener"],[3,"Incoming"],[3,"UdpSocket"],[3,"AddrParseError"],[4,"Shutdown"],[3,"LookupHost"],[3,"stat"],[3,"Command"],[3,"ExitStatus"],[3,"Stdio"],[3,"ChildStdin"],[3,"ChildStdout"],[3,"ChildStderr"],[3,"SocketAddr"],[3,"UnixStream"],[3,"UnixListener"],[3,"Incoming"],[3,"UnixDatagram"],[3,"AssertUnwindSafe"],[3,"AssertRecoverSafe"],[4,"Prefix"],[3,"PrefixComponent"],[4,"Component"],[3,"Components"],[3,"Iter"],[3,"PathBuf"],[3,"Path"],[3,"StripPrefixError"],[3,"Display"],[3,"Output"],[3,"Child"],[3,"Select"],[3,"Handle"],[3,"SendError"],[3,"RecvError"],[4,"TryRecvError"],[4,"TrySendError"],[3,"Sender"],[3,"SyncSender"],[3,"Receiver"],[3,"Iter"],[3,"IntoIter"],[3,"Barrier"],[3,"BarrierWaitResult"],[3,"WaitTimeoutResult"],[3,"Condvar"],[3,"StaticCondvar"],[3,"Mutex"],[3,"StaticMutex"],[3,"MutexGuard"],[3,"Once"],[3,"OnceState"],[3,"RwLock"],[3,"StaticRwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"AtomicBool"],[3,"AtomicPtr"],[4,"Ordering"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Duration"],[3,"Instant"],[3,"SystemTime"],[3,"SystemTimeError"],[3,"PoisonError"],[4,"TryLockError"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"fd_set"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"passwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"fsid_t"],[3,"mq_attr"],[3,"cpu_set_t"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"sigset_t"],[3,"stat"],[3,"stat64"],[3,"pthread_attr_t"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"PanicInfo"],[3,"Location"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Drain"],[3,"SipHasher"],[3,"BuildHasherDefault"],[4,"Option"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Rc"],[3,"Weak"],[3,"Unique"],[3,"Shared"],[3,"IntoIter"],[3,"Drain"],[3,"Slice"],[3,"TraitObject"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[8,"Any"],[3,"TypeId"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"ToLowercase"],[3,"ToUppercase"],[3,"DecodeUtf16"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"PhantomData"],[3,"EncodeUtf16"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"Ordering"],[3,"BTreeMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"ValuesMut"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[3,"EnumSet"],[3,"Iter"],[4,"Bound"],[3,"Wrapping"],[4,"FpCategory"],[3,"NonZero"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EncodeUtf8"],[3,"EncodeUtf16"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"CharRange"],[4,"Alignment"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"Default"],[8,"Iterator"],[8,"Into"],[8,"ToString"],[8,"IntoIterator"],[8,"PartialEq"],[8,"PartialOrd"],[8,"AsRef"],[8,"ExactSizeIterator"],[8,"FnOnce"],[8,"AsMut"],[8,"DoubleEndedIterator"],[3,"Weak"],[3,"Arc"],[3,"RawVec"],[8,"Extend"],[8,"ToOwned"],[8,"FnMut"],[8,"SliceConcatExt"],[8,"Ord"],[8,"Fn"],[8,"From"],[8,"Drop"],[8,"Clone"],[8,"AsciiExt"],[8,"One"],[8,"Zero"],[8,"Read"],[8,"Seek"],[8,"Write"],[8,"BufRead"],[8,"ToSocketAddrs"],[8,"MetadataExt"],[8,"AsRawFd"],[8,"FromRawFd"],[8,"IntoRawFd"],[8,"OsStringExt"],[8,"OsStrExt"],[8,"PermissionsExt"],[8,"OpenOptionsExt"],[8,"MetadataExt"],[8,"FileTypeExt"],[8,"DirEntryExt"],[8,"DirBuilderExt"],[8,"CommandExt"],[8,"ExitStatusExt"],[8,"JoinHandleExt"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[3,"ReseedWithDefault"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[8,"Rng"],[8,"FnBox"],[8,"Borrow"],[8,"BorrowMut"],[8,"Hash"],[8,"Hasher"],[8,"BuildHasher"],[8,"Repr"],[8,"Add"],[8,"Sub"],[8,"Mul"],[8,"Div"],[8,"Rem"],[8,"Neg"],[8,"Not"],[8,"BitAnd"],[8,"BitOr"],[8,"BitXor"],[8,"Shl"],[8,"Shr"],[8,"AddAssign"],[8,"SubAssign"],[8,"MulAssign"],[8,"DivAssign"],[8,"RemAssign"],[8,"BitAndAssign"],[8,"BitOrAssign"],[8,"BitXorAssign"],[8,"ShlAssign"],[8,"ShrAssign"],[8,"Index"],[8,"IndexMut"],[8,"Deref"],[8,"DerefMut"],[8,"Place"],[8,"Placer"],[8,"InPlace"],[8,"Boxed"],[8,"BoxPlace"],[8,"TryInto"],[8,"TryFrom"],[3,"Utf16Encoder"],[3,"SplitWhitespace"],[8,"Debug"],[8,"Write"],[8,"LowerHex"],[8,"Binary"],[8,"Pointer"],[8,"LowerExp"],[8,"UpperHex"],[8,"Octal"],[8,"UpperExp"],[8,"Display"],[8,"Step"],[8,"FromIterator"],[8,"FromStr"],[8,"Pattern"],[8,"Searcher"],[8,"ReverseSearcher"]]};
searchIndex["ws2_32"] = {"doc":"","items":[],"paths":[]};
searchIndex["kernel32"] = {"doc":"","items":[],"paths":[]};
searchIndex["winapi"] = {"doc":"","items":[],"paths":[]};
searchIndex["glob"] = {"doc":"Support for matching file paths against Unix shell style patterns.","items":[[3,"Paths","glob","An iterator that yields `Path`s from the filesystem that match a particular\npattern.",null,null],[3,"GlobError","","A glob iteration error.",null,null],[3,"PatternError","","A pattern parsing error.",null,null],[12,"pos","","The approximate character index of where the error occurred.",0,null],[12,"msg","","A message describing the error.",0,null],[3,"Pattern","","A compiled Unix shell style pattern.",null,null],[3,"MatchOptions","","Configuration options to modify the behaviour of `Pattern::matches_with(..)`",null,null],[12,"case_sensitive","","Whether or not patterns should be matched in a case-sensitive manner.\nThis currently only considers upper/lower case relationships between\nASCII characters, but in future this might be extended to work with\nUnicode.",1,null],[12,"require_literal_separator","","If this is true then path-component separator characters (e.g. `/` on\nPosix) must be matched by a literal `/`, rather than by `*` or `?` or\n`[...]`",1,null],[12,"require_literal_leading_dot","","If this is true then paths that contain components that start with a `.`\nwill not match unless the `.` appears literally in the pattern: `*`, `?`, `**`,\nor `[...]` will not match. This is useful because such files are\nconventionally considered hidden on Unix systems and it might be\ndesirable to skip them when listing files.",1,null],[5,"glob","","Return an iterator that produces all the Paths that match the given pattern,\nwhich may be absolute or relative to the current working directory.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"glob_with","","Return an iterator that produces all the Paths that match the given pattern,\nwhich may be absolute or relative to the current working directory.",null,{"inputs":[{"name":"str"},{"name":"matchoptions"}],"output":{"name":"result"}}],[6,"GlobResult","","An alias for a glob iteration result.",null,null],[11,"fmt","","",2,null],[11,"path","","The Path that the error corresponds to.",2,null],[11,"error","","The error in question.",2,null],[11,"description","","",2,null],[11,"cause","","",2,null],[11,"fmt","","",2,null],[11,"next","","",3,null],[11,"fmt","","",0,null],[11,"description","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",4,null],[11,"default","","",4,{"inputs":[],"output":{"name":"pattern"}}],[11,"hash","","",4,null],[11,"cmp","","",4,null],[11,"partial_cmp","","",4,null],[11,"lt","","",4,null],[11,"le","","",4,null],[11,"gt","","",4,null],[11,"ge","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","This function compiles Unix shell style patterns.",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"escape","","Escape metacharacters within the given string by surrounding them in\nbrackets. The resulting string will, when compiled into a `Pattern`,\nmatch the input string and nothing else.",4,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"matches","","Return if the given `str` matches this `Pattern` using the default\nmatch options (i.e. `MatchOptions::new()`).",4,null],[11,"matches_path","","Return if the given `Path`, when converted to a `str`, matches this\n`Pattern` using the default match options (i.e. `MatchOptions::new()`).",4,null],[11,"matches_with","","Return if the given `str` matches this `Pattern` using the specified\nmatch options.",4,null],[11,"matches_path_with","","Return if the given `Path`, when converted to a `str`, matches this\n`Pattern` using the specified match options.",4,null],[11,"as_str","","Access the original glob pattern.",4,null],[11,"default","","",1,{"inputs":[],"output":{"name":"matchoptions"}}],[11,"hash","","",1,null],[11,"cmp","","",1,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"gt","","",1,null],[11,"ge","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"new","","Constructs a new `MatchOptions` with default field values. This is used\nwhen calling functions that do not take an explicit `MatchOptions`\nparameter.",1,{"inputs":[],"output":{"name":"matchoptions"}}]],"paths":[[3,"PatternError"],[3,"MatchOptions"],[3,"GlobError"],[3,"Paths"],[3,"Pattern"]]};
searchIndex["clock_ticks"] = {"doc":"","items":[[5,"precise_time_ns","clock_ticks","Returns the current value of a high-resolution performance counter\nin nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter\nin seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"precise_time_ms","","Returns the current value of a high-resolution performance counter\nin milliseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}]],"paths":[]};
searchIndex["itoa"] = {"doc":"","items":[[5,"write","itoa","",null,{"inputs":[{"name":"w"},{"name":"v"}],"output":{"name":"result"}}],[8,"Integer","","",null,null],[10,"write","","",0,null]],"paths":[[8,"Integer"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The &quot;payload&quot; of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has\nalready been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The &quot;error&quot; level.",0,null],[13,"Warn","","The &quot;warn&quot; level.",0,null],[13,"Info","","The &quot;info&quot; level.",0,null],[13,"Debug","","The &quot;debug&quot; level.",0,null],[13,"Trace","","The &quot;trace&quot; level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be\nlogged.",2,null],[10,"log","","Logs the `LogRecord`.",2,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"partial_cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"cmp","","",0,null],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,null],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"eq","","",1,null],[11,"partial_cmp","","",1,null],[11,"partial_cmp","","",1,null],[11,"cmp","","",1,null],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,null],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,null],[11,"args","","The message body.",3,null],[11,"metadata","","Metadata about the log directive.",3,null],[11,"location","","The location of the log directive.",3,null],[11,"level","","The verbosity level of the message.",3,null],[11,"target","","The name of the target of the directive.",3,null],[11,"level","","The verbosity level of the message.",4,null],[11,"target","","The name of the target of the directive.",4,null],[11,"fmt","","",5,null],[11,"clone","","",5,null],[11,"module_path","","The module path of the message.",5,null],[11,"file","","The source file containing the message.",5,null],[11,"line","","The line containing the message.",5,null],[11,"fmt","","",6,null],[11,"get","","Gets the current maximum log level filter.",6,null],[11,"set","","Sets the maximum log level.",6,null],[11,"fmt","","",7,null],[11,"fmt","","",7,null],[11,"description","","",7,null],[11,"fmt","","",8,null],[11,"fmt","","",8,null],[11,"description","","",8,null],[14,"log!","","The standard logging macro.",null,null],[14,"error!","","Logs a message at the error level.",null,null],[14,"warn!","","Logs a message at the warn level.",null,null],[14,"info!","","Logs a message at the info level.",null,null],[14,"debug!","","Logs a message at the debug level.",null,null],[14,"trace!","","Logs a message at the trace level.",null,null],[14,"log_enabled!","","Determines if a message logged at the specified level in that module will\nbe logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["tobj"] = {"doc":"Tiny OBJ loader, inspired by Syoyo&#39;s excellent [tinyobjloader](https://github.com/syoyo/tinyobjloader).\nAims to be a simple and lightweight option for loading OBJ files, just returns two vecs\ncontaining loaded models and materials. All models are made of triangles, any quad or polygon faces\nin an OBJ file will be converted to triangles. Note that only polygons that are trivially\nconvertible to triangle fans are supported, arbitrary polygons may not behave as expected.\nThe best solution would be to re-export your mesh using only triangles in your modeling software.","items":[[3,"Mesh","tobj","A mesh made up of triangles loaded from some OBJ file",null,null],[12,"positions","","Flattened 3 component floating point vectors, storing positions of vertices in the mesh",0,null],[12,"normals","","Flattened 3 component floating point vectors, storing normals of vertices in the mesh. Not\nall meshes have normals, if no normals are specified this Vec will be empty",0,null],[12,"texcoords","","Flattened 2 component floating point vectors, storing texture coordinates of vertices in\nthe mesh. Not all meshes have normals, if no texture coordinates are specified this Vec\nwill be empty",0,null],[12,"indices","","Indices for vertices of each triangle. Each face in the mesh is a triangle and the indices\nspecify the position, normal and texture coordinate for each vertex of the face.",0,null],[12,"material_id","","Optional material id associated with this mesh. The material id indexes into the Vec of\nMaterials loaded from the associated MTL file",0,null],[3,"Model","","A named model within the file, associates some mesh with a name that was specified with an `o`\nor `g` keyword in the OBJ file",null,null],[12,"mesh","","Mesh used by the model containing its geometry",1,null],[12,"name","","Name assigned to this mesh",1,null],[3,"Material","","A material that may be referenced by one or more meshes. Standard MTL attributes are supported.\nAny unrecognized parameters will be stored as key-value pairs in the `unknown_param` HashMap,\nwhich maps the unknown parameter to the value set for it.",null,null],[12,"name","","Material name as specified in the MTL file",2,null],[12,"ambient","","Ambient color of the material",2,null],[12,"diffuse","","Diffuse color of the material",2,null],[12,"specular","","Specular color of the material",2,null],[12,"shininess","","Material shininess attribute",2,null],[12,"dissolve","","Dissolve attribute is the alpha term for the material. Referred to as dissolve since that&#39;s\nwhat the MTL file format docs refer to it as",2,null],[12,"ambient_texture","","Name of the ambient texture file for the material. No path is pre-pended to the texture\nfile names specified in the MTL file",2,null],[12,"diffuse_texture","","Name of the diffuse texture file for the material. No path is pre-pended to the texture\nfile names specified in the MTL file",2,null],[12,"specular_texture","","Name of the specular texture file for the material. No path is pre-pended to the texture\nfile names specified in the MTL file",2,null],[12,"normal_texture","","Name of the normal map texture file for the material. No path is pre-pended to the texture\nfile names specified in the MTL file",2,null],[12,"dissolve_texture","","Name of the alpha map texture file for the material. No path is pre-pended to the texture\nfile names specified in the MTL file. Referred to as dissolve to match the MTL file format\nspecification",2,null],[12,"unknown_param","","Key value pairs of any unrecognized parameters encountered while parsing the material",2,null],[4,"LoadError","","Possible errors that may occur while loading OBJ and MTL files",null,null],[13,"OpenFileFailed","","",3,null],[13,"ReadError","","",3,null],[13,"UnrecognizedCharacter","","",3,null],[13,"PositionParseError","","",3,null],[13,"NormalParseError","","",3,null],[13,"TexcoordParseError","","",3,null],[13,"FaceParseError","","",3,null],[13,"MaterialParseError","","",3,null],[13,"InvalidObjectName","","",3,null],[13,"GenericFailure","","",3,null],[5,"load_obj","","Load the various objects specified in the OBJ file and any associated MTL file\nReturns a pair of Vecs containing the loaded models and materials from the file.",null,{"inputs":[{"name":"path"}],"output":{"name":"loadresult"}}],[5,"load_mtl","","Load the materials defined in a MTL file\nReturns a pair with a Vec holding all loaded materials and a HashMap containing a mapping of\nmaterial names to indices in the Vec.",null,{"inputs":[{"name":"path"}],"output":{"name":"mtlloadresult"}}],[5,"print_model_info","","Print out all loaded properties of some models and associated materials",null,null],[5,"print_material_info","","Print out all loaded properties of some materials",null,null],[6,"LoadResult","","LoadResult is a result containing all the models loaded from the file and any materials from\nreferenced material libraries, or an error that occured while loading",null,null],[6,"MTLLoadResult","","MTLLoadResult is a result containing all the materials loaded from the file and a map of MTL\nname to index or the error that occured while loading",null,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"new","","Create a new mesh specifying the geometry for the mesh",0,{"inputs":[{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"option"}],"output":{"name":"mesh"}}],[11,"empty","","Create a new empty mesh",0,{"inputs":[],"output":{"name":"mesh"}}],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"new","","Create a new model, associating a name with a mesh",1,{"inputs":[{"name":"mesh"},{"name":"string"}],"output":{"name":"model"}}],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"empty","","",2,{"inputs":[],"output":{"name":"material"}}],[11,"fmt","","",3,null]],"paths":[[3,"Mesh"],[3,"Model"],[3,"Material"],[4,"LoadError"]]};
searchIndex["bspline"] = {"doc":"[![logo](http://i.imgur.com/dnpEXyh.jpg)](http://i.imgur.com/RUEw8EW.png)","items":[[3,"BSpline","bspline","Represents a B-spline curve that will use polynomials of the specified degree\nto interpolate between the control points given the knots.",null,null],[8,"Interpolate","","The interpolate trait is used to linearly interpolate between two types (or in the\ncase of Quaternions, spherically linearly interpolate). The B-spline curve uses this\ntrait to compute points on the curve for the given parameter value.",null,null],[10,"interpolate","","Linearly interpolate between `self` and `other` using `t`, for example with floats:",0,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"new","","Create a new B-spline curve of the desired `degree` that will interpolate\nthe `control_points` using the `knots`. The knots should be sorted in non-decreasing\norder otherwise they will be sorted for you, which may lead to undesired knots\nfor control points. Note that here we use the interpolating polynomial degree,\nif you&#39;re familiar with the convention of &quot;B-spline curve order&quot; the degree is `curve_order - 1`.",1,{"inputs":[{"name":"usize"},{"name":"vec"},{"name":"vec"}],"output":{"name":"bspline"}}],[11,"point","","Compute a point on the curve at `t`, the parameter **must** be in the inclusive range\nof values returned by `knot_domain`. If `t` is out of bounds this function will assert\non debug builds and on release builds you&#39;ll likely get an out of bounds crash.",1,null],[11,"control_points","","Get an iterator over the control points.",1,null],[11,"knots","","Get an iterator over the knots.",1,null],[11,"knot_domain","","Get the min and max knot domain values for finding the `t` range to compute\nthe curve over. The curve is only defined over the inclusive range `[min, max]`,\npassing a `t` value outside of this range will result in an assert on debug builds\nand likely a crash on release builds.",1,null]],"paths":[[8,"Interpolate"],[3,"BSpline"]]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers\nin either big-endian or little-endian order.","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,null],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,null],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,null],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,null],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,null],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,null],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,null],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,null],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,null],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",0,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",0,null],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,null],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,null],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,null],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,null],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,null],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,null],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,null],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,null],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,null],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",1,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",1,null],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"read_u16","","",3,null],[11,"read_u32","","",3,null],[11,"read_u64","","",3,null],[11,"read_uint","","",3,null],[11,"write_u16","","",3,null],[11,"write_u32","","",3,null],[11,"write_u64","","",3,null],[11,"write_uint","","",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,null],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,null],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,null],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,null],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,null],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,null],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,null],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,null],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,null],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",0,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",0,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,null],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,null],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,null],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,null],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,null],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,null],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,null],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,null],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,null],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",1,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",1,null]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["utf8_ranges"] = {"doc":"Crate `utf8-ranges` converts ranges of Unicode scalar values to equivalent\nranges of UTF-8 bytes. This is useful for constructing byte based automatons\nthat need to embed UTF-8 decoding.","items":[[3,"Utf8Range","utf8_ranges","A single inclusive range of UTF-8 bytes.",null,null],[12,"start","","Start of byte range (inclusive).",0,null],[12,"end","","End of byte range (inclusive).",0,null],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",null,null],[4,"Utf8Sequence","","Utf8Sequence represents a sequence of byte ranges.",null,null],[13,"One","","One byte range.",1,null],[13,"Two","","Two successive byte ranges.",1,null],[13,"Three","","Three successive byte ranges.",1,null],[13,"Four","","Four successive byte ranges.",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",1,null],[11,"len","","Returns the number of byte ranges in this sequence.",1,null],[11,"matches","","Returns true if and only if a prefix of `bytes` matches this sequence\nof byte ranges.",1,null],[11,"fmt","","",1,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",0,null],[11,"matches","","Returns true if and only if the given byte is in this range.",0,null],[11,"fmt","","",0,null],[11,"new","","Create a new iterator over UTF-8 byte ranges for the scalar value range\ngiven.",2,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"self"}}],[11,"next","","",2,null]],"paths":[[3,"Utf8Range"],[4,"Utf8Sequence"],[3,"Utf8Sequences"]]};
searchIndex["scoped_threadpool"] = {"doc":"This crate provides a stable, safe and scoped threadpool.","items":[[3,"Pool","scoped_threadpool","A threadpool that acts as a handle to a number\nof threads spawned at construction.",null,null],[3,"Scope","","Handle to the scope during which the threadpool is borrowed.",null,null],[11,"drop","","",0,null],[11,"new","","Construct a threadpool with the given number of threads.\nMinimum value is `1`.",0,{"inputs":[{"name":"u32"}],"output":{"name":"pool"}}],[11,"scoped","","Borrows the pool and allows executing jobs on other\nthreads during that scope via the argument of the closure.",0,null],[11,"thread_count","","Returns the number of threads inside this pool.",0,null],[11,"execute","","Execute a job on the threadpool.",1,null],[11,"join_all","","Blocks until all currently queued jobs have run to completion.",1,null],[11,"drop","","",1,null]],"paths":[[3,"Pool"],[3,"Scope"]]};
searchIndex["cfg_if"] = {"doc":"A macro for defining #[cfg] if-else statements.","items":[[14,"cfg_if!","cfg_if","",null,null]],"paths":[]};
searchIndex["strsim"] = {"doc":"This library implements string similarity metrics. Currently includes\nHamming, Levenshtein, Jaro, and Jaro-Winkler.","items":[[4,"StrSimError","strsim","",null,null],[13,"DifferentLengthArgs","","",0,null],[5,"hamming","","Calculates the number of positions in the two strings where the characters\ndiffer. Returns an error if the strings have different lengths.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"hammingresult"}}],[5,"jaro","","Calculates the Jaro similarity between two strings. The returned value\nis between 0.0 and 1.0 (higher value means more similar).",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"f64"}}],[5,"jaro_winkler","","Like Jaro but gives a boost to strings that have a common prefix.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"f64"}}],[5,"levenshtein","","Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one string into the other.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[5,"damerau_levenshtein","","Same as Levenshtein but allows for adjacent transpositions.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[6,"HammingResult","","",null,null],[11,"eq","","",0,null],[11,"fmt","","",0,null]],"paths":[[4,"StrSimError"]]};
searchIndex["slab"] = {"doc":"","items":[[3,"Slab","slab","A preallocated chunk of memory for storing objects of the same type.",null,null],[3,"SlabIter","","",null,null],[3,"SlabMutIter","","",null,null],[8,"Index","","Slab can be indexed by any type implementing `Index` trait.",null,null],[10,"from_usize","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[10,"as_usize","","",0,null],[11,"new","","",1,{"inputs":[{"name":"usize"}],"output":{"name":"slab"}}],[11,"new_starting_at","","",1,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"slab"}}],[11,"count","","",1,null],[11,"is_empty","","",1,null],[11,"remaining","","",1,null],[11,"has_remaining","","",1,null],[11,"contains","","",1,null],[11,"get","","",1,null],[11,"get_mut","","",1,null],[11,"insert","","",1,null],[11,"insert_with","","Like `insert` but for objects that require newly allocated\nusize in their constructor.",1,null],[11,"remove","","Releases the given slot",1,null],[11,"replace","","",1,null],[11,"replace_with","","Execute a function on the *value* in the slot and put the result of\nthe function back into the slot. If function returns None,\nslot is left empty on exit.",1,null],[11,"retain","","Retain only the elements specified by the predicate.",1,null],[11,"iter","","",1,null],[11,"iter_mut","","",1,null],[11,"clear","","Empty the slab, by freeing all entries",1,null],[11,"grow","","Grow the slab, by adding `entries_num`",1,null],[11,"index","","",1,null],[11,"index_mut","","",1,null],[11,"fmt","","",1,null],[11,"next","","",2,null],[11,"next","","",3,null]],"paths":[[8,"Index"],[3,"Slab"],[3,"SlabIter"],[3,"SlabMutIter"]]};
initSearch(searchIndex);
